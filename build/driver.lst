ARM GAS  /tmp/ccOh1lu5.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"driver.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./drivers/driver.c"
  20              		.section	.rodata.class_create.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 636C6173 		.ascii	"class_create: create class  %s\012\000"
  23      735F6372 
  23      65617465 
  23      3A206372 
  23      65617465 
  24              		.section	.text.class_create,"ax",%progbits
  25              		.align	1
  26              		.global	class_create
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	class_create:
  32              	.LVL0:
  33              	.LFB1035:
   1:./drivers/driver.c **** #include <linux/kernel.h>
   2:./drivers/driver.c **** #include <linux/fs.h>
   3:./drivers/driver.c **** #include <linux/device.h>
   4:./drivers/driver.c **** #include <linux/devfs.h>
   5:./drivers/driver.c **** 
   6:./drivers/driver.c **** 
   7:./drivers/driver.c **** struct  dentry * create_new_dentry(char * path,umode_t i_mode);
   8:./drivers/driver.c **** 
   9:./drivers/driver.c **** struct class *class_create(void *owner,char *name)
  10:./drivers/driver.c **** {
  34              		.loc 1 10 1 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
  38              		.loc 1 10 1 is_stmt 0 view .LVU1
  39 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 24
  42              		.cfi_offset 3, -24
  43              		.cfi_offset 4, -20
  44              		.cfi_offset 5, -16
ARM GAS  /tmp/ccOh1lu5.s 			page 2


  45              		.cfi_offset 6, -12
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 0546     		mov	r5, r0
  49 0004 0C46     		mov	r4, r1
  11:./drivers/driver.c ****     pr_info("class_create: create class  %s\n",name);
  50              		.loc 1 11 5 is_stmt 1 view .LVU2
  51 0006 1048     		ldr	r0, .L6
  52              	.LVL1:
  53              		.loc 1 11 5 is_stmt 0 view .LVU3
  54 0008 FFF7FEFF 		bl	printk
  55              	.LVL2:
  12:./drivers/driver.c ****     struct class *newclass = kmalloc(sizeof(struct class),GFP_KERNEL);
  56              		.loc 1 12 5 is_stmt 1 view .LVU4
  57              	.LBB13:
  58              	.LBI13:
  59              		.file 2 "./include/linux/slab.h"
   1:./include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/slab.h **** /*
   3:./include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:./include/linux/slab.h ****  *
   5:./include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:./include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:./include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:./include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:./include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:./include/linux/slab.h ****  */
  11:./include/linux/slab.h **** 
  12:./include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:./include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:./include/linux/slab.h **** 
  15:./include/linux/slab.h **** #include <linux/cache.h>
  16:./include/linux/slab.h **** #include <linux/overflow.h>
  17:./include/linux/slab.h **** #include <linux/types.h>
  18:./include/linux/slab.h **** #include <linux/raid/pq.h>
  19:./include/linux/slab.h **** #include <linux/gfp_types.h>
  20:./include/linux/slab.h **** #include <linux/numa.h>
  21:./include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:./include/linux/slab.h **** #include <linux/spinlock.h>
  23:./include/linux/slab.h **** 
  24:./include/linux/slab.h **** enum _slab_flag_bits {
  25:./include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:./include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:./include/linux/slab.h **** 	_SLAB_POISON,
  28:./include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:./include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:./include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:./include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:./include/linux/slab.h **** 	_SLAB_STORE_USER,
  33:./include/linux/slab.h **** 	_SLAB_PANIC,
  34:./include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:./include/linux/slab.h **** 	_SLAB_TRACE,
  36:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:./include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:./include/linux/slab.h **** #endif
  39:./include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:./include/linux/slab.h **** 	_SLAB_NO_MERGE,
ARM GAS  /tmp/ccOh1lu5.s 			page 3


  41:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
  42:./include/linux/slab.h **** 	_SLAB_FAILSLAB,
  43:./include/linux/slab.h **** #endif
  44:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:./include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:./include/linux/slab.h **** #endif
  47:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
  48:./include/linux/slab.h **** 	_SLAB_KASAN,
  49:./include/linux/slab.h **** #endif
  50:./include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:./include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:./include/linux/slab.h **** #endif
  54:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:./include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:./include/linux/slab.h **** #endif
  57:./include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:./include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:./include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:./include/linux/slab.h **** #endif
  62:./include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:./include/linux/slab.h **** };
  64:./include/linux/slab.h **** 
  65:./include/linux/slab.h **** 
  66:./include/linux/slab.h **** 
  67:./include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:./include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:./include/linux/slab.h **** 
  70:./include/linux/slab.h **** /*
  71:./include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:./include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:./include/linux/slab.h ****  */
  74:./include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:./include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:./include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:./include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:./include/linux/slab.h **** /* DEBUG: Poison objects */
  79:./include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:./include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:./include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:./include/linux/slab.h **** /**
  83:./include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:./include/linux/slab.h ****  *
  85:./include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:./include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:./include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:./include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:./include/linux/slab.h ****  *
  90:./include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:./include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:./include/linux/slab.h ****  */
  93:./include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:./include/linux/slab.h **** /* Use GFP_DMA memory */
  95:./include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:./include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:./include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
ARM GAS  /tmp/ccOh1lu5.s 			page 4


  98:./include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
  99:./include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
 100:./include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:./include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:./include/linux/slab.h **** /**
 103:./include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
 104:./include/linux/slab.h ****  *
 105:./include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:./include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
 107:./include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:./include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:./include/linux/slab.h ****  *
 110:./include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:./include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:./include/linux/slab.h ****  * object validation pass. Something like:
 113:./include/linux/slab.h ****  *
 114:./include/linux/slab.h ****  * ::
 115:./include/linux/slab.h ****  *
 116:./include/linux/slab.h ****  *  begin:
 117:./include/linux/slab.h ****  *   rcu_read_lock();
 118:./include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:./include/linux/slab.h ****  *   if (obj) {
 120:./include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:./include/linux/slab.h ****  *       rcu_read_unlock();
 122:./include/linux/slab.h ****  *       goto begin;
 123:./include/linux/slab.h ****  *
 124:./include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:./include/linux/slab.h ****  *       put_ref(obj);
 126:./include/linux/slab.h ****  *       rcu_read_unlock();
 127:./include/linux/slab.h ****  *       goto begin;
 128:./include/linux/slab.h ****  *     }
 129:./include/linux/slab.h ****  *   }
 130:./include/linux/slab.h ****  *  rcu_read_unlock();
 131:./include/linux/slab.h ****  *
 132:./include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:./include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:./include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:./include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:./include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:./include/linux/slab.h ****  *
 138:./include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:./include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:./include/linux/slab.h ****  *
 141:./include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:./include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:./include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:./include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:./include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:./include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
 147:./include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:./include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:./include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:./include/linux/slab.h ****  * protection.
 151:./include/linux/slab.h ****  *
 152:./include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:./include/linux/slab.h ****  */
 154:./include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
ARM GAS  /tmp/ccOh1lu5.s 			page 5


 155:./include/linux/slab.h **** /* Trace allocations and frees */
 156:./include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
 157:./include/linux/slab.h **** 
 158:./include/linux/slab.h **** /* Flag to prevent checks on free */
 159:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
 161:./include/linux/slab.h **** #else
 162:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:./include/linux/slab.h **** #endif
 164:./include/linux/slab.h **** 
 165:./include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:./include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:./include/linux/slab.h **** 
 168:./include/linux/slab.h **** /*
 169:./include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:./include/linux/slab.h ****  * cautiously. Valid use cases:
 171:./include/linux/slab.h ****  *
 172:./include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:./include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:./include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:./include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:./include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:./include/linux/slab.h ****  */
 178:./include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:./include/linux/slab.h **** 
 180:./include/linux/slab.h **** /* Fault injection mark */
 181:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:./include/linux/slab.h **** #else
 184:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:./include/linux/slab.h **** #endif
 186:./include/linux/slab.h **** /**
 187:./include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:./include/linux/slab.h ****  *
 189:./include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:./include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:./include/linux/slab.h ****  */
 192:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:./include/linux/slab.h **** #else
 195:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:./include/linux/slab.h **** #endif
 197:./include/linux/slab.h **** 
 198:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:./include/linux/slab.h **** #else
 201:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:./include/linux/slab.h **** #endif
 203:./include/linux/slab.h **** 
 204:./include/linux/slab.h **** /*
 205:./include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:./include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:./include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:./include/linux/slab.h ****  */
 209:./include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:./include/linux/slab.h **** 
 211:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
ARM GAS  /tmp/ccOh1lu5.s 			page 6


 212:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
 213:./include/linux/slab.h **** #else
 214:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:./include/linux/slab.h **** #endif
 216:./include/linux/slab.h **** 
 217:./include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
 218:./include/linux/slab.h **** /**
 219:./include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:./include/linux/slab.h ****  *
 221:./include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:./include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:./include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:./include/linux/slab.h ****  */
 225:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:./include/linux/slab.h **** #else
 228:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:./include/linux/slab.h **** #endif
 230:./include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:./include/linux/slab.h **** 
 232:./include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:./include/linux/slab.h **** #else
 236:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:./include/linux/slab.h **** #endif
 238:./include/linux/slab.h **** 
 239:./include/linux/slab.h **** /*
 240:./include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:./include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:./include/linux/slab.h ****  */
 243:./include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:./include/linux/slab.h **** 
 245:./include/linux/slab.h **** /*
 246:./include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:./include/linux/slab.h ****  *
 248:./include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:./include/linux/slab.h ****  *
 250:./include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:./include/linux/slab.h ****  * Both make kfree a no-op.
 252:./include/linux/slab.h ****  */
 253:./include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:./include/linux/slab.h **** 
 255:./include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:./include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:./include/linux/slab.h **** 
 258:./include/linux/slab.h **** 
 259:./include/linux/slab.h **** 
 260:./include/linux/slab.h **** 
 261:./include/linux/slab.h **** 
 262:./include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:./include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:./include/linux/slab.h **** 
 265:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:./include/linux/slab.h **** ({						\
 267:./include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:./include/linux/slab.h **** })
ARM GAS  /tmp/ccOh1lu5.s 			page 7


 269:./include/linux/slab.h **** 
 270:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
 271:./include/linux/slab.h **** #else
 272:./include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:./include/linux/slab.h **** 
 274:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
 275:./include/linux/slab.h **** 
 276:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:./include/linux/slab.h **** 
 278:./include/linux/slab.h **** 
 279:./include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:./include/linux/slab.h **** 
 281:./include/linux/slab.h **** /*
 282:./include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:./include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:./include/linux/slab.h **** 	* given order would contain.
 285:./include/linux/slab.h **** 	*/				
 286:./include/linux/slab.h **** struct kmem_cache_order_objects {
 287:./include/linux/slab.h **** 	unsigned int x;
 288:./include/linux/slab.h **** };
 289:./include/linux/slab.h **** 
 290:./include/linux/slab.h **** struct kmem_cache_node {
 291:./include/linux/slab.h **** 	spinlock_t list_lock;
 292:./include/linux/slab.h **** 	unsigned long nr_partial;
 293:./include/linux/slab.h **** 	struct list_head partial;
 294:./include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:./include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:./include/linux/slab.h **** 	atomic_long_t total_objects;
 297:./include/linux/slab.h **** 	struct list_head full;
 298:./include/linux/slab.h **** #endif
 299:./include/linux/slab.h **** };
 300:./include/linux/slab.h **** 
 301:./include/linux/slab.h **** struct kmem_cache {
 302:./include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:./include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:./include/linux/slab.h **** 	#endif
 305:./include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:./include/linux/slab.h **** 		slab_flags_t flags;
 307:./include/linux/slab.h **** 		unsigned long min_partial;
 308:./include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:./include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:./include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:./include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:./include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:./include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:./include/linux/slab.h **** 		unsigned int cpu_partial;
 315:./include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:./include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:./include/linux/slab.h **** 	#endif
 318:./include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:./include/linux/slab.h **** 	
 320:./include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:./include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:./include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:./include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:./include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:./include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
ARM GAS  /tmp/ccOh1lu5.s 			page 8


 326:./include/linux/slab.h **** 		unsigned int align;		/* Alignment */
 327:./include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
 328:./include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:./include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:./include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:./include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
 332:./include/linux/slab.h **** 	#endif
 333:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:./include/linux/slab.h **** 		unsigned long random;
 335:./include/linux/slab.h **** 	#endif
 336:./include/linux/slab.h **** 	
 337:./include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:./include/linux/slab.h **** 		/*
 339:./include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:./include/linux/slab.h **** 			*/
 341:./include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:./include/linux/slab.h **** 	#endif
 343:./include/linux/slab.h **** 	
 344:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:./include/linux/slab.h **** 		unsigned int *random_seq;
 346:./include/linux/slab.h **** 	#endif
 347:./include/linux/slab.h **** 	
 348:./include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:./include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:./include/linux/slab.h **** 	#endif
 351:./include/linux/slab.h **** 	
 352:./include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:./include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:./include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:./include/linux/slab.h **** 	#endif
 356:./include/linux/slab.h **** 	
 357:./include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:./include/linux/slab.h **** 	};
 359:./include/linux/slab.h **** 					
 360:./include/linux/slab.h **** 
 361:./include/linux/slab.h **** 
 362:./include/linux/slab.h **** 
 363:./include/linux/slab.h **** 
 364:./include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:./include/linux/slab.h **** 
 366:./include/linux/slab.h **** 
 367:./include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:./include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:./include/linux/slab.h **** 
 370:./include/linux/slab.h **** 
 371:./include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:./include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:./include/linux/slab.h **** }
 374:./include/linux/slab.h **** 
 375:./include/linux/slab.h **** static void inline vfree(void *addr){
 376:./include/linux/slab.h **** 	__sfree__(addr);
 377:./include/linux/slab.h **** }
 378:./include/linux/slab.h **** 
 379:./include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
  60              		.loc 2 379 21 view .LVU5
  61              	.LBB14:
 380:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
ARM GAS  /tmp/ccOh1lu5.s 			page 9


  62              		.loc 2 380 2 view .LVU6
  63              		.loc 2 380 9 is_stmt 0 view .LVU7
  64 000c 4FF44C61 		mov	r1, #3264
  65 0010 0820     		movs	r0, #8
  66 0012 FFF7FEFF 		bl	__smalloc__
  67              	.LVL3:
  68              		.loc 2 380 9 view .LVU8
  69              	.LBE14:
  70              	.LBE13:
  13:./drivers/driver.c ****     if(newclass == NULL)
  71              		.loc 1 13 5 is_stmt 1 view .LVU9
  72              		.loc 1 13 7 is_stmt 0 view .LVU10
  73 0016 88B1     		cbz	r0, .L3
  74 0018 0646     		mov	r6, r0
  14:./drivers/driver.c ****         return -ENOMEM;
  15:./drivers/driver.c ****     char* class_name = kmalloc(strlen(name)+ 1,GFP_KERNEL);
  75              		.loc 1 15 5 is_stmt 1 view .LVU11
  76              		.loc 1 15 32 is_stmt 0 view .LVU12
  77 001a 2046     		mov	r0, r4
  78              	.LVL4:
  79              		.loc 1 15 32 view .LVU13
  80 001c FFF7FEFF 		bl	strlen
  81              	.LVL5:
  82              	.LBB15:
  83              	.LBI15:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
  84              		.loc 2 379 21 is_stmt 1 view .LVU14
  85              	.LBB16:
  86              		.loc 2 380 2 view .LVU15
  87              		.loc 2 380 9 is_stmt 0 view .LVU16
  88 0020 4FF44C61 		mov	r1, #3264
  89 0024 0130     		adds	r0, r0, #1
  90              	.LVL6:
  91              		.loc 2 380 9 view .LVU17
  92 0026 FFF7FEFF 		bl	__smalloc__
  93              	.LVL7:
  94              		.loc 2 380 9 view .LVU18
  95              	.LBE16:
  96              	.LBE15:
  16:./drivers/driver.c ****     if(class_name == NULL) 
  97              		.loc 1 16 5 is_stmt 1 view .LVU19
  98              		.loc 1 16 7 is_stmt 0 view .LVU20
  99 002a 0746     		mov	r7, r0
 100 002c 48B1     		cbz	r0, .L4
  17:./drivers/driver.c ****         return -ENOMEM;
  18:./drivers/driver.c ****     strcpy(class_name,name);
 101              		.loc 1 18 5 is_stmt 1 view .LVU21
 102 002e 2146     		mov	r1, r4
 103 0030 FFF7FEFF 		bl	strcpy
 104              	.LVL8:
  19:./drivers/driver.c ****     newclass->name = class_name;
 105              		.loc 1 19 5 view .LVU22
 106              		.loc 1 19 20 is_stmt 0 view .LVU23
 107 0034 7760     		str	r7, [r6, #4]
  20:./drivers/driver.c ****     newclass->owner = owner;
 108              		.loc 1 20 5 is_stmt 1 view .LVU24
 109              		.loc 1 20 21 is_stmt 0 view .LVU25
ARM GAS  /tmp/ccOh1lu5.s 			page 10


 110 0036 3560     		str	r5, [r6]
  21:./drivers/driver.c ****     return newclass;
 111              		.loc 1 21 5 is_stmt 1 view .LVU26
 112              	.LVL9:
 113              	.L1:
  22:./drivers/driver.c **** }
 114              		.loc 1 22 1 is_stmt 0 view .LVU27
 115 0038 3046     		mov	r0, r6
 116 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 117              	.LVL10:
 118              	.L3:
  14:./drivers/driver.c ****     char* class_name = kmalloc(strlen(name)+ 1,GFP_KERNEL);
 119              		.loc 1 14 16 view .LVU28
 120 003c 6FF00B06 		mvn	r6, #11
 121 0040 FAE7     		b	.L1
 122              	.LVL11:
 123              	.L4:
  17:./drivers/driver.c ****     strcpy(class_name,name);
 124              		.loc 1 17 16 view .LVU29
 125 0042 6FF00B06 		mvn	r6, #11
 126              	.LVL12:
  17:./drivers/driver.c ****     strcpy(class_name,name);
 127              		.loc 1 17 16 view .LVU30
 128 0046 F7E7     		b	.L1
 129              	.L7:
 130              		.align	2
 131              	.L6:
 132 0048 00000000 		.word	.LC0
 133              		.cfi_endproc
 134              	.LFE1035:
 136              		.section	.rodata.device_create.str1.4,"aMS",%progbits,1
 137              		.align	2
 138              	.LC1:
 139 0000 2F646576 		.ascii	"/dev/%s\000"
 139      2F257300 
 140              		.align	2
 141              	.LC2:
 142 0008 64657669 		.ascii	"device_create: create char file %s \012\000"
 142      63655F63 
 142      72656174 
 142      653A2063 
 142      72656174 
 143              		.section	.text.device_create,"ax",%progbits
 144              		.align	1
 145              		.global	device_create
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 150              	device_create:
 151              	.LVL13:
 152              	.LFB1036:
  23:./drivers/driver.c **** 
  24:./drivers/driver.c **** 
  25:./drivers/driver.c **** struct device *
  26:./drivers/driver.c **** device_create(const struct class *cls, struct device *parent, dev_t devt,
  27:./drivers/driver.c ****     void *drvdata, const char *fmt, ...){
 153              		.loc 1 27 41 is_stmt 1 view -0
ARM GAS  /tmp/ccOh1lu5.s 			page 11


 154              		.cfi_startproc
 155              		@ args = 4, pretend = 0, frame = 264
 156              		@ frame_needed = 0, uses_anonymous_args = 1
 157              		.loc 1 27 41 is_stmt 0 view .LVU32
 158 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 159              	.LCFI1:
 160              		.cfi_def_cfa_offset 24
 161              		.cfi_offset 4, -24
 162              		.cfi_offset 5, -20
 163              		.cfi_offset 6, -16
 164              		.cfi_offset 7, -12
 165              		.cfi_offset 8, -8
 166              		.cfi_offset 14, -4
 167 0004 C2B0     		sub	sp, sp, #264
 168              	.LCFI2:
 169              		.cfi_def_cfa_offset 288
 170 0006 0646     		mov	r6, r0
 171 0008 0F46     		mov	r7, r1
 172 000a 1546     		mov	r5, r2
 173 000c 48AB     		add	r3, sp, #288
 174              	.LVL14:
 175              		.loc 1 27 41 view .LVU33
 176 000e 53F8042B 		ldr	r2, [r3], #4
 177              	.LVL15:
  28:./drivers/driver.c ****     char devname[128];
 178              		.loc 1 28 5 is_stmt 1 view .LVU34
  29:./drivers/driver.c ****     va_list args;
 179              		.loc 1 29 5 view .LVU35
  30:./drivers/driver.c ****     va_start(args, fmt);
 180              		.loc 1 30 5 view .LVU36
 181 0012 2193     		str	r3, [sp, #132]
  31:./drivers/driver.c ****     vsnprintf(devname, sizeof(devname), fmt, args);
 182              		.loc 1 31 5 view .LVU37
 183 0014 8021     		movs	r1, #128
 184              	.LVL16:
 185              		.loc 1 31 5 is_stmt 0 view .LVU38
 186 0016 22A8     		add	r0, sp, #136
 187              	.LVL17:
 188              		.loc 1 31 5 view .LVU39
 189 0018 FFF7FEFF 		bl	vsnprintf
 190              	.LVL18:
  32:./drivers/driver.c ****     va_end(args);
 191              		.loc 1 32 5 is_stmt 1 view .LVU40
  33:./drivers/driver.c **** 
  34:./drivers/driver.c ****     char path[128];
 192              		.loc 1 34 5 view .LVU41
  35:./drivers/driver.c ****     snprintf(path,128,"/dev/%s",devname);
 193              		.loc 1 35 5 view .LVU42
 194 001c 22AB     		add	r3, sp, #136
 195 001e 164A     		ldr	r2, .L13
 196 0020 8021     		movs	r1, #128
 197 0022 01A8     		add	r0, sp, #4
 198 0024 FFF7FEFF 		bl	snprintf
 199              	.LVL19:
  36:./drivers/driver.c **** 
  37:./drivers/driver.c ****     pr_info ("device_create: create char file %s \n",path);
 200              		.loc 1 37 5 view .LVU43
ARM GAS  /tmp/ccOh1lu5.s 			page 12


 201 0028 01A9     		add	r1, sp, #4
 202 002a 1448     		ldr	r0, .L13+4
 203 002c FFF7FEFF 		bl	printk
 204              	.LVL20:
  38:./drivers/driver.c ****     
  39:./drivers/driver.c ****     struct  dentry * dev_dentry = create_new_dentry(path , S_IFREG|0755);
 205              		.loc 1 39 5 view .LVU44
 206              		.loc 1 39 35 is_stmt 0 view .LVU45
 207 0030 48F2ED11 		movw	r1, #33261
 208 0034 01A8     		add	r0, sp, #4
 209 0036 FFF7FEFF 		bl	create_new_dentry
 210              	.LVL21:
 211 003a 0446     		mov	r4, r0
 212              	.LVL22:
  40:./drivers/driver.c ****     if(IS_ERR(dev_dentry)){
 213              		.loc 1 40 5 is_stmt 1 view .LVU46
 214              	.LBB17:
 215              	.LBI17:
 216              		.file 3 "./include/linux/err.h"
   1:./include/linux/err.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/err.h **** #ifndef _LINUX_ERR_H
   3:./include/linux/err.h **** #define _LINUX_ERR_H
   4:./include/linux/err.h **** 
   5:./include/linux/err.h **** #include <linux/compiler_attributes.h>
   6:./include/linux/err.h **** #include <linux/compiler.h>
   7:./include/linux/err.h **** #include <linux/types.h>
   8:./include/linux/err.h **** 
   9:./include/linux/err.h **** #include <asm/errno.h>
  10:./include/linux/err.h **** 
  11:./include/linux/err.h **** /*
  12:./include/linux/err.h ****  * Kernel pointers have redundant information, so we can use a
  13:./include/linux/err.h ****  * scheme where we can return either an error code or a normal
  14:./include/linux/err.h ****  * pointer with the same return value.
  15:./include/linux/err.h ****  *
  16:./include/linux/err.h ****  * This should be a per-architecture thing, to allow different
  17:./include/linux/err.h ****  * error and pointer decisions.
  18:./include/linux/err.h ****  */
  19:./include/linux/err.h **** #define MAX_ERRNO	4095
  20:./include/linux/err.h **** 
  21:./include/linux/err.h **** #ifndef __ASSEMBLY__
  22:./include/linux/err.h **** 
  23:./include/linux/err.h **** /**
  24:./include/linux/err.h ****  * IS_ERR_VALUE - Detect an error pointer.
  25:./include/linux/err.h ****  * @x: The pointer to check.
  26:./include/linux/err.h ****  *
  27:./include/linux/err.h ****  * Like IS_ERR(), but does not generate a compiler warning if result is unused.
  28:./include/linux/err.h ****  */
  29:./include/linux/err.h **** 
  30:./include/linux/err.h **** #ifndef unlikely
  31:./include/linux/err.h **** #  define unlikely(x) __builtin_expect(!!(x), 0)
  32:./include/linux/err.h **** #endif
  33:./include/linux/err.h **** 
  34:./include/linux/err.h **** #ifndef likely
  35:./include/linux/err.h **** #  define likely(x) __builtin_expect(!!(x), 1)
  36:./include/linux/err.h **** #endif
  37:./include/linux/err.h **** 
  38:./include/linux/err.h **** #define IS_ERR_VALUE(x) unlikely((unsigned long)(void *)(x) >= (unsigned long)-MAX_ERRNO)
ARM GAS  /tmp/ccOh1lu5.s 			page 13


  39:./include/linux/err.h **** 
  40:./include/linux/err.h **** /**
  41:./include/linux/err.h ****  * ERR_PTR - Create an error pointer.
  42:./include/linux/err.h ****  * @error: A negative error code.
  43:./include/linux/err.h ****  *
  44:./include/linux/err.h ****  * Encodes @error into a pointer value. Users should consider the result
  45:./include/linux/err.h ****  * opaque and not assume anything about how the error is encoded.
  46:./include/linux/err.h ****  *
  47:./include/linux/err.h ****  * Return: A pointer with @error encoded within its value.
  48:./include/linux/err.h ****  */
  49:./include/linux/err.h **** static inline void * __must_check ERR_PTR(long error)
  50:./include/linux/err.h **** {
  51:./include/linux/err.h **** 	return (void *) error;
  52:./include/linux/err.h **** }
  53:./include/linux/err.h **** 
  54:./include/linux/err.h **** /* Return the pointer in the percpu address space. */
  55:./include/linux/err.h **** #define ERR_PTR_PCPU(error) ((void __percpu *)(unsigned long)ERR_PTR(error))
  56:./include/linux/err.h **** 
  57:./include/linux/err.h **** /**
  58:./include/linux/err.h ****  * PTR_ERR - Extract the error code from an error pointer.
  59:./include/linux/err.h ****  * @ptr: An error pointer.
  60:./include/linux/err.h ****  * Return: The error code within @ptr.
  61:./include/linux/err.h ****  */
  62:./include/linux/err.h **** static inline long __must_check PTR_ERR(__force const void *ptr)
  63:./include/linux/err.h **** {
  64:./include/linux/err.h **** 	return (long) ptr;
  65:./include/linux/err.h **** }
  66:./include/linux/err.h **** 
  67:./include/linux/err.h **** /* Read an error pointer from the percpu address space. */
  68:./include/linux/err.h **** #define PTR_ERR_PCPU(ptr) (PTR_ERR((const void *)(__force const unsigned long)(ptr)))
  69:./include/linux/err.h **** 
  70:./include/linux/err.h **** /**
  71:./include/linux/err.h ****  * IS_ERR - Detect an error pointer.
  72:./include/linux/err.h ****  * @ptr: The pointer to check.
  73:./include/linux/err.h ****  * Return: true if @ptr is an error pointer, false otherwise.
  74:./include/linux/err.h ****  */
  75:./include/linux/err.h **** static inline bool __must_check IS_ERR(__force const void *ptr)
 217              		.loc 3 75 33 view .LVU47
 218              	.LBB18:
  76:./include/linux/err.h **** {
  77:./include/linux/err.h **** 	return IS_ERR_VALUE((unsigned long)ptr);
 219              		.loc 3 77 2 view .LVU48
 220              		.loc 3 77 2 is_stmt 0 view .LVU49
 221              	.LBE18:
 222              	.LBE17:
 223              		.loc 1 40 7 discriminator 1 view .LVU50
 224 003c 10F5805F 		cmn	r0, #4096
 225 0040 15D8     		bhi	.L10
  41:./drivers/driver.c ****         return dev_dentry;
  42:./drivers/driver.c ****     }
  43:./drivers/driver.c ****     struct device *device = kmalloc(sizeof(struct device),GFP_KERNEL);
 226              		.loc 1 43 5 is_stmt 1 view .LVU51
 227              	.LVL23:
 228              	.LBB19:
 229              	.LBI19:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 230              		.loc 2 379 21 view .LVU52
ARM GAS  /tmp/ccOh1lu5.s 			page 14


 231              	.LBB20:
 232              		.loc 2 380 2 view .LVU53
 233              		.loc 2 380 9 is_stmt 0 view .LVU54
 234 0042 4FF44C61 		mov	r1, #3264
 235 0046 0C20     		movs	r0, #12
 236              	.LVL24:
 237              		.loc 2 380 9 view .LVU55
 238 0048 FFF7FEFF 		bl	__smalloc__
 239              	.LVL25:
 240              		.loc 2 380 9 view .LVU56
 241              	.LBE20:
 242              	.LBE19:
  44:./drivers/driver.c ****     if(device == NULL)
 243              		.loc 1 44 5 is_stmt 1 view .LVU57
 244              		.loc 1 44 7 is_stmt 0 view .LVU58
 245 004c 8046     		mov	r8, r0
 246 004e 80B1     		cbz	r0, .L11
  45:./drivers/driver.c ****         return -ENOMEM; 
  46:./drivers/driver.c ****     device->parent = parent;
 247              		.loc 1 46 5 is_stmt 1 view .LVU59
 248              		.loc 1 46 20 is_stmt 0 view .LVU60
 249 0050 0760     		str	r7, [r0]
  47:./drivers/driver.c ****     device->class = cls;   
 250              		.loc 1 47 5 is_stmt 1 view .LVU61
 251              		.loc 1 47 19 is_stmt 0 view .LVU62
 252 0052 4660     		str	r6, [r0, #4]
  48:./drivers/driver.c ****     struct file_operations * fop = find_chrdev(devt,0);
 253              		.loc 1 48 5 is_stmt 1 view .LVU63
 254              		.loc 1 48 36 is_stmt 0 view .LVU64
 255 0054 0021     		movs	r1, #0
 256 0056 2846     		mov	r0, r5
 257              	.LVL26:
 258              		.loc 1 48 36 view .LVU65
 259 0058 FFF7FEFF 		bl	find_chrdev
 260              	.LVL27:
 261 005c 0246     		mov	r2, r0
 262              	.LVL28:
  49:./drivers/driver.c **** 
  50:./drivers/driver.c ****     devfs_mount_device(dev_dentry->d_inode,devt,fop); //此处会覆盖结点属性,之前的 S_IFR
 263              		.loc 1 50 5 is_stmt 1 view .LVU66
 264 005e 2946     		mov	r1, r5
 265 0060 A06C     		ldr	r0, [r4, #72]
 266              	.LVL29:
 267              		.loc 1 50 5 is_stmt 0 view .LVU67
 268 0062 FFF7FEFF 		bl	devfs_mount_device
 269              	.LVL30:
  51:./drivers/driver.c **** 
  52:./drivers/driver.c ****     return device;
 270              		.loc 1 52 5 is_stmt 1 view .LVU68
 271              	.L8:
  53:./drivers/driver.c **** }
 272              		.loc 1 53 1 is_stmt 0 view .LVU69
 273 0066 4046     		mov	r0, r8
 274 0068 42B0     		add	sp, sp, #264
 275              	.LCFI3:
 276              		.cfi_remember_state
 277              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccOh1lu5.s 			page 15


 278              		@ sp needed
 279 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 280              	.LVL31:
 281              	.L10:
 282              	.LCFI4:
 283              		.cfi_restore_state
  41:./drivers/driver.c ****     }
 284              		.loc 1 41 16 view .LVU70
 285 006e 8046     		mov	r8, r0
 286 0070 F9E7     		b	.L8
 287              	.LVL32:
 288              	.L11:
  45:./drivers/driver.c ****     device->parent = parent;
 289              		.loc 1 45 16 view .LVU71
 290 0072 6FF00B08 		mvn	r8, #11
 291 0076 F6E7     		b	.L8
 292              	.L14:
 293              		.align	2
 294              	.L13:
 295 0078 00000000 		.word	.LC1
 296 007c 08000000 		.word	.LC2
 297              		.cfi_endproc
 298              	.LFE1036:
 300              		.section	.rodata.__register_disk.str1.4,"aMS",%progbits,1
 301              		.align	2
 302              	.LC3:
 303 0000 64657669 		.ascii	"device_create: create block file %s \012\000"
 303      63655F63 
 303      72656174 
 303      653A2063 
 303      72656174 
 304              		.section	.text.__register_disk,"ax",%progbits
 305              		.align	1
 306              		.global	__register_disk
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 311              	__register_disk:
 312              	.LVL33:
 313              	.LFB1037:
  54:./drivers/driver.c **** 
  55:./drivers/driver.c **** 
  56:./drivers/driver.c **** int __register_disk(struct block_device *dev,struct gendisk *disk,char *name,...)
  57:./drivers/driver.c **** {
 314              		.loc 1 57 1 is_stmt 1 view -0
 315              		.cfi_startproc
 316              		@ args = 4, pretend = 8, frame = 200
 317              		@ frame_needed = 0, uses_anonymous_args = 1
 318              		.loc 1 57 1 is_stmt 0 view .LVU73
 319 0000 0CB4     		push	{r2, r3}
 320              	.LCFI5:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 2, -8
 323              		.cfi_offset 3, -4
 324 0002 30B5     		push	{r4, r5, lr}
 325              	.LCFI6:
 326              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccOh1lu5.s 			page 16


 327              		.cfi_offset 4, -20
 328              		.cfi_offset 5, -16
 329              		.cfi_offset 14, -12
 330 0004 B3B0     		sub	sp, sp, #204
 331              	.LCFI7:
 332              		.cfi_def_cfa_offset 224
 333 0006 0546     		mov	r5, r0
 334 0008 0C46     		mov	r4, r1
 335 000a 369A     		ldr	r2, [sp, #216]
  58:./drivers/driver.c **** 
  59:./drivers/driver.c ****     char devname[64];
 336              		.loc 1 59 5 is_stmt 1 view .LVU74
  60:./drivers/driver.c ****     if(name!= NULL){
 337              		.loc 1 60 5 view .LVU75
 338              		.loc 1 60 7 is_stmt 0 view .LVU76
 339 000c 0AB3     		cbz	r2, .L16
 340              	.LBB21:
  61:./drivers/driver.c ****         va_list args;
 341              		.loc 1 61 9 is_stmt 1 view .LVU77
  62:./drivers/driver.c ****         va_start(args, name);
 342              		.loc 1 62 9 view .LVU78
 343 000e 37AB     		add	r3, sp, #220
 344 0010 0193     		str	r3, [sp, #4]
  63:./drivers/driver.c ****         vsnprintf(devname, sizeof(devname), name, args);
 345              		.loc 1 63 9 view .LVU79
 346 0012 4021     		movs	r1, #64
 347              	.LVL34:
 348              		.loc 1 63 9 is_stmt 0 view .LVU80
 349 0014 22A8     		add	r0, sp, #136
 350              	.LVL35:
 351              		.loc 1 63 9 view .LVU81
 352 0016 FFF7FEFF 		bl	vsnprintf
 353              	.LVL36:
  64:./drivers/driver.c ****         va_end(args);
 354              		.loc 1 64 9 is_stmt 1 view .LVU82
 355              	.L17:
 356              	.LBE21:
  65:./drivers/driver.c ****     }
  66:./drivers/driver.c ****     else{
  67:./drivers/driver.c ****         strcpy(devname, disk->disk_name);
  68:./drivers/driver.c ****     }
  69:./drivers/driver.c **** 
  70:./drivers/driver.c **** 
  71:./drivers/driver.c ****     char path[128];
 357              		.loc 1 71 5 view .LVU83
  72:./drivers/driver.c ****     snprintf(path,128,"/dev/%s",devname);
 358              		.loc 1 72 5 view .LVU84
 359 001a 22AB     		add	r3, sp, #136
 360 001c 0F4A     		ldr	r2, .L20
 361 001e 8021     		movs	r1, #128
 362 0020 02A8     		add	r0, sp, #8
 363 0022 FFF7FEFF 		bl	snprintf
 364              	.LVL37:
  73:./drivers/driver.c **** 
  74:./drivers/driver.c ****     pr_info ("device_create: create block file %s \n",path);
 365              		.loc 1 74 5 view .LVU85
 366 0026 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccOh1lu5.s 			page 17


 367 0028 0D48     		ldr	r0, .L20+4
 368 002a FFF7FEFF 		bl	printk
 369              	.LVL38:
  75:./drivers/driver.c **** 
  76:./drivers/driver.c ****     struct  dentry * dev_dentry = create_new_dentry(path , S_IFREG|0755);
 370              		.loc 1 76 5 view .LVU86
 371              		.loc 1 76 35 is_stmt 0 view .LVU87
 372 002e 48F2ED11 		movw	r1, #33261
 373 0032 02A8     		add	r0, sp, #8
 374 0034 FFF7FEFF 		bl	create_new_dentry
 375              	.LVL39:
  77:./drivers/driver.c ****     if(IS_ERR(dev_dentry)){
 376              		.loc 1 77 5 is_stmt 1 view .LVU88
 377              	.LBB22:
 378              	.LBI22:
  75:./include/linux/err.h **** {
 379              		.loc 3 75 33 view .LVU89
 380              	.LBB23:
 381              		.loc 3 77 2 view .LVU90
 382              		.loc 3 77 2 is_stmt 0 view .LVU91
 383              	.LBE23:
 384              	.LBE22:
 385              		.loc 1 77 7 discriminator 1 view .LVU92
 386 0038 10F5805F 		cmn	r0, #4096
 387 003c 04D8     		bhi	.L15
  78:./drivers/driver.c ****         return dev_dentry;
  79:./drivers/driver.c ****     }
  80:./drivers/driver.c **** 
  81:./drivers/driver.c ****     devfs_mount_blk_device(dev_dentry->d_inode,dev,disk->major);
 388              		.loc 1 81 5 is_stmt 1 view .LVU93
 389 003e 2268     		ldr	r2, [r4]
 390 0040 2946     		mov	r1, r5
 391 0042 806C     		ldr	r0, [r0, #72]
 392              	.LVL40:
 393              		.loc 1 81 5 is_stmt 0 view .LVU94
 394 0044 FFF7FEFF 		bl	devfs_mount_blk_device
 395              	.LVL41:
 396              	.L15:
  82:./drivers/driver.c **** 
  83:./drivers/driver.c **** }
 397              		.loc 1 83 1 view .LVU95
 398 0048 33B0     		add	sp, sp, #204
 399              	.LCFI8:
 400              		.cfi_remember_state
 401              		.cfi_def_cfa_offset 20
 402              		@ sp needed
 403 004a BDE83040 		pop	{r4, r5, lr}
 404              	.LCFI9:
 405              		.cfi_restore 14
 406              		.cfi_restore 5
 407              		.cfi_restore 4
 408              		.cfi_def_cfa_offset 8
 409              	.LVL42:
 410              		.loc 1 83 1 view .LVU96
 411 004e 02B0     		add	sp, sp, #8
 412              	.LCFI10:
 413              		.cfi_restore 3
ARM GAS  /tmp/ccOh1lu5.s 			page 18


 414              		.cfi_restore 2
 415              		.cfi_def_cfa_offset 0
 416 0050 7047     		bx	lr
 417              	.LVL43:
 418              	.L16:
 419              	.LCFI11:
 420              		.cfi_restore_state
  67:./drivers/driver.c ****     }
 421              		.loc 1 67 9 is_stmt 1 view .LVU97
 422 0052 0C31     		adds	r1, r1, #12
 423              	.LVL44:
  67:./drivers/driver.c ****     }
 424              		.loc 1 67 9 is_stmt 0 view .LVU98
 425 0054 22A8     		add	r0, sp, #136
 426              	.LVL45:
  67:./drivers/driver.c ****     }
 427              		.loc 1 67 9 view .LVU99
 428 0056 FFF7FEFF 		bl	strcpy
 429              	.LVL46:
 430 005a DEE7     		b	.L17
 431              	.L21:
 432              		.align	2
 433              	.L20:
 434 005c 00000000 		.word	.LC1
 435 0060 00000000 		.word	.LC3
 436              		.cfi_endproc
 437              	.LFE1037:
 439              		.text
 440              	.Letext0:
 441              		.file 4 "./include/linux/stdarg.h"
 442              		.file 5 "./include/asm-generic/int-l64.h"
 443              		.file 6 "./include/asm-generic/posix_types.h"
 444              		.file 7 "./include/uapi/linux/types.h"
 445              		.file 8 "./include/linux/types.h"
 446              		.file 9 "./include/linux/errseq.h"
 447              		.file 10 "./include/linux/time64.h"
 448              		.file 11 "./arch/arm_m/include/asm/spinlock.h"
 449              		.file 12 "./include/linux/spinlock_types_raw.h"
 450              		.file 13 "./include/linux/spinlock_types.h"
 451              		.file 14 "./include/linux/rbtree_types.h"
 452              		.file 15 "./include/linux/uidgid_types.h"
 453              		.file 16 "./include/linux/projid.h"
 454              		.file 17 "./include/linux/fs.h"
 455              		.file 18 "./include/linux/mnt_idmapping.h"
 456              		.file 19 "./include/linux/mutex.h"
 457              		.file 20 "./include/linux/uio.h"
 458              		.file 21 "./include/linux/wait.h"
 459              		.file 22 "./include/linux/xarray.h"
 460              		.file 23 "./include/linux/migrate_mode.h"
 461              		.file 24 "./include/linux/rw_hint.h"
 462              		.file 25 "./include/linux/reciprocal_div.h"
 463              		.file 26 "./include/linux/mm_type.h"
 464              		.file 27 "./include/linux/bvec.h"
 465              		.file 28 "./include/linux/blk_types.h"
 466              		.file 29 "./include/linux/blkdev.h"
 467              		.file 30 "./include/linux/bio.h"
 468              		.file 31 "./include/linux/mempool_super_haper.h"
ARM GAS  /tmp/ccOh1lu5.s 			page 19


 469              		.file 32 "./include/linux/mempool.h"
 470              		.file 33 "./include/linux/lockdep_types.h"
 471              		.file 34 "./include/linux/workqueue_types.h"
 472              		.file 35 "./include/linux/blk-mq.h"
 473              		.file 36 "./include/linux/dcache.h"
 474              		.file 37 "./include/uapi/linux/pr.h"
 475              		.file 38 "./include/linux/pr.h"
 476              		.file 39 "./include/linux/hdreg.h"
 477              		.file 40 "./include/linux/lockref.h"
 478              		.file 41 "./include/linux/path.h"
 479              		.file 42 "./include/linux/statfs.h"
 480              		.file 43 "./include/linux/stat.h"
 481              		.file 44 "./include/linux/device.h"
 482              		.file 45 "./include/linux/devfs.h"
 483              		.file 46 "./include/linux/sprintf.h"
 484              		.file 47 "./include/linux/string.h"
 485              		.file 48 "./arch/arm_m/include/asm/string.h"
 486              		.file 49 "<built-in>"
 487              		.file 50 "./include/linux/gfp_types.h"
 488              		.file 51 "./include/linux/printk.h"
ARM GAS  /tmp/ccOh1lu5.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 driver.c
     /tmp/ccOh1lu5.s:21     .rodata.class_create.str1.4:00000000 $d
     /tmp/ccOh1lu5.s:25     .text.class_create:00000000 $t
     /tmp/ccOh1lu5.s:31     .text.class_create:00000000 class_create
     /tmp/ccOh1lu5.s:132    .text.class_create:00000048 $d
     /tmp/ccOh1lu5.s:137    .rodata.device_create.str1.4:00000000 $d
     /tmp/ccOh1lu5.s:144    .text.device_create:00000000 $t
     /tmp/ccOh1lu5.s:150    .text.device_create:00000000 device_create
     /tmp/ccOh1lu5.s:295    .text.device_create:00000078 $d
     /tmp/ccOh1lu5.s:301    .rodata.__register_disk.str1.4:00000000 $d
     /tmp/ccOh1lu5.s:305    .text.__register_disk:00000000 $t
     /tmp/ccOh1lu5.s:311    .text.__register_disk:00000000 __register_disk
     /tmp/ccOh1lu5.s:434    .text.__register_disk:0000005c $d

UNDEFINED SYMBOLS
printk
__smalloc__
strlen
strcpy
vsnprintf
snprintf
create_new_dentry
find_chrdev
devfs_mount_device
devfs_mount_blk_device
