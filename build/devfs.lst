ARM GAS  /tmp/ccl8in31.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"devfs.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c"
  20              		.section	.text.__spin_init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	__spin_init:
  27              	.LVL0:
  28              	.LFB850:
  29              		.file 2 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h"
   1:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** #ifndef __SPIN_LOCK_H_
   2:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** #define __SPIN_LOCK_H_
   3:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
   4:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** #include <linux/sched.h>
   5:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
   6:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** typedef struct { 
   7:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****      int flag; 
   8:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** } arch_spinlock_t;
   9:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
  10:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** static int __spin_init(arch_spinlock_t *lock) 
  11:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** {
  30              		.loc 2 11 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  12:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     lock->flag = 0;
  35              		.loc 2 12 5 view .LVU1
  36              		.loc 2 12 16 is_stmt 0 view .LVU2
  37 0000 0023     		movs	r3, #0
  38 0002 0360     		str	r3, [r0]
  39              	.LVL1:
  13:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** }
  40              		.loc 2 13 1 view .LVU3
  41 0004 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE850:
  45              		.section	.text.__spin_unlock,"ax",%progbits
  46              		.align	1
ARM GAS  /tmp/ccl8in31.s 			page 2


  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  51              	__spin_unlock:
  52              	.LVL2:
  53              	.LFB852:
  14:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
  15:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** static int __spin_lock(arch_spinlock_t *lock) {
  16:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
  17:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     stop_all_scheduler();
  18:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     if(lock->flag == 0){
  19:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
  20:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
  21:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****         return 1;
  22:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     }
  23:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     else
  24:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     {
  25:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****         start_all_scheduler();
  26:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****         return 0;
  27:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     }
  28:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** }
  29:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
  30:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** static void  __spin_unlock( arch_spinlock_t *lock ){
  54              		.loc 2 30 52 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  31:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     lock->flag = 0;
  59              		.loc 2 31 5 view .LVU5
  60              		.loc 2 31 16 is_stmt 0 view .LVU6
  61 0000 0023     		movs	r3, #0
  62 0002 0360     		str	r3, [r0]
  32:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** }
  63              		.loc 2 32 1 view .LVU7
  64 0004 7047     		bx	lr
  65              		.cfi_endproc
  66              	.LFE852:
  68              		.section	.text.spin_lock_init,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  74              	spin_lock_init:
  75              	.LVL3:
  76              	.LFB853:
  77              		.file 3 "/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** #ifndef __SPINLOCK_H__
   2:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** #define __SPINLOCK_H__
   3:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** 
   4:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** #include <linux/types.h>
   5:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** #include <linux/spinlock_types.h>
   6:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** #include <linux/sched.h>
   7:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** 
   8:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** 
   9:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** 
  10:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** static void spin_lock_init(spinlock_t* lock){
ARM GAS  /tmp/ccl8in31.s 			page 3


  78              		.loc 3 10 45 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		.loc 3 10 45 is_stmt 0 view .LVU9
  83 0000 08B5     		push	{r3, lr}
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
  11:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     __spin_init(&lock->rlock.raw_lock);
  88              		.loc 3 11 5 is_stmt 1 view .LVU10
  89 0002 FFF7FEFF 		bl	__spin_init
  90              	.LVL4:
  12:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** }
  91              		.loc 3 12 1 is_stmt 0 view .LVU11
  92 0006 08BD     		pop	{r3, pc}
  93              		.cfi_endproc
  94              	.LFE853:
  96              		.section	.text.spin_unlock,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 102              	spin_unlock:
 103              	.LVL5:
 104              	.LFB855:
  13:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** 
  14:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** static void spin_lock(spinlock_t* lock)
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** {  
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     while (1)
  17:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     {
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         if(__spin_lock(&lock->rlock.raw_lock) == 1){
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             lock->owner = get_current_task();
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             break;
  21:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         }
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         else  if(lock->owner == get_current_task()){  //Â¶ÇÊûúÂ∑≤ÁªèË¢´ÈîÅ‰Ωè‰ΩÜÊòØÈîÅÊòØËá™Â∑±ÁöÑÔ
  23:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             return;   
  24:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         }
  25:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         else{
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             __delay(5); //‰∏ªÂä®ËÆ©Âá∫Êó∂Èó¥Áâá
  27:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         }
  28:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     }
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** }
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** 
  31:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** static void spin_unlock(spinlock_t* lock)
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** {
 105              		.loc 3 32 1 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		.loc 3 32 1 is_stmt 0 view .LVU13
 110 0000 08B5     		push	{r3, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 3, -8
 114              		.cfi_offset 14, -4
ARM GAS  /tmp/ccl8in31.s 			page 4


  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     __spin_unlock(&lock->rlock.raw_lock);
 115              		.loc 3 33 5 is_stmt 1 view .LVU14
 116 0002 FFF7FEFF 		bl	__spin_unlock
 117              	.LVL6:
  34:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** }
 118              		.loc 3 34 1 is_stmt 0 view .LVU15
 119 0006 08BD     		pop	{r3, pc}
 120              		.cfi_endproc
 121              	.LFE855:
 123              		.section	.text.devfs_statfs,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	devfs_statfs:
 130              	.LVL7:
 131              	.LFB1059:
   1:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/kernel.h>
   2:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/uaccess.h>
   3:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/atomic.h>
   4:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/types.h>
   5:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/module.h>
   6:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/string.h>
   7:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/fs.h>
   8:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/slab.h>
   9:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/init.h>
  10:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #include <linux/devfs.h>
  11:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  12:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  13:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  14:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** #define MAGIC 12345678
  15:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** struct devfs_inode {
  16:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     int                     magic;
  17:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     uint32_t                i_mode;
  18:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     uint32_t                major;
  19:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_t                dentry_count;          //ÂºïÁî®ËÆ°Êï∞
  20:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct file_operations *i_fop;                
  21:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct list_head        list_node;             // ÊåÇÂú®superblockÁöÑinodeÈìæË°®
  22:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct list_head        dentry_list_head;      // Â¶ÇÊûúËøôÊòØÁõÆÂΩïÈ°πÔºåËøôÈáåÂ≠òÂÇ®inode‰∏ãÁ
  23:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spinlock_t              lock;
  24:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
  25:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct block_device       *bdev;
  26:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  27:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock *sb;
  28:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
  29:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** struct devfs_dentry {
  30:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     int                    magic;
  31:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *name;                             // ÂêçÂ≠ó
  32:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *target_inode;       // ËØ•dentryÊåáÂêëÁöÑÁõÆÊ†áinode
  33:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct list_head list_node;             // ÊåÇËΩΩÂà∞Áà∂ÁõÆÂΩïinode‰∏≠ÁöÑlisthead‰∏≠
  34:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
  35:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** struct devfs_superblock {
  36:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     int                    magic;
  37:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spinlock_t             lock;
  38:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *rootinode;
  39:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct list_head inode_list_head;       // ËØ•superblock‰∏ãÁöÑinodeÈìæË°®Â§¥
  40:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
ARM GAS  /tmp/ccl8in31.s 			page 5


  41:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  42:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** int devfs_mount_device(struct inode *inode,unsigned int major,struct file_operations *fop){
  43:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
  44:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(devfs_inode->magic != MAGIC) return -1;
  45:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_fop = fop;
  46:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
  47:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_mode = S_IFCHR | (devfs_inode->i_mode & 0777);
  48:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop = fop;
  49:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
  50:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
  51:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  52:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** int devfs_mount_blk_device(struct inode *inode,struct block_device* bdev,uint32_t major ){
  53:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
  54:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(devfs_inode->magic != MAGIC) return -1;
  55:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
  56:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->bdev = bdev;
  57:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_mode = S_IFBLK | (devfs_inode->i_mode & 0777);
  58:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
  59:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
  60:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** struct block_device* devfs_get_blk_dev(struct inode *inode)
  61:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
  62:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
  63:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if((devfs_inode->i_mode & S_IFMT) == S_IFBLK) 
  64:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_inode->bdev;
  65:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     else 
  66:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
  67:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
  68:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  69:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  70:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  71:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_open(struct inode *inode, struct file *file){
  72:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test open\n");
  73:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
  74:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
  75:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_release(struct inode *inode, struct file *file){
  76:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test close\n");
  77:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
  78:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
  79:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_read(struct file *file, char __user * data, size_t size, loff_t *offset){
  80:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test read\n");
  81:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
  82:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
  83:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_write(struct file *file, char __user * data, size_t size, loff_t *offset){
  84:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test write\n");
  85:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
  86:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
  87:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  88:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  89:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct file_operations devfs_file_fops = {
  90:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .owner = THIS_MODULE,
  91:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .open = devfs_open,
  92:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .release = devfs_release,
  93:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .read  = devfs_read,
  94:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .write = devfs_write
  95:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
  96:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
  97:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_inode *devfs_create_empty_inode(struct devfs_superblock *sb,struct file_operati
ARM GAS  /tmp/ccl8in31.s 			page 6


  98:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
  99:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(fop == NULL) return NULL;
 100:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dev_inode = kmalloc(sizeof(struct devfs_inode),GFP_KERNEL);
 101:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dev_inode == NULL) return NULL;
 102:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->magic = MAGIC;
 103:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->major = major;
 104:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->i_fop = fop;
 105:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->sb    = sb;
 106:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->i_mode = S_IFREG | 0755;
 107:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_set(&dev_inode->dentry_count,0);
 108:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock_init(&dev_inode->lock);
 109:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&dev_inode->list_node);
 110:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&dev_inode->dentry_list_head);
 111:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 112:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock(&sb->lock);
 113:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_add(&dev_inode->list_node,&sb->inode_list_head);
 114:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_unlock(&sb->lock);
 115:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 116:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return dev_inode;
 117:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 118:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_inode_put(struct devfs_inode *node){
 119:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node != NULL)kfree(node);
 120:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 121:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_dentry(struct devfs_inode* parent_dentry_inode,struct devf
 122:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 124:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 125:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* new_dentry =  kmalloc(sizeof(struct devfs_dentry),GFP_KERNEL);
 126:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry == NULL)return NULL;
 127:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->magic = MAGIC;
 128:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->name = NULL;
 129:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 130:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry->name  == NULL) {
 131:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(new_dentry);
 132:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 133:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 134:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     strcpy(new_dentry->name,name);
 135:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->target_inode = target_inode;
 136:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 137:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 138:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 139:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_inc (&target_inode->dentry_count);      //Â¢ûÂä†ÂºïÁî®ËÆ°Êï∞
 140:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 141:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 142:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock   (&parent_dentry_inode->lock);
 143:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 144:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_unlock(&parent_dentry_inode->lock);
 145:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return new_dentry;
 146:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 147:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_inode( struct devfs_superblock *sb,struct devfs_inode* par
 148:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 149:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode * new_inode = devfs_create_empty_inode(sb,fop,major);
 150:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_inode == NULL){
 151:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 152:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }   
 153:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* new_dentry = devfs_create_dentry(parent_dentry_inode,new_inode,name); //Âà
 154:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry == NULL){
ARM GAS  /tmp/ccl8in31.s 			page 7


 155:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_lock(&sb->lock);
 156:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         list_del(&new_inode->list_node);
 157:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_unlock(&sb->lock);
 158:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         devfs_inode_put(new_inode);
 159:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 160:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 161:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return new_dentry;
 162:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 163:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_file(struct devfs_superblock *sb,struct devfs_inode* paren
 164:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 165:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_create_inode(sb,parent_dentry_inode,fop,major,name);
 166:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 167:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 168:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_dir(struct devfs_superblock *sb,struct devfs_inode* parent
 169:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 170:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* dentry =  devfs_create_inode(sb,parent_dentry_inode,&devfs_file_fops,0,nam
 171:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL) return NULL;
 172:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 173:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return dentry;
 174:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 175:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void dentry_put(struct devfs_superblock *sb,struct devfs_dentry* dentry)
 176:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 177:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL) return;
 178:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry->target_inode != NULL)
 179:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     {
 180:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_lock(&sb->lock);
 181:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 182:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         {
 183:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             list_del(&dentry->target_inode->list_node);    
 184:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             devfs_inode_put(dentry->target_inode);
 185:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 186:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_unlock(&sb->lock);
 187:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 188:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     kfree(dentry->name);
 189:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     kfree(dentry);
 190:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 191:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_delete_dentry(struct devfs_superblock *sb,struct devfs_inode* parent_dentry_inode
 192:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
 193:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 194:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if ((delete_dentry->target_inode->i_mode & S_IFMT) == S_IFDIR ){         //Â¶ÇÊûúÊòØÁõÆÂΩïÈ°πÈú
 195:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 196:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             if(parent_dentry_inode != NULL) 
 197:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 198:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             return;
 199:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 200:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 201:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_del(&delete_dentry->list_node);                                     //Â∞Üdentry‰ªéÁà∂ÁõÆÂΩ
 202:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode != NULL) spin_unlock(&parent_dentry_inode->lock);
 203:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry_put(sb,delete_dentry);
 204:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 205:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_superblock* devfs_superblock_create(void) //ÂàõÂª∫superblock
 206:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 207:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock*d_sb = kmalloc(sizeof(struct devfs_superblock),GFP_KERNEL);
 208:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(d_sb == NULL){
 209:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;        
 210:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 211:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_sb->magic = MAGIC;
ARM GAS  /tmp/ccl8in31.s 			page 8


 212:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock_init(&d_sb->lock);
 213:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&d_sb->inode_list_head);
 214:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode* root_inode = devfs_create_empty_inode(d_sb ,&devfs_file_fops,0);
 215:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root_inode == NULL){
 216:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(d_sb);
 217:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 218:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 219:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root_inode->i_mode = S_IFDIR | 0755;
 220:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_sb->rootinode = root_inode;
 221:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root_inode->i_fop = &devfs_file_fops;
 222:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_inc (&root_inode->dentry_count); 
 223:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&root_inode->dentry_list_head);
 224:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return d_sb;
 225:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** } 
 226:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_superblock_destory(struct devfs_superblock* sb){
 227:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb!= NULL) {
 228:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         struct devfs_inode * root_inode = sb->rootinode;
 229:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!root_inode){
 230:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             kfree(root_inode);
 231:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 232:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(sb);
 233:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 234:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 235:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 236:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_lookup(struct devfs_inode* dentry_inode,char *name)
 237:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 238:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry_inode == NULL) return NULL;
 239:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 240:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* pos;
 241:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock(&dentry_inode->lock);
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 243:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 244:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             spin_unlock(&dentry_inode->lock);
 245:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             return pos;
 246:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 247:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 248:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_unlock(&dentry_inode->lock);
 249:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
 250:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 251:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 252:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 253:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 254:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 255:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 256:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 257:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 258:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 259:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 260:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct super_operations devfs_super_operation;
 261:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry_operations devfs_dentry_operation;
 262:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct inode_operations devfs_inode_operation;
 263:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 264:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_kill_sb (struct super_block * sb);
 265:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct inode *devfs_alloc_inode(struct super_block *sb);
 266:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void  devfs_destroy_inode(struct inode * node); //Êí§ÈîÄdevfs_alloc_inodeÊâÄÂÅöÁöÑ‰∏ÄÂàá
 267:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_statfs (struct dentry * dentry, struct kstatfs *star);
 268:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry * devfs_get_dentry(struct dentry * vdentry, struct devfs_dentry *dentry);
ARM GAS  /tmp/ccl8in31.s 			page 9


 269:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct super_block *devfs_get_vfs_superblock(struct devfs_superblock *sb);
 270:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct inode *  devfs_get_inode(struct devfs_inode *,struct super_block*);
 271:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry *devfs_mount(struct file_system_type *fs_type,
 272:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     int flags,
 273:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     const char *dev_name,
 274:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     void *data);
 275:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 276:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct file_system_type fs_type = {
 277:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .name     = "devfs",
 278:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .fs_flags = 0,
 279:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .init_fs_context = NULL,
 280:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .kill_sb  = devfs_kill_sb,
 281:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .mount    = devfs_mount,
 282:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .owner    = THIS_MODULE,
 283:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
 284:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 285:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry *devfs_mount(struct file_system_type *fs_type,
 286:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     int flags,
 287:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     const char *dev_name,
 288:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     void *data)
 289:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 290:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock *fs_superblock= devfs_superblock_create();
 291:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (fs_superblock == NULL){
 292:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);        
 293:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 294:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct dentry * root = __d_alloc(NULL,"root");
 295:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root == NULL){
 296:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****          devfs_superblock_destory(fs_superblock);
 297:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);   
 298:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 299:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 300:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 301:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* dentry = kmalloc(sizeof(struct devfs_dentry),GFP_KERNEL);
 302:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL){
 303:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****        
 304:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(root);
 305:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);        
 306:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 307:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->name = NULL;
 308:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->target_inode = fs_superblock->rootinode;
 309:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->magic =MAGIC;
 310:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root->d_fsdata = dentry;
 311:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode * root_inode = devfs_get_inode(dentry->target_inode,NULL);
 312:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root_inode == NULL){
 313:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(dentry);
 314:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         devfs_superblock_destory(fs_superblock);
 315:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(root);
 316:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);        
 317:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     } 
 318:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root->d_inode = root_inode;
 319:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 320:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct super_block *sb =devfs_get_vfs_superblock(fs_superblock);
 321:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb == NULL){
 322:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(root);
 323:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(dentry);
 324:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         inode_put(root_inode);
 325:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         devfs_superblock_destory(fs_superblock);
ARM GAS  /tmp/ccl8in31.s 			page 10


 326:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);       
 327:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 328:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     sb->s_root = root;
 329:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root->d_sb = sb;
 330:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 331:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return root;
 332:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 333:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 334:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 335:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 336:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct super_operations devfs_super_operation = {
 337:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .alloc_inode   = devfs_alloc_inode,
 338:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .destroy_inode = devfs_destroy_inode, 
 339:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .free_inode    = NULL,         
 340:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .dirty_inode   = NULL,
 341:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .write_inode   = NULL,
 342:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .drop_inode    = NULL,
 343:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .put_super     = devfs_kill_sb,
 344:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .sync_fs       = NULL,
 345:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .statfs        = devfs_statfs,
 346:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
 347:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 348:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct super_block *devfs_get_vfs_superblock(struct devfs_superblock *sb) //Â∞ÜÊñá‰ª∂Á≥ªÁªüÁ
 349:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 350:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb == NULL) return NULL;
 351:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 352:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(vsb == NULL) return NULL;
 353:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_fs_info =   sb;
 354:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_d_op    =  &devfs_dentry_operation;
 355:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_op      =  &devfs_super_operation;    
 356:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return vsb;
 357:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 358:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 359:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 360:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_kill_sb (struct super_block * sb){                          //ÈáäÊîæÊñá‰ª∂Á≥ªÁªüÂ
 361:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     put_super(sb);
 362:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 363:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 364:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct inode *  devfs_get_inode(struct devfs_inode * dev_node,struct super_block* sb )  //ÈÄ
 365:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 366:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dev_node == NULL) return NULL;
 367:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 368:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(inode == NULL) return NULL;  
 369:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_mode    = dev_node->i_mode;
 370:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop     = dev_node->i_fop;
 371:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_op      = &devfs_inode_operation;
 372:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_private = dev_node;
 373:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return inode;
 374:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 375:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 376:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct inode *devfs_alloc_inode(struct super_block *sb) //ÂàõÂª∫‰∏Ä‰∏™inodeÔºåÂêåÊó∂ÂàõÂª∫in
 377:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 378:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock *supb = sb->s_fs_info;
 379:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(supb->magic != MAGIC) return NULL;
 380:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct devfs_inode * inode = devfs_create_empty_inode(supb,&devfs_file_fops,10); //Êñá‰ª∂Á≥ªÁª
 381:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      if(inode == NULL) return NULL;
 382:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct inode *out_inode = devfs_get_inode(inode,sb);
ARM GAS  /tmp/ccl8in31.s 			page 11


 383:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      if(out_inode == NULL){
 384:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(inode);
 385:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 386:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      }
 387:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return out_inode;
 388:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 389:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 390:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 391:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 392:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void  devfs_destroy_inode(struct inode * node) //Êí§ÈîÄdevfs_alloc_inodeÊâÄÂÅöÁöÑ‰∏ÄÂàá
 393:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 394:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node == NULL) return;
 395:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node->i_private != NULL) {
 396:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         struct devfs_inode * dev_node = node->i_private;
 397:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         list_del(&dev_node->list_node);
 398:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(dev_node);        
 399:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 400:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 401:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 402:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_statfs (struct dentry * dentry, struct kstatfs *star){
 132              		.loc 1 402 71 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 403:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry * devfs_dentry = dentry->d_fsdata;
 137              		.loc 1 403 5 view .LVU17
 404:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode * devfs_node = devfs_dentry->target_inode;
 138              		.loc 1 404 5 view .LVU18
 405:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     star->f_type = MAGIC;
 139              		.loc 1 405 5 view .LVU19
 140              		.loc 1 405 18 is_stmt 0 view .LVU20
 141 0000 064B     		ldr	r3, .L8
 142 0002 0B60     		str	r3, [r1]
 143              	.LVL8:
 406:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     star->f_bsize  = 0;
 144              		.loc 1 406 5 is_stmt 1 view .LVU21
 145              		.loc 1 406 20 is_stmt 0 view .LVU22
 146 0004 0020     		movs	r0, #0
 147              	.LVL9:
 148              		.loc 1 406 20 view .LVU23
 149 0006 4860     		str	r0, [r1, #4]
 407:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     star->f_blocks = 1;
 150              		.loc 1 407 5 is_stmt 1 view .LVU24
 151              		.loc 1 407 20 is_stmt 0 view .LVU25
 152 0008 0123     		movs	r3, #1
 153 000a 8B60     		str	r3, [r1, #8]
 408:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     star->f_bfree  = 0;
 154              		.loc 1 408 5 is_stmt 1 view .LVU26
 155              		.loc 1 408 20 is_stmt 0 view .LVU27
 156 000c C860     		str	r0, [r1, #12]
 409:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     star->f_bavail = 0;
 157              		.loc 1 409 5 is_stmt 1 view .LVU28
 158              		.loc 1 409 20 is_stmt 0 view .LVU29
 159 000e 0861     		str	r0, [r1, #16]
 410:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     star->f_files  = 128;
 160              		.loc 1 410 5 is_stmt 1 view .LVU30
ARM GAS  /tmp/ccl8in31.s 			page 12


 161              		.loc 1 410 20 is_stmt 0 view .LVU31
 162 0010 8023     		movs	r3, #128
 163 0012 4B61     		str	r3, [r1, #20]
 411:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     star->f_ffree  = 127;
 164              		.loc 1 411 5 is_stmt 1 view .LVU32
 165              		.loc 1 411 20 is_stmt 0 view .LVU33
 166 0014 7F23     		movs	r3, #127
 167 0016 8B61     		str	r3, [r1, #24]
 412:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 168              		.loc 1 412 5 is_stmt 1 view .LVU34
 413:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 169              		.loc 1 413 1 is_stmt 0 view .LVU35
 170 0018 7047     		bx	lr
 171              	.L9:
 172 001a 00BF     		.align	2
 173              	.L8:
 174 001c 4E61BC00 		.word	12345678
 175              		.cfi_endproc
 176              	.LFE1059:
 178              		.section	.text.devfs_get_dentry,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	devfs_get_dentry:
 185              	.LVL10:
 186              	.LFB1060:
 414:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 415:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 416:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 417:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_create(struct mnt_idmap * map, struct inode * dir,struct dentry * dentry,umode_t m
 418:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry *devfs_vfs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags
 419:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry);
 420:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_unlink(struct inode *dir, struct dentry *dentry);
 421:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_mkdir(struct mnt_idmap *mnt, struct inode *dir, struct dentry *dentry, umode_t mod
 422:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_setattr(struct mnt_idmap *map, struct dentry *dentry, struct iattr *iattr);
 423:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int  devfs_getattr (struct mnt_idmap *dmp, const struct path * path,struct kstat *stat, u32 
 424:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_rmdir(struct inode *inode  ,struct dentry *dentry);
 425:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 426:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct inode_operations devfs_inode_operation = {
 427:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .create  = devfs_create,
 428:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .lookup  = devfs_vfs_lookup,
 429:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .link    = devfs_link,
 430:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .unlink  = devfs_unlink,
 431:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .mkdir   = devfs_mkdir,
 432:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .rmdir   = devfs_rmdir,
 433:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .setattr = devfs_setattr,
 434:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .getattr = devfs_getattr
 435:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
 436:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 437:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry * devfs_get_dentry(struct dentry * vdentry, struct devfs_dentry *dentry) //ÈÄö
 438:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 187              		.loc 1 438 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
ARM GAS  /tmp/ccl8in31.s 			page 13


 439:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL || vdentry == NULL) return NULL;
 192              		.loc 1 439 5 view .LVU37
 193              		.loc 1 439 7 is_stmt 0 view .LVU38
 194 0000 11B1     		cbz	r1, .L12
 195              		.loc 1 439 23 discriminator 2 view .LVU39
 196 0002 10B1     		cbz	r0, .L10
 440:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vdentry->d_fsdata = dentry;
 197              		.loc 1 440 5 is_stmt 1 view .LVU40
 198              		.loc 1 440 23 is_stmt 0 view .LVU41
 199 0004 4165     		str	r1, [r0, #84]
 441:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return vdentry;
 200              		.loc 1 441 5 is_stmt 1 view .LVU42
 201              		.loc 1 441 12 is_stmt 0 view .LVU43
 202 0006 7047     		bx	lr
 203              	.L12:
 439:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL || vdentry == NULL) return NULL;
 204              		.loc 1 439 50 discriminator 3 view .LVU44
 205 0008 0846     		mov	r0, r1
 206              	.LVL11:
 207              	.L10:
 442:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 208              		.loc 1 442 1 view .LVU45
 209 000a 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE1060:
 213              		.section	.text.devfs_setattr,"ax",%progbits
 214              		.align	1
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 219              	devfs_setattr:
 220              	.LVL12:
 221              	.LFB1068:
 443:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 444:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_create(struct mnt_idmap * map, struct inode * dir,struct dentry * dentry,umode_t m
 445:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 446:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *file_name = d_getname(dentry);
 447:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 448:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dinode = dir->i_private;
 449:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = devfs_lookup(dinode,file_name);
 450:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 451:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         file =  devfs_create_file(dinode->sb,dinode,&devfs_file_fops,10,file_name);
 452:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 453:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (file == NULL){                               //Á°ÆÂÆöÊñá‰ª∂ÊòØÂê¶Ë¢´ÂàõÂª∫
 454:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 455:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 456:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     file->target_inode->i_mode = S_IFREG | (mode & 0777);
 457:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if( devfs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 458:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
 459:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }  
 460:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 461:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode * new_file_inode = devfs_get_inode(file->target_inode,dir->i_sb);
 462:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_file_inode == NULL)
 463:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 464:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 465:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_add(dentry,new_file_inode); //ÈÄöÁü•Êñá‰ª∂Á≥ªÁªüÂä†ÂÖ•ÁºìÂ≠òÔºåÂπ∂ËøõË°åËµÑÊ∫êÁªëÂÆö
 466:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****    return 0;
ARM GAS  /tmp/ccl8in31.s 			page 14


 467:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** } 
 468:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 469:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry *devfs_vfs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags
 470:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 471:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dir_inode = (struct devfs_inode *)dir->i_private; //Ëé∑ÂèñÊñá‰ª∂Á≥ªÁªüÊú¨Ë∫
 472:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *name = dentry->d_name.name;                           
 473:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *pos;    
 474:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     pos = devfs_lookup(dir_inode,name);       //Êü•ËØ¢Ëé∑Âæódentry
 475:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(pos == NULL) return NULL;
 476:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 477:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if( devfs_get_dentry(dentry,pos) == NULL)
 478:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 479:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 480:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode * find_inode = devfs_get_inode(pos->target_inode,dir->i_sb);
 481:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(find_inode == NULL)
 482:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 483:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 484:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return d_add(dentry,find_inode);
 485:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
 486:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 487:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 488:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 489:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)
 490:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 491:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *old_inode = (struct devfs_inode *)old_dentry->d_inode->i_private;
 492:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dir_inode = (struct devfs_inode *)dir->i_private;
 493:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *new_dentry = devfs_create_dentry(dir_inode, old_inode, dentry->d_name.name
 494:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (new_dentry == NULL) {
 495:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -ENOMEM;
 496:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 497:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_get_dentry(dentry,new_dentry);
 498:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->d_sb = dir->i_sb;
 499:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_add(dentry,dentry->d_inode);
 500:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 501:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 502:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 503:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_unlink(struct inode *dir, struct dentry *dentry)
 504:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 505:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *parent_inode = (struct devfs_inode *)dir->i_private;
 506:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *delete_dentry = (struct devfs_dentry *)dentry->d_fsdata;
 507:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_delete_dentry(parent_inode->sb, parent_inode, delete_dentry);
 508:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 509:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 510:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 511:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 512:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_mkdir(struct mnt_idmap *mnt, struct inode *dir, struct dentry *dentry, umode_t mod
 513:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 514:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *file_name = d_getname(dentry);
 515:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 516:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dinode = dir->i_private;
 517:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = devfs_lookup(dinode,file_name);
 518:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 519:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         file =  devfs_create_dir(dinode->sb,dinode,file_name);
 520:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 521:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (file == NULL){                               //Á°ÆÂÆöÊñá‰ª∂ÊòØÂê¶Ë¢´ÂàõÂª∫
 522:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 523:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
ARM GAS  /tmp/ccl8in31.s 			page 15


 524:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     file->target_inode->i_mode = S_IFREG | (mode & 0777);
 525:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 526:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if( devfs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 527:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
 528:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }  
 529:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode * new_file_inode = devfs_get_inode(dinode,dir->i_sb);
 530:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_file_inode == NULL)
 531:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 532:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 533:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_add(dentry,new_file_inode); //ÈÄöÁü•Êñá‰ª∂Á≥ªÁªüÂä†ÂÖ•ÁºìÂ≠òÔºåÂπ∂ËøõË°åËµÑÊ∫êÁªëÂÆö
 534:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****    return 0;
 535:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 536:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 537:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 538:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_release_dentry(struct dentry *dentry){
 539:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *fs_dentry = dentry->d_fsdata;
 540:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 541:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 542:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_rmdir(struct inode *	dir  ,struct dentry *dentry){
 543:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_release_dentry(dentry);
 544:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return simple_unlink(dir,dentry);
 545:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 546:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 547:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_setattr(struct mnt_idmap *map, struct dentry *dentry, struct iattr *iattr)
 548:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 222              		.loc 1 548 1 is_stmt 1 view -0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 549:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = dentry->d_fsdata;
 227              		.loc 1 549 5 view .LVU47
 228              		.loc 1 549 26 is_stmt 0 view .LVU48
 229 0000 4B6D     		ldr	r3, [r1, #84]
 230              	.LVL13:
 550:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     file->target_inode->i_mode = (iattr->ia_mode & S_IFMT) | iattr->ia_mode;
 231              		.loc 1 550 5 is_stmt 1 view .LVU49
 232              		.loc 1 550 40 is_stmt 0 view .LVU50
 233 0002 9288     		ldrh	r2, [r2, #4]
 234              	.LVL14:
 235              		.loc 1 550 9 view .LVU51
 236 0004 9B68     		ldr	r3, [r3, #8]
 237              	.LVL15:
 238              		.loc 1 550 32 view .LVU52
 239 0006 5A60     		str	r2, [r3, #4]
 240              	.LVL16:
 551:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 241              		.loc 1 551 5 is_stmt 1 view .LVU53
 552:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 242              		.loc 1 552 1 is_stmt 0 view .LVU54
 243 0008 0020     		movs	r0, #0
 244              	.LVL17:
 245              		.loc 1 552 1 view .LVU55
 246 000a 7047     		bx	lr
 247              		.cfi_endproc
 248              	.LFE1068:
 250              		.section	.init.text,"ax",%progbits
ARM GAS  /tmp/ccl8in31.s 			page 16


 251              		.align	1
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	devfs_ops_init:
 257              	.LFB1070:
 553:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int  devfs_getattr (struct mnt_idmap *dmp, const struct path * path,struct kstat *stat, u32 
 554:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** {
 555:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct dentry *d = path->dentry;
 556:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = d->d_fsdata;
 557:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *inode;
 558:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 559:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (!file || !(inode = file->target_inode))
 560:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return -ENOENT;
 561:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mode = inode->i_mode;
 562:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->dev  = MKDEV(inode->major, 0);
 563:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->ino  = (unsigned long)inode;  
 564:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 565:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->size  = 0; 
 566:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 567:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 568:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mtime = stat->atime;
 569:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->ctime = stat->atime;
 570:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->blksize = PAGE_SIZE;
 571:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->blocks  = 0;
 572:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 573:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 574:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 575:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct dentry_operations devfs_dentry_operation = {
 576:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     .d_release = devfs_release_dentry,
 577:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** };
 578:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 579:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int __init devfs_ops_init(void){
 258              		.loc 1 579 39 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI2:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
 580:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     register_filesystem(&fs_type);
 267              		.loc 1 580 5 view .LVU57
 268 0002 0248     		ldr	r0, .L17
 269 0004 FFF7FEFF 		bl	register_filesystem
 270              	.LVL18:
 581:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 271              		.loc 1 581 5 view .LVU58
 582:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 272              		.loc 1 582 1 is_stmt 0 view .LVU59
 273 0008 0020     		movs	r0, #0
 274 000a 08BD     		pop	{r3, pc}
 275              	.L18:
 276              		.align	2
 277              	.L17:
 278 000c 00000000 		.word	fs_type
ARM GAS  /tmp/ccl8in31.s 			page 17


 279              		.cfi_endproc
 280              	.LFE1070:
 282              		.section	.text.devfs_kill_sb,"ax",%progbits
 283              		.align	1
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 288              	devfs_kill_sb:
 289              	.LVL19:
 290              	.LFB1055:
 360:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     put_super(sb);
 291              		.loc 1 360 52 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 360:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     put_super(sb);
 295              		.loc 1 360 52 is_stmt 0 view .LVU61
 296 0000 08B5     		push	{r3, lr}
 297              	.LCFI3:
 298              		.cfi_def_cfa_offset 8
 299              		.cfi_offset 3, -8
 300              		.cfi_offset 14, -4
 361:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 301              		.loc 1 361 5 is_stmt 1 view .LVU62
 302 0002 FFF7FEFF 		bl	put_super
 303              	.LVL20:
 362:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 304              		.loc 1 362 1 is_stmt 0 view .LVU63
 305 0006 08BD     		pop	{r3, pc}
 306              		.cfi_endproc
 307              	.LFE1055:
 309              		.section	.rodata.devfs_release.str1.4,"aMS",%progbits,1
 310              		.align	2
 311              	.LC0:
 312 0000 64657666 		.ascii	"devfs test close\012\000"
 312      73207465 
 312      73742063 
 312      6C6F7365 
 312      0A00
 313              		.section	.text.devfs_release,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	devfs_release:
 320              	.LVL21:
 321              	.LFB1039:
  75:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test close\n");
 322              		.loc 1 75 65 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
  75:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test close\n");
 326              		.loc 1 75 65 is_stmt 0 view .LVU65
 327 0000 08B5     		push	{r3, lr}
 328              	.LCFI4:
 329              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccl8in31.s 			page 18


 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
  76:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 332              		.loc 1 76 5 is_stmt 1 view .LVU66
 333 0002 0248     		ldr	r0, .L23
 334              	.LVL22:
  76:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 335              		.loc 1 76 5 is_stmt 0 view .LVU67
 336 0004 FFF7FEFF 		bl	early_printk
 337              	.LVL23:
  77:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 338              		.loc 1 77 5 is_stmt 1 view .LVU68
  78:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_read(struct file *file, char __user * data, size_t size, loff_t *offset){
 339              		.loc 1 78 1 is_stmt 0 view .LVU69
 340 0008 0020     		movs	r0, #0
 341 000a 08BD     		pop	{r3, pc}
 342              	.L24:
 343              		.align	2
 344              	.L23:
 345 000c 00000000 		.word	.LC0
 346              		.cfi_endproc
 347              	.LFE1039:
 349              		.section	.rodata.devfs_open.str1.4,"aMS",%progbits,1
 350              		.align	2
 351              	.LC1:
 352 0000 64657666 		.ascii	"devfs test open\012\000"
 352      73207465 
 352      7374206F 
 352      70656E0A 
 352      00
 353              		.section	.text.devfs_open,"ax",%progbits
 354              		.align	1
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 359              	devfs_open:
 360              	.LVL24:
 361              	.LFB1038:
  71:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test open\n");
 362              		.loc 1 71 62 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
  71:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test open\n");
 366              		.loc 1 71 62 is_stmt 0 view .LVU71
 367 0000 08B5     		push	{r3, lr}
 368              	.LCFI5:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 3, -8
 371              		.cfi_offset 14, -4
  72:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 372              		.loc 1 72 5 is_stmt 1 view .LVU72
 373 0002 0248     		ldr	r0, .L27
 374              	.LVL25:
  72:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 375              		.loc 1 72 5 is_stmt 0 view .LVU73
 376 0004 FFF7FEFF 		bl	early_printk
ARM GAS  /tmp/ccl8in31.s 			page 19


 377              	.LVL26:
  73:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 378              		.loc 1 73 5 is_stmt 1 view .LVU74
  74:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_release(struct inode *inode, struct file *file){
 379              		.loc 1 74 1 is_stmt 0 view .LVU75
 380 0008 0020     		movs	r0, #0
 381 000a 08BD     		pop	{r3, pc}
 382              	.L28:
 383              		.align	2
 384              	.L27:
 385 000c 00000000 		.word	.LC1
 386              		.cfi_endproc
 387              	.LFE1038:
 389              		.section	.rodata.devfs_write.str1.4,"aMS",%progbits,1
 390              		.align	2
 391              	.LC2:
 392 0000 64657666 		.ascii	"devfs test write\012\000"
 392      73207465 
 392      73742077 
 392      72697465 
 392      0A00
 393              		.section	.text.devfs_write,"ax",%progbits
 394              		.align	1
 395              		.syntax unified
 396              		.thumb
 397              		.thumb_func
 399              	devfs_write:
 400              	.LVL27:
 401              	.LFB1041:
  83:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test write\n");
 402              		.loc 1 83 91 is_stmt 1 view -0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
  83:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test write\n");
 406              		.loc 1 83 91 is_stmt 0 view .LVU77
 407 0000 08B5     		push	{r3, lr}
 408              	.LCFI6:
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 3, -8
 411              		.cfi_offset 14, -4
  84:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 412              		.loc 1 84 5 is_stmt 1 view .LVU78
 413 0002 0248     		ldr	r0, .L31
 414              	.LVL28:
  84:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 415              		.loc 1 84 5 is_stmt 0 view .LVU79
 416 0004 FFF7FEFF 		bl	early_printk
 417              	.LVL29:
  85:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 418              		.loc 1 85 5 is_stmt 1 view .LVU80
  86:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 419              		.loc 1 86 1 is_stmt 0 view .LVU81
 420 0008 0020     		movs	r0, #0
 421 000a 08BD     		pop	{r3, pc}
 422              	.L32:
 423              		.align	2
ARM GAS  /tmp/ccl8in31.s 			page 20


 424              	.L31:
 425 000c 00000000 		.word	.LC2
 426              		.cfi_endproc
 427              	.LFE1041:
 429              		.section	.rodata.devfs_read.str1.4,"aMS",%progbits,1
 430              		.align	2
 431              	.LC3:
 432 0000 64657666 		.ascii	"devfs test read\012\000"
 432      73207465 
 432      73742072 
 432      6561640A 
 432      00
 433              		.section	.text.devfs_read,"ax",%progbits
 434              		.align	1
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	devfs_read:
 440              	.LVL30:
 441              	.LFB1040:
  79:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test read\n");
 442              		.loc 1 79 90 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
  79:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     early_printk("devfs test read\n");
 446              		.loc 1 79 90 is_stmt 0 view .LVU83
 447 0000 08B5     		push	{r3, lr}
 448              	.LCFI7:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 3, -8
 451              		.cfi_offset 14, -4
  80:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 452              		.loc 1 80 5 is_stmt 1 view .LVU84
 453 0002 0248     		ldr	r0, .L35
 454              	.LVL31:
  80:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 455              		.loc 1 80 5 is_stmt 0 view .LVU85
 456 0004 FFF7FEFF 		bl	early_printk
 457              	.LVL32:
  81:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 458              		.loc 1 81 5 is_stmt 1 view .LVU86
  82:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_write(struct file *file, char __user * data, size_t size, loff_t *offset){
 459              		.loc 1 82 1 is_stmt 0 view .LVU87
 460 0008 0020     		movs	r0, #0
 461 000a 08BD     		pop	{r3, pc}
 462              	.L36:
 463              		.align	2
 464              	.L35:
 465 000c 00000000 		.word	.LC3
 466              		.cfi_endproc
 467              	.LFE1040:
 469              		.section	.text.__spin_lock,"ax",%progbits
 470              		.align	1
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
ARM GAS  /tmp/ccl8in31.s 			page 21


 475              	__spin_lock:
 476              	.LVL33:
 477              	.LFB851:
  15:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
 478              		.loc 2 15 47 is_stmt 1 view -0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
  15:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
 482              		.loc 2 15 47 is_stmt 0 view .LVU89
 483 0000 38B5     		push	{r3, r4, r5, lr}
 484              	.LCFI8:
 485              		.cfi_def_cfa_offset 16
 486              		.cfi_offset 3, -16
 487              		.cfi_offset 4, -12
 488              		.cfi_offset 5, -8
 489              		.cfi_offset 14, -4
 490 0002 0446     		mov	r4, r0
  17:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     if(lock->flag == 0){
 491              		.loc 2 17 5 is_stmt 1 view .LVU90
 492 0004 FFF7FEFF 		bl	stop_all_scheduler
 493              	.LVL34:
  18:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 494              		.loc 2 18 5 view .LVU91
  18:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 495              		.loc 2 18 12 is_stmt 0 view .LVU92
 496 0008 2368     		ldr	r3, [r4]
  18:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 497              		.loc 2 18 7 view .LVU93
 498 000a 2BB9     		cbnz	r3, .L38
  19:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
 499              		.loc 2 19 11 is_stmt 1 view .LVU94
  19:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
 500              		.loc 2 19 22 is_stmt 0 view .LVU95
 501 000c 0125     		movs	r5, #1
 502 000e 2560     		str	r5, [r4]
  20:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****         return 1;
 503              		.loc 2 20 11 is_stmt 1 view .LVU96
 504 0010 FFF7FEFF 		bl	start_all_scheduler
 505              	.LVL35:
  21:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     }
 506              		.loc 2 21 9 view .LVU97
  21:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     }
 507              		.loc 2 21 16 is_stmt 0 view .LVU98
 508 0014 2846     		mov	r0, r5
 509              	.L37:
  28:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h **** 
 510              		.loc 2 28 1 view .LVU99
 511 0016 38BD     		pop	{r3, r4, r5, pc}
 512              	.LVL36:
 513              	.L38:
  25:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****         return 0;
 514              		.loc 2 25 9 is_stmt 1 view .LVU100
 515 0018 FFF7FEFF 		bl	start_all_scheduler
 516              	.LVL37:
  26:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     }
 517              		.loc 2 26 9 view .LVU101
ARM GAS  /tmp/ccl8in31.s 			page 22


  26:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h ****     }
 518              		.loc 2 26 16 is_stmt 0 view .LVU102
 519 001c 0020     		movs	r0, #0
 520 001e FAE7     		b	.L37
 521              		.cfi_endproc
 522              	.LFE851:
 524              		.section	.text.spin_lock,"ax",%progbits
 525              		.align	1
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 530              	spin_lock:
 531              	.LVL38:
 532              	.LFB854:
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     while (1)
 533              		.loc 3 15 1 is_stmt 1 view -0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     while (1)
 537              		.loc 3 15 1 is_stmt 0 view .LVU104
 538 0000 38B5     		push	{r3, r4, r5, lr}
 539              	.LCFI9:
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 3, -16
 542              		.cfi_offset 4, -12
 543              		.cfi_offset 5, -8
 544              		.cfi_offset 14, -4
 545 0002 0446     		mov	r4, r0
 546 0004 06E0     		b	.L44
 547              	.LVL39:
 548              	.L46:
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             break;
 549              		.loc 3 19 13 is_stmt 1 view .LVU105
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             break;
 550              		.loc 3 19 27 is_stmt 0 view .LVU106
 551 0006 FFF7FEFF 		bl	get_current_task
 552              	.LVL40:
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             break;
 553              		.loc 3 19 25 discriminator 1 view .LVU107
 554 000a 2060     		str	r0, [r4]
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         }
 555              		.loc 3 20 13 is_stmt 1 view .LVU108
 556              	.L41:
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h **** 
 557              		.loc 3 29 1 is_stmt 0 view .LVU109
 558 000c 38BD     		pop	{r3, r4, r5, pc}
 559              	.LVL41:
 560              	.L47:
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****         }
 561              		.loc 3 26 13 is_stmt 1 view .LVU110
 562 000e 0520     		movs	r0, #5
 563 0010 FFF7FEFF 		bl	__delay
 564              	.LVL42:
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     {
 565              		.loc 3 16 11 view .LVU111
 566              	.L44:
ARM GAS  /tmp/ccl8in31.s 			page 23


  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****     {
 567              		.loc 3 16 5 view .LVU112
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             lock->owner = get_current_task();
 568              		.loc 3 18 9 view .LVU113
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             lock->owner = get_current_task();
 569              		.loc 3 18 12 is_stmt 0 view .LVU114
 570 0014 2046     		mov	r0, r4
 571 0016 FFF7FEFF 		bl	__spin_lock
 572              	.LVL43:
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             lock->owner = get_current_task();
 573              		.loc 3 18 11 discriminator 1 view .LVU115
 574 001a 0128     		cmp	r0, #1
 575 001c F3D0     		beq	.L46
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             return;   
 576              		.loc 3 22 15 is_stmt 1 view .LVU116
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             return;   
 577              		.loc 3 22 22 is_stmt 0 view .LVU117
 578 001e 2568     		ldr	r5, [r4]
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             return;   
 579              		.loc 3 22 33 view .LVU118
 580 0020 FFF7FEFF 		bl	get_current_task
 581              	.LVL44:
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock.h ****             return;   
 582              		.loc 3 22 17 discriminator 1 view .LVU119
 583 0024 8542     		cmp	r5, r0
 584 0026 F2D1     		bne	.L47
 585 0028 F0E7     		b	.L41
 586              		.cfi_endproc
 587              	.LFE854:
 589              		.section	.text.devfs_create_empty_inode,"ax",%progbits
 590              		.align	1
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 595              	devfs_create_empty_inode:
 596              	.LVL45:
 597              	.LFB1042:
  98:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(fop == NULL) return NULL;
 598              		.loc 1 98 1 is_stmt 1 view -0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
  98:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(fop == NULL) return NULL;
 602              		.loc 1 98 1 is_stmt 0 view .LVU121
 603 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 604              	.LCFI10:
 605              		.cfi_def_cfa_offset 24
 606              		.cfi_offset 3, -24
 607              		.cfi_offset 4, -20
 608              		.cfi_offset 5, -16
 609              		.cfi_offset 6, -12
 610              		.cfi_offset 7, -8
 611              		.cfi_offset 14, -4
  99:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dev_inode = kmalloc(sizeof(struct devfs_inode),GFP_KERNEL);
 612              		.loc 1 99 5 is_stmt 1 view .LVU122
  99:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dev_inode = kmalloc(sizeof(struct devfs_inode),GFP_KERNEL);
 613              		.loc 1 99 7 is_stmt 0 view .LVU123
ARM GAS  /tmp/ccl8in31.s 			page 24


 614 0002 0F46     		mov	r7, r1
 615 0004 69B3     		cbz	r1, .L50
 616 0006 0546     		mov	r5, r0
 617 0008 1646     		mov	r6, r2
 100:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dev_inode == NULL) return NULL;
 618              		.loc 1 100 5 is_stmt 1 view .LVU124
 619              	.LVL46:
 620              	.LBB225:
 621              	.LBI225:
 622              		.file 4 "/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
   3:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
   5:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
  11:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  12:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/cache.h>
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/overflow.h>
  17:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/types.h>
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/raid/pq.h>
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/gfp_types.h>
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/numa.h>
  21:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/spinlock.h>
  23:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  24:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** enum _slab_flag_bits {
  25:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_POISON,
  28:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_STORE_USER,
  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_PANIC,
  34:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_TRACE,
  36:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  39:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NO_MERGE,
  41:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
  42:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_FAILSLAB,
  43:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  44:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  47:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
ARM GAS  /tmp/ccl8in31.s 			page 25


  48:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_KASAN,
  49:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  50:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  54:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  57:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  62:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** };
  64:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  65:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  66:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  67:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  70:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
  71:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
  74:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Poison objects */
  79:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
  83:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
  85:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
  90:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
  93:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Use GFP_DMA memory */
  95:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
  98:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
  99:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
 100:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
 103:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
 104:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 26


 105:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
 107:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 110:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * object validation pass. Something like:
 113:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 114:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * ::
 115:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 116:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *  begin:
 117:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   rcu_read_lock();
 118:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   if (obj) {
 120:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       rcu_read_unlock();
 122:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       goto begin;
 123:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 124:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       put_ref(obj);
 126:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       rcu_read_unlock();
 127:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       goto begin;
 128:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *     }
 129:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   }
 130:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *  rcu_read_unlock();
 131:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 132:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 138:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 141:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
 147:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * protection.
 151:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 152:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Trace allocations and frees */
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
 157:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 158:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Flag to prevent checks on free */
 159:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
 161:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
ARM GAS  /tmp/ccl8in31.s 			page 27


 162:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 164:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 165:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 168:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 169:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * cautiously. Valid use cases:
 171:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 172:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 178:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 180:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Fault injection mark */
 181:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 184:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 186:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
 187:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 189:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 192:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 197:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 198:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 201:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 203:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 204:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 205:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 209:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 211:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KFENCE
 212:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 214:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 216:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 217:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
ARM GAS  /tmp/ccl8in31.s 			page 28


 219:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 221:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 225:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 228:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 232:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 236:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 238:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 239:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 240:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 243:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 245:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 246:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 248:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 250:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Both make kfree a no-op.
 252:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 253:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 255:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 258:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 259:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 260:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 261:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 262:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 265:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** ({						\
 267:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** })
 269:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 270:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
 271:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 272:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 274:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
 275:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
ARM GAS  /tmp/ccl8in31.s 			page 29


 276:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 278:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 279:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 281:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 282:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	* given order would contain.
 285:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	*/				
 286:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** struct kmem_cache_order_objects {
 287:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	unsigned int x;
 288:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** };
 289:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 290:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** struct kmem_cache_node {
 291:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	spinlock_t list_lock;
 292:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	unsigned long nr_partial;
 293:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	struct list_head partial;
 294:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	atomic_long_t total_objects;
 297:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	struct list_head full;
 298:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 299:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** };
 300:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 301:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** struct kmem_cache {
 302:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 305:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		slab_flags_t flags;
 307:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned long min_partial;
 308:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int cpu_partial;
 315:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 318:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 320:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
 326:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int align;		/* Alignment */
 327:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
 328:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
 332:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
ARM GAS  /tmp/ccl8in31.s 			page 30


 333:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned long random;
 335:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 336:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 337:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/*
 339:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 			*/
 341:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 343:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 344:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int *random_seq;
 346:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 347:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 348:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 351:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 352:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 356:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 357:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	};
 359:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 					
 360:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 361:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 362:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 363:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 364:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 366:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 367:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 370:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 371:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 374:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 375:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline vfree(void *addr){
 376:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__(addr);
 377:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 378:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
 623              		.loc 4 379 21 view .LVU125
 624              	.LBB226:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 625              		.loc 4 380 2 view .LVU126
 626              		.loc 4 380 9 is_stmt 0 view .LVU127
 627 000a 4FF44C61 		mov	r1, #3264
 628              	.LVL47:
 629              		.loc 4 380 9 view .LVU128
 630 000e 3C20     		movs	r0, #60
 631              	.LVL48:
ARM GAS  /tmp/ccl8in31.s 			page 31


 632              		.loc 4 380 9 view .LVU129
 633 0010 FFF7FEFF 		bl	__smalloc__
 634              	.LVL49:
 635              		.loc 4 380 9 view .LVU130
 636              	.LBE226:
 637              	.LBE225:
 101:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->magic = MAGIC;
 638              		.loc 1 101 5 is_stmt 1 view .LVU131
 101:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->magic = MAGIC;
 639              		.loc 1 101 7 is_stmt 0 view .LVU132
 640 0014 0446     		mov	r4, r0
 641 0016 10B3     		cbz	r0, .L48
 102:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->major = major;
 642              		.loc 1 102 5 is_stmt 1 view .LVU133
 102:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->major = major;
 643              		.loc 1 102 22 is_stmt 0 view .LVU134
 644 0018 134B     		ldr	r3, .L52
 645 001a 0360     		str	r3, [r0]
 103:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->i_fop = fop;
 646              		.loc 1 103 5 is_stmt 1 view .LVU135
 103:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->i_fop = fop;
 647              		.loc 1 103 22 is_stmt 0 view .LVU136
 648 001c 8660     		str	r6, [r0, #8]
 104:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->sb    = sb;
 649              		.loc 1 104 5 is_stmt 1 view .LVU137
 104:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->sb    = sb;
 650              		.loc 1 104 22 is_stmt 0 view .LVU138
 651 001e 0761     		str	r7, [r0, #16]
 105:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->i_mode = S_IFREG | 0755;
 652              		.loc 1 105 5 is_stmt 1 view .LVU139
 105:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dev_inode->i_mode = S_IFREG | 0755;
 653              		.loc 1 105 22 is_stmt 0 view .LVU140
 654 0020 8563     		str	r5, [r0, #56]
 106:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_set(&dev_inode->dentry_count,0);
 655              		.loc 1 106 5 is_stmt 1 view .LVU141
 106:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_set(&dev_inode->dentry_count,0);
 656              		.loc 1 106 23 is_stmt 0 view .LVU142
 657 0022 48F2ED13 		movw	r3, #33261
 658 0026 4360     		str	r3, [r0, #4]
 107:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock_init(&dev_inode->lock);
 659              		.loc 1 107 5 is_stmt 1 view .LVU143
 660              	.LVL50:
 661              	.LBB227:
 662              	.LBI227:
 663              		.file 5 "/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** // SPDX-License-Identifier: GPL-2.0
   2:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
   3:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** // Generated by scripts/atomic/gen-atomic-instrumented.sh 
   4:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** // DO NOT MODIFY THIS FILE DIRECTLY
   5:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
   6:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /*
   7:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * This file provoides atomic operations with explicit instrumentation (e.g.
   8:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * KASAN, KCSAN), which should be used unless it is necessary to avoid
   9:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * instrumentation. Where it is necessary to aovid instrumenation, the
  10:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * raw_atomic*() operations should be used.
  11:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
  12:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** #ifndef _LINUX_ATOMIC_INSTRUMENTED_H
ARM GAS  /tmp/ccl8in31.s 			page 32


  13:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** #define _LINUX_ATOMIC_INSTRUMENTED_H
  14:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** #include <linux/build_bug.h>
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** #include <linux/compiler.h>
  17:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** #include <linux/instrumented.h>
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_read() - atomic load with relaxed ordering
  21:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  23:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically loads the value of @v with relaxed ordering.
  24:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  25:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_read() there.
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  27:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The value loaded from @v.
  28:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_read(const atomic_t *v)
  31:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read(v, sizeof(*v));
  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read(v);
  34:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
  36:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_read_acquire() - atomic load with acquire ordering
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  39:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  40:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically loads the value of @v with acquire ordering.
  41:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  42:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_read_acquire() there.
  43:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  44:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The value loaded from @v.
  45:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
  46:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
  47:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_read_acquire(const atomic_t *v)
  48:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
  49:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read(v, sizeof(*v));
  50:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read_acquire(v);
  51:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
  52:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
  53:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
  54:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_set() - atomic set with relaxed ordering
  55:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  56:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to assign
  57:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  58:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically sets @v to @i with relaxed ordering.
  59:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  60:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_set() there.
  61:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  62:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
  63:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
  64:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
  65:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_set(atomic_t *v, int i)
 664              		.loc 5 65 1 view .LVU144
  66:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
  67:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_write(v, sizeof(*v));
 665              		.loc 5 67 2 view .LVU145
ARM GAS  /tmp/ccl8in31.s 			page 33


  68:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_set(v, i);
 666              		.loc 5 68 2 view .LVU146
 667              	.LBB228:
 668              	.LBI228:
 669              		.file 6 "/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** // SPDX-License-Identifier: GPL-2.0
   2:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
   3:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** // Generated by scripts/atomic/gen-atomic-fallback.sh
   4:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** // DO NOT MODIFY THIS FILE DIRECTLY
   5:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
   6:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #ifndef _LINUX_ATOMIC_FALLBACK_H
   7:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define _LINUX_ATOMIC_FALLBACK_H
   8:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
   9:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #include <linux/compiler.h>
  10:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  11:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg)
  12:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg arch_xchg
  13:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  14:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg(...) \
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_xchg, __VA_ARGS__)
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  17:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_not_implemented(void);
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg(...) raw_xchg_not_implemented()
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  21:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_acquire)
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire arch_xchg_acquire
  23:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  24:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire(...) \
  25:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_xchg, __VA_ARGS__)
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  27:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire arch_xchg
  28:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_acquire_not_implemented(void);
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire(...) raw_xchg_acquire_not_implemented()
  31:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_release)
  34:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release arch_xchg_release
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  36:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release(...) \
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_xchg, __VA_ARGS__)
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  39:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release arch_xchg
  40:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  41:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_release_not_implemented(void);
  42:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release(...) raw_xchg_release_not_implemented()
  43:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
  44:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  45:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_relaxed)
  46:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed arch_xchg_relaxed
  47:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  48:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed arch_xchg
  49:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  50:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_relaxed_not_implemented(void);
  51:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed(...) raw_xchg_relaxed_not_implemented()
  52:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccl8in31.s 			page 34


  53:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  54:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg)
  55:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg arch_cmpxchg
  56:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  57:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg(...) \
  58:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg, __VA_ARGS__)
  59:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  60:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_not_implemented(void);
  61:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg(...) raw_cmpxchg_not_implemented()
  62:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
  63:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  64:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_acquire)
  65:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire arch_cmpxchg_acquire
  66:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  67:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire(...) \
  68:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg, __VA_ARGS__)
  69:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  70:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire arch_cmpxchg
  71:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  72:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_acquire_not_implemented(void);
  73:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire(...) raw_cmpxchg_acquire_not_implemented()
  74:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
  75:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  76:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_release)
  77:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release arch_cmpxchg_release
  78:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  79:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release(...) \
  80:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg, __VA_ARGS__)
  81:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  82:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release arch_cmpxchg
  83:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  84:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_release_not_implemented(void);
  85:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release(...) raw_cmpxchg_release_not_implemented()
  86:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
  87:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  88:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_relaxed)
  89:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed arch_cmpxchg_relaxed
  90:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  91:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed arch_cmpxchg
  92:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
  93:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_relaxed_not_implemented(void);
  94:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed(...) raw_cmpxchg_relaxed_not_implemented()
  95:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
  96:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
  97:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64)
  98:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64 arch_cmpxchg64
  99:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 100:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64(...) \
 101:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg64, __VA_ARGS__)
 102:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 103:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_not_implemented(void);
 104:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64(...) raw_cmpxchg64_not_implemented()
 105:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 106:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 107:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_acquire)
 108:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire arch_cmpxchg64_acquire
 109:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
ARM GAS  /tmp/ccl8in31.s 			page 35


 110:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire(...) \
 111:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg64, __VA_ARGS__)
 112:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 113:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire arch_cmpxchg64
 114:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 115:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_acquire_not_implemented(void);
 116:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire(...) raw_cmpxchg64_acquire_not_implemented()
 117:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 118:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 119:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_release)
 120:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release arch_cmpxchg64_release
 121:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 122:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release(...) \
 123:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg64, __VA_ARGS__)
 124:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 125:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release arch_cmpxchg64
 126:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 127:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_release_not_implemented(void);
 128:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release(...) raw_cmpxchg64_release_not_implemented()
 129:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 130:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 131:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_relaxed)
 132:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed arch_cmpxchg64_relaxed
 133:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 134:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed arch_cmpxchg64
 135:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 136:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_relaxed_not_implemented(void);
 137:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed(...) raw_cmpxchg64_relaxed_not_implemented()
 138:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 139:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 140:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128)
 141:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128 arch_cmpxchg128
 142:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 143:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128(...) \
 144:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg128, __VA_ARGS__)
 145:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 146:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_not_implemented(void);
 147:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128(...) raw_cmpxchg128_not_implemented()
 148:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 149:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 150:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_acquire)
 151:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire arch_cmpxchg128_acquire
 152:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire(...) \
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg128, __VA_ARGS__)
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire arch_cmpxchg128
 157:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 158:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_acquire_not_implemented(void);
 159:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire(...) raw_cmpxchg128_acquire_not_implemented()
 160:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 161:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 162:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_release)
 163:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release arch_cmpxchg128_release
 164:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 165:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release(...) \
 166:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg128, __VA_ARGS__)
ARM GAS  /tmp/ccl8in31.s 			page 36


 167:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 168:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release arch_cmpxchg128
 169:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 170:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_release_not_implemented(void);
 171:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release(...) raw_cmpxchg128_release_not_implemented()
 172:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 173:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 174:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_relaxed)
 175:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed arch_cmpxchg128_relaxed
 176:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 177:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed arch_cmpxchg128
 178:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 179:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_relaxed_not_implemented(void);
 180:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed(...) raw_cmpxchg128_relaxed_not_implemented()
 181:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 182:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 183:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 184:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 185:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 186:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 187:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 188:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 189:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg)
 190:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg arch_try_cmpxchg
 191:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 192:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg(...) \
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg, __VA_ARGS__)
 194:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg(_ptr, _oldp, _new) \
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 197:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 198:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg((_ptr), ___o, (_new)); \
 199:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 200:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 201:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 202:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 203:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 204:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 205:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_acquire)
 206:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire arch_try_cmpxchg_acquire
 207:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 208:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire(...) \
 209:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg, __VA_ARGS__)
 210:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 211:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire arch_try_cmpxchg
 212:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire(_ptr, _oldp, _new) \
 214:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 216:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_acquire((_ptr), ___o, (_new)); \
 217:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 219:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 220:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 221:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 222:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 223:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_release)
ARM GAS  /tmp/ccl8in31.s 			page 37


 224:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release arch_try_cmpxchg_release
 225:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 226:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release(...) \
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg, __VA_ARGS__)
 228:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release arch_try_cmpxchg
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release(_ptr, _oldp, _new) \
 232:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 233:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 234:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_release((_ptr), ___o, (_new)); \
 235:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 236:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 237:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 238:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 239:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 240:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 241:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_relaxed)
 242:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed arch_try_cmpxchg_relaxed
 243:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 244:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed arch_try_cmpxchg
 245:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 246:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed(_ptr, _oldp, _new) \
 247:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 248:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 249:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_relaxed((_ptr), ___o, (_new)); \
 250:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 251:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 252:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 253:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 254:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 255:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 256:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64)
 257:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64 arch_try_cmpxchg64
 258:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 259:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64(...) \
 260:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg64, __VA_ARGS__)
 261:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 262:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64(_ptr, _oldp, _new) \
 263:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 264:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 265:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64((_ptr), ___o, (_new)); \
 266:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 267:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 268:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 269:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 270:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 271:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 272:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_acquire)
 273:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire arch_try_cmpxchg64_acquire
 274:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 275:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire(...) \
 276:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg64, __VA_ARGS__)
 277:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 278:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire arch_try_cmpxchg64
 279:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 280:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire(_ptr, _oldp, _new) \
ARM GAS  /tmp/ccl8in31.s 			page 38


 281:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 282:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 283:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_acquire((_ptr), ___o, (_new)); \
 284:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 285:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 286:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 287:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 288:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 289:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 290:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_release)
 291:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release arch_try_cmpxchg64_release
 292:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 293:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release(...) \
 294:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg64, __VA_ARGS__)
 295:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 296:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release arch_try_cmpxchg64
 297:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 298:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release(_ptr, _oldp, _new) \
 299:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 300:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 301:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_release((_ptr), ___o, (_new)); \
 302:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 303:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 304:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 305:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 306:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 307:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 308:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_relaxed)
 309:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed arch_try_cmpxchg64_relaxed
 310:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 311:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed arch_try_cmpxchg64
 312:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 313:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed(_ptr, _oldp, _new) \
 314:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 315:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 316:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_relaxed((_ptr), ___o, (_new)); \
 317:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 318:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 319:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 320:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 321:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 322:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 323:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128)
 324:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128 arch_try_cmpxchg128
 325:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 326:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128(...) \
 327:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg128, __VA_ARGS__)
 328:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 329:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128(_ptr, _oldp, _new) \
 330:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 331:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 332:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128((_ptr), ___o, (_new)); \
 333:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 334:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 335:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 336:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 337:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccl8in31.s 			page 39


 338:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 339:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_acquire)
 340:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire arch_try_cmpxchg128_acquire
 341:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 342:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire(...) \
 343:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg128, __VA_ARGS__)
 344:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 345:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire arch_try_cmpxchg128
 346:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 347:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire(_ptr, _oldp, _new) \
 348:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 349:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 350:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_acquire((_ptr), ___o, (_new)); \
 351:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 352:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 353:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 354:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 355:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 356:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 357:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_release)
 358:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release arch_try_cmpxchg128_release
 359:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 360:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release(...) \
 361:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg128, __VA_ARGS__)
 362:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 363:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release arch_try_cmpxchg128
 364:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 365:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release(_ptr, _oldp, _new) \
 366:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 367:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 368:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_release((_ptr), ___o, (_new)); \
 369:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 370:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 371:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 372:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 373:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 374:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 375:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_relaxed)
 376:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed arch_try_cmpxchg128_relaxed
 377:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 378:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed arch_try_cmpxchg128
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed(_ptr, _oldp, _new) \
 381:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 382:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_relaxed((_ptr), ___o, (_new)); \
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 385:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 386:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 387:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 388:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 389:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 390:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_local arch_cmpxchg_local
 391:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 392:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg_local
 393:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_local arch_try_cmpxchg_local
 394:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
ARM GAS  /tmp/ccl8in31.s 			page 40


 395:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_local(_ptr, _oldp, _new) \
 396:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 397:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 398:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_local((_ptr), ___o, (_new)); \
 399:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 400:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 401:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 402:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 403:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 404:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 405:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_local arch_cmpxchg64_local
 406:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 407:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg64_local
 408:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_local arch_try_cmpxchg64_local
 409:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 410:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_local(_ptr, _oldp, _new) \
 411:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 412:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 413:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_local((_ptr), ___o, (_new)); \
 414:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 415:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 416:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 417:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 418:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 419:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 420:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_local arch_cmpxchg128_local
 421:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 422:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg128_local
 423:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_local arch_try_cmpxchg128_local
 424:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 425:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_local(_ptr, _oldp, _new) \
 426:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 427:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 428:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_local((_ptr), ___o, (_new)); \
 429:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 430:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 431:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 432:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 433:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 434:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 435:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_cmpxchg arch_sync_cmpxchg
 436:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 437:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_sync_try_cmpxchg
 438:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_try_cmpxchg arch_sync_try_cmpxchg
 439:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 440:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_try_cmpxchg(_ptr, _oldp, _new) \
 441:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** ({ \
 442:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 443:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_sync_cmpxchg((_ptr), ___o, (_new)); \
 444:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 445:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 446:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 447:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** })
 448:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 449:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 450:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 451:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_read() - atomic load with relaxed ordering
ARM GAS  /tmp/ccl8in31.s 			page 41


 452:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 453:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 454:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically loads the value of @v with relaxed ordering.
 455:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 456:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_read() elsewhere.
 457:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 458:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The value loaded from @v.
 459:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 460:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 461:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_read(const atomic_t *v)
 462:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_read(v);
 464:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 465:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 466:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 467:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_read_acquire() - atomic load with acquire ordering
 468:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 469:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 470:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically loads the value of @v with acquire ordering.
 471:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 472:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_read_acquire() elsewhere.
 473:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 474:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The value loaded from @v.
 475:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 476:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 477:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_read_acquire(const atomic_t *v)
 478:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 479:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_read_acquire)
 480:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_read_acquire(v);
 481:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 482:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 483:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 484:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (__native_word(atomic_t)) {
 485:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		ret = smp_load_acquire(&(v)->counter);
 486:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	} else {
 487:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		ret = raw_atomic_read(v);
 488:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		__atomic_acquire_fence();
 489:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	}
 490:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 491:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 492:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 493:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 494:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 495:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 496:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_set() - atomic set with relaxed ordering
 497:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 498:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to assign
 499:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 500:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically sets @v to @i with relaxed ordering.
 501:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 502:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_set() elsewhere.
 503:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 504:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 505:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 506:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 507:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_set(atomic_t *v, int i)
 670              		.loc 6 507 1 view .LVU147
ARM GAS  /tmp/ccl8in31.s 			page 42


 671              	.LBB229:
 508:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 509:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_set(v, i);
 672              		.loc 6 509 2 view .LVU148
 673              		.loc 6 509 2 view .LVU149
 674              	.LBB230:
 675              		.loc 6 509 2 view .LVU150
 676              		.loc 6 509 2 view .LVU151
 677              	.LBE230:
 678              		.loc 6 509 2 discriminator 2 view .LVU152
 679              		.loc 6 509 2 discriminator 2 view .LVU153
 680              		.loc 6 509 2 discriminator 2 view .LVU154
 681 0028 0023     		movs	r3, #0
 682 002a C360     		str	r3, [r0, #12]
 683              		.loc 6 509 2 discriminator 2 view .LVU155
 684              		.loc 6 509 2 discriminator 2 view .LVU156
 685              	.LVL51:
 686              		.loc 6 509 2 is_stmt 0 discriminator 2 view .LVU157
 687              	.LBE229:
 688              	.LBE228:
 689              	.LBE227:
 108:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&dev_inode->list_node);
 690              		.loc 1 108 5 is_stmt 1 view .LVU158
 691 002c 2430     		adds	r0, r0, #36
 692              	.LVL52:
 108:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&dev_inode->list_node);
 693              		.loc 1 108 5 is_stmt 0 view .LVU159
 694 002e FFF7FEFF 		bl	spin_lock_init
 695              	.LVL53:
 109:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&dev_inode->dentry_list_head);
 696              		.loc 1 109 5 is_stmt 1 view .LVU160
 697 0032 04F11406 		add	r6, r4, #20
 698              	.LVL54:
 699              	.LBB231:
 700              	.LBI231:
 701              		.file 7 "/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #ifndef _LINUX_LIST_H
   3:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #define _LINUX_LIST_H
   4:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
   5:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #include <linux/container_of.h>
   6:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #include <linux/types.h>
   7:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #include <linux/stddef.h>
   8:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #include <linux/poison.h>
   9:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #include <linux/const.h>
  10:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  11:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #include <asm/barrier.h>
  12:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #include <linux/rwonce.h>
  13:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
  14:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Circular doubly linked list implementation.
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Some of the internal functions ("__xxx") are useful when
  17:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * manipulating whole lists rather than single entries, as
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * sometimes we already know the next/prev entries and we can
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * generate better code by using them directly rather than
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * using the generic single-entry routines.
  21:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
ARM GAS  /tmp/ccl8in31.s 			page 43


  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  23:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #define LIST_HEAD_INIT(name) { &(name), &(name) }
  24:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  25:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #define LIST_HEAD(name) \
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	struct list_head name = LIST_HEAD_INIT(name)
  27:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  28:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * INIT_LIST_HEAD - Initialize a list_head structure
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @list: list_head structure to be initialized.
  31:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Initializes the list_head to point to itself.  If it is a list header,
  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * the result is an empty list.
  34:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void INIT_LIST_HEAD(struct list_head *list)
 702              		.loc 7 35 20 view .LVU161
 703              	.LBB232:
  36:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->next, list);
 704              		.loc 7 37 2 view .LVU162
 705              		.loc 7 37 2 view .LVU163
 706              	.LBB233:
 707              		.loc 7 37 2 view .LVU164
 708              		.loc 7 37 2 view .LVU165
 709              	.LBE233:
 710              		.loc 7 37 2 discriminator 2 view .LVU166
 711              		.loc 7 37 2 discriminator 2 view .LVU167
 712              		.loc 7 37 2 discriminator 2 view .LVU168
 713 0036 6661     		str	r6, [r4, #20]
 714              		.loc 7 37 2 discriminator 2 view .LVU169
 715              		.loc 7 37 2 discriminator 2 view .LVU170
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 716              		.loc 7 38 2 view .LVU171
 717              		.loc 7 38 2 view .LVU172
 718              	.LBB234:
 719              		.loc 7 38 2 view .LVU173
 720              		.loc 7 38 2 view .LVU174
 721              	.LBE234:
 722              		.loc 7 38 2 discriminator 2 view .LVU175
 723              		.loc 7 38 2 discriminator 2 view .LVU176
 724              		.loc 7 38 2 discriminator 2 view .LVU177
 725 0038 A661     		str	r6, [r4, #24]
 726              		.loc 7 38 2 discriminator 2 view .LVU178
 727              		.loc 7 38 2 discriminator 2 view .LVU179
 728              	.LVL55:
 729              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU180
 730              	.LBE232:
 731              	.LBE231:
 110:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 732              		.loc 1 110 5 is_stmt 1 view .LVU181
 733 003a 04F11C03 		add	r3, r4, #28
 734              	.LVL56:
 735              	.LBB235:
 736              	.LBI235:
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 737              		.loc 7 35 20 view .LVU182
 738              	.LBB236:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
ARM GAS  /tmp/ccl8in31.s 			page 44


 739              		.loc 7 37 2 view .LVU183
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 740              		.loc 7 37 2 view .LVU184
 741              	.LBB237:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 742              		.loc 7 37 2 view .LVU185
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 743              		.loc 7 37 2 view .LVU186
 744              	.LBE237:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 745              		.loc 7 37 2 discriminator 2 view .LVU187
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 746              		.loc 7 37 2 discriminator 2 view .LVU188
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 747              		.loc 7 37 2 discriminator 2 view .LVU189
 748 003e E361     		str	r3, [r4, #28]
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 749              		.loc 7 37 2 discriminator 2 view .LVU190
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 750              		.loc 7 37 2 discriminator 2 view .LVU191
 751              		.loc 7 38 2 view .LVU192
 752              		.loc 7 38 2 view .LVU193
 753              	.LBB238:
 754              		.loc 7 38 2 view .LVU194
 755              		.loc 7 38 2 view .LVU195
 756              	.LBE238:
 757              		.loc 7 38 2 discriminator 2 view .LVU196
 758              		.loc 7 38 2 discriminator 2 view .LVU197
 759              		.loc 7 38 2 discriminator 2 view .LVU198
 760 0040 2362     		str	r3, [r4, #32]
 761              		.loc 7 38 2 discriminator 2 view .LVU199
 762              		.loc 7 38 2 discriminator 2 view .LVU200
 763              	.LVL57:
 764              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU201
 765              	.LBE236:
 766              	.LBE235:
 112:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_add(&dev_inode->list_node,&sb->inode_list_head);
 767              		.loc 1 112 5 is_stmt 1 view .LVU202
 768 0042 2F1D     		adds	r7, r5, #4
 769              	.LVL58:
 112:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_add(&dev_inode->list_node,&sb->inode_list_head);
 770              		.loc 1 112 5 is_stmt 0 view .LVU203
 771 0044 3846     		mov	r0, r7
 772 0046 FFF7FEFF 		bl	spin_lock
 773              	.LVL59:
 113:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_unlock(&sb->lock);
 774              		.loc 1 113 5 is_stmt 1 view .LVU204
 775 004a 05F11802 		add	r2, r5, #24
 776              	.LVL60:
 777              	.LBB239:
 778              	.LBI239:
  39:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
  40:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  41:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #ifdef CONFIG_LIST_HARDENED
  42:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  43:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #ifdef CONFIG_DEBUG_LIST
  44:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** # define __list_valid_slowpath
ARM GAS  /tmp/ccl8in31.s 			page 45


  45:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #else
  46:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** # define __list_valid_slowpath __cold __preserve_most
  47:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #endif
  48:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  49:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
  50:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Performs the full set of list corruption checks before __list_add().
  51:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * On list corruption reports a warning, and returns false.
  52:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
  53:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** extern bool __list_valid_slowpath __list_add_valid_or_report(struct list_head *new,
  54:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 							     struct list_head *prev,
  55:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 							     struct list_head *next);
  56:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  57:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
  58:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Performs list corruption checks before __list_add(). Returns false if a
  59:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * corruption is detected, true otherwise.
  60:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
  61:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * With CONFIG_LIST_HARDENED only, performs minimal list integrity checking
  62:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * inline to catch non-faulting corruptions, and only if a corruption is
  63:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * detected calls the reporting function __list_add_valid_or_report().
  64:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
  65:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static __always_inline bool __list_add_valid(struct list_head *new,
  66:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 					     struct list_head *prev,
  67:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 					     struct list_head *next)
  68:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
  69:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	bool ret = true;
  70:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  71:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	if (!IS_ENABLED(CONFIG_DEBUG_LIST)) {
  72:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		/*
  73:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * With the hardening version, elide checking if next and prev
  74:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * are NULL, since the immediate dereference of them below would
  75:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * result in a fault if NULL.
  76:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 *
  77:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * With the reduced set of checks, we can afford to inline the
  78:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * checks, which also gives the compiler a chance to elide some
  79:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * of them completely if they can be proven at compile-time. If
  80:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * one of the pre-conditions does not hold, the slow-path will
  81:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * show a report which pre-condition failed.
  82:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 */
  83:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		if (likely(next->prev == prev && prev->next == next && new != prev && new != next))
  84:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 			return true;
  85:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		ret = false;
  86:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	}
  87:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  88:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	ret &= __list_add_valid_or_report(new, prev, next);
  89:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return ret;
  90:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
  91:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  92:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
  93:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Performs the full set of list corruption checks before __list_del_entry().
  94:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * On list corruption reports a warning, and returns false.
  95:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
  96:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** extern bool __list_valid_slowpath __list_del_entry_valid_or_report(struct list_head *entry);
  97:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
  98:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
  99:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Performs list corruption checks before __list_del_entry(). Returns false if a
 100:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * corruption is detected, true otherwise.
 101:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 46


 102:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * With CONFIG_LIST_HARDENED only, performs minimal list integrity checking
 103:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * inline to catch non-faulting corruptions, and only if a corruption is
 104:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * detected calls the reporting function __list_del_entry_valid_or_report().
 105:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 106:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static __always_inline bool __list_del_entry_valid(struct list_head *entry)
 107:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 108:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	bool ret = true;
 109:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 110:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	if (!IS_ENABLED(CONFIG_DEBUG_LIST)) {
 111:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		struct list_head *prev = entry->prev;
 112:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		struct list_head *next = entry->next;
 113:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 114:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		/*
 115:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * With the hardening version, elide checking if next and prev
 116:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * are NULL, LIST_POISON1 or LIST_POISON2, since the immediate
 117:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 * dereference of them below would result in a fault.
 118:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		 */
 119:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		if (likely(prev->next == entry && next->prev == entry))
 120:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 			return true;
 121:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		ret = false;
 122:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	}
 123:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 124:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	ret &= __list_del_entry_valid_or_report(entry);
 125:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return ret;
 126:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 127:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #else
 128:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline bool __list_add_valid(struct list_head *new,
 129:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 				struct list_head *prev,
 130:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 				struct list_head *next)
 131:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 132:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return true;
 133:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 134:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline bool __list_del_entry_valid(struct list_head *entry)
 135:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 136:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return true;
 137:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 138:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** #endif
 139:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 140:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
 141:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Insert a new entry between two known consecutive entries.
 142:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 143:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * This is only for internal list manipulation where we know
 144:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * the prev/next entries already!
 145:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 146:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void __list_add(struct list_head *new,
 147:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 			      struct list_head *prev,
 148:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 			      struct list_head *next)
 149:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 150:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	if (!__list_add_valid(new, prev, next))
 151:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 152:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	next->prev = new;
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->next = next;
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->prev = prev;
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 157:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 158:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
ARM GAS  /tmp/ccl8in31.s 			page 47


 159:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 160:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_add - add a new entry
 161:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @new: new entry to be added
 162:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: list head to add it after
 163:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 164:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Insert a new entry after the specified head.
 165:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * This is good for implementing stacks.
 166:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 167:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_add(struct list_head *new, struct list_head *head)
 779              		.loc 7 167 20 view .LVU205
 780              	.LBB240:
 168:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 169:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_add(new, head, head->next);
 781              		.loc 7 169 2 view .LVU206
 782 004e AB69     		ldr	r3, [r5, #24]
 783              	.LVL61:
 784              	.LBB241:
 785              	.LBI241:
 146:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 			      struct list_head *prev,
 786              		.loc 7 146 20 view .LVU207
 787              	.LBB242:
 150:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 788              		.loc 7 150 2 view .LVU208
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->next = next;
 789              		.loc 7 153 2 view .LVU209
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->next = next;
 790              		.loc 7 153 13 is_stmt 0 view .LVU210
 791 0050 5E60     		str	r6, [r3, #4]
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->prev = prev;
 792              		.loc 7 154 2 is_stmt 1 view .LVU211
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->prev = prev;
 793              		.loc 7 154 12 is_stmt 0 view .LVU212
 794 0052 6361     		str	r3, [r4, #20]
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 795              		.loc 7 155 2 is_stmt 1 view .LVU213
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 796              		.loc 7 155 12 is_stmt 0 view .LVU214
 797 0054 A261     		str	r2, [r4, #24]
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 798              		.loc 7 156 2 is_stmt 1 view .LVU215
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 799              		.loc 7 156 2 view .LVU216
 800              	.LBB243:
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 801              		.loc 7 156 2 view .LVU217
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 802              		.loc 7 156 2 view .LVU218
 803              	.LBE243:
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 804              		.loc 7 156 2 discriminator 2 view .LVU219
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 805              		.loc 7 156 2 discriminator 2 view .LVU220
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 806              		.loc 7 156 2 discriminator 2 view .LVU221
 807 0056 AE61     		str	r6, [r5, #24]
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 808              		.loc 7 156 2 discriminator 3 view .LVU222
ARM GAS  /tmp/ccl8in31.s 			page 48


 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 809              		.loc 7 156 2 discriminator 3 view .LVU223
 810              	.LVL62:
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 811              		.loc 7 156 2 is_stmt 0 discriminator 3 view .LVU224
 812              	.LBE242:
 813              	.LBE241:
 814              	.LBE240:
 815              	.LBE239:
 114:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 816              		.loc 1 114 5 is_stmt 1 view .LVU225
 817 0058 3846     		mov	r0, r7
 818 005a FFF7FEFF 		bl	spin_unlock
 819              	.LVL63:
 116:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 820              		.loc 1 116 5 view .LVU226
 821              	.L48:
 117:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_inode_put(struct devfs_inode *node){
 822              		.loc 1 117 1 is_stmt 0 view .LVU227
 823 005e 2046     		mov	r0, r4
 824 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 825              	.LVL64:
 826              	.L50:
  99:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dev_inode = kmalloc(sizeof(struct devfs_inode),GFP_KERNEL);
 827              		.loc 1 99 28 discriminator 1 view .LVU228
 828 0062 0C46     		mov	r4, r1
 829 0064 FBE7     		b	.L48
 830              	.L53:
 831 0066 00BF     		.align	2
 832              	.L52:
 833 0068 4E61BC00 		.word	12345678
 834              		.cfi_endproc
 835              	.LFE1042:
 837              		.section	.text.devfs_get_inode,"ax",%progbits
 838              		.align	1
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 843              	devfs_get_inode:
 844              	.LVL65:
 845              	.LFB1056:
 365:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dev_node == NULL) return NULL;
 846              		.loc 1 365 1 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 365:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dev_node == NULL) return NULL;
 850              		.loc 1 365 1 is_stmt 0 view .LVU230
 851 0000 10B5     		push	{r4, lr}
 852              	.LCFI11:
 853              		.cfi_def_cfa_offset 8
 854              		.cfi_offset 4, -8
 855              		.cfi_offset 14, -4
 366:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 856              		.loc 1 366 5 is_stmt 1 view .LVU231
 366:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 857              		.loc 1 366 7 is_stmt 0 view .LVU232
ARM GAS  /tmp/ccl8in31.s 			page 49


 858 0002 0446     		mov	r4, r0
 859 0004 58B1     		cbz	r0, .L54
 367:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(inode == NULL) return NULL;  
 860              		.loc 1 367 5 is_stmt 1 view .LVU233
 367:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(inode == NULL) return NULL;  
 861              		.loc 1 367 28 is_stmt 0 view .LVU234
 862 0006 0846     		mov	r0, r1
 863              	.LVL66:
 367:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(inode == NULL) return NULL;  
 864              		.loc 1 367 28 view .LVU235
 865 0008 FFF7FEFF 		bl	new_inode
 866              	.LVL67:
 368:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_mode    = dev_node->i_mode;
 867              		.loc 1 368 5 is_stmt 1 view .LVU236
 368:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_mode    = dev_node->i_mode;
 868              		.loc 1 368 7 is_stmt 0 view .LVU237
 869 000c 38B1     		cbz	r0, .L54
 369:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop     = dev_node->i_fop;
 870              		.loc 1 369 5 is_stmt 1 view .LVU238
 369:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop     = dev_node->i_fop;
 871              		.loc 1 369 32 is_stmt 0 view .LVU239
 872 000e 6368     		ldr	r3, [r4, #4]
 369:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop     = dev_node->i_fop;
 873              		.loc 1 369 22 view .LVU240
 874 0010 0380     		strh	r3, [r0]	@ movhi
 370:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_op      = &devfs_inode_operation;
 875              		.loc 1 370 5 is_stmt 1 view .LVU241
 370:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_op      = &devfs_inode_operation;
 876              		.loc 1 370 32 is_stmt 0 view .LVU242
 877 0012 2369     		ldr	r3, [r4, #16]
 370:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_op      = &devfs_inode_operation;
 878              		.loc 1 370 22 view .LVU243
 879 0014 C367     		str	r3, [r0, #124]
 371:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_private = dev_node;
 880              		.loc 1 371 5 is_stmt 1 view .LVU244
 371:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_private = dev_node;
 881              		.loc 1 371 22 is_stmt 0 view .LVU245
 882 0016 024B     		ldr	r3, .L58
 883 0018 0361     		str	r3, [r0, #16]
 372:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return inode;
 884              		.loc 1 372 5 is_stmt 1 view .LVU246
 372:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return inode;
 885              		.loc 1 372 22 is_stmt 0 view .LVU247
 886 001a C0F88440 		str	r4, [r0, #132]
 373:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 887              		.loc 1 373 5 is_stmt 1 view .LVU248
 888              	.LVL68:
 889              	.L54:
 374:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 890              		.loc 1 374 1 is_stmt 0 view .LVU249
 891 001e 10BD     		pop	{r4, pc}
 892              	.LVL69:
 893              	.L59:
 374:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 894              		.loc 1 374 1 view .LVU250
 895              		.align	2
 896              	.L58:
ARM GAS  /tmp/ccl8in31.s 			page 50


 897 0020 00000000 		.word	devfs_inode_operation
 898              		.cfi_endproc
 899              	.LFE1056:
 901              		.section	.text.devfs_getattr,"ax",%progbits
 902              		.align	1
 903              		.syntax unified
 904              		.thumb
 905              		.thumb_func
 907              	devfs_getattr:
 908              	.LVL70:
 909              	.LFB1069:
 554:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct dentry *d = path->dentry;
 910              		.loc 1 554 1 is_stmt 1 view -0
 911              		.cfi_startproc
 912              		@ args = 4, pretend = 0, frame = 0
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 554:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct dentry *d = path->dentry;
 914              		.loc 1 554 1 is_stmt 0 view .LVU252
 915 0000 38B5     		push	{r3, r4, r5, lr}
 916              	.LCFI12:
 917              		.cfi_def_cfa_offset 16
 918              		.cfi_offset 3, -16
 919              		.cfi_offset 4, -12
 920              		.cfi_offset 5, -8
 921              		.cfi_offset 14, -4
 555:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = d->d_fsdata;
 922              		.loc 1 555 5 is_stmt 1 view .LVU253
 555:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = d->d_fsdata;
 923              		.loc 1 555 20 is_stmt 0 view .LVU254
 924 0002 4B68     		ldr	r3, [r1, #4]
 925              	.LVL71:
 556:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *inode;
 926              		.loc 1 556 5 is_stmt 1 view .LVU255
 556:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *inode;
 927              		.loc 1 556 26 is_stmt 0 view .LVU256
 928 0004 5B6D     		ldr	r3, [r3, #84]
 929              	.LVL72:
 557:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 930              		.loc 1 557 5 is_stmt 1 view .LVU257
 559:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return -ENOENT;
 931              		.loc 1 559 5 view .LVU258
 559:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return -ENOENT;
 932              		.loc 1 559 8 is_stmt 0 view .LVU259
 933 0006 002B     		cmp	r3, #0
 934 0008 31D0     		beq	.L62
 935 000a 1446     		mov	r4, r2
 559:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return -ENOENT;
 936              		.loc 1 559 26 discriminator 1 view .LVU260
 937 000c 9B68     		ldr	r3, [r3, #8]
 938              	.LVL73:
 559:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return -ENOENT;
 939              		.loc 1 559 15 discriminator 1 view .LVU261
 940 000e 8BB3     		cbz	r3, .L63
 561:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->dev  = MKDEV(inode->major, 0);
 941              		.loc 1 561 5 is_stmt 1 view .LVU262
 561:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->dev  = MKDEV(inode->major, 0);
 942              		.loc 1 561 23 is_stmt 0 view .LVU263
ARM GAS  /tmp/ccl8in31.s 			page 51


 943 0010 5A68     		ldr	r2, [r3, #4]
 944              	.LVL74:
 561:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->dev  = MKDEV(inode->major, 0);
 945              		.loc 1 561 16 view .LVU264
 946 0012 A280     		strh	r2, [r4, #4]	@ movhi
 947              	.LVL75:
 562:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->ino  = (unsigned long)inode;  
 948              		.loc 1 562 5 is_stmt 1 view .LVU265
 562:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->ino  = (unsigned long)inode;  
 949              		.loc 1 562 18 is_stmt 0 view .LVU266
 950 0014 9A68     		ldr	r2, [r3, #8]
 951 0016 1205     		lsls	r2, r2, #20
 562:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->ino  = (unsigned long)inode;  
 952              		.loc 1 562 16 view .LVU267
 953 0018 E261     		str	r2, [r4, #28]
 563:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 954              		.loc 1 563 5 is_stmt 1 view .LVU268
 563:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 955              		.loc 1 563 16 is_stmt 0 view .LVU269
 956 001a A361     		str	r3, [r4, #24]
 564:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->size  = 0; 
 957              		.loc 1 564 5 is_stmt 1 view .LVU270
 958              	.LVL76:
 959              	.LBB244:
 960              	.LBI244:
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 961              		.loc 5 30 1 view .LVU271
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read(v);
 962              		.loc 5 32 2 view .LVU272
  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 963              		.loc 5 33 2 view .LVU273
 964              	.LBB245:
 965              	.LBI245:
 461:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 966              		.loc 6 461 1 view .LVU274
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 967              		.loc 6 463 2 view .LVU275
 968              	.LBB246:
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 969              		.loc 6 463 9 view .LVU276
 970              	.LBB247:
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 971              		.loc 6 463 9 view .LVU277
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 972              		.loc 6 463 9 view .LVU278
 973              	.LBE247:
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 974              		.loc 6 463 9 discriminator 2 view .LVU279
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 975              		.loc 6 463 9 discriminator 2 view .LVU280
 976 001c DB68     		ldr	r3, [r3, #12]
 977              	.LVL77:
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 978              		.loc 6 463 9 is_stmt 0 discriminator 2 view .LVU281
 979              	.LBE246:
 980              	.LBE245:
 981              	.LBE244:
ARM GAS  /tmp/ccl8in31.s 			page 52


 564:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->size  = 0; 
 982              		.loc 1 564 17 discriminator 1 view .LVU282
 983 001e A360     		str	r3, [r4, #8]
 565:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 984              		.loc 1 565 5 is_stmt 1 view .LVU283
 565:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 985              		.loc 1 565 17 is_stmt 0 view .LVU284
 986 0020 0022     		movs	r2, #0
 987 0022 0023     		movs	r3, #0
 988 0024 C4E90C23 		strd	r2, [r4, #48]
 566:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 989              		.loc 1 566 5 is_stmt 1 view .LVU285
 566:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 990              		.loc 1 566 27 is_stmt 0 view .LVU286
 991 0028 FFF7FEFF 		bl	ktime_get
 992              	.LVL78:
 566:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 993              		.loc 1 566 34 discriminator 1 view .LVU287
 994 002c 134D     		ldr	r5, .L65
 995 002e 2B68     		ldr	r3, [r5]
 996 0030 B0FBF3F0 		udiv	r0, r0, r3
 566:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 997              		.loc 1 566 25 discriminator 1 view .LVU288
 998 0034 E063     		str	r0, [r4, #60]
 567:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mtime = stat->atime;
 999              		.loc 1 567 5 is_stmt 1 view .LVU289
 567:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mtime = stat->atime;
 1000              		.loc 1 567 27 is_stmt 0 view .LVU290
 1001 0036 FFF7FEFF 		bl	ktime_get
 1002              	.LVL79:
 567:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mtime = stat->atime;
 1003              		.loc 1 567 34 discriminator 1 view .LVU291
 1004 003a 2B68     		ldr	r3, [r5]
 1005 003c B0FBF3F2 		udiv	r2, r0, r3
 1006 0040 03FB1200 		mls	r0, r3, r2, r0
 567:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mtime = stat->atime;
 1007              		.loc 1 567 25 discriminator 1 view .LVU292
 1008 0044 A063     		str	r0, [r4, #56]
 568:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->ctime = stat->atime;
 1009              		.loc 1 568 5 is_stmt 1 view .LVU293
 568:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->ctime = stat->atime;
 1010              		.loc 1 568 17 is_stmt 0 view .LVU294
 1011 0046 04F14002 		add	r2, r4, #64
 1012 004a 04F13803 		add	r3, r4, #56
 1013 004e 93E80300 		ldm	r3, {r0, r1}
 1014 0052 82E80300 		stm	r2, {r0, r1}
 569:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->blksize = PAGE_SIZE;
 1015              		.loc 1 569 5 is_stmt 1 view .LVU295
 569:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->blksize = PAGE_SIZE;
 1016              		.loc 1 569 17 is_stmt 0 view .LVU296
 1017 0056 04F14802 		add	r2, r4, #72
 1018 005a 93E80300 		ldm	r3, {r0, r1}
 1019 005e 82E80300 		stm	r2, {r0, r1}
 570:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->blocks  = 0;
 1020              		.loc 1 570 5 is_stmt 1 view .LVU297
 570:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->blocks  = 0;
 1021              		.loc 1 570 19 is_stmt 0 view .LVU298
ARM GAS  /tmp/ccl8in31.s 			page 53


 1022 0062 4FF48053 		mov	r3, #4096
 1023 0066 E360     		str	r3, [r4, #12]
 571:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 1024              		.loc 1 571 5 is_stmt 1 view .LVU299
 571:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 1025              		.loc 1 571 19 is_stmt 0 view .LVU300
 1026 0068 0020     		movs	r0, #0
 1027 006a A065     		str	r0, [r4, #88]
 572:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1028              		.loc 1 572 5 is_stmt 1 view .LVU301
 1029              	.LVL80:
 1030              	.L60:
 573:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1031              		.loc 1 573 1 is_stmt 0 view .LVU302
 1032 006c 38BD     		pop	{r3, r4, r5, pc}
 1033              	.LVL81:
 1034              	.L62:
 560:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mode = inode->i_mode;
 1035              		.loc 1 560 12 view .LVU303
 1036 006e 6FF00100 		mvn	r0, #1
 1037              	.LVL82:
 560:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mode = inode->i_mode;
 1038              		.loc 1 560 12 view .LVU304
 1039 0072 FBE7     		b	.L60
 1040              	.LVL83:
 1041              	.L63:
 560:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mode = inode->i_mode;
 1042              		.loc 1 560 12 view .LVU305
 1043 0074 6FF00100 		mvn	r0, #1
 1044              	.LVL84:
 560:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     stat->mode = inode->i_mode;
 1045              		.loc 1 560 12 view .LVU306
 1046 0078 F8E7     		b	.L60
 1047              	.L66:
 1048 007a 00BF     		.align	2
 1049              	.L65:
 1050 007c 00000000 		.word	HZ
 1051              		.cfi_endproc
 1052              	.LFE1069:
 1054              		.section	.text.devfs_lookup,"ax",%progbits
 1055              		.align	1
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1060              	devfs_lookup:
 1061              	.LVL85:
 1062              	.LFB1052:
 237:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry_inode == NULL) return NULL;
 1063              		.loc 1 237 1 is_stmt 1 view -0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 237:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry_inode == NULL) return NULL;
 1067              		.loc 1 237 1 is_stmt 0 view .LVU308
 1068 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1069              	.LCFI13:
 1070              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccl8in31.s 			page 54


 1071              		.cfi_offset 3, -24
 1072              		.cfi_offset 4, -20
 1073              		.cfi_offset 5, -16
 1074              		.cfi_offset 6, -12
 1075              		.cfi_offset 7, -8
 1076              		.cfi_offset 14, -4
 238:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1077              		.loc 1 238 5 is_stmt 1 view .LVU309
 238:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1078              		.loc 1 238 7 is_stmt 0 view .LVU310
 1079 0002 0546     		mov	r5, r0
 1080 0004 20B3     		cbz	r0, .L72
 1081 0006 0E46     		mov	r6, r1
 239:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* pos;
 1082              		.loc 1 239 5 is_stmt 1 view .LVU311
 239:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* pos;
 1083              		.loc 1 239 23 is_stmt 0 view .LVU312
 1084 0008 4368     		ldr	r3, [r0, #4]
 239:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* pos;
 1085              		.loc 1 239 32 view .LVU313
 1086 000a 03F47043 		and	r3, r3, #61440
 239:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* pos;
 1087              		.loc 1 239 8 view .LVU314
 1088 000e B3F5804F 		cmp	r3, #16384
 1089 0012 1FD1     		bne	.L73
 240:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock(&dentry_inode->lock);
 1090              		.loc 1 240 5 is_stmt 1 view .LVU315
 241:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 1091              		.loc 1 241 5 view .LVU316
 1092 0014 00F12407 		add	r7, r0, #36
 1093 0018 3846     		mov	r0, r7
 1094              	.LVL86:
 241:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 1095              		.loc 1 241 5 is_stmt 0 view .LVU317
 1096 001a FFF7FEFF 		bl	spin_lock
 1097              	.LVL87:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1098              		.loc 1 242 5 is_stmt 1 view .LVU318
 1099              	.LBB248:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1100              		.loc 1 242 5 view .LVU319
 1101 001e EC69     		ldr	r4, [r5, #28]
 1102              	.LVL88:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1103              		.loc 1 242 5 view .LVU320
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1104              		.loc 1 242 5 view .LVU321
 1105 0020 0C3C     		subs	r4, r4, #12
 1106              	.LVL89:
 1107              	.L69:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1108              		.loc 1 242 5 is_stmt 0 view .LVU322
 1109              	.LBE248:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1110              		.loc 1 242 5 is_stmt 1 discriminator 1 view .LVU323
 1111 0022 04F10C03 		add	r3, r4, #12
 1112 0026 05F11C02 		add	r2, r5, #28
ARM GAS  /tmp/ccl8in31.s 			page 55


 1113 002a 9342     		cmp	r3, r2
 1114 002c 0BD0     		beq	.L75
 243:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             spin_unlock(&dentry_inode->lock);
 1115              		.loc 1 243 9 view .LVU324
 243:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             spin_unlock(&dentry_inode->lock);
 1116              		.loc 1 243 13 is_stmt 0 view .LVU325
 1117 002e 3146     		mov	r1, r6
 1118 0030 6068     		ldr	r0, [r4, #4]
 1119 0032 FFF7FEFF 		bl	strcmp
 1120              	.LVL90:
 243:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             spin_unlock(&dentry_inode->lock);
 1121              		.loc 1 243 12 discriminator 1 view .LVU326
 1122 0036 10B1     		cbz	r0, .L76
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1123              		.loc 1 242 5 is_stmt 1 discriminator 2 view .LVU327
 1124              	.LBB249:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1125              		.loc 1 242 5 discriminator 2 view .LVU328
 1126 0038 E468     		ldr	r4, [r4, #12]
 1127              	.LVL91:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1128              		.loc 1 242 5 discriminator 2 view .LVU329
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1129              		.loc 1 242 5 discriminator 2 view .LVU330
 1130 003a 0C3C     		subs	r4, r4, #12
 1131              	.LVL92:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1132              		.loc 1 242 5 is_stmt 0 discriminator 2 view .LVU331
 1133 003c F1E7     		b	.L69
 1134              	.LVL93:
 1135              	.L76:
 242:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (strcmp(pos->name, name) == 0) {
 1136              		.loc 1 242 5 discriminator 2 view .LVU332
 1137              	.LBE249:
 244:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             return pos;
 1138              		.loc 1 244 13 is_stmt 1 view .LVU333
 1139 003e 3846     		mov	r0, r7
 1140 0040 FFF7FEFF 		bl	spin_unlock
 1141              	.LVL94:
 245:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 1142              		.loc 1 245 13 view .LVU334
 245:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 1143              		.loc 1 245 20 is_stmt 0 view .LVU335
 1144 0044 07E0     		b	.L67
 1145              	.L75:
 248:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
 1146              		.loc 1 248 5 is_stmt 1 view .LVU336
 1147 0046 3846     		mov	r0, r7
 1148 0048 FFF7FEFF 		bl	spin_unlock
 1149              	.LVL95:
 249:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1150              		.loc 1 249 5 view .LVU337
 249:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1151              		.loc 1 249 12 is_stmt 0 view .LVU338
 1152 004c 0024     		movs	r4, #0
 1153              	.LVL96:
 249:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
ARM GAS  /tmp/ccl8in31.s 			page 56


 1154              		.loc 1 249 12 view .LVU339
 1155 004e 02E0     		b	.L67
 1156              	.LVL97:
 1157              	.L72:
 238:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1158              		.loc 1 238 37 discriminator 1 view .LVU340
 1159 0050 0446     		mov	r4, r0
 1160 0052 00E0     		b	.L67
 1161              	.L73:
 239:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* pos;
 1162              		.loc 1 239 62 discriminator 1 view .LVU341
 1163 0054 0024     		movs	r4, #0
 1164              	.LVL98:
 1165              	.L67:
 250:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1166              		.loc 1 250 1 view .LVU342
 1167 0056 2046     		mov	r0, r4
 1168 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 250:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1169              		.loc 1 250 1 view .LVU343
 1170              		.cfi_endproc
 1171              	.LFE1052:
 1173              		.section	.text.devfs_vfs_lookup,"ax",%progbits
 1174              		.align	1
 1175              		.syntax unified
 1176              		.thumb
 1177              		.thumb_func
 1179              	devfs_vfs_lookup:
 1180              	.LVL99:
 1181              	.LFB1062:
 469:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 1182              		.loc 1 469 101 is_stmt 1 view -0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 0, uses_anonymous_args = 0
 469:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 1186              		.loc 1 469 101 is_stmt 0 view .LVU345
 1187 0000 70B5     		push	{r4, r5, r6, lr}
 1188              	.LCFI14:
 1189              		.cfi_def_cfa_offset 16
 1190              		.cfi_offset 4, -16
 1191              		.cfi_offset 5, -12
 1192              		.cfi_offset 6, -8
 1193              		.cfi_offset 14, -4
 1194 0002 0646     		mov	r6, r0
 1195 0004 0D46     		mov	r5, r1
 471:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *name = dentry->d_name.name;                           
 1196              		.loc 1 471 5 is_stmt 1 view .LVU346
 1197              	.LVL100:
 472:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *pos;    
 1198              		.loc 1 472 5 view .LVU347
 473:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     pos = devfs_lookup(dir_inode,name);       //Êü•ËØ¢Ëé∑Âæódentry
 1199              		.loc 1 473 5 view .LVU348
 474:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(pos == NULL) return NULL;
 1200              		.loc 1 474 5 view .LVU349
 474:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(pos == NULL) return NULL;
 1201              		.loc 1 474 11 is_stmt 0 view .LVU350
ARM GAS  /tmp/ccl8in31.s 			page 57


 1202 0006 8969     		ldr	r1, [r1, #24]
 1203              	.LVL101:
 474:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(pos == NULL) return NULL;
 1204              		.loc 1 474 11 view .LVU351
 1205 0008 D0F88400 		ldr	r0, [r0, #132]
 1206              	.LVL102:
 474:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(pos == NULL) return NULL;
 1207              		.loc 1 474 11 view .LVU352
 1208 000c FFF7FEFF 		bl	devfs_lookup
 1209              	.LVL103:
 475:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1210              		.loc 1 475 5 is_stmt 1 view .LVU353
 475:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1211              		.loc 1 475 7 is_stmt 0 view .LVU354
 1212 0010 0446     		mov	r4, r0
 1213 0012 78B1     		cbz	r0, .L77
 477:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1214              		.loc 1 477 5 is_stmt 1 view .LVU355
 477:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1215              		.loc 1 477 9 is_stmt 0 view .LVU356
 1216 0014 0146     		mov	r1, r0
 1217 0016 2846     		mov	r0, r5
 1218              	.LVL104:
 477:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1219              		.loc 1 477 9 view .LVU357
 1220 0018 FFF7FEFF 		bl	devfs_get_dentry
 1221              	.LVL105:
 477:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1222              		.loc 1 477 7 discriminator 1 view .LVU358
 1223 001c 60B1     		cbz	r0, .L79
 480:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(find_inode == NULL)
 1224              		.loc 1 480 5 is_stmt 1 view .LVU359
 480:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(find_inode == NULL)
 1225              		.loc 1 480 33 is_stmt 0 view .LVU360
 1226 001e 7169     		ldr	r1, [r6, #20]
 1227 0020 A068     		ldr	r0, [r4, #8]
 1228 0022 FFF7FEFF 		bl	devfs_get_inode
 1229              	.LVL106:
 481:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1230              		.loc 1 481 5 is_stmt 1 view .LVU361
 481:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1231              		.loc 1 481 7 is_stmt 0 view .LVU362
 1232 0026 0446     		mov	r4, r0
 1233              	.LVL107:
 481:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1234              		.loc 1 481 7 view .LVU363
 1235 0028 20B1     		cbz	r0, .L77
 484:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
 1236              		.loc 1 484 5 is_stmt 1 view .LVU364
 484:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
 1237              		.loc 1 484 12 is_stmt 0 view .LVU365
 1238 002a 0146     		mov	r1, r0
 1239 002c 2846     		mov	r0, r5
 1240              	.LVL108:
 484:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
 1241              		.loc 1 484 12 view .LVU366
 1242 002e FFF7FEFF 		bl	d_add
ARM GAS  /tmp/ccl8in31.s 			page 58


 1243              	.LVL109:
 484:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return NULL;
 1244              		.loc 1 484 12 view .LVU367
 1245 0032 0446     		mov	r4, r0
 1246              	.LVL110:
 1247              	.L77:
 486:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1248              		.loc 1 486 1 view .LVU368
 1249 0034 2046     		mov	r0, r4
 1250 0036 70BD     		pop	{r4, r5, r6, pc}
 1251              	.LVL111:
 1252              	.L79:
 478:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1253              		.loc 1 478 16 view .LVU369
 1254 0038 0446     		mov	r4, r0
 1255              	.LVL112:
 478:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1256              		.loc 1 478 16 view .LVU370
 1257 003a FBE7     		b	.L77
 1258              		.cfi_endproc
 1259              	.LFE1062:
 1261              		.section	.text.devfs_get_vfs_superblock,"ax",%progbits
 1262              		.align	1
 1263              		.syntax unified
 1264              		.thumb
 1265              		.thumb_func
 1267              	devfs_get_vfs_superblock:
 1268              	.LVL113:
 1269              	.LFB1054:
 349:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb == NULL) return NULL;
 1270              		.loc 1 349 1 is_stmt 1 view -0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 0
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 349:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb == NULL) return NULL;
 1274              		.loc 1 349 1 is_stmt 0 view .LVU372
 1275 0000 10B5     		push	{r4, lr}
 1276              	.LCFI15:
 1277              		.cfi_def_cfa_offset 8
 1278              		.cfi_offset 4, -8
 1279              		.cfi_offset 14, -4
 350:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 1280              		.loc 1 350 5 is_stmt 1 view .LVU373
 350:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 1281              		.loc 1 350 7 is_stmt 0 view .LVU374
 1282 0002 0446     		mov	r4, r0
 1283 0004 40B1     		cbz	r0, .L81
 351:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(vsb == NULL) return NULL;
 1284              		.loc 1 351 5 is_stmt 1 view .LVU375
 351:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(vsb == NULL) return NULL;
 1285              		.loc 1 351 33 is_stmt 0 view .LVU376
 1286 0006 0020     		movs	r0, #0
 1287              	.LVL114:
 351:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(vsb == NULL) return NULL;
 1288              		.loc 1 351 33 view .LVU377
 1289 0008 FFF7FEFF 		bl	alloc_super
 1290              	.LVL115:
ARM GAS  /tmp/ccl8in31.s 			page 59


 352:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_fs_info =   sb;
 1291              		.loc 1 352 5 is_stmt 1 view .LVU378
 352:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_fs_info =   sb;
 1292              		.loc 1 352 7 is_stmt 0 view .LVU379
 1293 000c 20B1     		cbz	r0, .L81
 353:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_d_op    =  &devfs_dentry_operation;
 1294              		.loc 1 353 5 is_stmt 1 view .LVU380
 353:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_d_op    =  &devfs_dentry_operation;
 1295              		.loc 1 353 20 is_stmt 0 view .LVU381
 1296 000e 0463     		str	r4, [r0, #48]
 354:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_op      =  &devfs_super_operation;    
 1297              		.loc 1 354 5 is_stmt 1 view .LVU382
 354:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     vsb->s_op      =  &devfs_super_operation;    
 1298              		.loc 1 354 20 is_stmt 0 view .LVU383
 1299 0010 024B     		ldr	r3, .L85
 1300 0012 0367     		str	r3, [r0, #112]
 355:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return vsb;
 1301              		.loc 1 355 5 is_stmt 1 view .LVU384
 355:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return vsb;
 1302              		.loc 1 355 20 is_stmt 0 view .LVU385
 1303 0014 024B     		ldr	r3, .L85+4
 1304 0016 0361     		str	r3, [r0, #16]
 356:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1305              		.loc 1 356 5 is_stmt 1 view .LVU386
 1306              	.LVL116:
 1307              	.L81:
 357:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1308              		.loc 1 357 1 is_stmt 0 view .LVU387
 1309 0018 10BD     		pop	{r4, pc}
 1310              	.LVL117:
 1311              	.L86:
 357:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1312              		.loc 1 357 1 view .LVU388
 1313 001a 00BF     		.align	2
 1314              	.L85:
 1315 001c 00000000 		.word	devfs_dentry_operation
 1316 0020 00000000 		.word	devfs_super_operation
 1317              		.cfi_endproc
 1318              	.LFE1054:
 1320              		.section	.text.devfs_superblock_create,"ax",%progbits
 1321              		.align	1
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1326              	devfs_superblock_create:
 1327              	.LFB1050:
 206:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock*d_sb = kmalloc(sizeof(struct devfs_superblock),GFP_KERNEL);
 1328              		.loc 1 206 1 is_stmt 1 view -0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 0
 1331              		@ frame_needed = 0, uses_anonymous_args = 0
 1332 0000 38B5     		push	{r3, r4, r5, lr}
 1333              	.LCFI16:
 1334              		.cfi_def_cfa_offset 16
 1335              		.cfi_offset 3, -16
 1336              		.cfi_offset 4, -12
 1337              		.cfi_offset 5, -8
ARM GAS  /tmp/ccl8in31.s 			page 60


 1338              		.cfi_offset 14, -4
 207:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(d_sb == NULL){
 1339              		.loc 1 207 5 view .LVU390
 1340              	.LVL118:
 1341              	.LBB250:
 1342              	.LBI250:
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 1343              		.loc 4 379 21 view .LVU391
 1344              	.LBB251:
 1345              		.loc 4 380 2 view .LVU392
 1346              		.loc 4 380 9 is_stmt 0 view .LVU393
 1347 0002 4FF44C61 		mov	r1, #3264
 1348 0006 2020     		movs	r0, #32
 1349 0008 FFF7FEFF 		bl	__smalloc__
 1350              	.LVL119:
 1351              		.loc 4 380 9 view .LVU394
 1352              	.LBE251:
 1353              	.LBE250:
 208:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;        
 1354              		.loc 1 208 5 is_stmt 1 view .LVU395
 208:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;        
 1355              		.loc 1 208 7 is_stmt 0 view .LVU396
 1356 000c 0446     		mov	r4, r0
 1357 000e 20B3     		cbz	r0, .L87
 211:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock_init(&d_sb->lock);
 1358              		.loc 1 211 5 is_stmt 1 view .LVU397
 211:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_lock_init(&d_sb->lock);
 1359              		.loc 1 211 17 is_stmt 0 view .LVU398
 1360 0010 154B     		ldr	r3, .L92
 1361 0012 40F8043B 		str	r3, [r0], #4
 1362              	.LVL120:
 212:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&d_sb->inode_list_head);
 1363              		.loc 1 212 5 is_stmt 1 view .LVU399
 1364 0016 FFF7FEFF 		bl	spin_lock_init
 1365              	.LVL121:
 213:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode* root_inode = devfs_create_empty_inode(d_sb ,&devfs_file_fops,0);
 1366              		.loc 1 213 5 view .LVU400
 1367 001a 04F11803 		add	r3, r4, #24
 1368              	.LVL122:
 1369              	.LBB252:
 1370              	.LBI252:
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 1371              		.loc 7 35 20 view .LVU401
 1372              	.LBB253:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1373              		.loc 7 37 2 view .LVU402
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1374              		.loc 7 37 2 view .LVU403
 1375              	.LBB254:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1376              		.loc 7 37 2 view .LVU404
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1377              		.loc 7 37 2 view .LVU405
 1378              	.LBE254:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1379              		.loc 7 37 2 discriminator 2 view .LVU406
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
ARM GAS  /tmp/ccl8in31.s 			page 61


 1380              		.loc 7 37 2 discriminator 2 view .LVU407
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1381              		.loc 7 37 2 discriminator 2 view .LVU408
 1382 001e A361     		str	r3, [r4, #24]
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1383              		.loc 7 37 2 discriminator 2 view .LVU409
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1384              		.loc 7 37 2 discriminator 2 view .LVU410
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1385              		.loc 7 38 2 view .LVU411
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1386              		.loc 7 38 2 view .LVU412
 1387              	.LBB255:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1388              		.loc 7 38 2 view .LVU413
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1389              		.loc 7 38 2 view .LVU414
 1390              	.LBE255:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1391              		.loc 7 38 2 discriminator 2 view .LVU415
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1392              		.loc 7 38 2 discriminator 2 view .LVU416
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1393              		.loc 7 38 2 discriminator 2 view .LVU417
 1394 0020 E361     		str	r3, [r4, #28]
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1395              		.loc 7 38 2 discriminator 2 view .LVU418
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1396              		.loc 7 38 2 discriminator 2 view .LVU419
 1397              	.LVL123:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1398              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU420
 1399              	.LBE253:
 1400              	.LBE252:
 214:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root_inode == NULL){
 1401              		.loc 1 214 5 is_stmt 1 view .LVU421
 214:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root_inode == NULL){
 1402              		.loc 1 214 38 is_stmt 0 view .LVU422
 1403 0022 0022     		movs	r2, #0
 1404 0024 1149     		ldr	r1, .L92+4
 1405 0026 2046     		mov	r0, r4
 1406 0028 FFF7FEFF 		bl	devfs_create_empty_inode
 1407              	.LVL124:
 215:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(d_sb);
 1408              		.loc 1 215 5 is_stmt 1 view .LVU423
 215:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(d_sb);
 1409              		.loc 1 215 7 is_stmt 0 view .LVU424
 1410 002c 0546     		mov	r5, r0
 1411 002e B0B1     		cbz	r0, .L91
 219:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_sb->rootinode = root_inode;
 1412              		.loc 1 219 5 is_stmt 1 view .LVU425
 219:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_sb->rootinode = root_inode;
 1413              		.loc 1 219 24 is_stmt 0 view .LVU426
 1414 0030 44F2ED13 		movw	r3, #16877
 1415 0034 4360     		str	r3, [r0, #4]
 220:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root_inode->i_fop = &devfs_file_fops;
 1416              		.loc 1 220 5 is_stmt 1 view .LVU427
ARM GAS  /tmp/ccl8in31.s 			page 62


 220:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root_inode->i_fop = &devfs_file_fops;
 1417              		.loc 1 220 21 is_stmt 0 view .LVU428
 1418 0036 6061     		str	r0, [r4, #20]
 221:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_inc (&root_inode->dentry_count); 
 1419              		.loc 1 221 5 is_stmt 1 view .LVU429
 221:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     atomic_inc (&root_inode->dentry_count); 
 1420              		.loc 1 221 23 is_stmt 0 view .LVU430
 1421 0038 0C4B     		ldr	r3, .L92+4
 1422 003a 0361     		str	r3, [r0, #16]
 222:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&root_inode->dentry_list_head);
 1423              		.loc 1 222 5 is_stmt 1 view .LVU431
 1424 003c 00F10C03 		add	r3, r0, #12
 1425              	.LVL125:
 1426              	.LBB256:
 1427              	.LBI256:
  69:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
  70:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
  71:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
  72:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_set_release() - atomic set with release ordering
  73:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  74:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to assign
  75:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  76:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically sets @v to @i with release ordering.
  77:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  78:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_set_release() there.
  79:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  80:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
  81:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
  82:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
  83:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_set_release(atomic_t *v, int i)
  84:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
  85:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
  86:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_write(v, sizeof(*v));
  87:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_set_release(v, i);
  88:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
  89:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
  90:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
  91:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_add() - atomic add with relaxed ordering
  92:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
  93:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  94:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  95:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
  96:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  97:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add() there.
  98:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
  99:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 100:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 101:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 102:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_add(int i, atomic_t *v)
 103:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 104:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 105:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_add(i, v);
 106:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 107:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 108:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 109:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return() - atomic add with full ordering
 110:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
ARM GAS  /tmp/ccl8in31.s 			page 63


 111:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 112:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 113:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 114:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 115:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return() there.
 116:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 117:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 118:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 119:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 120:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_add_return(int i, atomic_t *v)
 121:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 122:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 123:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 124:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return(i, v);
 125:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 126:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 127:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 128:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_acquire() - atomic add with acquire ordering
 129:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 130:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 131:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 132:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 133:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 134:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_acquire() there.
 135:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 136:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 137:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 138:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 139:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_add_return_acquire(int i, atomic_t *v)
 140:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 141:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 142:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_acquire(i, v);
 143:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 144:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 145:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 146:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_release() - atomic add with release ordering
 147:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 148:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 149:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 150:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 151:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 152:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_release() there.
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 157:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_add_return_release(int i, atomic_t *v)
 158:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 159:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 160:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 161:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_release(i, v);
 162:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 163:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 164:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 165:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_relaxed() - atomic add with relaxed ordering
 166:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 167:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccl8in31.s 			page 64


 168:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 169:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 170:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 171:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_relaxed() there.
 172:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 173:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 174:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 175:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 176:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_add_return_relaxed(int i, atomic_t *v)
 177:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 178:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 179:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_relaxed(i, v);
 180:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 181:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 182:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 183:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add() - atomic add with full ordering
 184:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 185:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 186:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 187:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 188:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 189:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add() there.
 190:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 191:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 192:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 194:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add(int i, atomic_t *v)
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 197:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 198:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add(i, v);
 199:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 200:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 201:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 202:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_acquire() - atomic add with acquire ordering
 203:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 204:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 205:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 206:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 207:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 208:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_acquire() there.
 209:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 210:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 211:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 212:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_acquire(int i, atomic_t *v)
 214:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 216:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_acquire(i, v);
 217:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 219:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 220:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_release() - atomic add with release ordering
 221:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 222:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 223:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 224:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with release ordering.
ARM GAS  /tmp/ccl8in31.s 			page 65


 225:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 226:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_release() there.
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 228:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_release(int i, atomic_t *v)
 232:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 233:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 234:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 235:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_release(i, v);
 236:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 237:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 238:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 239:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_relaxed() - atomic add with relaxed ordering
 240:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 241:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 242:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 243:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 244:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 245:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_relaxed() there.
 246:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 247:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 248:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 249:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 250:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_relaxed(int i, atomic_t *v)
 251:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 252:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 253:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_relaxed(i, v);
 254:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 255:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 256:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 257:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_sub() - atomic subtract with relaxed ordering
 258:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 259:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 260:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 261:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 262:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 263:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub() there.
 264:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 265:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 266:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 267:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 268:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_sub(int i, atomic_t *v)
 269:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 270:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 271:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_sub(i, v);
 272:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 273:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 274:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 275:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return() - atomic subtract with full ordering
 276:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 277:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 278:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 279:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 280:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 281:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return() there.
ARM GAS  /tmp/ccl8in31.s 			page 66


 282:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 283:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 284:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 285:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 286:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_sub_return(int i, atomic_t *v)
 287:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 288:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 289:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 290:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return(i, v);
 291:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 292:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 293:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 294:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_acquire() - atomic subtract with acquire ordering
 295:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 296:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 297:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 298:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 299:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 300:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_acquire() there.
 301:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 302:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 303:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 304:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 305:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_acquire(int i, atomic_t *v)
 306:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 307:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 308:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_acquire(i, v);
 309:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 310:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 311:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 312:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_release() - atomic subtract with release ordering
 313:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 314:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 315:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 316:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 317:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 318:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_release() there.
 319:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 320:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 321:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 322:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 323:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_release(int i, atomic_t *v)
 324:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 325:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 326:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 327:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_release(i, v);
 328:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 329:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 330:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 331:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_relaxed() - atomic subtract with relaxed ordering
 332:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 333:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 334:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 335:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 336:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 337:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_relaxed() there.
 338:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 67


 339:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 340:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 341:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 342:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_relaxed(int i, atomic_t *v)
 343:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 344:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 345:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_relaxed(i, v);
 346:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 347:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 348:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 349:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub() - atomic subtract with full ordering
 350:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 351:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 352:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 353:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 354:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 355:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub() there.
 356:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 357:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 358:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 359:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 360:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub(int i, atomic_t *v)
 361:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 362:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 363:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 364:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub(i, v);
 365:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 366:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 367:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 368:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_acquire() - atomic subtract with acquire ordering
 369:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 370:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 371:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 372:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 373:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 374:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_acquire() there.
 375:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 376:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 377:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 378:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_acquire(int i, atomic_t *v)
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 381:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 382:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_acquire(i, v);
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 385:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 386:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_release() - atomic subtract with release ordering
 387:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 388:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 389:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 390:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 391:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 392:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_release() there.
 393:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 394:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 395:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
ARM GAS  /tmp/ccl8in31.s 			page 68


 396:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 397:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_release(int i, atomic_t *v)
 398:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 399:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 400:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 401:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_release(i, v);
 402:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 403:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 404:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 405:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_relaxed() - atomic subtract with relaxed ordering
 406:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 407:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 408:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 409:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 410:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 411:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_relaxed() there.
 412:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 413:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 414:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 415:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 416:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_relaxed(int i, atomic_t *v)
 417:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 418:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 419:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_relaxed(i, v);
 420:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 421:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 422:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 423:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_inc() - atomic increment with relaxed ordering
 424:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 425:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 426:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 427:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 428:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc() there.
 429:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 430:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 431:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 432:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 433:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_inc(atomic_t *v)
 1428              		.loc 5 433 1 view .LVU432
 434:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 435:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 1429              		.loc 5 435 2 view .LVU433
 436:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_inc(v);
 1430              		.loc 5 436 2 view .LVU434
 1431              	.LBB257:
 1432              	.LBI257:
 510:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 511:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 512:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 513:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_set_release() - atomic set with release ordering
 514:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 515:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to assign
 516:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 517:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically sets @v to @i with release ordering.
 518:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 519:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_set_release() elsewhere.
 520:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 69


 521:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 522:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 523:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 524:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_set_release(atomic_t *v, int i)
 525:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 526:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_set_release)
 527:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_set_release(v, i);
 528:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 529:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (__native_word(atomic_t)) {
 530:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		smp_store_release(&(v)->counter, i);
 531:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	} else {
 532:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		__atomic_release_fence();
 533:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		raw_atomic_set(v, i);
 534:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	}
 535:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 536:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 537:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 538:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 539:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add() - atomic add with relaxed ordering
 540:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 541:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 542:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 543:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 544:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 545:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add() elsewhere.
 546:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 547:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 548:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 549:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 550:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add(int i, atomic_t *v)
 551:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 552:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_add(i, v);
 553:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 554:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 555:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 556:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return() - atomic add with full ordering
 557:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 558:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 559:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 560:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 561:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 562:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return() elsewhere.
 563:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 564:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 565:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 566:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 567:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return(int i, atomic_t *v)
 568:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 569:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return)
 570:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 571:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 572:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 573:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 574:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_add_return_relaxed(i, v);
 575:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 576:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 577:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
ARM GAS  /tmp/ccl8in31.s 			page 70


 578:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return"
 579:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 580:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 581:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 582:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 583:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_acquire() - atomic add with acquire ordering
 584:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 585:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 586:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 587:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 588:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 589:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_acquire() elsewhere.
 590:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 591:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 592:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 593:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 594:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_acquire(int i, atomic_t *v)
 595:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 596:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_acquire)
 597:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_acquire(i, v);
 598:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 599:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_add_return_relaxed(i, v);
 600:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 601:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 602:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 603:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 604:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 605:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_acquire"
 606:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 607:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 608:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 609:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 610:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_release() - atomic add with release ordering
 611:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 612:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 613:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 614:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 615:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 616:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_release() elsewhere.
 617:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 618:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 619:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 620:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 621:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_release(int i, atomic_t *v)
 622:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 623:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_release)
 624:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_release(i, v);
 625:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 626:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 627:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_relaxed(i, v);
 628:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 629:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 630:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 631:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_release"
 632:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 633:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 634:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccl8in31.s 			page 71


 635:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 636:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_relaxed() - atomic add with relaxed ordering
 637:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 638:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 639:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 640:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 641:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 642:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_relaxed() elsewhere.
 643:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 644:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 645:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 646:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 647:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_relaxed(int i, atomic_t *v)
 648:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 649:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_relaxed)
 650:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_relaxed(i, v);
 651:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 652:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 653:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 654:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_relaxed"
 655:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 656:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 657:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 658:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 659:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add() - atomic add with full ordering
 660:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 661:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 662:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 663:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 664:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 665:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add() elsewhere.
 666:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 667:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 668:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 669:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 670:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add(int i, atomic_t *v)
 671:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 672:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add)
 673:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 674:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 675:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 676:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 677:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_add_relaxed(i, v);
 678:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 679:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 680:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 681:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add"
 682:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 683:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 684:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 685:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 686:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_acquire() - atomic add with acquire ordering
 687:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 688:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 689:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 690:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 691:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 72


 692:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_acquire() elsewhere.
 693:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 694:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 695:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 696:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 697:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_acquire(int i, atomic_t *v)
 698:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 699:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_acquire)
 700:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_acquire(i, v);
 701:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 702:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_add_relaxed(i, v);
 703:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 704:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 705:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 706:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 707:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 708:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_acquire"
 709:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 710:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 711:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 712:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 713:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_release() - atomic add with release ordering
 714:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 715:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 716:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 717:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 718:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 719:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_release() elsewhere.
 720:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 721:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 722:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 723:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 724:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_release(int i, atomic_t *v)
 725:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 726:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_release)
 727:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_release(i, v);
 728:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 729:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 730:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_relaxed(i, v);
 731:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 732:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 733:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 734:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_release"
 735:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 736:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 737:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 738:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 739:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_relaxed() - atomic add with relaxed ordering
 740:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 741:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 742:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 743:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 744:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 745:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_relaxed() elsewhere.
 746:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 747:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 748:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
ARM GAS  /tmp/ccl8in31.s 			page 73


 749:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 750:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_relaxed(int i, atomic_t *v)
 751:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 752:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_relaxed)
 753:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_relaxed(i, v);
 754:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 755:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 756:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 757:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_relaxed"
 758:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 759:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 760:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 761:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 762:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub() - atomic subtract with relaxed ordering
 763:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 764:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 765:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 766:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 767:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 768:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub() elsewhere.
 769:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 770:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 771:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 772:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 773:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub(int i, atomic_t *v)
 774:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 775:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_sub(i, v);
 776:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 777:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 778:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 779:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return() - atomic subtract with full ordering
 780:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 781:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 782:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 783:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 784:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 785:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return() elsewhere.
 786:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 787:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 788:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 789:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 790:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return(int i, atomic_t *v)
 791:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 792:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return)
 793:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 794:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 795:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 796:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 797:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_sub_return_relaxed(i, v);
 798:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 799:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 800:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 801:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	volatile int *p = (volatile int *)&v->counter;
 802:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = *p;
 803:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	*p -= i;
 804:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 805:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccl8in31.s 			page 74


 806:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 807:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 808:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 809:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 810:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_acquire() - atomic subtract with acquire ordering
 811:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 812:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 813:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 814:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 815:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 816:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_acquire() elsewhere.
 817:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 818:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 819:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 820:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 821:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_acquire(int i, atomic_t *v)
 822:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 823:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_acquire)
 824:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_acquire(i, v);
 825:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 826:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_sub_return_relaxed(i, v);
 827:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 828:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 829:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 830:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 831:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 832:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_acquire"
 833:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 834:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 835:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 836:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 837:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_release() - atomic subtract with release ordering
 838:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 839:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 840:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 841:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 842:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 843:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_release() elsewhere.
 844:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 845:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 846:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 847:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 848:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_release(int i, atomic_t *v)
 849:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 850:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_release)
 851:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_release(i, v);
 852:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 853:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 854:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_relaxed(i, v);
 855:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 856:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 857:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 858:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_release"
 859:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 860:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 861:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 862:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
ARM GAS  /tmp/ccl8in31.s 			page 75


 863:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_relaxed() - atomic subtract with relaxed ordering
 864:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 865:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 866:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 867:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 868:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 869:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_relaxed() elsewhere.
 870:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 871:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 872:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 873:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 874:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_relaxed(int i, atomic_t *v)
 875:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 876:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_relaxed)
 877:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_relaxed(i, v);
 878:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 879:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 880:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 881:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_relaxed"
 882:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 883:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 884:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 885:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 886:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub() - atomic subtract with full ordering
 887:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 888:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 889:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 890:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 891:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 892:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub() elsewhere.
 893:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 894:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 895:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 896:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 897:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub(int i, atomic_t *v)
 898:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 899:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub)
 900:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 901:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 902:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 903:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 904:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_sub_relaxed(i, v);
 905:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 906:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 907:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 908:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub"
 909:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 910:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 911:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 912:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 913:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_acquire() - atomic subtract with acquire ordering
 914:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 915:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 916:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 917:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 918:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 919:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_acquire() elsewhere.
ARM GAS  /tmp/ccl8in31.s 			page 76


 920:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 921:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 922:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 923:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 924:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_acquire(int i, atomic_t *v)
 925:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 926:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_acquire)
 927:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_acquire(i, v);
 928:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 929:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_sub_relaxed(i, v);
 930:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 931:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 932:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 933:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 934:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 935:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_acquire"
 936:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 937:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 938:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 939:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 940:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_release() - atomic subtract with release ordering
 941:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 942:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 943:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 944:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 945:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 946:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_release() elsewhere.
 947:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 948:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 949:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 950:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 951:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_release(int i, atomic_t *v)
 952:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 953:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_release)
 954:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_release(i, v);
 955:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 956:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 957:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_relaxed(i, v);
 958:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 959:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 960:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 961:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_release"
 962:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 963:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 964:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 965:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 966:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_relaxed() - atomic subtract with relaxed ordering
 967:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 968:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 969:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 970:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 971:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 972:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_relaxed() elsewhere.
 973:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 974:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 975:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 976:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
ARM GAS  /tmp/ccl8in31.s 			page 77


 977:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_relaxed(int i, atomic_t *v)
 978:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 979:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_relaxed)
 980:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_relaxed(i, v);
 981:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 982:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 983:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 984:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_relaxed"
 985:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 986:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 987:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
 988:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
 989:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc() - atomic increment with relaxed ordering
 990:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 991:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 992:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 993:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 994:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc() elsewhere.
 995:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
 996:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 997:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
 998:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 999:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc(atomic_t *v)
 1433              		.loc 6 999 1 view .LVU435
1000:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1001:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc)
1002:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_inc(v);
1003:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1004:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_add(1, v);
 1434              		.loc 6 1004 2 view .LVU436
 1435              	.LBB258:
 1436              	.LBI258:
 550:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 1437              		.loc 6 550 1 view .LVU437
 552:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 1438              		.loc 6 552 2 view .LVU438
 1439              	.LBB259:
 1440              	.LBI259:
 1441              		.file 8 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h"
   1:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** /* SPDX-License-Identifier: GPL-2.0-only */
   2:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** /*
   3:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * arch/arm/include/asm/atomic.h
   4:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  *
   5:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * Copyright (C) 1996 Russell King.
   6:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * Copyright (C) 2002 Deep Blue Solutions Ltd.
   7:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * Modified for uClinux on STM32F407
   8:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  */
   9:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #ifndef __ASM_ARM_ATOMIC_H
  10:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define __ASM_ARM_ATOMIC_H
  11:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  12:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #include <linux/compiler.h> /* Available */
  13:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #include <linux/types.h>    /* Available */
  14:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #include <asm/barrier.h>    /* Available */
  15:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  16:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** /* Include architecture-specific configuration */
  17:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  18:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
ARM GAS  /tmp/ccl8in31.s 			page 78


  19:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #ifdef __KERNEL__
  20:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  21:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  22:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  23:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  24:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  25:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** // typedef struct {
  26:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** //     volatile int counter;
  27:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** // } atomic_t;
  28:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  29:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define ATOMIC_INIT(i) { (i) }
  30:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  31:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** /*
  32:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * On ARMv7-M, ordinary assignment (str instruction) doesn't clear the local
  33:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * strex/ldrex monitor on some implementations. The reason we can use it for
  34:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * atomic_set() is the clrex or dummy strex done on every exception return.
  35:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  */
  36:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_read(v) READ_ONCE((v)->counter)
  37:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_set(v,i)    WRITE_ONCE(((v)->counter), (i))
  38:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  39:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** /*
  40:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * ARMv6 UP and SMP safe atomic ops.  We use load exclusive and
  41:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * store exclusive to ensure that these are atomic.  We may loop
  42:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * to ensure that the update happens.
  43:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  *
  44:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  * For STM32F407 (Cortex-M4, ARMv7-M), these instructions are available.
  45:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****  */
  46:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  47:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OP(op, c_op, asm_op)                     \
  48:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** static inline void arch_atomic_##op(int i, atomic_t *v)         \
  49:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** {                                       \
  50:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  51:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     int result;                                 \
  52:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****                                         \
  53:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  54:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_" #op "\n"           \
  55:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%3]\n"                      \
  56:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %0, %0, %4\n"                \
  57:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   strex   %1, %0, [%3]\n"                      \
  58:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   teq %1, #0\n"                         \
  59:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  60:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)     \
  61:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
  62:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
  63:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** }
  64:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  65:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OP_RETURN(op, c_op, asm_op)                  \
  66:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_##op##_return_relaxed(int i, atomic_t *v) \
  67:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** {                                       \
  68:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  69:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     int result;                                 \
  70:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****                                         \
  71:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  72:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_" #op "_return\n"        \
  73:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%3]\n"                      \
  74:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %0, %0, %4\n"                \
  75:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   strex   %1, %0, [%3]\n"                      \
ARM GAS  /tmp/ccl8in31.s 			page 79


  76:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   teq %1, #0\n"                         \
  77:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  78:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)     \
  79:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
  80:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
  81:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****                                         \
  82:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     return result;                              \
  83:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** }
  84:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
  85:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define ATOMIC_FETCH_OP(op, c_op, asm_op)                   \
  86:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_fetch_##op##_relaxed(int i, atomic_t *v)  \
  87:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** {                                       \
  88:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  89:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     int result, val;                             \
  90:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****                                         \
  91:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  92:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_fetch_" #op "\n"       \
  93:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%4]\n"                      \
  94:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %1, %0, %5\n"                \
  95:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   strex   %2, %1, [%4]\n"                      \
  96:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   teq %2, #0\n"                         \
  97:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  98:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) \
  99:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
 100:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
 101:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****                                         \
 102:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     return result;                              \
 103:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** }
 104:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 105:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_add_return_relaxed       arch_atomic_add_return_relaxed
 106:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_sub_return_relaxed       arch_atomic_sub_return_relaxed
 107:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_add_relaxed        arch_atomic_fetch_add_relaxed
 108:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_sub_relaxed        arch_atomic_fetch_sub_relaxed
 109:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 110:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_and_relaxed        arch_atomic_fetch_and_relaxed
 111:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_andnot_relaxed     arch_atomic_fetch_andnot_relaxed
 112:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_or_relaxed         arch_atomic_fetch_or_relaxed
 113:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_xor_relaxed        arch_atomic_fetch_xor_relaxed
 114:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 115:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_cmpxchg_relaxed(atomic_t *ptr, int old, int new)
 116:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** {
 117:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     int oldval;
 118:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     unsigned long res;
 119:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 120:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&ptr->counter); - prefetch not available */
 121:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 122:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     do {
 123:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****         __asm__ __volatile__("@ atomic_cmpxchg\n"
 124:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   ldrex   %1, [%3]\n"
 125:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   mov     %0, #0\n"
 126:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   teq     %1, %4\n"
 127:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   strexeq %0, %5, [%3]\n"
 128:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****         : "=&r" (res), "=&r" (oldval), "+Qo" (ptr->counter)
 129:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****         : "r" (&ptr->counter), "Ir" (old), "r" (new)
 130:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****         : "cc");
 131:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     } while (res);
 132:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
ARM GAS  /tmp/ccl8in31.s 			page 80


 133:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     return oldval;
 134:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** }
 135:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_cmpxchg_relaxed        arch_atomic_cmpxchg_relaxed
 136:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 137:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
 138:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** {
 139:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     int oldval, newval;
 140:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;
 141:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 142:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     /* smp_mb(); - Memory barriers might need specific implementation */
 143:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */
 144:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 145:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__ ("@ atomic_add_unless\n"
 146:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%4]\n"
 147:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   teq %0, %5\n"
 148:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   beq 2f\n"
 149:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   add %1, %0, %6\n"
 150:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   strex   %2, %1, [%4]\n"
 151:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   teq %2, #0\n"
 152:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "   bne 1b\n"
 153:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** "2:"
 154:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "=&r" (oldval), "=&r" (newval), "=&r" (tmp), "+Qo" (v->counter)
 155:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "r" (u), "r" (a)
 156:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     : "cc");
 157:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 158:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     if (oldval != u)
 159:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****         ; /* smp_mb(); - Memory barriers might need specific implementation */
 160:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 161:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     return oldval;
 162:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** }
 163:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_add_unless         arch_atomic_fetch_add_unless
 164:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 165:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OPS(op, c_op, asm_op)                    \
 166:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     ATOMIC_OP(op, c_op, asm_op)                     \
 167:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     ATOMIC_OP_RETURN(op, c_op, asm_op)                  \
 168:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h ****     ATOMIC_FETCH_OP(op, c_op, asm_op)
 169:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** 
 170:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(add, +=, add)
 1442              		.loc 8 170 1 view .LVU439
 1443              	.LBB260:
 1444              		.loc 8 170 1 view .LVU440
 1445              		.loc 8 170 1 view .LVU441
 1446              		.loc 8 170 1 view .LVU442
 1447              		.syntax unified
 1448              	@ 170 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h" 1
 1449              		@ atomic_add
 1450 0040 53E8002F 	1: ldrex   r2, [r3]
 1451 0044 02F10102 	   add r2, r2, #1
 1452 0048 43E80021 	   strex   r1, r2, [r3]
 1453 004c 91F0000F 	   teq r1, #0
 1454 0050 F6D1     	   bne 1b
 1455              	@ 0 "" 2
 1456              	.LVL126:
 1457              		.loc 8 170 1 is_stmt 0 view .LVU443
 1458              		.thumb
 1459              		.syntax unified
 1460              	.LBE260:
ARM GAS  /tmp/ccl8in31.s 			page 81


 1461              	.LBE259:
 1462              	.LBE258:
 1463              	.LBE257:
 1464              	.LBE256:
 223:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return d_sb;
 1465              		.loc 1 223 5 is_stmt 1 view .LVU444
 1466 0052 00F11C03 		add	r3, r0, #28
 1467              	.LVL127:
 1468              	.LBB261:
 1469              	.LBI261:
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 1470              		.loc 7 35 20 view .LVU445
 1471              	.LBB262:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1472              		.loc 7 37 2 view .LVU446
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1473              		.loc 7 37 2 view .LVU447
 1474              	.LBB263:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1475              		.loc 7 37 2 view .LVU448
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1476              		.loc 7 37 2 view .LVU449
 1477              	.LBE263:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1478              		.loc 7 37 2 discriminator 2 view .LVU450
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1479              		.loc 7 37 2 discriminator 2 view .LVU451
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1480              		.loc 7 37 2 discriminator 2 view .LVU452
 1481 0056 C361     		str	r3, [r0, #28]
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1482              		.loc 7 37 2 discriminator 2 view .LVU453
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1483              		.loc 7 37 2 discriminator 2 view .LVU454
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1484              		.loc 7 38 2 view .LVU455
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1485              		.loc 7 38 2 view .LVU456
 1486              	.LBB264:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1487              		.loc 7 38 2 view .LVU457
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1488              		.loc 7 38 2 view .LVU458
 1489              	.LBE264:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1490              		.loc 7 38 2 discriminator 2 view .LVU459
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1491              		.loc 7 38 2 discriminator 2 view .LVU460
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1492              		.loc 7 38 2 discriminator 2 view .LVU461
 1493 0058 0362     		str	r3, [r0, #32]
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1494              		.loc 7 38 2 discriminator 2 view .LVU462
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1495              		.loc 7 38 2 discriminator 2 view .LVU463
 1496              	.LVL128:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
ARM GAS  /tmp/ccl8in31.s 			page 82


 1497              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU464
 1498              	.LBE262:
 1499              	.LBE261:
 224:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** } 
 1500              		.loc 1 224 5 is_stmt 1 view .LVU465
 1501              	.L87:
 225:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_superblock_destory(struct devfs_superblock* sb){
 1502              		.loc 1 225 1 is_stmt 0 view .LVU466
 1503 005a 2046     		mov	r0, r4
 1504 005c 38BD     		pop	{r3, r4, r5, pc}
 1505              	.LVL129:
 1506              	.L91:
 216:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 1507              		.loc 1 216 9 is_stmt 1 view .LVU467
 1508              	.LBB265:
 1509              	.LBI265:
 381:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 382:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline kfree(const void *ptr){
 1510              		.loc 4 383 20 view .LVU468
 1511              	.LBB266:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 1512              		.loc 4 384 2 view .LVU469
 1513 005e 2046     		mov	r0, r4
 1514              	.LVL130:
 1515              		.loc 4 384 2 is_stmt 0 view .LVU470
 1516 0060 FFF7FEFF 		bl	__sfree__
 1517              	.LVL131:
 1518              		.loc 4 384 2 view .LVU471
 1519              	.LBE266:
 1520              	.LBE265:
 217:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 1521              		.loc 1 217 9 is_stmt 1 view .LVU472
 217:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 1522              		.loc 1 217 16 is_stmt 0 view .LVU473
 1523 0064 2C46     		mov	r4, r5
 1524              	.LVL132:
 217:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 1525              		.loc 1 217 16 view .LVU474
 1526 0066 F8E7     		b	.L87
 1527              	.L93:
 1528              		.align	2
 1529              	.L92:
 1530 0068 4E61BC00 		.word	12345678
 1531 006c 00000000 		.word	devfs_file_fops
 1532              		.cfi_endproc
 1533              	.LFE1050:
 1535              		.section	.text.devfs_inode_put,"ax",%progbits
 1536              		.align	1
 1537              		.syntax unified
 1538              		.thumb
 1539              		.thumb_func
 1541              	devfs_inode_put:
 1542              	.LVL133:
 1543              	.LFB1043:
 118:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node != NULL)kfree(node);
 1544              		.loc 1 118 54 is_stmt 1 view -0
ARM GAS  /tmp/ccl8in31.s 			page 83


 1545              		.cfi_startproc
 1546              		@ args = 0, pretend = 0, frame = 0
 1547              		@ frame_needed = 0, uses_anonymous_args = 0
 119:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1548              		.loc 1 119 5 view .LVU476
 119:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1549              		.loc 1 119 7 is_stmt 0 view .LVU477
 1550 0000 18B1     		cbz	r0, .L97
 118:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node != NULL)kfree(node);
 1551              		.loc 1 118 54 view .LVU478
 1552 0002 08B5     		push	{r3, lr}
 1553              	.LCFI17:
 1554              		.cfi_def_cfa_offset 8
 1555              		.cfi_offset 3, -8
 1556              		.cfi_offset 14, -4
 119:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1557              		.loc 1 119 21 is_stmt 1 discriminator 1 view .LVU479
 1558              	.LVL134:
 1559              	.LBB267:
 1560              	.LBI267:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 1561              		.loc 4 383 20 view .LVU480
 1562              	.LBB268:
 1563              		.loc 4 384 2 view .LVU481
 1564 0004 FFF7FEFF 		bl	__sfree__
 1565              	.LVL135:
 1566              		.loc 4 384 2 is_stmt 0 view .LVU482
 1567              	.LBE268:
 1568              	.LBE267:
 120:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_dentry(struct devfs_inode* parent_dentry_inode,struct devf
 1569              		.loc 1 120 1 view .LVU483
 1570 0008 08BD     		pop	{r3, pc}
 1571              	.LVL136:
 1572              	.L97:
 1573              	.LCFI18:
 1574              		.cfi_def_cfa_offset 0
 1575              		.cfi_restore 3
 1576              		.cfi_restore 14
 120:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_dentry(struct devfs_inode* parent_dentry_inode,struct devf
 1577              		.loc 1 120 1 view .LVU484
 1578 000a 7047     		bx	lr
 1579              		.cfi_endproc
 1580              	.LFE1043:
 1582              		.section	.text.dentry_put,"ax",%progbits
 1583              		.align	1
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1588              	dentry_put:
 1589              	.LVL137:
 1590              	.LFB1048:
 176:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL) return;
 1591              		.loc 1 176 1 is_stmt 1 view -0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 177:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry->target_inode != NULL)
ARM GAS  /tmp/ccl8in31.s 			page 84


 1595              		.loc 1 177 5 view .LVU486
 177:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry->target_inode != NULL)
 1596              		.loc 1 177 7 is_stmt 0 view .LVU487
 1597 0000 61B3     		cbz	r1, .L105
 176:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL) return;
 1598              		.loc 1 176 1 view .LVU488
 1599 0002 38B5     		push	{r3, r4, r5, lr}
 1600              	.LCFI19:
 1601              		.cfi_def_cfa_offset 16
 1602              		.cfi_offset 3, -16
 1603              		.cfi_offset 4, -12
 1604              		.cfi_offset 5, -8
 1605              		.cfi_offset 14, -4
 1606 0004 0D46     		mov	r5, r1
 178:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     {
 1607              		.loc 1 178 5 is_stmt 1 view .LVU489
 178:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     {
 1608              		.loc 1 178 14 is_stmt 0 view .LVU490
 1609 0006 8B68     		ldr	r3, [r1, #8]
 178:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     {
 1610              		.loc 1 178 7 view .LVU491
 1611 0008 93B1     		cbz	r3, .L102
 180:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 1612              		.loc 1 180 9 is_stmt 1 view .LVU492
 1613 000a 041D     		adds	r4, r0, #4
 1614 000c 2046     		mov	r0, r4
 1615              	.LVL138:
 180:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 1616              		.loc 1 180 9 is_stmt 0 view .LVU493
 1617 000e FFF7FEFF 		bl	spin_lock
 1618              	.LVL139:
 181:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         {
 1619              		.loc 1 181 9 is_stmt 1 view .LVU494
 181:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         {
 1620              		.loc 1 181 40 is_stmt 0 view .LVU495
 1621 0012 AB68     		ldr	r3, [r5, #8]
 181:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         {
 1622              		.loc 1 181 13 view .LVU496
 1623 0014 0C33     		adds	r3, r3, #12
 1624              	.LVL140:
 1625              	.LBB269:
 1626              	.LBI269:
 437:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 438:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 439:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 440:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return() - atomic increment with full ordering
 441:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 442:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 443:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with full ordering.
 444:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 445:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return() there.
 446:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 447:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 448:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 449:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 450:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_inc_return(atomic_t *v)
 451:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
ARM GAS  /tmp/ccl8in31.s 			page 85


 452:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 453:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 454:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return(v);
 455:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 456:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 457:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 458:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_acquire() - atomic increment with acquire ordering
 459:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 460:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 461:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
 462:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_acquire() there.
 464:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 465:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 466:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 467:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 468:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_acquire(atomic_t *v)
 469:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 470:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 471:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_acquire(v);
 472:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 473:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 474:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 475:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_release() - atomic increment with release ordering
 476:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 477:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 478:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with release ordering.
 479:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 480:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_release() there.
 481:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 482:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 483:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 484:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 485:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_release(atomic_t *v)
 486:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 487:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 488:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 489:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_release(v);
 490:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 491:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 492:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 493:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_relaxed() - atomic increment with relaxed ordering
 494:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 495:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 496:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 497:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 498:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_relaxed() there.
 499:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 500:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 501:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 502:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 503:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_relaxed(atomic_t *v)
 504:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 505:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 506:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_relaxed(v);
 507:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 508:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
ARM GAS  /tmp/ccl8in31.s 			page 86


 509:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 510:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc() - atomic increment with full ordering
 511:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 512:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 513:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with full ordering.
 514:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 515:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc() there.
 516:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 517:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 518:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 519:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 520:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc(atomic_t *v)
 521:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 522:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 523:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 524:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc(v);
 525:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 526:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 527:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 528:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_acquire() - atomic increment with acquire ordering
 529:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 530:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 531:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
 532:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 533:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_acquire() there.
 534:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 535:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 536:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 537:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 538:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_acquire(atomic_t *v)
 539:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 540:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 541:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_acquire(v);
 542:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 543:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 544:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 545:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_release() - atomic increment with release ordering
 546:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 547:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 548:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with release ordering.
 549:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 550:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_release() there.
 551:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 552:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 553:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 554:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 555:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_release(atomic_t *v)
 556:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 557:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 558:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 559:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_release(v);
 560:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 561:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 562:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 563:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_relaxed() - atomic increment with relaxed ordering
 564:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 565:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 87


 566:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 567:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 568:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_relaxed() there.
 569:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 570:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 571:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 572:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 573:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_relaxed(atomic_t *v)
 574:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 575:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 576:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_relaxed(v);
 577:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 578:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 579:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 580:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_dec() - atomic decrement with relaxed ordering
 581:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 582:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 583:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 584:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 585:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec() there.
 586:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 587:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 588:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 589:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 590:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_dec(atomic_t *v)
 591:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 592:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 593:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_dec(v);
 594:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 595:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 596:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 597:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return() - atomic decrement with full ordering
 598:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 599:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 600:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
 601:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 602:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return() there.
 603:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 604:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 605:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 606:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 607:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_dec_return(atomic_t *v)
 608:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 609:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 610:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 611:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return(v);
 612:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 613:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 614:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 615:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_acquire() - atomic decrement with acquire ordering
 616:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 617:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 618:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
 619:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 620:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_acquire() there.
 621:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 622:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
ARM GAS  /tmp/ccl8in31.s 			page 88


 623:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 624:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 625:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_acquire(atomic_t *v)
 626:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 627:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 628:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_acquire(v);
 629:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 630:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 631:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 632:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_release() - atomic decrement with release ordering
 633:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 634:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 635:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with release ordering.
 636:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 637:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_release() there.
 638:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 639:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 640:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 641:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 642:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_release(atomic_t *v)
 643:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 644:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 645:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 646:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_release(v);
 647:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 648:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 649:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 650:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_relaxed() - atomic decrement with relaxed ordering
 651:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 652:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 653:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 654:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 655:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_relaxed() there.
 656:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 657:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 658:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 659:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 660:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_relaxed(atomic_t *v)
 661:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 662:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 663:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_relaxed(v);
 664:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 665:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 666:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 667:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec() - atomic decrement with full ordering
 668:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 669:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 670:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
 671:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 672:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec() there.
 673:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 674:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 675:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 676:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 677:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec(atomic_t *v)
 678:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 679:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
ARM GAS  /tmp/ccl8in31.s 			page 89


 680:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 681:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec(v);
 682:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 683:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 684:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 685:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_acquire() - atomic decrement with acquire ordering
 686:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 687:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 688:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
 689:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 690:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_acquire() there.
 691:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 692:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 693:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 694:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 695:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_acquire(atomic_t *v)
 696:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 697:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 698:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_acquire(v);
 699:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 700:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 701:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 702:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_release() - atomic decrement with release ordering
 703:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 704:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 705:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with release ordering.
 706:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 707:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_release() there.
 708:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 709:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 710:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 711:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 712:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_release(atomic_t *v)
 713:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 714:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 715:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 716:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_release(v);
 717:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 718:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 719:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 720:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_relaxed() - atomic decrement with relaxed ordering
 721:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 722:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 723:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 724:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 725:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_relaxed() there.
 726:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 727:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 728:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 729:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 730:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_relaxed(atomic_t *v)
 731:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 732:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 733:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_relaxed(v);
 734:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 735:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 736:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
ARM GAS  /tmp/ccl8in31.s 			page 90


 737:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_and() - atomic bitwise AND with relaxed ordering
 738:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 739:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 740:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 741:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
 742:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 743:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_and() there.
 744:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 745:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 746:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 747:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 748:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_and(int i, atomic_t *v)
 749:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 750:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 751:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_and(i, v);
 752:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 753:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 754:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 755:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and() - atomic bitwise AND with full ordering
 756:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 757:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 758:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 759:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with full ordering.
 760:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 761:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and() there.
 762:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 763:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 764:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 765:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 766:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and(int i, atomic_t *v)
 767:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 768:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 769:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 770:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and(i, v);
 771:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 772:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 773:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 774:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_acquire() - atomic bitwise AND with acquire ordering
 775:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 776:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 777:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 778:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with acquire ordering.
 779:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 780:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_acquire() there.
 781:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 782:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 783:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 784:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 785:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_acquire(int i, atomic_t *v)
 786:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 787:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 788:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_acquire(i, v);
 789:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 790:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 791:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 792:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_release() - atomic bitwise AND with release ordering
 793:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
ARM GAS  /tmp/ccl8in31.s 			page 91


 794:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 795:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 796:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with release ordering.
 797:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 798:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_release() there.
 799:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 800:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 801:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 802:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 803:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_release(int i, atomic_t *v)
 804:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 805:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 806:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 807:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_release(i, v);
 808:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 809:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 810:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 811:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_relaxed() - atomic bitwise AND with relaxed ordering
 812:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 813:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 814:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 815:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
 816:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 817:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_relaxed() there.
 818:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 819:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 820:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 821:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 822:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_relaxed(int i, atomic_t *v)
 823:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 824:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 825:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_relaxed(i, v);
 826:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 827:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 828:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 829:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_andnot() - atomic bitwise AND NOT with relaxed ordering
 830:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 831:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 832:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 833:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
 834:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 835:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_andnot() there.
 836:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 837:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 838:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 839:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 840:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_andnot(int i, atomic_t *v)
 841:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 842:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 843:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_andnot(i, v);
 844:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 845:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 846:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 847:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot() - atomic bitwise AND NOT with full ordering
 848:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 849:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 850:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 92


 851:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with full ordering.
 852:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 853:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot() there.
 854:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 855:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 856:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 857:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 858:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot(int i, atomic_t *v)
 859:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 860:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 861:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 862:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot(i, v);
 863:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 864:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 865:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 866:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_acquire() - atomic bitwise AND NOT with acquire ordering
 867:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 868:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 869:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 870:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with acquire ordering.
 871:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 872:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_acquire() there.
 873:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 874:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 875:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 876:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 877:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_acquire(int i, atomic_t *v)
 878:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 879:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 880:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_acquire(i, v);
 881:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 882:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 883:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 884:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_release() - atomic bitwise AND NOT with release ordering
 885:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 886:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 887:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 888:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with release ordering.
 889:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 890:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_release() there.
 891:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 892:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 893:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 894:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 895:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_release(int i, atomic_t *v)
 896:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 897:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 898:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 899:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_release(i, v);
 900:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 901:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 902:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 903:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_relaxed() - atomic bitwise AND NOT with relaxed ordering
 904:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 905:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 906:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 907:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
ARM GAS  /tmp/ccl8in31.s 			page 93


 908:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 909:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_relaxed() there.
 910:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 911:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 912:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 913:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 914:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_relaxed(int i, atomic_t *v)
 915:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 916:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 917:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_relaxed(i, v);
 918:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 919:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 920:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 921:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_or() - atomic bitwise OR with relaxed ordering
 922:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 923:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 924:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 925:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
 926:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 927:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_or() there.
 928:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 929:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 930:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 931:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 932:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_or(int i, atomic_t *v)
 933:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 934:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 935:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_or(i, v);
 936:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 937:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 938:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 939:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or() - atomic bitwise OR with full ordering
 940:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 941:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 942:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 943:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with full ordering.
 944:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 945:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or() there.
 946:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 947:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 948:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 949:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 950:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or(int i, atomic_t *v)
 951:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 952:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 953:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 954:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or(i, v);
 955:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 956:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 957:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 958:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_acquire() - atomic bitwise OR with acquire ordering
 959:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 960:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 961:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 962:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with acquire ordering.
 963:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 964:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_acquire() there.
ARM GAS  /tmp/ccl8in31.s 			page 94


 965:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 966:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 967:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 968:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 969:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_acquire(int i, atomic_t *v)
 970:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 971:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 972:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_acquire(i, v);
 973:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 974:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 975:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 976:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_release() - atomic bitwise OR with release ordering
 977:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 978:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 979:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 980:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with release ordering.
 981:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 982:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_release() there.
 983:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 984:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 985:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
 986:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 987:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_release(int i, atomic_t *v)
 988:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 989:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 990:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 991:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_release(i, v);
 992:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 993:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
 994:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
 995:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_relaxed() - atomic bitwise OR with relaxed ordering
 996:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 997:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 998:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
 999:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1000:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1001:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_relaxed() there.
1002:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1003:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1004:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1005:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1006:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_relaxed(int i, atomic_t *v)
1007:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1008:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1009:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_relaxed(i, v);
1010:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1011:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1012:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1013:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_xor() - atomic bitwise XOR with relaxed ordering
1014:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1015:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1016:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1017:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1018:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1019:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xor() there.
1020:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1021:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
ARM GAS  /tmp/ccl8in31.s 			page 95


1022:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1023:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline void
1024:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_xor(int i, atomic_t *v)
1025:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1026:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1027:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_xor(i, v);
1028:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1029:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1030:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1031:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor() - atomic bitwise XOR with full ordering
1032:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1033:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1034:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1035:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with full ordering.
1036:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1037:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor() there.
1038:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1039:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1040:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1041:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1042:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor(int i, atomic_t *v)
1043:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1044:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1045:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1046:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor(i, v);
1047:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1048:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1049:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1050:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_acquire() - atomic bitwise XOR with acquire ordering
1051:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1052:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1053:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1054:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with acquire ordering.
1055:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1056:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_acquire() there.
1057:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1058:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1059:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1060:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1061:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_acquire(int i, atomic_t *v)
1062:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1063:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1064:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_acquire(i, v);
1065:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1066:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1067:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1068:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_release() - atomic bitwise XOR with release ordering
1069:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1070:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1071:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1072:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with release ordering.
1073:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1074:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_release() there.
1075:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1076:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1077:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1078:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
ARM GAS  /tmp/ccl8in31.s 			page 96


1079:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_release(int i, atomic_t *v)
1080:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1081:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1082:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1083:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_release(i, v);
1084:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1085:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1086:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1087:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_relaxed() - atomic bitwise XOR with relaxed ordering
1088:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1089:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1090:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1091:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1092:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1093:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_relaxed() there.
1094:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1095:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1096:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1097:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1098:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_relaxed(int i, atomic_t *v)
1099:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1100:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1101:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_relaxed(i, v);
1102:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1103:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1104:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1105:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg() - atomic exchange with full ordering
1106:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1107:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1108:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1109:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with full ordering.
1110:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1111:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg() there.
1112:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1113:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1114:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1115:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1116:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_xchg(atomic_t *v, int new)
1117:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1118:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1119:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1120:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg(v, new);
1121:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1122:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1123:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1124:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_acquire() - atomic exchange with acquire ordering
1125:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1126:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1127:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1128:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with acquire ordering.
1129:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1130:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_acquire() there.
1131:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1132:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1133:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1134:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1135:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_xchg_acquire(atomic_t *v, int new)
ARM GAS  /tmp/ccl8in31.s 			page 97


1136:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1137:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1138:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_acquire(v, new);
1139:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1140:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1141:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1142:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_release() - atomic exchange with release ordering
1143:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1144:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1145:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1146:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with release ordering.
1147:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1148:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_release() there.
1149:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1150:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1151:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1152:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1153:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_xchg_release(atomic_t *v, int new)
1154:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1155:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1156:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1157:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_release(v, new);
1158:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1159:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1160:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1161:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_relaxed() - atomic exchange with relaxed ordering
1162:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1163:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1164:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1165:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with relaxed ordering.
1166:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1167:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_relaxed() there.
1168:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1169:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1170:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1171:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1172:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_xchg_relaxed(atomic_t *v, int new)
1173:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1174:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1175:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_relaxed(v, new);
1176:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1177:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1178:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1179:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg() - atomic compare and exchange with full ordering
1180:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1181:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1182:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1183:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1184:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
1185:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1186:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1187:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg() there.
1188:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1189:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1190:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1191:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1192:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg(atomic_t *v, int old, int new)
ARM GAS  /tmp/ccl8in31.s 			page 98


1193:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1194:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1195:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1196:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg(v, old, new);
1197:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1198:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1199:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1200:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
1201:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1202:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1203:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1204:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1205:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
1206:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1207:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1208:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_acquire() there.
1209:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1210:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1211:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1212:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1213:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
1214:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1215:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1216:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_acquire(v, old, new);
1217:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1218:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1219:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1220:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_release() - atomic compare and exchange with release ordering
1221:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1222:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1223:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1224:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1225:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
1226:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1227:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1228:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_release() there.
1229:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1230:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1231:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1232:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1233:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_release(atomic_t *v, int old, int new)
1234:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1235:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1236:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1237:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_release(v, old, new);
1238:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1239:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1240:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1241:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
1242:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1243:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1244:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1245:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1246:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
1247:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1248:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1249:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_relaxed() there.
ARM GAS  /tmp/ccl8in31.s 			page 99


1250:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1251:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1252:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1253:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1254:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
1255:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1256:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1257:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_relaxed(v, old, new);
1258:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1259:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1260:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1261:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg() - atomic compare and exchange with full ordering
1262:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1263:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1264:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1265:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1266:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
1267:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1268:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1269:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1270:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg() there.
1271:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1272:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1273:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1274:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1275:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg(atomic_t *v, int *old, int new)
1276:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1277:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1278:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1279:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1280:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg(v, old, new);
1281:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1282:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1283:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1284:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
1285:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1286:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1287:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1288:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1289:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
1290:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1291:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1292:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1293:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_acquire() there.
1294:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1295:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1296:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1297:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1298:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
1299:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1300:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1301:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1302:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_acquire(v, old, new);
1303:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1304:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1305:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1306:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_release() - atomic compare and exchange with release ordering
ARM GAS  /tmp/ccl8in31.s 			page 100


1307:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1308:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1309:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1310:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1311:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
1312:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1313:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1314:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1315:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_release() there.
1316:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1317:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1318:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1319:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1320:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
1321:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1322:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1323:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1324:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1325:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_release(v, old, new);
1326:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1327:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1328:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1329:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
1330:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1331:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1332:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1333:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1334:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
1335:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1336:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1337:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1338:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_relaxed() there.
1339:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1340:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1341:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1342:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1343:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
1344:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1345:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1346:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1347:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_relaxed(v, old, new);
1348:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1349:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1350:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1351:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_and_test() - atomic subtract and test if zero with full ordering
1352:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
1353:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1354:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1355:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
1356:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1357:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_and_test() there.
1358:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1359:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
1360:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1361:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1362:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_sub_and_test(int i, atomic_t *v)
1363:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
ARM GAS  /tmp/ccl8in31.s 			page 101


1364:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1365:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1366:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_and_test(i, v);
1367:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
1368:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 
1369:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** /**
1370:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_and_test() - atomic decrement and test if zero with full ordering
1371:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1372:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1373:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1374:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1375:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_and_test() there.
1376:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  *
1377:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
1378:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h ****  */
1379:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1380:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** atomic_dec_and_test(atomic_t *v)
 1627              		.loc 5 1380 1 is_stmt 1 view .LVU497
1381:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
1382:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 1628              		.loc 5 1382 2 view .LVU498
 1629              		.loc 5 1382 2 view .LVU499
 1630              		.loc 5 1382 2 view .LVU500
1383:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 1631              		.loc 5 1383 2 view .LVU501
1384:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_and_test(v);
 1632              		.loc 5 1384 2 view .LVU502
 1633              	.LBB270:
 1634              	.LBI270:
1005:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1006:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1007:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1008:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1009:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return() - atomic increment with full ordering
1010:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1011:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1012:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with full ordering.
1013:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1014:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return() elsewhere.
1015:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1016:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1017:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1018:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1019:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return(atomic_t *v)
1020:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1021:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return)
1022:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1023:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1024:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1025:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1026:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_inc_return_relaxed(v);
1027:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1028:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1029:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1030:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return(1, v);
1031:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1032:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
ARM GAS  /tmp/ccl8in31.s 			page 102


1033:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1034:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1035:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_acquire() - atomic increment with acquire ordering
1036:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1037:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1038:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
1039:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1040:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_acquire() elsewhere.
1041:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1042:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1043:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1044:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1045:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_acquire(atomic_t *v)
1046:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1047:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_acquire)
1048:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_acquire(v);
1049:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1050:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_inc_return_relaxed(v);
1051:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1052:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1053:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1054:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1055:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1056:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_acquire(1, v);
1057:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1058:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1059:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1060:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1061:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_release() - atomic increment with release ordering
1062:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1063:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1064:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with release ordering.
1065:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1066:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_release() elsewhere.
1067:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1068:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1069:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1070:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1071:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_release(atomic_t *v)
1072:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1073:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_release)
1074:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_release(v);
1075:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1076:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1077:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_relaxed(v);
1078:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1079:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1080:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1081:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_release(1, v);
1082:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1083:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1084:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1085:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1086:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_relaxed() - atomic increment with relaxed ordering
1087:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1088:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1089:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
ARM GAS  /tmp/ccl8in31.s 			page 103


1090:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1091:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_relaxed() elsewhere.
1092:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1093:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1094:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1095:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1096:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_relaxed(atomic_t *v)
1097:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1098:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_relaxed)
1099:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_relaxed(v);
1100:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1101:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1102:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1103:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_relaxed(1, v);
1104:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1105:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1106:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1107:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1108:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc() - atomic increment with full ordering
1109:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1110:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1111:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with full ordering.
1112:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1113:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc() elsewhere.
1114:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1115:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1116:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1117:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1118:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc(atomic_t *v)
1119:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1120:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc)
1121:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1122:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1123:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1124:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1125:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_inc_relaxed(v);
1126:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1127:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1128:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1129:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add(1, v);
1130:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1131:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1132:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1133:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1134:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_acquire() - atomic increment with acquire ordering
1135:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1136:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1137:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
1138:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1139:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_acquire() elsewhere.
1140:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1141:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1142:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1143:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1144:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_acquire(atomic_t *v)
1145:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1146:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_acquire)
ARM GAS  /tmp/ccl8in31.s 			page 104


1147:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_acquire(v);
1148:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1149:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_inc_relaxed(v);
1150:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1151:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1152:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1153:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1154:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1155:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_acquire(1, v);
1156:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1157:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1158:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1159:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1160:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_release() - atomic increment with release ordering
1161:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1162:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1163:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with release ordering.
1164:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1165:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_release() elsewhere.
1166:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1167:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1168:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1169:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1170:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_release(atomic_t *v)
1171:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1172:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_release)
1173:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_release(v);
1174:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1175:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1176:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_relaxed(v);
1177:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1178:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1179:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1180:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_release(1, v);
1181:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1182:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1183:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1184:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1185:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_relaxed() - atomic increment with relaxed ordering
1186:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1187:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1188:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
1189:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1190:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_relaxed() elsewhere.
1191:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1192:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1193:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1194:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1195:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_relaxed(atomic_t *v)
1196:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1197:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_relaxed)
1198:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_relaxed(v);
1199:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1200:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1201:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1202:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_relaxed(1, v);
1203:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccl8in31.s 			page 105


1204:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1205:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1206:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1207:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec() - atomic decrement with relaxed ordering
1208:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1209:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1210:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1211:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1212:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec() elsewhere.
1213:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1214:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1215:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1216:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1217:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec(atomic_t *v)
1218:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1219:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec)
1220:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_dec(v);
1221:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1222:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_sub(1, v);
1223:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1224:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1225:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1226:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1227:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return() - atomic decrement with full ordering
1228:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1229:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1230:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1231:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1232:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return() elsewhere.
1233:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1234:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1235:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1236:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1237:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return(atomic_t *v)
1238:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1239:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return)
1240:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1241:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1242:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1243:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1244:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_dec_return_relaxed(v);
1245:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1246:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1247:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1248:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return(1, v);
1249:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1250:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1251:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1252:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1253:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_acquire() - atomic decrement with acquire ordering
1254:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1255:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1256:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
1257:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1258:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_acquire() elsewhere.
1259:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1260:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
ARM GAS  /tmp/ccl8in31.s 			page 106


1261:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1262:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1263:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_acquire(atomic_t *v)
1264:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1265:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_acquire)
1266:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_acquire(v);
1267:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1268:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_dec_return_relaxed(v);
1269:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1270:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1271:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1272:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1273:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1274:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_acquire(1, v);
1275:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1276:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1277:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1278:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1279:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_release() - atomic decrement with release ordering
1280:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1281:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1282:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with release ordering.
1283:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1284:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_release() elsewhere.
1285:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1286:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1287:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1288:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1289:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_release(atomic_t *v)
1290:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1291:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_release)
1292:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_release(v);
1293:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1294:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1295:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_relaxed(v);
1296:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1297:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1298:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1299:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_release(1, v);
1300:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1301:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1302:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1303:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1304:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_relaxed() - atomic decrement with relaxed ordering
1305:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1306:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1307:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1308:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1309:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_relaxed() elsewhere.
1310:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1311:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1312:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1313:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1314:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_relaxed(atomic_t *v)
1315:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1316:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_relaxed)
1317:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_relaxed(v);
ARM GAS  /tmp/ccl8in31.s 			page 107


1318:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1319:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1320:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1321:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_relaxed(1, v);
1322:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1323:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1324:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1325:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1326:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec() - atomic decrement with full ordering
1327:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1328:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1329:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1330:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1331:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec() elsewhere.
1332:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1333:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1334:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1335:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1336:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec(atomic_t *v)
1337:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1338:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec)
1339:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1340:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1341:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1342:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1343:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_dec_relaxed(v);
1344:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1345:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1346:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1347:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub(1, v);
1348:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1349:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1350:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1351:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1352:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_acquire() - atomic decrement with acquire ordering
1353:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1354:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1355:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
1356:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1357:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_acquire() elsewhere.
1358:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1359:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1360:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1361:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1362:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_acquire(atomic_t *v)
1363:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1364:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_acquire)
1365:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_acquire(v);
1366:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1367:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_dec_relaxed(v);
1368:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1369:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1370:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1371:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1372:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1373:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_acquire(1, v);
1374:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccl8in31.s 			page 108


1375:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1376:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1377:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1378:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_release() - atomic decrement with release ordering
1379:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1380:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1381:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with release ordering.
1382:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1383:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_release() elsewhere.
1384:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1385:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1386:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1387:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1388:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_release(atomic_t *v)
1389:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1390:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_release)
1391:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_release(v);
1392:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1393:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1394:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_relaxed(v);
1395:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1396:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1397:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1398:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_release(1, v);
1399:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1400:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1401:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1402:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1403:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_relaxed() - atomic decrement with relaxed ordering
1404:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1405:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1406:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1407:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1408:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_relaxed() elsewhere.
1409:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1410:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1411:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1412:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1413:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_relaxed(atomic_t *v)
1414:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1415:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_relaxed)
1416:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_relaxed(v);
1417:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1418:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1419:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1420:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_relaxed(1, v);
1421:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1422:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1423:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1424:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1425:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_and() - atomic bitwise AND with relaxed ordering
1426:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1427:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1428:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1429:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
1430:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1431:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_and() elsewhere.
ARM GAS  /tmp/ccl8in31.s 			page 109


1432:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1433:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1434:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1435:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1436:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_and(int i, atomic_t *v)
1437:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1438:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_and(i, v);
1439:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1440:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1441:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1442:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and() - atomic bitwise AND with full ordering
1443:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1444:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1445:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1446:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with full ordering.
1447:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1448:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and() elsewhere.
1449:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1450:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1451:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1452:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1453:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and(int i, atomic_t *v)
1454:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1455:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and)
1456:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1457:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1458:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1459:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1460:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_and_relaxed(i, v);
1461:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1462:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1463:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1464:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and"
1465:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1466:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1467:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1468:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1469:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_acquire() - atomic bitwise AND with acquire ordering
1470:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1471:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1472:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1473:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with acquire ordering.
1474:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1475:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_acquire() elsewhere.
1476:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1477:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1478:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1479:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1480:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_acquire(int i, atomic_t *v)
1481:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1482:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_acquire)
1483:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_acquire(i, v);
1484:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1485:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_and_relaxed(i, v);
1486:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1487:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1488:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
ARM GAS  /tmp/ccl8in31.s 			page 110


1489:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1490:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1491:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_acquire"
1492:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1493:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1494:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1495:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1496:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_release() - atomic bitwise AND with release ordering
1497:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1498:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1499:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1500:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with release ordering.
1501:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1502:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_release() elsewhere.
1503:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1504:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1505:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1506:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1507:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_release(int i, atomic_t *v)
1508:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1509:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_release)
1510:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_release(i, v);
1511:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1512:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1513:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_relaxed(i, v);
1514:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1515:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1516:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1517:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_release"
1518:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1519:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1520:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1521:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1522:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_relaxed() - atomic bitwise AND with relaxed ordering
1523:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1524:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1525:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1526:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
1527:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1528:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_relaxed() elsewhere.
1529:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1530:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1531:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1532:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1533:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_relaxed(int i, atomic_t *v)
1534:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1535:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_relaxed)
1536:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_relaxed(i, v);
1537:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1538:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1539:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1540:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_relaxed"
1541:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1542:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1543:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1544:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1545:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_andnot() - atomic bitwise AND NOT with relaxed ordering
ARM GAS  /tmp/ccl8in31.s 			page 111


1546:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1547:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1548:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1549:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
1550:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1551:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_andnot() elsewhere.
1552:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1553:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1554:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1555:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1556:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_andnot(int i, atomic_t *v)
1557:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1558:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_andnot)
1559:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_andnot(i, v);
1560:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1561:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_and(~i, v);
1562:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1563:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1564:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1565:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1566:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot() - atomic bitwise AND NOT with full ordering
1567:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1568:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1569:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1570:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with full ordering.
1571:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1572:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot() elsewhere.
1573:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1574:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1575:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1576:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1577:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot(int i, atomic_t *v)
1578:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1579:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot)
1580:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1581:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1582:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1583:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1584:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_andnot_relaxed(i, v);
1585:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1586:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1587:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1588:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and(~i, v);
1589:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1590:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1591:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1592:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1593:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_acquire() - atomic bitwise AND NOT with acquire ordering
1594:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1595:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1596:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1597:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with acquire ordering.
1598:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1599:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_acquire() elsewhere.
1600:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1601:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1602:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
ARM GAS  /tmp/ccl8in31.s 			page 112


1603:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1604:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_acquire(int i, atomic_t *v)
1605:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1606:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_acquire)
1607:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_acquire(i, v);
1608:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1609:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_andnot_relaxed(i, v);
1610:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1611:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1612:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1613:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1614:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1615:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_acquire(~i, v);
1616:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1617:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1618:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1619:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1620:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_release() - atomic bitwise AND NOT with release ordering
1621:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1622:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1623:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1624:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with release ordering.
1625:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1626:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_release() elsewhere.
1627:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1628:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1629:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1630:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1631:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_release(int i, atomic_t *v)
1632:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1633:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_release)
1634:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_release(i, v);
1635:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1636:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1637:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_relaxed(i, v);
1638:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1639:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1640:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1641:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_release(~i, v);
1642:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1643:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1644:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1645:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1646:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_relaxed() - atomic bitwise AND NOT with relaxed ordering
1647:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1648:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1649:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1650:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
1651:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1652:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_relaxed() elsewhere.
1653:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1654:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1655:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1656:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1657:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
1658:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1659:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_relaxed)
ARM GAS  /tmp/ccl8in31.s 			page 113


1660:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_relaxed(i, v);
1661:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1662:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1663:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1664:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_relaxed(~i, v);
1665:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1666:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1667:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1668:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1669:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_or() - atomic bitwise OR with relaxed ordering
1670:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1671:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1672:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1673:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1674:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1675:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_or() elsewhere.
1676:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1677:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1678:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1679:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1680:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_or(int i, atomic_t *v)
1681:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1682:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_or(i, v);
1683:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1684:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1685:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1686:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or() - atomic bitwise OR with full ordering
1687:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1688:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1689:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1690:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with full ordering.
1691:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1692:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or() elsewhere.
1693:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1694:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1695:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1696:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1697:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or(int i, atomic_t *v)
1698:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1699:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or)
1700:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1701:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1702:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1703:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1704:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_or_relaxed(i, v);
1705:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1706:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1707:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1708:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or"
1709:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1710:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1711:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1712:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1713:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_acquire() - atomic bitwise OR with acquire ordering
1714:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1715:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1716:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 114


1717:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with acquire ordering.
1718:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1719:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_acquire() elsewhere.
1720:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1721:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1722:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1723:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1724:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_acquire(int i, atomic_t *v)
1725:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1726:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_acquire)
1727:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_acquire(i, v);
1728:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1729:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_or_relaxed(i, v);
1730:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1731:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1732:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1733:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1734:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1735:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_acquire"
1736:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1737:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1738:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1739:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1740:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_release() - atomic bitwise OR with release ordering
1741:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1742:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1743:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1744:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with release ordering.
1745:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1746:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_release() elsewhere.
1747:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1748:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1749:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1750:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1751:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_release(int i, atomic_t *v)
1752:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1753:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_release)
1754:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_release(i, v);
1755:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1756:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1757:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_relaxed(i, v);
1758:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1759:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1760:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1761:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_release"
1762:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1763:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1764:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1765:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1766:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_relaxed() - atomic bitwise OR with relaxed ordering
1767:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1768:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1769:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1770:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1771:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1772:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_relaxed() elsewhere.
1773:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccl8in31.s 			page 115


1774:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1775:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1776:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1777:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_relaxed(int i, atomic_t *v)
1778:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1779:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_relaxed)
1780:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_relaxed(i, v);
1781:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1782:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1783:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1784:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_relaxed"
1785:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1786:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1787:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1788:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1789:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xor() - atomic bitwise XOR with relaxed ordering
1790:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1791:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1792:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1793:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1794:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1795:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xor() elsewhere.
1796:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1797:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1798:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1799:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1800:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xor(int i, atomic_t *v)
1801:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1802:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_xor(i, v);
1803:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1804:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1805:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1806:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor() - atomic bitwise XOR with full ordering
1807:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1808:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1809:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1810:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with full ordering.
1811:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1812:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor() elsewhere.
1813:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1814:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1815:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1816:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1817:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor(int i, atomic_t *v)
1818:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1819:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor)
1820:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1821:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1822:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1823:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1824:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_xor_relaxed(i, v);
1825:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1826:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1827:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1828:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor"
1829:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1830:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
ARM GAS  /tmp/ccl8in31.s 			page 116


1831:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1832:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1833:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_acquire() - atomic bitwise XOR with acquire ordering
1834:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1835:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1836:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1837:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with acquire ordering.
1838:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1839:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_acquire() elsewhere.
1840:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1841:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1842:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1843:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1844:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_acquire(int i, atomic_t *v)
1845:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1846:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_acquire)
1847:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_acquire(i, v);
1848:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1849:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_xor_relaxed(i, v);
1850:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1851:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1852:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1853:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1854:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1855:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_acquire"
1856:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1857:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1858:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1859:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1860:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_release() - atomic bitwise XOR with release ordering
1861:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1862:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1863:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1864:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with release ordering.
1865:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1866:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_release() elsewhere.
1867:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1868:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1869:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1870:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1871:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_release(int i, atomic_t *v)
1872:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1873:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_release)
1874:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_release(i, v);
1875:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1876:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1877:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_relaxed(i, v);
1878:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1879:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1880:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1881:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_release"
1882:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1883:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1884:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1885:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1886:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_relaxed() - atomic bitwise XOR with relaxed ordering
1887:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
ARM GAS  /tmp/ccl8in31.s 			page 117


1888:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1889:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1890:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1891:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1892:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_relaxed() elsewhere.
1893:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1894:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1895:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1896:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1897:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_relaxed(int i, atomic_t *v)
1898:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1899:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_relaxed)
1900:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_relaxed(i, v);
1901:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1902:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1903:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1904:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_relaxed"
1905:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1906:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1907:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1908:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1909:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg() - atomic exchange with full ordering
1910:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1911:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1912:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1913:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with full ordering.
1914:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1915:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg() elsewhere.
1916:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1917:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1918:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1919:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1920:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg(atomic_t *v, int new)
1921:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1922:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg)
1923:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1924:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1925:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1926:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1927:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_xchg_relaxed(v, new);
1928:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1929:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1930:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1931:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg(&v->counter, new);
1932:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1933:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1934:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1935:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1936:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_acquire() - atomic exchange with acquire ordering
1937:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1938:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1939:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1940:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with acquire ordering.
1941:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1942:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_acquire() elsewhere.
1943:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1944:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
ARM GAS  /tmp/ccl8in31.s 			page 118


1945:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1946:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1947:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_acquire(atomic_t *v, int new)
1948:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1949:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_acquire)
1950:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_acquire(v, new);
1951:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1952:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_xchg_relaxed(v, new);
1953:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1954:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1955:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
1956:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1957:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1958:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_acquire(&v->counter, new);
1959:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1960:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1961:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1962:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1963:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_release() - atomic exchange with release ordering
1964:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1965:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1966:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1967:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with release ordering.
1968:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1969:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_release() elsewhere.
1970:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1971:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1972:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1973:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1974:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_release(atomic_t *v, int new)
1975:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
1976:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_release)
1977:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_release(v, new);
1978:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1979:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1980:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_relaxed(v, new);
1981:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
1982:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1983:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
1984:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_release(&v->counter, new);
1985:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
1986:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
1987:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
1988:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
1989:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_relaxed() - atomic exchange with relaxed ordering
1990:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1991:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1992:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1993:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with relaxed ordering.
1994:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1995:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_relaxed() elsewhere.
1996:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
1997:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1998:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
1999:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2000:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_relaxed(atomic_t *v, int new)
2001:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
ARM GAS  /tmp/ccl8in31.s 			page 119


2002:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_relaxed)
2003:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_relaxed(v, new);
2004:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
2005:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
2006:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2007:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_relaxed(&v->counter, new);
2008:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2009:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2010:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2011:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2012:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg() - atomic compare and exchange with full ordering
2013:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2014:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2015:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2016:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2017:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
2018:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2019:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2020:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg() elsewhere.
2021:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2022:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2023:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2024:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2025:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg(atomic_t *v, int old, int new)
2026:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2027:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg)
2028:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2029:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2030:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
2031:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
2032:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_cmpxchg_relaxed(v, old, new);
2033:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
2034:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2035:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2036:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg(&v->counter, old, new);
2037:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2038:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2039:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2040:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2041:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
2042:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2043:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2044:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2045:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2046:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
2047:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2048:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2049:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_acquire() elsewhere.
2050:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2051:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2052:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2053:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2054:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
2055:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2056:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_acquire)
2057:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_acquire(v, old, new);
2058:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
ARM GAS  /tmp/ccl8in31.s 			page 120


2059:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_cmpxchg_relaxed(v, old, new);
2060:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
2061:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2062:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2063:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2064:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2065:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_acquire(&v->counter, old, new);
2066:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2067:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2068:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2069:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2070:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_release() - atomic compare and exchange with release ordering
2071:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2072:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2073:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2074:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2075:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
2076:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2077:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2078:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_release() elsewhere.
2079:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2080:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2081:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2082:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2083:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_release(atomic_t *v, int old, int new)
2084:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2085:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_release)
2086:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_release(v, old, new);
2087:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2088:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
2089:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_relaxed(v, old, new);
2090:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2091:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2092:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2093:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_release(&v->counter, old, new);
2094:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2095:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2096:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2097:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2098:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
2099:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2100:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2101:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2102:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2103:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
2104:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2105:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2106:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_relaxed() elsewhere.
2107:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2108:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2109:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2110:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2111:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
2112:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2113:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_relaxed)
2114:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_relaxed(v, old, new);
2115:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
ARM GAS  /tmp/ccl8in31.s 			page 121


2116:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2117:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2118:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_relaxed(&v->counter, old, new);
2119:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2120:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2121:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2122:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2123:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg() - atomic compare and exchange with full ordering
2124:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2125:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2126:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2127:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2128:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
2129:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2130:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2131:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2132:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg() elsewhere.
2133:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2134:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2135:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2136:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2137:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
2138:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2139:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg)
2140:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2141:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2142:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	bool ret;
2143:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
2144:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_try_cmpxchg_relaxed(v, old, new);
2145:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
2146:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2147:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2148:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2149:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg(v, o, new);
2150:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2151:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2152:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2153:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2154:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2155:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2156:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2157:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
2158:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2159:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2160:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2161:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2162:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
2163:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2164:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2165:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2166:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_acquire() elsewhere.
2167:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2168:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2169:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2170:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2171:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
2172:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
ARM GAS  /tmp/ccl8in31.s 			page 122


2173:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_acquire)
2174:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_acquire(v, old, new);
2175:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2176:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	bool ret = arch_atomic_try_cmpxchg_relaxed(v, old, new);
2177:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
2178:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2179:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2180:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2181:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2182:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2183:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_acquire(v, o, new);
2184:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2185:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2186:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2187:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2188:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2189:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2190:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2191:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_release() - atomic compare and exchange with release ordering
2192:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2193:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2194:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2195:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2196:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
2197:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2198:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2199:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2200:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_release() elsewhere.
2201:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2202:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2203:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2204:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2205:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
2206:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2207:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_release)
2208:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_release(v, old, new);
2209:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2210:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
2211:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_relaxed(v, old, new);
2212:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2213:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2214:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2215:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2216:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_release(v, o, new);
2217:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2218:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2219:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2220:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2221:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2222:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2223:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2224:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
2225:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2226:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2227:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2228:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2229:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
ARM GAS  /tmp/ccl8in31.s 			page 123


2230:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2231:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2232:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2233:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_relaxed() elsewhere.
2234:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2235:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2236:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2237:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2238:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
2239:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2240:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_relaxed)
2241:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_relaxed(v, old, new);
2242:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2243:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2244:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2245:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2246:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_relaxed(v, o, new);
2247:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2248:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2249:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2250:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2251:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2252:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2253:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2254:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_and_test() - atomic subtract and test if zero with full ordering
2255:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
2256:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2257:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2258:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
2259:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2260:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_and_test() elsewhere.
2261:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2262:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
2263:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2264:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2265:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_and_test(int i, atomic_t *v)
2266:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2267:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_and_test)
2268:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_and_test(i, v);
2269:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2270:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return(i, v) == 0;
2271:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
2272:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
2273:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 
2274:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** /**
2275:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_and_test() - atomic decrement and test if zero with full ordering
2276:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2277:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2278:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
2279:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2280:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_and_test() elsewhere.
2281:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  *
2282:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
2283:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h ****  */
2284:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2285:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_and_test(atomic_t *v)
 1635              		.loc 6 2285 1 view .LVU503
ARM GAS  /tmp/ccl8in31.s 			page 124


2286:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
2287:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_and_test)
2288:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_and_test(v);
2289:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
2290:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_dec_return(v) == 0;
 1636              		.loc 6 2290 2 view .LVU504
 1637              	.LBB271:
 1638              	.LBI271:
1237:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 1639              		.loc 6 1237 1 view .LVU505
1248:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 1640              		.loc 6 1248 2 view .LVU506
 1641              	.LBB272:
 1642              	.LBI272:
 790:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 1643              		.loc 6 790 1 view .LVU507
 1644              	.LBB273:
 795:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 1645              		.loc 6 795 2 view .LVU508
 796:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_sub_return_relaxed(i, v);
 1646              		.loc 6 796 2 view .LVU509
 1647              	.LBB274:
 1648              	.LBI274:
 1649              		.file 9 "/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** /* SPDX-License-Identifier: GPL-2.0-or-later */
   2:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** /*
   3:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  * Generic barrier definitions.
   4:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  *
   5:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  * It should be possible to use these on really simple architectures,
   6:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  * but it serves more as a starting point for new ports.
   7:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  *
   8:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.
   9:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  * Written by David Howells (dhowells@redhat.com)
  10:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h ****  */
  11:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** 
  12:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** #include <linux/rwonce.h>
  13:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** 
  14:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** static inline void sync(void)
  15:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** {
  16:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** 	asm volatile("sync" : : : "memory");
  17:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** }
  18:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** 
  19:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** static inline void eieio(void)
  20:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** {
  21:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** 	asm volatile("eieio" : : : "memory");
  22:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** }
  23:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** 
  24:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** static inline void barrier(void)
 1650              		.loc 9 24 20 view .LVU510
 1651              	.LBB275:
  25:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** {
  26:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** 	asm volatile("" : : : "memory");
 1652              		.loc 9 26 2 view .LVU511
 1653              	.LBE275:
 1654              	.LBE274:
 797:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 1655              		.loc 6 797 2 view .LVU512
ARM GAS  /tmp/ccl8in31.s 			page 125


 1656              	.LVL141:
 1657              	.LBB276:
 1658              	.LBI276:
 171:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 1659              		.loc 8 171 1 view .LVU513
 1660              	.LBB277:
 1661              		.loc 8 171 1 view .LVU514
 1662              		.loc 8 171 1 view .LVU515
 1663              		.loc 8 171 1 view .LVU516
 1664              		.syntax unified
 1665              	@ 171 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h" 1
 1666              		@ atomic_sub_return
 1667 0016 53E8002F 	1: ldrex   r2, [r3]
 1668 001a A2F10102 	   sub r2, r2, #1
 1669 001e 43E80021 	   strex   r1, r2, [r3]
 1670 0022 91F0000F 	   teq r1, #0
 1671 0026 F6D1     	   bne 1b
 1672              	@ 0 "" 2
 1673              	.LVL142:
 1674              		.loc 8 171 1 view .LVU517
 1675              		.loc 8 171 1 is_stmt 0 view .LVU518
 1676              		.thumb
 1677              		.syntax unified
 1678              	.LBE277:
 1679              	.LBE276:
 798:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 1680              		.loc 6 798 2 is_stmt 1 view .LVU519
 1681              	.LBB278:
 1682              	.LBI278:
  24:/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/barrier.h **** {
 1683              		.loc 9 24 20 view .LVU520
 1684              	.LBB279:
 1685              		.loc 9 26 2 view .LVU521
 1686              	.LBE279:
 1687              	.LBE278:
 799:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 1688              		.loc 6 799 2 view .LVU522
 1689              	.LVL143:
 799:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #else
 1690              		.loc 6 799 2 is_stmt 0 view .LVU523
 1691              	.LBE273:
 1692              	.LBE272:
 1693              	.LBE271:
 1694              	.LBE270:
 1695              	.LBE269:
 181:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         {
 1696              		.loc 1 181 12 discriminator 1 view .LVU524
 1697 0028 4AB1     		cbz	r2, .L108
 1698              	.L103:
 186:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 1699              		.loc 1 186 9 is_stmt 1 view .LVU525
 1700 002a 2046     		mov	r0, r4
 1701 002c FFF7FEFF 		bl	spin_unlock
 1702              	.LVL144:
 1703              	.L102:
 188:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     kfree(dentry);
 1704              		.loc 1 188 5 view .LVU526
ARM GAS  /tmp/ccl8in31.s 			page 126


 1705              	.LBB280:
 1706              	.LBI280:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 1707              		.loc 4 383 20 view .LVU527
 1708              	.LBB281:
 1709              		.loc 4 384 2 view .LVU528
 1710 0030 6868     		ldr	r0, [r5, #4]
 1711 0032 FFF7FEFF 		bl	__sfree__
 1712              	.LVL145:
 1713              		.loc 4 384 2 is_stmt 0 view .LVU529
 1714              	.LBE281:
 1715              	.LBE280:
 189:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1716              		.loc 1 189 5 is_stmt 1 view .LVU530
 1717              	.LBB282:
 1718              	.LBI282:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 1719              		.loc 4 383 20 view .LVU531
 1720              	.LBB283:
 1721              		.loc 4 384 2 view .LVU532
 1722 0036 2846     		mov	r0, r5
 1723 0038 FFF7FEFF 		bl	__sfree__
 1724              	.LVL146:
 1725              		.loc 4 384 2 is_stmt 0 view .LVU533
 1726              	.LBE283:
 1727              	.LBE282:
 190:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void devfs_delete_dentry(struct devfs_superblock *sb,struct devfs_inode* parent_dentry_inode
 1728              		.loc 1 190 1 view .LVU534
 1729 003c 38BD     		pop	{r3, r4, r5, pc}
 1730              	.LVL147:
 1731              	.L108:
 183:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             devfs_inode_put(dentry->target_inode);
 1732              		.loc 1 183 13 is_stmt 1 view .LVU535
 183:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             devfs_inode_put(dentry->target_inode);
 1733              		.loc 1 183 29 is_stmt 0 view .LVU536
 1734 003e AB68     		ldr	r3, [r5, #8]
 1735              	.LVL148:
 1736              	.LBB284:
 1737              	.LBI284:
 170:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 171:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 172:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 173:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 174:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_add_tail - add a new entry
 175:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @new: new entry to be added
 176:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: list head to add it before
 177:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 178:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Insert a new entry before the specified head.
 179:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * This is useful for implementing queues.
 180:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 181:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_add_tail(struct list_head *new, struct list_head *head)
 182:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 183:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_add(new, head->prev, head);
 184:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 185:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 186:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
 187:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Delete a list entry by making the prev/next entries
ARM GAS  /tmp/ccl8in31.s 			page 127


 188:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * point to each other.
 189:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 190:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * This is only for internal list manipulation where we know
 191:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * the prev/next entries already!
 192:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void __list_del(struct list_head * prev, struct list_head * next)
 194:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	next->prev = prev;
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 197:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 198:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 199:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /*
 200:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Delete a list entry and clear the 'prev' pointer.
 201:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 202:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * This is a special-purpose list clearing method used in the networking code
 203:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * for lists allocated as per-cpu, where we don't want to incur the extra
 204:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * WRITE_ONCE() overhead of a regular list_del_init(). The code that uses this
 205:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * needs to check the node 'prev' pointer instead of calling list_empty().
 206:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 207:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void __list_del_clearprev(struct list_head *entry)
 208:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 209:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 210:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = NULL;
 211:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 212:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void __list_del_entry(struct list_head *entry)
 214:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	if (!__list_del_entry_valid(entry))
 216:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 217:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 219:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 220:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 221:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 222:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_del - deletes entry from list.
 223:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @entry: the element to delete from the list.
 224:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Note: list_empty() on entry does not return true after this, the entry is
 225:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * in an undefined state.
 226:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_del(struct list_head *entry)
 1738              		.loc 7 227 20 is_stmt 1 view .LVU537
 1739              	.LBB285:
 228:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_del_entry(entry);
 1740              		.loc 7 229 2 view .LVU538
 1741              	.LBB286:
 1742              	.LBI286:
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 1743              		.loc 7 213 20 view .LVU539
 1744              	.LBB287:
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 1745              		.loc 7 215 2 view .LVU540
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1746              		.loc 7 218 2 view .LVU541
 1747 0040 9A69     		ldr	r2, [r3, #24]
 1748 0042 5969     		ldr	r1, [r3, #20]
 1749              	.LVL149:
ARM GAS  /tmp/ccl8in31.s 			page 128


 1750              	.LBB288:
 1751              	.LBI288:
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 1752              		.loc 7 193 20 view .LVU542
 1753              	.LBB289:
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1754              		.loc 7 195 2 view .LVU543
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1755              		.loc 7 195 13 is_stmt 0 view .LVU544
 1756 0044 4A60     		str	r2, [r1, #4]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1757              		.loc 7 196 2 is_stmt 1 view .LVU545
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1758              		.loc 7 196 2 view .LVU546
 1759              	.LBB290:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1760              		.loc 7 196 2 view .LVU547
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1761              		.loc 7 196 2 view .LVU548
 1762              	.LBE290:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1763              		.loc 7 196 2 discriminator 2 view .LVU549
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1764              		.loc 7 196 2 discriminator 2 view .LVU550
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1765              		.loc 7 196 2 discriminator 2 view .LVU551
 1766 0046 1160     		str	r1, [r2]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1767              		.loc 7 196 2 discriminator 2 view .LVU552
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1768              		.loc 7 196 2 discriminator 2 view .LVU553
 1769              	.LVL150:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1770              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU554
 1771              	.LBE289:
 1772              	.LBE288:
 1773              	.LBE287:
 1774              	.LBE286:
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->next = LIST_POISON1;
 1775              		.loc 7 230 2 is_stmt 1 view .LVU555
 1776              		.loc 7 230 14 is_stmt 0 view .LVU556
 1777 0048 4FF48072 		mov	r2, #256
 1778 004c 5A61     		str	r2, [r3, #20]
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1779              		.loc 7 231 2 is_stmt 1 view .LVU557
 1780              		.loc 7 231 14 is_stmt 0 view .LVU558
 1781 004e 4FF49172 		mov	r2, #290
 1782 0052 9A61     		str	r2, [r3, #24]
 1783              	.LVL151:
 1784              		.loc 7 231 14 view .LVU559
 1785              	.LBE285:
 1786              	.LBE284:
 184:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 1787              		.loc 1 184 13 is_stmt 1 view .LVU560
 1788 0054 A868     		ldr	r0, [r5, #8]
 1789 0056 FFF7FEFF 		bl	devfs_inode_put
 1790              	.LVL152:
ARM GAS  /tmp/ccl8in31.s 			page 129


 1791 005a E6E7     		b	.L103
 1792              	.LVL153:
 1793              	.L105:
 1794              	.LCFI20:
 1795              		.cfi_def_cfa_offset 0
 1796              		.cfi_restore 3
 1797              		.cfi_restore 4
 1798              		.cfi_restore 5
 1799              		.cfi_restore 14
 184:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 1800              		.loc 1 184 13 is_stmt 0 view .LVU561
 1801 005c 7047     		bx	lr
 1802              		.cfi_endproc
 1803              	.LFE1048:
 1805              		.section	.text.devfs_release_dentry,"ax",%progbits
 1806              		.align	1
 1807              		.syntax unified
 1808              		.thumb
 1809              		.thumb_func
 1811              	devfs_release_dentry:
 1812              	.LVL154:
 1813              	.LFB1066:
 538:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *fs_dentry = dentry->d_fsdata;
 1814              		.loc 1 538 55 is_stmt 1 view -0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 0
 1817              		@ frame_needed = 0, uses_anonymous_args = 0
 538:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *fs_dentry = dentry->d_fsdata;
 1818              		.loc 1 538 55 is_stmt 0 view .LVU563
 1819 0000 08B5     		push	{r3, lr}
 1820              	.LCFI21:
 1821              		.cfi_def_cfa_offset 8
 1822              		.cfi_offset 3, -8
 1823              		.cfi_offset 14, -4
 539:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 1824              		.loc 1 539 5 is_stmt 1 view .LVU564
 539:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 1825              		.loc 1 539 26 is_stmt 0 view .LVU565
 1826 0002 416D     		ldr	r1, [r0, #84]
 1827              	.LVL155:
 540:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1828              		.loc 1 540 5 is_stmt 1 view .LVU566
 540:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1829              		.loc 1 540 25 is_stmt 0 view .LVU567
 1830 0004 8B68     		ldr	r3, [r1, #8]
 540:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1831              		.loc 1 540 5 view .LVU568
 1832 0006 986B     		ldr	r0, [r3, #56]
 1833              	.LVL156:
 540:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1834              		.loc 1 540 5 view .LVU569
 1835 0008 FFF7FEFF 		bl	dentry_put
 1836              	.LVL157:
 541:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static int devfs_rmdir(struct inode *	dir  ,struct dentry *dentry){
 1837              		.loc 1 541 1 view .LVU570
 1838 000c 08BD     		pop	{r3, pc}
 1839              		.cfi_endproc
ARM GAS  /tmp/ccl8in31.s 			page 130


 1840              	.LFE1066:
 1842              		.section	.text.devfs_rmdir,"ax",%progbits
 1843              		.align	1
 1844              		.syntax unified
 1845              		.thumb
 1846              		.thumb_func
 1848              	devfs_rmdir:
 1849              	.LVL158:
 1850              	.LFB1067:
 542:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_release_dentry(dentry);
 1851              		.loc 1 542 67 is_stmt 1 view -0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 0
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
 542:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_release_dentry(dentry);
 1855              		.loc 1 542 67 is_stmt 0 view .LVU572
 1856 0000 38B5     		push	{r3, r4, r5, lr}
 1857              	.LCFI22:
 1858              		.cfi_def_cfa_offset 16
 1859              		.cfi_offset 3, -16
 1860              		.cfi_offset 4, -12
 1861              		.cfi_offset 5, -8
 1862              		.cfi_offset 14, -4
 1863 0002 0546     		mov	r5, r0
 1864 0004 0C46     		mov	r4, r1
 543:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return simple_unlink(dir,dentry);
 1865              		.loc 1 543 5 is_stmt 1 view .LVU573
 1866 0006 0846     		mov	r0, r1
 1867              	.LVL159:
 543:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return simple_unlink(dir,dentry);
 1868              		.loc 1 543 5 is_stmt 0 view .LVU574
 1869 0008 FFF7FEFF 		bl	devfs_release_dentry
 1870              	.LVL160:
 544:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1871              		.loc 1 544 5 is_stmt 1 view .LVU575
 544:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1872              		.loc 1 544 12 is_stmt 0 view .LVU576
 1873 000c 2146     		mov	r1, r4
 1874 000e 2846     		mov	r0, r5
 1875 0010 FFF7FEFF 		bl	simple_unlink
 1876              	.LVL161:
 545:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1877              		.loc 1 545 1 view .LVU577
 1878 0014 38BD     		pop	{r3, r4, r5, pc}
 545:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 1879              		.loc 1 545 1 view .LVU578
 1880              		.cfi_endproc
 1881              	.LFE1067:
 1883              		.section	.text.devfs_delete_dentry,"ax",%progbits
 1884              		.align	1
 1885              		.syntax unified
 1886              		.thumb
 1887              		.thumb_func
 1889              	devfs_delete_dentry:
 1890              	.LVL162:
 1891              	.LFB1049:
 191:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
ARM GAS  /tmp/ccl8in31.s 			page 131


 1892              		.loc 1 191 136 is_stmt 1 view -0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 0
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 191:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
 1896              		.loc 1 191 136 is_stmt 0 view .LVU580
 1897 0000 70B5     		push	{r4, r5, r6, lr}
 1898              	.LCFI23:
 1899              		.cfi_def_cfa_offset 16
 1900              		.cfi_offset 4, -16
 1901              		.cfi_offset 5, -12
 1902              		.cfi_offset 6, -8
 1903              		.cfi_offset 14, -4
 1904 0002 0546     		mov	r5, r0
 1905 0004 1446     		mov	r4, r2
 192:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 1906              		.loc 1 192 5 is_stmt 1 view .LVU581
 192:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 1907              		.loc 1 192 7 is_stmt 0 view .LVU582
 1908 0006 0E46     		mov	r6, r1
 1909 0008 19B1     		cbz	r1, .L114
 192:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 1910              		.loc 1 192 37 is_stmt 1 discriminator 1 view .LVU583
 1911 000a 01F12400 		add	r0, r1, #36
 1912              	.LVL163:
 192:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 1913              		.loc 1 192 37 is_stmt 0 discriminator 1 view .LVU584
 1914 000e FFF7FEFF 		bl	spin_lock
 1915              	.LVL164:
 1916              	.L114:
 194:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1917              		.loc 1 194 5 is_stmt 1 view .LVU585
 194:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1918              		.loc 1 194 23 is_stmt 0 view .LVU586
 1919 0012 A268     		ldr	r2, [r4, #8]
 194:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1920              		.loc 1 194 37 view .LVU587
 1921 0014 5368     		ldr	r3, [r2, #4]
 194:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1922              		.loc 1 194 46 view .LVU588
 1923 0016 03F47043 		and	r3, r3, #61440
 194:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1924              		.loc 1 194 8 view .LVU589
 1925 001a B3F5804F 		cmp	r3, #16384
 1926 001e 13D0     		beq	.L120
 1927              	.L115:
 201:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode != NULL) spin_unlock(&parent_dentry_inode->lock);
 1928              		.loc 1 201 5 is_stmt 1 view .LVU590
 1929              	.LVL165:
 1930              	.LBB291:
 1931              	.LBI291:
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 1932              		.loc 7 227 20 view .LVU591
 1933              	.LBB292:
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->next = LIST_POISON1;
 1934              		.loc 7 229 2 view .LVU592
 1935              	.LBB293:
ARM GAS  /tmp/ccl8in31.s 			page 132


 1936              	.LBI293:
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 1937              		.loc 7 213 20 view .LVU593
 1938              	.LBB294:
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 1939              		.loc 7 215 2 view .LVU594
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1940              		.loc 7 218 2 view .LVU595
 1941 0020 2369     		ldr	r3, [r4, #16]
 1942 0022 E268     		ldr	r2, [r4, #12]
 1943              	.LVL166:
 1944              	.LBB295:
 1945              	.LBI295:
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 1946              		.loc 7 193 20 view .LVU596
 1947              	.LBB296:
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1948              		.loc 7 195 2 view .LVU597
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1949              		.loc 7 195 13 is_stmt 0 view .LVU598
 1950 0024 5360     		str	r3, [r2, #4]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1951              		.loc 7 196 2 is_stmt 1 view .LVU599
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1952              		.loc 7 196 2 view .LVU600
 1953              	.LBB297:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1954              		.loc 7 196 2 view .LVU601
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1955              		.loc 7 196 2 view .LVU602
 1956              	.LBE297:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1957              		.loc 7 196 2 discriminator 2 view .LVU603
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1958              		.loc 7 196 2 discriminator 2 view .LVU604
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1959              		.loc 7 196 2 discriminator 2 view .LVU605
 1960 0026 1A60     		str	r2, [r3]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1961              		.loc 7 196 2 discriminator 2 view .LVU606
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1962              		.loc 7 196 2 discriminator 2 view .LVU607
 1963              	.LVL167:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 1964              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU608
 1965              	.LBE296:
 1966              	.LBE295:
 1967              	.LBE294:
 1968              	.LBE293:
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1969              		.loc 7 230 2 is_stmt 1 view .LVU609
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1970              		.loc 7 230 14 is_stmt 0 view .LVU610
 1971 0028 4FF48073 		mov	r3, #256
 1972 002c E360     		str	r3, [r4, #12]
 1973              		.loc 7 231 2 is_stmt 1 view .LVU611
 1974              		.loc 7 231 14 is_stmt 0 view .LVU612
ARM GAS  /tmp/ccl8in31.s 			page 133


 1975 002e 4FF49173 		mov	r3, #290
 1976 0032 2361     		str	r3, [r4, #16]
 1977              	.LVL168:
 1978              		.loc 7 231 14 view .LVU613
 1979              	.LBE292:
 1980              	.LBE291:
 202:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry_put(sb,delete_dentry);
 1981              		.loc 1 202 5 is_stmt 1 view .LVU614
 202:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry_put(sb,delete_dentry);
 1982              		.loc 1 202 7 is_stmt 0 view .LVU615
 1983 0034 1EB1     		cbz	r6, .L118
 202:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry_put(sb,delete_dentry);
 1984              		.loc 1 202 37 is_stmt 1 discriminator 1 view .LVU616
 1985 0036 06F12400 		add	r0, r6, #36
 1986 003a FFF7FEFF 		bl	spin_unlock
 1987              	.LVL169:
 1988              	.L118:
 203:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 1989              		.loc 1 203 5 view .LVU617
 1990 003e 2146     		mov	r1, r4
 1991 0040 2846     		mov	r0, r5
 1992 0042 FFF7FEFF 		bl	dentry_put
 1993              	.LVL170:
 1994              	.L113:
 204:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_superblock* devfs_superblock_create(void) //ÂàõÂª∫superblock
 1995              		.loc 1 204 1 is_stmt 0 view .LVU618
 1996 0046 70BD     		pop	{r4, r5, r6, pc}
 1997              	.LVL171:
 1998              	.L120:
 195:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             if(parent_dentry_inode != NULL) 
 1999              		.loc 1 195 9 is_stmt 1 view .LVU619
 195:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             if(parent_dentry_inode != NULL) 
 2000              		.loc 1 195 24 is_stmt 0 view .LVU620
 2001 0048 02F11C01 		add	r1, r2, #28
 2002              	.LVL172:
 2003              	.LBB298:
 2004              	.LBI298:
 232:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 233:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 234:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 235:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_replace - replace old entry by new one
 236:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @old : the element to be replaced
 237:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @new : the new element to insert
 238:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 239:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * If @old was empty, it will be overwritten.
 240:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 241:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_replace(struct list_head *old,
 242:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 				struct list_head *new)
 243:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 244:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->next = old->next;
 245:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->next->prev = new;
 246:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->prev = old->prev;
 247:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->prev->next = new;
 248:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 249:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 250:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 251:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_replace_init - replace old entry by new one and initialize the old one
ARM GAS  /tmp/ccl8in31.s 			page 134


 252:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @old : the element to be replaced
 253:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @new : the new element to insert
 254:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 255:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * If @old was empty, it will be overwritten.
 256:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 257:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_replace_init(struct list_head *old,
 258:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 				     struct list_head *new)
 259:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 260:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	list_replace(old, new);
 261:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	INIT_LIST_HEAD(old);
 262:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 263:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 264:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 265:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_swap - replace entry1 with entry2 and re-add entry1 at entry2's position
 266:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @entry1: the location to place entry2
 267:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @entry2: the location to place entry1
 268:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 269:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_swap(struct list_head *entry1,
 270:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 			     struct list_head *entry2)
 271:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 272:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	struct list_head *pos = entry2->prev;
 273:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 274:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	list_del(entry2);
 275:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	list_replace(entry1, entry2);
 276:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	if (pos == entry1)
 277:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		pos = entry2;
 278:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	list_add(entry1, pos);
 279:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 280:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 281:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 282:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_del_init - deletes entry from list and reinitialize it.
 283:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @entry: the element to delete from the list.
 284:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 285:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_del_init(struct list_head *entry)
 286:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 287:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_del_entry(entry);
 288:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	INIT_LIST_HEAD(entry);
 289:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 290:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 291:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 292:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_move - delete from one list and add as another's head
 293:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @list: the entry to move
 294:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: the head that will precede our entry
 295:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 296:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_move(struct list_head *list, struct list_head *head)
 297:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 298:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_del_entry(list);
 299:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	list_add(list, head);
 300:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 301:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 302:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 303:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_move_tail - delete from one list and add as another's tail
 304:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @list: the entry to move
 305:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: the head that will follow our entry
 306:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 307:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_move_tail(struct list_head *list,
 308:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 				  struct list_head *head)
ARM GAS  /tmp/ccl8in31.s 			page 135


 309:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 310:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	__list_del_entry(list);
 311:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	list_add_tail(list, head);
 312:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 313:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 314:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 315:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_bulk_move_tail - move a subsection of a list to its tail
 316:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: the head that will follow our entry
 317:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @first: first entry to move
 318:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @last: last entry to move, can be the same as first
 319:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  *
 320:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * Move all entries between @first and including @last before @head.
 321:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * All three entries must belong to the same linked list.
 322:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 323:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline void list_bulk_move_tail(struct list_head *head,
 324:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 				       struct list_head *first,
 325:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 				       struct list_head *last)
 326:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 327:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	first->prev->next = last->next;
 328:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	last->next->prev = first->prev;
 329:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 330:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	head->prev->next = first;
 331:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	first->prev = head->prev;
 332:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 333:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	last->next = head;
 334:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	head->prev = last;
 335:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 336:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 337:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 338:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_is_first -- tests whether @list is the first entry in list @head
 339:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @list: the entry to test
 340:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: the head of the list
 341:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 342:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline int list_is_first(const struct list_head *list, const struct list_head *head)
 343:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 344:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return list->prev == head;
 345:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 346:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 347:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 348:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_is_last - tests whether @list is the last entry in list @head
 349:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @list: the entry to test
 350:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: the head of the list
 351:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 352:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline int list_is_last(const struct list_head *list, const struct list_head *head)
 353:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 354:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return list->next == head;
 355:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 356:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 357:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 358:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_is_head - tests whether @list is the list @head
 359:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @list: the entry to test
 360:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: the head of the list
 361:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 362:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline int list_is_head(const struct list_head *list, const struct list_head *head)
 363:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 364:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return list == head;
 365:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
ARM GAS  /tmp/ccl8in31.s 			page 136


 366:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 
 367:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** /**
 368:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * list_empty - tests whether a list is empty
 369:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  * @head: the list to test.
 370:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h ****  */
 371:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** static inline int list_empty(const struct list_head *head)
 2005              		.loc 7 371 19 is_stmt 1 view .LVU621
 372:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 373:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	return READ_ONCE(head->next) == head;
 2006              		.loc 7 373 2 view .LVU622
 2007              	.LBB299:
 2008              		.loc 7 373 9 view .LVU623
 2009              	.LBB300:
 2010              		.loc 7 373 9 view .LVU624
 2011              		.loc 7 373 9 view .LVU625
 2012              	.LBE300:
 2013              		.loc 7 373 9 discriminator 2 view .LVU626
 2014              		.loc 7 373 9 discriminator 2 view .LVU627
 2015 004c D369     		ldr	r3, [r2, #28]
 2016              	.LVL173:
 2017              		.loc 7 373 9 is_stmt 0 discriminator 2 view .LVU628
 2018              	.LBE299:
 2019              	.LBE298:
 195:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             if(parent_dentry_inode != NULL) 
 2020              		.loc 1 195 11 discriminator 1 view .LVU629
 2021 004e 9942     		cmp	r1, r3
 2022 0050 E6D0     		beq	.L115
 196:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 2023              		.loc 1 196 13 is_stmt 1 view .LVU630
 196:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 2024              		.loc 1 196 15 is_stmt 0 view .LVU631
 2025 0052 002E     		cmp	r6, #0
 2026 0054 F7D0     		beq	.L113
 197:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             return;
 2027              		.loc 1 197 17 is_stmt 1 view .LVU632
 2028 0056 06F12400 		add	r0, r6, #36
 2029 005a FFF7FEFF 		bl	spin_unlock
 2030              	.LVL174:
 198:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 2031              		.loc 1 198 13 view .LVU633
 2032 005e F2E7     		b	.L113
 2033              		.cfi_endproc
 2034              	.LFE1049:
 2036              		.section	.text.devfs_unlink,"ax",%progbits
 2037              		.align	1
 2038              		.syntax unified
 2039              		.thumb
 2040              		.thumb_func
 2042              	devfs_unlink:
 2043              	.LVL175:
 2044              	.LFB1064:
 504:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *parent_inode = (struct devfs_inode *)dir->i_private;
 2045              		.loc 1 504 1 view -0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 0
 2048              		@ frame_needed = 0, uses_anonymous_args = 0
 504:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *parent_inode = (struct devfs_inode *)dir->i_private;
ARM GAS  /tmp/ccl8in31.s 			page 137


 2049              		.loc 1 504 1 is_stmt 0 view .LVU635
 2050 0000 08B5     		push	{r3, lr}
 2051              	.LCFI24:
 2052              		.cfi_def_cfa_offset 8
 2053              		.cfi_offset 3, -8
 2054              		.cfi_offset 14, -4
 505:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *delete_dentry = (struct devfs_dentry *)dentry->d_fsdata;
 2055              		.loc 1 505 5 is_stmt 1 view .LVU636
 505:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *delete_dentry = (struct devfs_dentry *)dentry->d_fsdata;
 2056              		.loc 1 505 25 is_stmt 0 view .LVU637
 2057 0002 D0F88430 		ldr	r3, [r0, #132]
 2058              	.LVL176:
 506:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_delete_dentry(parent_inode->sb, parent_inode, delete_dentry);
 2059              		.loc 1 506 5 is_stmt 1 view .LVU638
 507:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 2060              		.loc 1 507 5 view .LVU639
 2061 0006 4A6D     		ldr	r2, [r1, #84]
 2062 0008 1946     		mov	r1, r3
 2063              	.LVL177:
 507:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 2064              		.loc 1 507 5 is_stmt 0 view .LVU640
 2065 000a 986B     		ldr	r0, [r3, #56]
 2066              	.LVL178:
 507:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 2067              		.loc 1 507 5 view .LVU641
 2068 000c FFF7FEFF 		bl	devfs_delete_dentry
 2069              	.LVL179:
 508:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2070              		.loc 1 508 5 is_stmt 1 view .LVU642
 509:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2071              		.loc 1 509 1 is_stmt 0 view .LVU643
 2072 0010 0020     		movs	r0, #0
 2073 0012 08BD     		pop	{r3, pc}
 2074              		.cfi_endproc
 2075              	.LFE1064:
 2077              		.section	.text.devfs_create_dentry,"ax",%progbits
 2078              		.align	1
 2079              		.syntax unified
 2080              		.thumb
 2081              		.thumb_func
 2083              	devfs_create_dentry:
 2084              	.LVL180:
 2085              	.LFB1044:
 122:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 2086              		.loc 1 122 1 is_stmt 1 view -0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 0
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
 122:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 2090              		.loc 1 122 1 is_stmt 0 view .LVU645
 2091 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2092              	.LCFI25:
 2093              		.cfi_def_cfa_offset 24
 2094              		.cfi_offset 4, -24
 2095              		.cfi_offset 5, -20
 2096              		.cfi_offset 6, -16
 2097              		.cfi_offset 7, -12
ARM GAS  /tmp/ccl8in31.s 			page 138


 2098              		.cfi_offset 8, -8
 2099              		.cfi_offset 14, -4
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2100              		.loc 1 123 5 is_stmt 1 view .LVU646
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2101              		.loc 1 123 7 is_stmt 0 view .LVU647
 2102 0004 8046     		mov	r8, r0
 2103 0006 0028     		cmp	r0, #0
 2104 0008 47D0     		beq	.L126
 2105 000a 0E46     		mov	r6, r1
 2106 000c 1546     		mov	r5, r2
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2107              		.loc 1 123 36 discriminator 2 view .LVU648
 2108 000e 002A     		cmp	r2, #0
 2109 0010 45D0     		beq	.L127
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2110              		.loc 1 123 52 discriminator 4 view .LVU649
 2111 0012 0029     		cmp	r1, #0
 2112 0014 45D0     		beq	.L128
 125:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry == NULL)return NULL;
 2113              		.loc 1 125 5 is_stmt 1 view .LVU650
 2114              	.LVL181:
 2115              	.LBB301:
 2116              	.LBI301:
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 2117              		.loc 4 379 21 view .LVU651
 2118              	.LBB302:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2119              		.loc 4 380 2 view .LVU652
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2120              		.loc 4 380 9 is_stmt 0 view .LVU653
 2121 0016 4FF44C61 		mov	r1, #3264
 2122              	.LVL182:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2123              		.loc 4 380 9 view .LVU654
 2124 001a 1420     		movs	r0, #20
 2125              	.LVL183:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2126              		.loc 4 380 9 view .LVU655
 2127 001c FFF7FEFF 		bl	__smalloc__
 2128              	.LVL184:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2129              		.loc 4 380 9 view .LVU656
 2130              	.LBE302:
 2131              	.LBE301:
 126:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->magic = MAGIC;
 2132              		.loc 1 126 5 is_stmt 1 view .LVU657
 126:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->magic = MAGIC;
 2133              		.loc 1 126 7 is_stmt 0 view .LVU658
 2134 0020 0446     		mov	r4, r0
 2135 0022 90B3     		cbz	r0, .L123
 127:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->name = NULL;
 2136              		.loc 1 127 5 is_stmt 1 view .LVU659
 127:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->name = NULL;
 2137              		.loc 1 127 23 is_stmt 0 view .LVU660
 2138 0024 204B     		ldr	r3, .L131
 2139 0026 0360     		str	r3, [r0]
ARM GAS  /tmp/ccl8in31.s 			page 139


 128:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 2140              		.loc 1 128 5 is_stmt 1 view .LVU661
 128:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 2141              		.loc 1 128 22 is_stmt 0 view .LVU662
 2142 0028 0023     		movs	r3, #0
 2143 002a 4360     		str	r3, [r0, #4]
 129:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry->name  == NULL) {
 2144              		.loc 1 129 5 is_stmt 1 view .LVU663
 129:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry->name  == NULL) {
 2145              		.loc 1 129 32 is_stmt 0 view .LVU664
 2146 002c 2846     		mov	r0, r5
 2147              	.LVL185:
 129:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry->name  == NULL) {
 2148              		.loc 1 129 32 view .LVU665
 2149 002e FFF7FEFF 		bl	strlen
 2150              	.LVL186:
 2151              	.LBB303:
 2152              	.LBI303:
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 2153              		.loc 4 379 21 is_stmt 1 view .LVU666
 2154              	.LBB304:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2155              		.loc 4 380 2 view .LVU667
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2156              		.loc 4 380 9 is_stmt 0 view .LVU668
 2157 0032 4FF44C61 		mov	r1, #3264
 2158 0036 0130     		adds	r0, r0, #1
 2159              	.LVL187:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2160              		.loc 4 380 9 view .LVU669
 2161 0038 FFF7FEFF 		bl	__smalloc__
 2162              	.LVL188:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2163              		.loc 4 380 9 view .LVU670
 2164 003c 0746     		mov	r7, r0
 2165              	.LVL189:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 2166              		.loc 4 380 9 view .LVU671
 2167              	.LBE304:
 2168              	.LBE303:
 129:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry->name  == NULL) {
 2169              		.loc 1 129 22 discriminator 2 view .LVU672
 2170 003e 6060     		str	r0, [r4, #4]
 130:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(new_dentry);
 2171              		.loc 1 130 5 is_stmt 1 view .LVU673
 130:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(new_dentry);
 2172              		.loc 1 130 7 is_stmt 0 view .LVU674
 2173 0040 30B3     		cbz	r0, .L130
 134:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     new_dentry->target_inode = target_inode;
 2174              		.loc 1 134 5 is_stmt 1 view .LVU675
 2175 0042 2946     		mov	r1, r5
 2176 0044 FFF7FEFF 		bl	strcpy
 2177              	.LVL190:
 135:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 2178              		.loc 1 135 5 view .LVU676
 135:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 2179              		.loc 1 135 30 is_stmt 0 view .LVU677
ARM GAS  /tmp/ccl8in31.s 			page 140


 2180 0048 A660     		str	r6, [r4, #8]
 136:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 2181              		.loc 1 136 5 is_stmt 1 view .LVU678
 2182 004a 04F10C05 		add	r5, r4, #12
 2183              	.LVL191:
 2184              	.LBB305:
 2185              	.LBI305:
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2186              		.loc 7 35 20 view .LVU679
 2187              	.LBB306:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2188              		.loc 7 37 2 view .LVU680
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2189              		.loc 7 37 2 view .LVU681
 2190              	.LBB307:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2191              		.loc 7 37 2 view .LVU682
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2192              		.loc 7 37 2 view .LVU683
 2193              	.LBE307:
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2194              		.loc 7 37 2 discriminator 2 view .LVU684
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2195              		.loc 7 37 2 discriminator 2 view .LVU685
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2196              		.loc 7 37 2 discriminator 2 view .LVU686
 2197 004e E560     		str	r5, [r4, #12]
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2198              		.loc 7 37 2 discriminator 2 view .LVU687
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2199              		.loc 7 37 2 discriminator 2 view .LVU688
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2200              		.loc 7 38 2 view .LVU689
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2201              		.loc 7 38 2 view .LVU690
 2202              	.LBB308:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2203              		.loc 7 38 2 view .LVU691
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2204              		.loc 7 38 2 view .LVU692
 2205              	.LBE308:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2206              		.loc 7 38 2 discriminator 2 view .LVU693
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2207              		.loc 7 38 2 discriminator 2 view .LVU694
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2208              		.loc 7 38 2 discriminator 2 view .LVU695
 2209 0050 2561     		str	r5, [r4, #16]
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2210              		.loc 7 38 2 discriminator 2 view .LVU696
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2211              		.loc 7 38 2 discriminator 2 view .LVU697
 2212              	.LVL192:
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2213              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU698
 2214              	.LBE306:
 2215              	.LBE305:
ARM GAS  /tmp/ccl8in31.s 			page 141


 139:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 2216              		.loc 1 139 5 is_stmt 1 view .LVU699
 2217 0052 06F10C01 		add	r1, r6, #12
 2218              	.LVL193:
 2219              	.LBB309:
 2220              	.LBI309:
 433:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** {
 2221              		.loc 5 433 1 view .LVU700
 435:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_inc(v);
 2222              		.loc 5 435 2 view .LVU701
 436:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-instrumented.h **** }
 2223              		.loc 5 436 2 view .LVU702
 2224              	.LBB310:
 2225              	.LBI310:
 999:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 2226              		.loc 6 999 1 view .LVU703
1004:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** #endif
 2227              		.loc 6 1004 2 view .LVU704
 2228              	.LBB311:
 2229              	.LBI311:
 550:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** {
 2230              		.loc 6 550 1 view .LVU705
 552:/mnt/c/Users/31740/Desktop/newcore/include/linux/atomic/atomic-arch-fallback.h **** }
 2231              		.loc 6 552 2 view .LVU706
 2232              	.LBB312:
 2233              	.LBI312:
 170:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2234              		.loc 8 170 1 view .LVU707
 2235              	.LBB313:
 170:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2236              		.loc 8 170 1 view .LVU708
 170:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2237              		.loc 8 170 1 view .LVU709
 170:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2238              		.loc 8 170 1 view .LVU710
 2239              		.syntax unified
 2240              	@ 170 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h" 1
 2241              		@ atomic_add
 2242 0056 51E8003F 	1: ldrex   r3, [r1]
 2243 005a 03F10103 	   add r3, r3, #1
 2244 005e 41E80032 	   strex   r2, r3, [r1]
 2245 0062 92F0000F 	   teq r2, #0
 2246 0066 F6D1     	   bne 1b
 2247              	@ 0 "" 2
 2248              	.LVL194:
 170:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2249              		.loc 8 170 1 is_stmt 0 view .LVU711
 2250              		.thumb
 2251              		.syntax unified
 2252              	.LBE313:
 2253              	.LBE312:
 2254              	.LBE311:
 2255              	.LBE310:
 2256              	.LBE309:
 142:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 2257              		.loc 1 142 5 is_stmt 1 view .LVU712
 2258 0068 08F12406 		add	r6, r8, #36
ARM GAS  /tmp/ccl8in31.s 			page 142


 2259              	.LVL195:
 142:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 2260              		.loc 1 142 5 is_stmt 0 view .LVU713
 2261 006c 3046     		mov	r0, r6
 2262 006e FFF7FEFF 		bl	spin_lock
 2263              	.LVL196:
 143:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     spin_unlock(&parent_dentry_inode->lock);
 2264              		.loc 1 143 5 is_stmt 1 view .LVU714
 2265 0072 08F11C02 		add	r2, r8, #28
 2266              	.LVL197:
 2267              	.LBB314:
 2268              	.LBI314:
 167:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2269              		.loc 7 167 20 view .LVU715
 2270              	.LBB315:
 169:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2271              		.loc 7 169 2 view .LVU716
 2272 0076 D8F81C30 		ldr	r3, [r8, #28]
 2273              	.LVL198:
 2274              	.LBB316:
 2275              	.LBI316:
 146:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 			      struct list_head *prev,
 2276              		.loc 7 146 20 view .LVU717
 2277              	.LBB317:
 150:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 2278              		.loc 7 150 2 view .LVU718
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->next = next;
 2279              		.loc 7 153 2 view .LVU719
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->next = next;
 2280              		.loc 7 153 13 is_stmt 0 view .LVU720
 2281 007a 5D60     		str	r5, [r3, #4]
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->prev = prev;
 2282              		.loc 7 154 2 is_stmt 1 view .LVU721
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	new->prev = prev;
 2283              		.loc 7 154 12 is_stmt 0 view .LVU722
 2284 007c E360     		str	r3, [r4, #12]
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 2285              		.loc 7 155 2 is_stmt 1 view .LVU723
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 2286              		.loc 7 155 12 is_stmt 0 view .LVU724
 2287 007e 2261     		str	r2, [r4, #16]
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2288              		.loc 7 156 2 is_stmt 1 view .LVU725
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2289              		.loc 7 156 2 view .LVU726
 2290              	.LBB318:
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2291              		.loc 7 156 2 view .LVU727
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2292              		.loc 7 156 2 view .LVU728
 2293              	.LBE318:
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2294              		.loc 7 156 2 discriminator 2 view .LVU729
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2295              		.loc 7 156 2 discriminator 2 view .LVU730
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2296              		.loc 7 156 2 discriminator 2 view .LVU731
ARM GAS  /tmp/ccl8in31.s 			page 143


 2297 0080 C8F81C50 		str	r5, [r8, #28]
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2298              		.loc 7 156 2 discriminator 3 view .LVU732
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2299              		.loc 7 156 2 discriminator 3 view .LVU733
 2300              	.LVL199:
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2301              		.loc 7 156 2 is_stmt 0 discriminator 3 view .LVU734
 2302              	.LBE317:
 2303              	.LBE316:
 2304              	.LBE315:
 2305              	.LBE314:
 144:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return new_dentry;
 2306              		.loc 1 144 5 is_stmt 1 view .LVU735
 2307 0084 3046     		mov	r0, r6
 2308 0086 FFF7FEFF 		bl	spin_unlock
 2309              	.LVL200:
 145:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2310              		.loc 1 145 5 view .LVU736
 2311              	.L123:
 146:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_inode( struct devfs_superblock *sb,struct devfs_inode* par
 2312              		.loc 1 146 1 is_stmt 0 view .LVU737
 2313 008a 2046     		mov	r0, r4
 2314 008c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2315              	.LVL201:
 2316              	.L130:
 131:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 2317              		.loc 1 131 9 is_stmt 1 view .LVU738
 2318              	.LBB319:
 2319              	.LBI319:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 2320              		.loc 4 383 20 view .LVU739
 2321              	.LBB320:
 2322              		.loc 4 384 2 view .LVU740
 2323 0090 2046     		mov	r0, r4
 2324 0092 FFF7FEFF 		bl	__sfree__
 2325              	.LVL202:
 2326              		.loc 4 384 2 is_stmt 0 view .LVU741
 2327              	.LBE320:
 2328              	.LBE319:
 132:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2329              		.loc 1 132 9 is_stmt 1 view .LVU742
 132:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2330              		.loc 1 132 16 is_stmt 0 view .LVU743
 2331 0096 3C46     		mov	r4, r7
 2332              	.LVL203:
 132:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2333              		.loc 1 132 16 view .LVU744
 2334 0098 F7E7     		b	.L123
 2335              	.LVL204:
 2336              	.L126:
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2337              		.loc 1 123 84 discriminator 5 view .LVU745
 2338 009a 0446     		mov	r4, r0
 2339 009c F5E7     		b	.L123
 2340              	.L127:
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
ARM GAS  /tmp/ccl8in31.s 			page 144


 2341              		.loc 1 123 84 discriminator 5 view .LVU746
 2342 009e 1446     		mov	r4, r2
 2343 00a0 F3E7     		b	.L123
 2344              	.L128:
 123:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2345              		.loc 1 123 84 discriminator 5 view .LVU747
 2346 00a2 0C46     		mov	r4, r1
 2347 00a4 F1E7     		b	.L123
 2348              	.L132:
 2349 00a6 00BF     		.align	2
 2350              	.L131:
 2351 00a8 4E61BC00 		.word	12345678
 2352              		.cfi_endproc
 2353              	.LFE1044:
 2355              		.section	.text.devfs_create_inode,"ax",%progbits
 2356              		.align	1
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2361              	devfs_create_inode:
 2362              	.LVL205:
 2363              	.LFB1045:
 148:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode * new_inode = devfs_create_empty_inode(sb,fop,major);
 2364              		.loc 1 148 1 is_stmt 1 view -0
 2365              		.cfi_startproc
 2366              		@ args = 4, pretend = 0, frame = 0
 2367              		@ frame_needed = 0, uses_anonymous_args = 0
 148:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode * new_inode = devfs_create_empty_inode(sb,fop,major);
 2368              		.loc 1 148 1 is_stmt 0 view .LVU749
 2369 0000 70B5     		push	{r4, r5, r6, lr}
 2370              	.LCFI26:
 2371              		.cfi_def_cfa_offset 16
 2372              		.cfi_offset 4, -16
 2373              		.cfi_offset 5, -12
 2374              		.cfi_offset 6, -8
 2375              		.cfi_offset 14, -4
 2376 0002 0646     		mov	r6, r0
 2377 0004 0C46     		mov	r4, r1
 2378 0006 1146     		mov	r1, r2
 2379              	.LVL206:
 149:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_inode == NULL){
 2380              		.loc 1 149 5 is_stmt 1 view .LVU750
 149:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_inode == NULL){
 2381              		.loc 1 149 38 is_stmt 0 view .LVU751
 2382 0008 1A46     		mov	r2, r3
 2383              	.LVL207:
 149:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_inode == NULL){
 2384              		.loc 1 149 38 view .LVU752
 2385 000a FFF7FEFF 		bl	devfs_create_empty_inode
 2386              	.LVL208:
 150:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 2387              		.loc 1 150 5 is_stmt 1 view .LVU753
 150:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 2388              		.loc 1 150 7 is_stmt 0 view .LVU754
 2389 000e 0546     		mov	r5, r0
 2390 0010 E8B1     		cbz	r0, .L135
 153:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry == NULL){
ARM GAS  /tmp/ccl8in31.s 			page 145


 2391              		.loc 1 153 5 is_stmt 1 view .LVU755
 153:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry == NULL){
 2392              		.loc 1 153 39 is_stmt 0 view .LVU756
 2393 0012 049A     		ldr	r2, [sp, #16]
 2394 0014 0146     		mov	r1, r0
 2395 0016 2046     		mov	r0, r4
 2396              	.LVL209:
 153:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_dentry == NULL){
 2397              		.loc 1 153 39 view .LVU757
 2398 0018 FFF7FEFF 		bl	devfs_create_dentry
 2399              	.LVL210:
 154:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_lock(&sb->lock);
 2400              		.loc 1 154 5 is_stmt 1 view .LVU758
 154:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_lock(&sb->lock);
 2401              		.loc 1 154 7 is_stmt 0 view .LVU759
 2402 001c 0446     		mov	r4, r0
 2403              	.LVL211:
 154:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_lock(&sb->lock);
 2404              		.loc 1 154 7 view .LVU760
 2405 001e 08B1     		cbz	r0, .L137
 2406              	.LVL212:
 2407              	.L133:
 162:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static struct devfs_dentry* devfs_create_file(struct devfs_superblock *sb,struct devfs_inode* paren
 2408              		.loc 1 162 1 view .LVU761
 2409 0020 2046     		mov	r0, r4
 2410 0022 70BD     		pop	{r4, r5, r6, pc}
 2411              	.LVL213:
 2412              	.L137:
 155:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         list_del(&new_inode->list_node);
 2413              		.loc 1 155 9 is_stmt 1 view .LVU762
 2414 0024 0436     		adds	r6, r6, #4
 2415              	.LVL214:
 155:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         list_del(&new_inode->list_node);
 2416              		.loc 1 155 9 is_stmt 0 view .LVU763
 2417 0026 3046     		mov	r0, r6
 2418              	.LVL215:
 155:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         list_del(&new_inode->list_node);
 2419              		.loc 1 155 9 view .LVU764
 2420 0028 FFF7FEFF 		bl	spin_lock
 2421              	.LVL216:
 156:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         spin_unlock(&sb->lock);
 2422              		.loc 1 156 9 is_stmt 1 view .LVU765
 2423              	.LBB321:
 2424              	.LBI321:
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2425              		.loc 7 227 20 view .LVU766
 2426              	.LBB322:
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->next = LIST_POISON1;
 2427              		.loc 7 229 2 view .LVU767
 2428              	.LBB323:
 2429              	.LBI323:
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2430              		.loc 7 213 20 view .LVU768
 2431              	.LBB324:
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 2432              		.loc 7 215 2 view .LVU769
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
ARM GAS  /tmp/ccl8in31.s 			page 146


 2433              		.loc 7 218 2 view .LVU770
 2434 002c AB69     		ldr	r3, [r5, #24]
 2435 002e 6A69     		ldr	r2, [r5, #20]
 2436              	.LVL217:
 2437              	.LBB325:
 2438              	.LBI325:
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2439              		.loc 7 193 20 view .LVU771
 2440              	.LBB326:
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2441              		.loc 7 195 2 view .LVU772
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2442              		.loc 7 195 13 is_stmt 0 view .LVU773
 2443 0030 5360     		str	r3, [r2, #4]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2444              		.loc 7 196 2 is_stmt 1 view .LVU774
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2445              		.loc 7 196 2 view .LVU775
 2446              	.LBB327:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2447              		.loc 7 196 2 view .LVU776
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2448              		.loc 7 196 2 view .LVU777
 2449              	.LBE327:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2450              		.loc 7 196 2 discriminator 2 view .LVU778
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2451              		.loc 7 196 2 discriminator 2 view .LVU779
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2452              		.loc 7 196 2 discriminator 2 view .LVU780
 2453 0032 1A60     		str	r2, [r3]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2454              		.loc 7 196 2 discriminator 2 view .LVU781
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2455              		.loc 7 196 2 discriminator 2 view .LVU782
 2456              	.LVL218:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2457              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU783
 2458              	.LBE326:
 2459              	.LBE325:
 2460              	.LBE324:
 2461              	.LBE323:
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2462              		.loc 7 230 2 is_stmt 1 view .LVU784
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2463              		.loc 7 230 14 is_stmt 0 view .LVU785
 2464 0034 4FF48073 		mov	r3, #256
 2465 0038 6B61     		str	r3, [r5, #20]
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2466              		.loc 7 231 2 is_stmt 1 view .LVU786
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2467              		.loc 7 231 14 is_stmt 0 view .LVU787
 2468 003a 4FF49173 		mov	r3, #290
 2469 003e AB61     		str	r3, [r5, #24]
 2470              	.LVL219:
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2471              		.loc 7 231 14 view .LVU788
ARM GAS  /tmp/ccl8in31.s 			page 147


 2472              	.LBE322:
 2473              	.LBE321:
 157:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         devfs_inode_put(new_inode);
 2474              		.loc 1 157 9 is_stmt 1 view .LVU789
 2475 0040 3046     		mov	r0, r6
 2476 0042 FFF7FEFF 		bl	spin_unlock
 2477              	.LVL220:
 158:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 2478              		.loc 1 158 9 view .LVU790
 2479 0046 2846     		mov	r0, r5
 2480 0048 FFF7FEFF 		bl	devfs_inode_put
 2481              	.LVL221:
 159:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2482              		.loc 1 159 9 view .LVU791
 159:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2483              		.loc 1 159 16 is_stmt 0 view .LVU792
 2484 004c E8E7     		b	.L133
 2485              	.LVL222:
 2486              	.L135:
 151:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }   
 2487              		.loc 1 151 16 view .LVU793
 2488 004e 0446     		mov	r4, r0
 2489              	.LVL223:
 151:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }   
 2490              		.loc 1 151 16 view .LVU794
 2491 0050 E6E7     		b	.L133
 2492              		.cfi_endproc
 2493              	.LFE1045:
 2495              		.section	.text.devfs_create_dir,"ax",%progbits
 2496              		.align	1
 2497              		.syntax unified
 2498              		.thumb
 2499              		.thumb_func
 2501              	devfs_create_dir:
 2502              	.LVL224:
 2503              	.LFB1047:
 169:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* dentry =  devfs_create_inode(sb,parent_dentry_inode,&devfs_file_fops,0,nam
 2504              		.loc 1 169 1 is_stmt 1 view -0
 2505              		.cfi_startproc
 2506              		@ args = 0, pretend = 0, frame = 0
 2507              		@ frame_needed = 0, uses_anonymous_args = 0
 169:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* dentry =  devfs_create_inode(sb,parent_dentry_inode,&devfs_file_fops,0,nam
 2508              		.loc 1 169 1 is_stmt 0 view .LVU796
 2509 0000 00B5     		push	{lr}
 2510              	.LCFI27:
 2511              		.cfi_def_cfa_offset 4
 2512              		.cfi_offset 14, -4
 2513 0002 83B0     		sub	sp, sp, #12
 2514              	.LCFI28:
 2515              		.cfi_def_cfa_offset 16
 170:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL) return NULL;
 2516              		.loc 1 170 5 is_stmt 1 view .LVU797
 170:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL) return NULL;
 2517              		.loc 1 170 36 is_stmt 0 view .LVU798
 2518 0004 0092     		str	r2, [sp]
 2519 0006 0023     		movs	r3, #0
 2520 0008 054A     		ldr	r2, .L141
ARM GAS  /tmp/ccl8in31.s 			page 148


 2521              	.LVL225:
 170:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL) return NULL;
 2522              		.loc 1 170 36 view .LVU799
 2523 000a FFF7FEFF 		bl	devfs_create_inode
 2524              	.LVL226:
 171:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 2525              		.loc 1 171 5 is_stmt 1 view .LVU800
 171:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 2526              		.loc 1 171 7 is_stmt 0 view .LVU801
 2527 000e 18B1     		cbz	r0, .L138
 172:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return dentry;
 2528              		.loc 1 172 5 is_stmt 1 view .LVU802
 172:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return dentry;
 2529              		.loc 1 172 11 is_stmt 0 view .LVU803
 2530 0010 8368     		ldr	r3, [r0, #8]
 172:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return dentry;
 2531              		.loc 1 172 34 view .LVU804
 2532 0012 44F2ED12 		movw	r2, #16877
 2533 0016 5A60     		str	r2, [r3, #4]
 173:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2534              		.loc 1 173 5 is_stmt 1 view .LVU805
 2535              	.L138:
 174:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** static void dentry_put(struct devfs_superblock *sb,struct devfs_dentry* dentry)
 2536              		.loc 1 174 1 is_stmt 0 view .LVU806
 2537 0018 03B0     		add	sp, sp, #12
 2538              	.LCFI29:
 2539              		.cfi_def_cfa_offset 4
 2540              		@ sp needed
 2541 001a 5DF804FB 		ldr	pc, [sp], #4
 2542              	.L142:
 2543 001e 00BF     		.align	2
 2544              	.L141:
 2545 0020 00000000 		.word	devfs_file_fops
 2546              		.cfi_endproc
 2547              	.LFE1047:
 2549              		.section	.text.devfs_mkdir,"ax",%progbits
 2550              		.align	1
 2551              		.syntax unified
 2552              		.thumb
 2553              		.thumb_func
 2555              	devfs_mkdir:
 2556              	.LVL227:
 2557              	.LFB1065:
 513:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *file_name = d_getname(dentry);
 2558              		.loc 1 513 1 is_stmt 1 view -0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 0
 2561              		@ frame_needed = 0, uses_anonymous_args = 0
 513:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *file_name = d_getname(dentry);
 2562              		.loc 1 513 1 is_stmt 0 view .LVU808
 2563 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2564              	.LCFI30:
 2565              		.cfi_def_cfa_offset 24
 2566              		.cfi_offset 4, -24
 2567              		.cfi_offset 5, -20
 2568              		.cfi_offset 6, -16
 2569              		.cfi_offset 7, -12
ARM GAS  /tmp/ccl8in31.s 			page 149


 2570              		.cfi_offset 8, -8
 2571              		.cfi_offset 14, -4
 2572 0004 0D46     		mov	r5, r1
 2573 0006 1446     		mov	r4, r2
 2574 0008 9846     		mov	r8, r3
 514:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2575              		.loc 1 514 5 is_stmt 1 view .LVU809
 514:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2576              		.loc 1 514 23 is_stmt 0 view .LVU810
 2577 000a 1046     		mov	r0, r2
 2578              	.LVL228:
 514:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2579              		.loc 1 514 23 view .LVU811
 2580 000c FFF7FEFF 		bl	d_getname
 2581              	.LVL229:
 514:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2582              		.loc 1 514 23 view .LVU812
 2583 0010 0646     		mov	r6, r0
 2584              	.LVL230:
 516:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = devfs_lookup(dinode,file_name);
 2585              		.loc 1 516 5 is_stmt 1 view .LVU813
 516:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = devfs_lookup(dinode,file_name);
 2586              		.loc 1 516 25 is_stmt 0 view .LVU814
 2587 0012 D5F88470 		ldr	r7, [r5, #132]
 2588              	.LVL231:
 517:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 2589              		.loc 1 517 5 is_stmt 1 view .LVU815
 517:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 2590              		.loc 1 517 33 is_stmt 0 view .LVU816
 2591 0016 0146     		mov	r1, r0
 2592 0018 3846     		mov	r0, r7
 2593              	.LVL232:
 517:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 2594              		.loc 1 517 33 view .LVU817
 2595 001a FFF7FEFF 		bl	devfs_lookup
 2596              	.LVL233:
 518:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         file =  devfs_create_dir(dinode->sb,dinode,file_name);
 2597              		.loc 1 518 5 is_stmt 1 view .LVU818
 518:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         file =  devfs_create_dir(dinode->sb,dinode,file_name);
 2598              		.loc 1 518 7 is_stmt 0 view .LVU819
 2599 001e 0146     		mov	r1, r0
 2600 0020 A8B1     		cbz	r0, .L150
 2601              	.L144:
 2602              	.LVL234:
 524:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 2603              		.loc 1 524 5 is_stmt 1 view .LVU820
 524:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 2604              		.loc 1 524 9 is_stmt 0 view .LVU821
 2605 0022 8A68     		ldr	r2, [r1, #8]
 524:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 2606              		.loc 1 524 42 view .LVU822
 2607 0024 C8F30803 		ubfx	r3, r8, #0, #9
 2608 0028 43F40043 		orr	r3, r3, #32768
 524:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     
 2609              		.loc 1 524 32 view .LVU823
 2610 002c 5360     		str	r3, [r2, #4]
 526:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
ARM GAS  /tmp/ccl8in31.s 			page 150


 2611              		.loc 1 526 5 is_stmt 1 view .LVU824
 526:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
 2612              		.loc 1 526 9 is_stmt 0 view .LVU825
 2613 002e 2046     		mov	r0, r4
 2614 0030 FFF7FEFF 		bl	devfs_get_dentry
 2615              	.LVL235:
 526:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
 2616              		.loc 1 526 7 discriminator 1 view .LVU826
 2617 0034 B0B1     		cbz	r0, .L147
 529:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_file_inode == NULL)
 2618              		.loc 1 529 5 is_stmt 1 view .LVU827
 529:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_file_inode == NULL)
 2619              		.loc 1 529 37 is_stmt 0 view .LVU828
 2620 0036 6969     		ldr	r1, [r5, #20]
 2621 0038 3846     		mov	r0, r7
 2622 003a FFF7FEFF 		bl	devfs_get_inode
 2623              	.LVL236:
 530:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2624              		.loc 1 530 5 is_stmt 1 view .LVU829
 530:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2625              		.loc 1 530 7 is_stmt 0 view .LVU830
 2626 003e 0146     		mov	r1, r0
 2627 0040 98B1     		cbz	r0, .L148
 533:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****    return 0;
 2628              		.loc 1 533 5 is_stmt 1 view .LVU831
 2629 0042 2046     		mov	r0, r4
 2630              	.LVL237:
 533:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****    return 0;
 2631              		.loc 1 533 5 is_stmt 0 view .LVU832
 2632 0044 FFF7FEFF 		bl	d_add
 2633              	.LVL238:
 534:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2634              		.loc 1 534 4 is_stmt 1 view .LVU833
 534:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2635              		.loc 1 534 11 is_stmt 0 view .LVU834
 2636 0048 0020     		movs	r0, #0
 2637              	.LVL239:
 2638              	.L143:
 535:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2639              		.loc 1 535 1 view .LVU835
 2640 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2641              	.LVL240:
 2642              	.L150:
 519:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2643              		.loc 1 519 9 is_stmt 1 view .LVU836
 519:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2644              		.loc 1 519 17 is_stmt 0 view .LVU837
 2645 004e 3246     		mov	r2, r6
 2646 0050 3946     		mov	r1, r7
 2647 0052 B86B     		ldr	r0, [r7, #56]
 2648              	.LVL241:
 519:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2649              		.loc 1 519 17 view .LVU838
 2650 0054 FFF7FEFF 		bl	devfs_create_dir
 2651              	.LVL242:
 521:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2652              		.loc 1 521 5 is_stmt 1 view .LVU839
ARM GAS  /tmp/ccl8in31.s 			page 151


 521:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2653              		.loc 1 521 8 is_stmt 0 view .LVU840
 2654 0058 0146     		mov	r1, r0
 2655 005a 0028     		cmp	r0, #0
 2656 005c E1D1     		bne	.L144
 522:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2657              		.loc 1 522 16 view .LVU841
 2658 005e 4FF0FF30 		mov	r0, #-1
 2659              	.LVL243:
 522:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2660              		.loc 1 522 16 view .LVU842
 2661 0062 F2E7     		b	.L143
 2662              	.LVL244:
 2663              	.L147:
 527:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }  
 2664              		.loc 1 527 13 view .LVU843
 2665 0064 4FF0FF30 		mov	r0, #-1
 2666 0068 EFE7     		b	.L143
 2667              	.LVL245:
 2668              	.L148:
 531:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2669              		.loc 1 531 16 view .LVU844
 2670 006a 4FF0FF30 		mov	r0, #-1
 2671              	.LVL246:
 531:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2672              		.loc 1 531 16 view .LVU845
 2673 006e ECE7     		b	.L143
 2674              		.cfi_endproc
 2675              	.LFE1065:
 2677              		.section	.text.devfs_create_file,"ax",%progbits
 2678              		.align	1
 2679              		.syntax unified
 2680              		.thumb
 2681              		.thumb_func
 2683              	devfs_create_file:
 2684              	.LVL247:
 2685              	.LFB1046:
 164:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_create_inode(sb,parent_dentry_inode,fop,major,name);
 2686              		.loc 1 164 1 is_stmt 1 view -0
 2687              		.cfi_startproc
 2688              		@ args = 4, pretend = 0, frame = 0
 2689              		@ frame_needed = 0, uses_anonymous_args = 0
 164:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_create_inode(sb,parent_dentry_inode,fop,major,name);
 2690              		.loc 1 164 1 is_stmt 0 view .LVU847
 2691 0000 10B5     		push	{r4, lr}
 2692              	.LCFI31:
 2693              		.cfi_def_cfa_offset 8
 2694              		.cfi_offset 4, -8
 2695              		.cfi_offset 14, -4
 2696 0002 82B0     		sub	sp, sp, #8
 2697              	.LCFI32:
 2698              		.cfi_def_cfa_offset 16
 165:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2699              		.loc 1 165 5 is_stmt 1 view .LVU848
 165:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2700              		.loc 1 165 12 is_stmt 0 view .LVU849
 2701 0004 049C     		ldr	r4, [sp, #16]
ARM GAS  /tmp/ccl8in31.s 			page 152


 2702 0006 0094     		str	r4, [sp]
 2703 0008 FFF7FEFF 		bl	devfs_create_inode
 2704              	.LVL248:
 166:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2705              		.loc 1 166 1 view .LVU850
 2706 000c 02B0     		add	sp, sp, #8
 2707              	.LCFI33:
 2708              		.cfi_def_cfa_offset 8
 2709              		@ sp needed
 2710 000e 10BD     		pop	{r4, pc}
 166:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2711              		.loc 1 166 1 view .LVU851
 2712              		.cfi_endproc
 2713              	.LFE1046:
 2715              		.section	.text.devfs_create,"ax",%progbits
 2716              		.align	1
 2717              		.syntax unified
 2718              		.thumb
 2719              		.thumb_func
 2721              	devfs_create:
 2722              	.LVL249:
 2723              	.LFB1061:
 445:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *file_name = d_getname(dentry);
 2724              		.loc 1 445 1 is_stmt 1 view -0
 2725              		.cfi_startproc
 2726              		@ args = 4, pretend = 0, frame = 0
 2727              		@ frame_needed = 0, uses_anonymous_args = 0
 445:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     char *file_name = d_getname(dentry);
 2728              		.loc 1 445 1 is_stmt 0 view .LVU853
 2729 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2730              	.LCFI34:
 2731              		.cfi_def_cfa_offset 28
 2732              		.cfi_offset 4, -28
 2733              		.cfi_offset 5, -24
 2734              		.cfi_offset 6, -20
 2735              		.cfi_offset 7, -16
 2736              		.cfi_offset 8, -12
 2737              		.cfi_offset 9, -8
 2738              		.cfi_offset 14, -4
 2739 0004 83B0     		sub	sp, sp, #12
 2740              	.LCFI35:
 2741              		.cfi_def_cfa_offset 40
 2742 0006 0D46     		mov	r5, r1
 2743 0008 1446     		mov	r4, r2
 2744 000a 9946     		mov	r9, r3
 446:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2745              		.loc 1 446 5 is_stmt 1 view .LVU854
 446:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2746              		.loc 1 446 23 is_stmt 0 view .LVU855
 2747 000c 1046     		mov	r0, r2
 2748              	.LVL250:
 446:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2749              		.loc 1 446 23 view .LVU856
 2750 000e FFF7FEFF 		bl	d_getname
 2751              	.LVL251:
 446:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2752              		.loc 1 446 23 view .LVU857
ARM GAS  /tmp/ccl8in31.s 			page 153


 2753 0012 0646     		mov	r6, r0
 2754              	.LVL252:
 448:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = devfs_lookup(dinode,file_name);
 2755              		.loc 1 448 5 is_stmt 1 view .LVU858
 448:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry* file = devfs_lookup(dinode,file_name);
 2756              		.loc 1 448 25 is_stmt 0 view .LVU859
 2757 0014 D5F88470 		ldr	r7, [r5, #132]
 2758              	.LVL253:
 449:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 2759              		.loc 1 449 5 is_stmt 1 view .LVU860
 449:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 2760              		.loc 1 449 33 is_stmt 0 view .LVU861
 2761 0018 0146     		mov	r1, r0
 2762 001a 3846     		mov	r0, r7
 2763              	.LVL254:
 449:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(file == NULL){
 2764              		.loc 1 449 33 view .LVU862
 2765 001c FFF7FEFF 		bl	devfs_lookup
 2766              	.LVL255:
 450:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         file =  devfs_create_file(dinode->sb,dinode,&devfs_file_fops,10,file_name);
 2767              		.loc 1 450 5 is_stmt 1 view .LVU863
 450:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         file =  devfs_create_file(dinode->sb,dinode,&devfs_file_fops,10,file_name);
 2768              		.loc 1 450 7 is_stmt 0 view .LVU864
 2769 0020 8046     		mov	r8, r0
 2770 0022 C8B1     		cbz	r0, .L160
 2771              	.L154:
 2772              	.LVL256:
 456:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if( devfs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2773              		.loc 1 456 5 is_stmt 1 view .LVU865
 456:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if( devfs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2774              		.loc 1 456 9 is_stmt 0 view .LVU866
 2775 0024 D8F80820 		ldr	r2, [r8, #8]
 456:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if( devfs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2776              		.loc 1 456 42 view .LVU867
 2777 0028 C9F30803 		ubfx	r3, r9, #0, #9
 2778 002c 43F40043 		orr	r3, r3, #32768
 456:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if( devfs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2779              		.loc 1 456 32 view .LVU868
 2780 0030 5360     		str	r3, [r2, #4]
 457:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
 2781              		.loc 1 457 5 is_stmt 1 view .LVU869
 457:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
 2782              		.loc 1 457 9 is_stmt 0 view .LVU870
 2783 0032 4146     		mov	r1, r8
 2784 0034 2046     		mov	r0, r4
 2785 0036 FFF7FEFF 		bl	devfs_get_dentry
 2786              	.LVL257:
 457:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      return -1;
 2787              		.loc 1 457 7 discriminator 1 view .LVU871
 2788 003a D0B1     		cbz	r0, .L157
 461:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_file_inode == NULL)
 2789              		.loc 1 461 5 is_stmt 1 view .LVU872
 461:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(new_file_inode == NULL)
 2790              		.loc 1 461 37 is_stmt 0 view .LVU873
 2791 003c 6969     		ldr	r1, [r5, #20]
 2792 003e D8F80800 		ldr	r0, [r8, #8]
 2793 0042 FFF7FEFF 		bl	devfs_get_inode
ARM GAS  /tmp/ccl8in31.s 			page 154


 2794              	.LVL258:
 462:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2795              		.loc 1 462 5 is_stmt 1 view .LVU874
 462:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2796              		.loc 1 462 7 is_stmt 0 view .LVU875
 2797 0046 0146     		mov	r1, r0
 2798 0048 B0B1     		cbz	r0, .L158
 465:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****    return 0;
 2799              		.loc 1 465 5 is_stmt 1 view .LVU876
 2800 004a 2046     		mov	r0, r4
 2801              	.LVL259:
 465:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****    return 0;
 2802              		.loc 1 465 5 is_stmt 0 view .LVU877
 2803 004c FFF7FEFF 		bl	d_add
 2804              	.LVL260:
 466:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** } 
 2805              		.loc 1 466 4 is_stmt 1 view .LVU878
 466:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** } 
 2806              		.loc 1 466 11 is_stmt 0 view .LVU879
 2807 0050 0020     		movs	r0, #0
 2808              	.LVL261:
 2809              	.L153:
 467:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2810              		.loc 1 467 1 view .LVU880
 2811 0052 03B0     		add	sp, sp, #12
 2812              	.LCFI36:
 2813              		.cfi_remember_state
 2814              		.cfi_def_cfa_offset 28
 2815              		@ sp needed
 2816 0054 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2817              	.LVL262:
 2818              	.L160:
 2819              	.LCFI37:
 2820              		.cfi_restore_state
 451:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2821              		.loc 1 451 9 is_stmt 1 view .LVU881
 451:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2822              		.loc 1 451 17 is_stmt 0 view .LVU882
 2823 0058 B86B     		ldr	r0, [r7, #56]
 2824              	.LVL263:
 451:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2825              		.loc 1 451 17 view .LVU883
 2826 005a 0096     		str	r6, [sp]
 2827 005c 0A23     		movs	r3, #10
 2828 005e 084A     		ldr	r2, .L161
 2829 0060 3946     		mov	r1, r7
 2830 0062 FFF7FEFF 		bl	devfs_create_file
 2831              	.LVL264:
 453:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2832              		.loc 1 453 5 is_stmt 1 view .LVU884
 453:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -1;
 2833              		.loc 1 453 8 is_stmt 0 view .LVU885
 2834 0066 8046     		mov	r8, r0
 2835 0068 0028     		cmp	r0, #0
 2836 006a DBD1     		bne	.L154
 454:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2837              		.loc 1 454 16 view .LVU886
ARM GAS  /tmp/ccl8in31.s 			page 155


 2838 006c 4FF0FF30 		mov	r0, #-1
 2839              	.LVL265:
 454:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2840              		.loc 1 454 16 view .LVU887
 2841 0070 EFE7     		b	.L153
 2842              	.LVL266:
 2843              	.L157:
 458:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }  
 2844              		.loc 1 458 13 view .LVU888
 2845 0072 4FF0FF30 		mov	r0, #-1
 2846 0076 ECE7     		b	.L153
 2847              	.LVL267:
 2848              	.L158:
 463:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2849              		.loc 1 463 16 view .LVU889
 2850 0078 4FF0FF30 		mov	r0, #-1
 2851              	.LVL268:
 463:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2852              		.loc 1 463 16 view .LVU890
 2853 007c E9E7     		b	.L153
 2854              	.L162:
 2855 007e 00BF     		.align	2
 2856              	.L161:
 2857 0080 00000000 		.word	devfs_file_fops
 2858              		.cfi_endproc
 2859              	.LFE1061:
 2861              		.section	.text.devfs_link,"ax",%progbits
 2862              		.align	1
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2867              	devfs_link:
 2868              	.LVL269:
 2869              	.LFB1063:
 490:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *old_inode = (struct devfs_inode *)old_dentry->d_inode->i_private;
 2870              		.loc 1 490 1 is_stmt 1 view -0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 0
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
 490:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *old_inode = (struct devfs_inode *)old_dentry->d_inode->i_private;
 2874              		.loc 1 490 1 is_stmt 0 view .LVU892
 2875 0000 38B5     		push	{r3, r4, r5, lr}
 2876              	.LCFI38:
 2877              		.cfi_def_cfa_offset 16
 2878              		.cfi_offset 3, -16
 2879              		.cfi_offset 4, -12
 2880              		.cfi_offset 5, -8
 2881              		.cfi_offset 14, -4
 2882 0002 0D46     		mov	r5, r1
 2883 0004 1446     		mov	r4, r2
 491:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dir_inode = (struct devfs_inode *)dir->i_private;
 2884              		.loc 1 491 5 is_stmt 1 view .LVU893
 491:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *dir_inode = (struct devfs_inode *)dir->i_private;
 2885              		.loc 1 491 69 is_stmt 0 view .LVU894
 2886 0006 836C     		ldr	r3, [r0, #72]
 2887              	.LVL270:
 492:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_dentry *new_dentry = devfs_create_dentry(dir_inode, old_inode, dentry->d_name.name
ARM GAS  /tmp/ccl8in31.s 			page 156


 2888              		.loc 1 492 5 is_stmt 1 view .LVU895
 493:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (new_dentry == NULL) {
 2889              		.loc 1 493 5 view .LVU896
 493:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (new_dentry == NULL) {
 2890              		.loc 1 493 39 is_stmt 0 view .LVU897
 2891 0008 9269     		ldr	r2, [r2, #24]
 2892              	.LVL271:
 493:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (new_dentry == NULL) {
 2893              		.loc 1 493 39 view .LVU898
 2894 000a D3F88410 		ldr	r1, [r3, #132]
 2895              	.LVL272:
 493:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (new_dentry == NULL) {
 2896              		.loc 1 493 39 view .LVU899
 2897 000e D5F88400 		ldr	r0, [r5, #132]
 2898              	.LVL273:
 493:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (new_dentry == NULL) {
 2899              		.loc 1 493 39 view .LVU900
 2900 0012 FFF7FEFF 		bl	devfs_create_dentry
 2901              	.LVL274:
 494:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -ENOMEM;
 2902              		.loc 1 494 5 is_stmt 1 view .LVU901
 494:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return -ENOMEM;
 2903              		.loc 1 494 8 is_stmt 0 view .LVU902
 2904 0016 58B1     		cbz	r0, .L165
 2905 0018 0146     		mov	r1, r0
 497:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->d_sb = dir->i_sb;
 2906              		.loc 1 497 5 is_stmt 1 view .LVU903
 2907 001a 2046     		mov	r0, r4
 2908              	.LVL275:
 497:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->d_sb = dir->i_sb;
 2909              		.loc 1 497 5 is_stmt 0 view .LVU904
 2910 001c FFF7FEFF 		bl	devfs_get_dentry
 2911              	.LVL276:
 498:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_add(dentry,dentry->d_inode);
 2912              		.loc 1 498 5 is_stmt 1 view .LVU905
 498:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_add(dentry,dentry->d_inode);
 2913              		.loc 1 498 23 is_stmt 0 view .LVU906
 2914 0020 6B69     		ldr	r3, [r5, #20]
 498:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     d_add(dentry,dentry->d_inode);
 2915              		.loc 1 498 18 view .LVU907
 2916 0022 2365     		str	r3, [r4, #80]
 499:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 2917              		.loc 1 499 5 is_stmt 1 view .LVU908
 2918 0024 A16C     		ldr	r1, [r4, #72]
 2919 0026 2046     		mov	r0, r4
 2920 0028 FFF7FEFF 		bl	d_add
 2921              	.LVL277:
 500:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2922              		.loc 1 500 5 view .LVU909
 500:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 2923              		.loc 1 500 12 is_stmt 0 view .LVU910
 2924 002c 0020     		movs	r0, #0
 2925              	.L163:
 501:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 2926              		.loc 1 501 1 view .LVU911
 2927 002e 38BD     		pop	{r3, r4, r5, pc}
 2928              	.LVL278:
ARM GAS  /tmp/ccl8in31.s 			page 157


 2929              	.L165:
 495:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2930              		.loc 1 495 16 view .LVU912
 2931 0030 6FF00B00 		mvn	r0, #11
 2932              	.LVL279:
 495:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 2933              		.loc 1 495 16 view .LVU913
 2934 0034 FBE7     		b	.L163
 2935              		.cfi_endproc
 2936              	.LFE1063:
 2938              		.section	.text.devfs_destroy_inode,"ax",%progbits
 2939              		.align	1
 2940              		.syntax unified
 2941              		.thumb
 2942              		.thumb_func
 2944              	devfs_destroy_inode:
 2945              	.LVL280:
 2946              	.LFB1058:
 393:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node == NULL) return;
 2947              		.loc 1 393 1 is_stmt 1 view -0
 2948              		.cfi_startproc
 2949              		@ args = 0, pretend = 0, frame = 0
 2950              		@ frame_needed = 0, uses_anonymous_args = 0
 394:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node->i_private != NULL) {
 2951              		.loc 1 394 5 view .LVU915
 394:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node->i_private != NULL) {
 2952              		.loc 1 394 7 is_stmt 0 view .LVU916
 2953 0000 80B1     		cbz	r0, .L170
 393:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(node == NULL) return;
 2954              		.loc 1 393 1 view .LVU917
 2955 0002 08B5     		push	{r3, lr}
 2956              	.LCFI39:
 2957              		.cfi_def_cfa_offset 8
 2958              		.cfi_offset 3, -8
 2959              		.cfi_offset 14, -4
 395:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         struct devfs_inode * dev_node = node->i_private;
 2960              		.loc 1 395 5 is_stmt 1 view .LVU918
 395:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         struct devfs_inode * dev_node = node->i_private;
 2961              		.loc 1 395 12 is_stmt 0 view .LVU919
 2962 0004 D0F88400 		ldr	r0, [r0, #132]
 2963              	.LVL281:
 395:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         struct devfs_inode * dev_node = node->i_private;
 2964              		.loc 1 395 7 view .LVU920
 2965 0008 58B1     		cbz	r0, .L167
 2966              	.LBB328:
 396:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         list_del(&dev_node->list_node);
 2967              		.loc 1 396 9 is_stmt 1 view .LVU921
 2968              	.LVL282:
 397:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(dev_node);        
 2969              		.loc 1 397 9 view .LVU922
 2970              	.LBB329:
 2971              	.LBI329:
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2972              		.loc 7 227 20 view .LVU923
 2973              	.LBB330:
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->next = LIST_POISON1;
 2974              		.loc 7 229 2 view .LVU924
ARM GAS  /tmp/ccl8in31.s 			page 158


 2975              	.LBB331:
 2976              	.LBI331:
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2977              		.loc 7 213 20 view .LVU925
 2978              	.LBB332:
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 		return;
 2979              		.loc 7 215 2 view .LVU926
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2980              		.loc 7 218 2 view .LVU927
 2981 000a 8369     		ldr	r3, [r0, #24]
 2982 000c 4269     		ldr	r2, [r0, #20]
 2983              	.LVL283:
 2984              	.LBB333:
 2985              	.LBI333:
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** {
 2986              		.loc 7 193 20 view .LVU928
 2987              	.LBB334:
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2988              		.loc 7 195 2 view .LVU929
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2989              		.loc 7 195 13 is_stmt 0 view .LVU930
 2990 000e 5360     		str	r3, [r2, #4]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2991              		.loc 7 196 2 is_stmt 1 view .LVU931
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2992              		.loc 7 196 2 view .LVU932
 2993              	.LBB335:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2994              		.loc 7 196 2 view .LVU933
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2995              		.loc 7 196 2 view .LVU934
 2996              	.LBE335:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2997              		.loc 7 196 2 discriminator 2 view .LVU935
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2998              		.loc 7 196 2 discriminator 2 view .LVU936
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 2999              		.loc 7 196 2 discriminator 2 view .LVU937
 3000 0010 1A60     		str	r2, [r3]
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 3001              		.loc 7 196 2 discriminator 2 view .LVU938
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 3002              		.loc 7 196 2 discriminator 2 view .LVU939
 3003              	.LVL284:
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 3004              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU940
 3005              	.LBE334:
 3006              	.LBE333:
 3007              	.LBE332:
 3008              	.LBE331:
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = LIST_POISON2;
 3009              		.loc 7 230 2 is_stmt 1 view .LVU941
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** 	entry->prev = LIST_POISON2;
 3010              		.loc 7 230 14 is_stmt 0 view .LVU942
 3011 0012 4FF48073 		mov	r3, #256
 3012 0016 4361     		str	r3, [r0, #20]
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
ARM GAS  /tmp/ccl8in31.s 			page 159


 3013              		.loc 7 231 2 is_stmt 1 view .LVU943
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 3014              		.loc 7 231 14 is_stmt 0 view .LVU944
 3015 0018 4FF49173 		mov	r3, #290
 3016 001c 8361     		str	r3, [r0, #24]
 3017              	.LVL285:
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/list.h **** }
 3018              		.loc 7 231 14 view .LVU945
 3019              	.LBE330:
 3020              	.LBE329:
 398:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3021              		.loc 1 398 9 is_stmt 1 view .LVU946
 3022              	.LBB336:
 3023              	.LBI336:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3024              		.loc 4 383 20 view .LVU947
 3025              	.LBB337:
 3026              		.loc 4 384 2 view .LVU948
 3027 001e FFF7FEFF 		bl	__sfree__
 3028              	.LVL286:
 3029              	.L167:
 3030              		.loc 4 384 2 is_stmt 0 view .LVU949
 3031              	.LBE337:
 3032              	.LBE336:
 3033              	.LBE328:
 400:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3034              		.loc 1 400 1 view .LVU950
 3035 0022 08BD     		pop	{r3, pc}
 3036              	.LVL287:
 3037              	.L170:
 3038              	.LCFI40:
 3039              		.cfi_def_cfa_offset 0
 3040              		.cfi_restore 3
 3041              		.cfi_restore 14
 400:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3042              		.loc 1 400 1 view .LVU951
 3043 0024 7047     		bx	lr
 3044              		.cfi_endproc
 3045              	.LFE1058:
 3047              		.section	.text.devfs_alloc_inode,"ax",%progbits
 3048              		.align	1
 3049              		.syntax unified
 3050              		.thumb
 3051              		.thumb_func
 3053              	devfs_alloc_inode:
 3054              	.LVL288:
 3055              	.LFB1057:
 377:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock *supb = sb->s_fs_info;
 3056              		.loc 1 377 1 is_stmt 1 view -0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 0
 3059              		@ frame_needed = 0, uses_anonymous_args = 0
 377:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock *supb = sb->s_fs_info;
 3060              		.loc 1 377 1 is_stmt 0 view .LVU953
 3061 0000 38B5     		push	{r3, r4, r5, lr}
 3062              	.LCFI41:
 3063              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccl8in31.s 			page 160


 3064              		.cfi_offset 3, -16
 3065              		.cfi_offset 4, -12
 3066              		.cfi_offset 5, -8
 3067              		.cfi_offset 14, -4
 3068 0002 0446     		mov	r4, r0
 378:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(supb->magic != MAGIC) return NULL;
 3069              		.loc 1 378 5 is_stmt 1 view .LVU954
 378:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(supb->magic != MAGIC) return NULL;
 3070              		.loc 1 378 30 is_stmt 0 view .LVU955
 3071 0004 006B     		ldr	r0, [r0, #48]
 3072              	.LVL289:
 379:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct devfs_inode * inode = devfs_create_empty_inode(supb,&devfs_file_fops,10); //Êñá‰ª∂Á≥ªÁª
 3073              		.loc 1 379 5 is_stmt 1 view .LVU956
 379:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct devfs_inode * inode = devfs_create_empty_inode(supb,&devfs_file_fops,10); //Êñá‰ª∂Á≥ªÁª
 3074              		.loc 1 379 12 is_stmt 0 view .LVU957
 3075 0006 0268     		ldr	r2, [r0]
 379:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct devfs_inode * inode = devfs_create_empty_inode(supb,&devfs_file_fops,10); //Êñá‰ª∂Á≥ªÁª
 3076              		.loc 1 379 7 view .LVU958
 3077 0008 0B4B     		ldr	r3, .L178
 3078 000a 9A42     		cmp	r2, r3
 3079 000c 0ED1     		bne	.L175
 380:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      if(inode == NULL) return NULL;
 3080              		.loc 1 380 6 is_stmt 1 view .LVU959
 380:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      if(inode == NULL) return NULL;
 3081              		.loc 1 380 35 is_stmt 0 view .LVU960
 3082 000e 0A22     		movs	r2, #10
 3083 0010 0A49     		ldr	r1, .L178+4
 3084 0012 FFF7FEFF 		bl	devfs_create_empty_inode
 3085              	.LVL290:
 381:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct inode *out_inode = devfs_get_inode(inode,sb);
 3086              		.loc 1 381 6 is_stmt 1 view .LVU961
 381:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct inode *out_inode = devfs_get_inode(inode,sb);
 3087              		.loc 1 381 8 is_stmt 0 view .LVU962
 3088 0016 0546     		mov	r5, r0
 3089 0018 58B1     		cbz	r0, .L176
 382:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      if(out_inode == NULL){
 3090              		.loc 1 382 6 is_stmt 1 view .LVU963
 382:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      if(out_inode == NULL){
 3091              		.loc 1 382 32 is_stmt 0 view .LVU964
 3092 001a 2146     		mov	r1, r4
 3093 001c FFF7FEFF 		bl	devfs_get_inode
 3094              	.LVL291:
 383:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(inode);
 3095              		.loc 1 383 6 is_stmt 1 view .LVU965
 383:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(inode);
 3096              		.loc 1 383 8 is_stmt 0 view .LVU966
 3097 0020 0446     		mov	r4, r0
 3098              	.LVL292:
 383:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(inode);
 3099              		.loc 1 383 8 view .LVU967
 3100 0022 20B9     		cbnz	r0, .L173
 384:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return NULL;
 3101              		.loc 1 384 9 is_stmt 1 view .LVU968
 3102              	.LVL293:
 3103              	.LBB338:
 3104              	.LBI338:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
ARM GAS  /tmp/ccl8in31.s 			page 161


 3105              		.loc 4 383 20 view .LVU969
 3106              	.LBB339:
 3107              		.loc 4 384 2 view .LVU970
 3108 0024 2846     		mov	r0, r5
 3109              	.LVL294:
 3110              		.loc 4 384 2 is_stmt 0 view .LVU971
 3111 0026 FFF7FEFF 		bl	__sfree__
 3112              	.LVL295:
 3113              		.loc 4 384 2 view .LVU972
 3114              	.LBE339:
 3115              	.LBE338:
 385:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      }
 3116              		.loc 1 385 9 is_stmt 1 view .LVU973
 385:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      }
 3117              		.loc 1 385 16 is_stmt 0 view .LVU974
 3118 002a 00E0     		b	.L173
 3119              	.LVL296:
 3120              	.L175:
 379:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct devfs_inode * inode = devfs_create_empty_inode(supb,&devfs_file_fops,10); //Êñá‰ª∂Á≥ªÁª
 3121              		.loc 1 379 37 discriminator 1 view .LVU975
 3122 002c 0024     		movs	r4, #0
 3123              	.LVL297:
 3124              	.L173:
 388:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3125              		.loc 1 388 1 view .LVU976
 3126 002e 2046     		mov	r0, r4
 3127 0030 38BD     		pop	{r3, r4, r5, pc}
 3128              	.LVL298:
 3129              	.L176:
 381:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct inode *out_inode = devfs_get_inode(inode,sb);
 3130              		.loc 1 381 31 discriminator 1 view .LVU977
 3131 0032 0446     		mov	r4, r0
 3132              	.LVL299:
 381:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****      struct inode *out_inode = devfs_get_inode(inode,sb);
 3133              		.loc 1 381 31 discriminator 1 view .LVU978
 3134 0034 FBE7     		b	.L173
 3135              	.L179:
 3136 0036 00BF     		.align	2
 3137              	.L178:
 3138 0038 4E61BC00 		.word	12345678
 3139 003c 00000000 		.word	devfs_file_fops
 3140              		.cfi_endproc
 3141              	.LFE1057:
 3143              		.section	.text.devfs_superblock_destory,"ax",%progbits
 3144              		.align	1
 3145              		.syntax unified
 3146              		.thumb
 3147              		.thumb_func
 3149              	devfs_superblock_destory:
 3150              	.LVL300:
 3151              	.LFB1051:
 226:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb!= NULL) {
 3152              		.loc 1 226 66 is_stmt 1 view -0
 3153              		.cfi_startproc
 3154              		@ args = 0, pretend = 0, frame = 0
 3155              		@ frame_needed = 0, uses_anonymous_args = 0
 227:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         struct devfs_inode * root_inode = sb->rootinode;
ARM GAS  /tmp/ccl8in31.s 			page 162


 3156              		.loc 1 227 5 view .LVU980
 227:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         struct devfs_inode * root_inode = sb->rootinode;
 3157              		.loc 1 227 7 is_stmt 0 view .LVU981
 3158 0000 50B1     		cbz	r0, .L184
 226:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb!= NULL) {
 3159              		.loc 1 226 66 view .LVU982
 3160 0002 10B5     		push	{r4, lr}
 3161              	.LCFI42:
 3162              		.cfi_def_cfa_offset 8
 3163              		.cfi_offset 4, -8
 3164              		.cfi_offset 14, -4
 3165 0004 0446     		mov	r4, r0
 3166              	.LBB340:
 228:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!root_inode){
 3167              		.loc 1 228 9 is_stmt 1 view .LVU983
 228:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         if(!root_inode){
 3168              		.loc 1 228 30 is_stmt 0 view .LVU984
 3169 0006 4069     		ldr	r0, [r0, #20]
 3170              	.LVL301:
 229:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             kfree(root_inode);
 3171              		.loc 1 229 9 is_stmt 1 view .LVU985
 229:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****             kfree(root_inode);
 3172              		.loc 1 229 11 is_stmt 0 view .LVU986
 3173 0008 18B1     		cbz	r0, .L187
 3174              	.LVL302:
 3175              	.L182:
 232:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3176              		.loc 1 232 9 is_stmt 1 view .LVU987
 3177              	.LBB341:
 3178              	.LBI341:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3179              		.loc 4 383 20 view .LVU988
 3180              	.LBB342:
 3181              		.loc 4 384 2 view .LVU989
 3182 000a 2046     		mov	r0, r4
 3183 000c FFF7FEFF 		bl	__sfree__
 3184              	.LVL303:
 3185              		.loc 4 384 2 is_stmt 0 view .LVU990
 3186              	.LBE342:
 3187              	.LBE341:
 3188              	.LBE340:
 234:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3189              		.loc 1 234 1 view .LVU991
 3190 0010 10BD     		pop	{r4, pc}
 3191              	.LVL304:
 3192              	.L187:
 3193              	.LBB345:
 230:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         }
 3194              		.loc 1 230 13 is_stmt 1 view .LVU992
 3195              	.LBB343:
 3196              	.LBI343:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3197              		.loc 4 383 20 view .LVU993
 3198              	.LBB344:
 3199              		.loc 4 384 2 view .LVU994
 3200 0012 FFF7FEFF 		bl	__sfree__
 3201              	.LVL305:
ARM GAS  /tmp/ccl8in31.s 			page 163


 385:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3202              		.loc 4 385 1 is_stmt 0 view .LVU995
 3203 0016 F8E7     		b	.L182
 3204              	.LVL306:
 3205              	.L184:
 3206              	.LCFI43:
 3207              		.cfi_def_cfa_offset 0
 3208              		.cfi_restore 4
 3209              		.cfi_restore 14
 3210              		.loc 4 385 1 view .LVU996
 3211 0018 7047     		bx	lr
 3212              	.LBE344:
 3213              	.LBE343:
 3214              	.LBE345:
 3215              		.cfi_endproc
 3216              	.LFE1051:
 3218              		.section	.rodata.devfs_mount.str1.4,"aMS",%progbits,1
 3219              		.align	2
 3220              	.LC4:
 3221 0000 726F6F74 		.ascii	"root\000"
 3221      00
 3222              		.section	.text.devfs_mount,"ax",%progbits
 3223              		.align	1
 3224              		.syntax unified
 3225              		.thumb
 3226              		.thumb_func
 3228              	devfs_mount:
 3229              	.LVL307:
 3230              	.LFB1053:
 289:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock *fs_superblock= devfs_superblock_create();
 3231              		.loc 1 289 1 is_stmt 1 view -0
 3232              		.cfi_startproc
 3233              		@ args = 0, pretend = 0, frame = 0
 3234              		@ frame_needed = 0, uses_anonymous_args = 0
 289:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_superblock *fs_superblock= devfs_superblock_create();
 3235              		.loc 1 289 1 is_stmt 0 view .LVU998
 3236 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3237              	.LCFI44:
 3238              		.cfi_def_cfa_offset 24
 3239              		.cfi_offset 3, -24
 3240              		.cfi_offset 4, -20
 3241              		.cfi_offset 5, -16
 3242              		.cfi_offset 6, -12
 3243              		.cfi_offset 7, -8
 3244              		.cfi_offset 14, -4
 290:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (fs_superblock == NULL){
 3245              		.loc 1 290 5 is_stmt 1 view .LVU999
 290:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if (fs_superblock == NULL){
 3246              		.loc 1 290 45 is_stmt 0 view .LVU1000
 3247 0002 FFF7FEFF 		bl	devfs_superblock_create
 3248              	.LVL308:
 291:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);        
 3249              		.loc 1 291 5 is_stmt 1 view .LVU1001
 291:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);        
 3250              		.loc 1 291 8 is_stmt 0 view .LVU1002
 3251 0006 0028     		cmp	r0, #0
 3252 0008 49D0     		beq	.L194
ARM GAS  /tmp/ccl8in31.s 			page 164


 3253 000a 0646     		mov	r6, r0
 294:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root == NULL){
 3254              		.loc 1 294 5 is_stmt 1 view .LVU1003
 294:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root == NULL){
 3255              		.loc 1 294 28 is_stmt 0 view .LVU1004
 3256 000c 2549     		ldr	r1, .L200
 3257 000e 0020     		movs	r0, #0
 3258              	.LVL309:
 294:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root == NULL){
 3259              		.loc 1 294 28 view .LVU1005
 3260 0010 FFF7FEFF 		bl	__d_alloc
 3261              	.LVL310:
 295:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****          devfs_superblock_destory(fs_superblock);
 3262              		.loc 1 295 5 is_stmt 1 view .LVU1006
 295:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****          devfs_superblock_destory(fs_superblock);
 3263              		.loc 1 295 7 is_stmt 0 view .LVU1007
 3264 0014 0446     		mov	r4, r0
 3265 0016 D8B1     		cbz	r0, .L196
 301:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(dentry == NULL){
 3266              		.loc 1 301 5 is_stmt 1 view .LVU1008
 3267              	.LVL311:
 3268              	.LBB346:
 3269              	.LBI346:
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 3270              		.loc 4 379 21 view .LVU1009
 3271              	.LBB347:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3272              		.loc 4 380 2 view .LVU1010
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3273              		.loc 4 380 9 is_stmt 0 view .LVU1011
 3274 0018 4FF44C61 		mov	r1, #3264
 3275 001c 1420     		movs	r0, #20
 3276              	.LVL312:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3277              		.loc 4 380 9 view .LVU1012
 3278 001e FFF7FEFF 		bl	__smalloc__
 3279              	.LVL313:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3280              		.loc 4 380 9 view .LVU1013
 3281              	.LBE347:
 3282              	.LBE346:
 302:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****        
 3283              		.loc 1 302 5 is_stmt 1 view .LVU1014
 302:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****        
 3284              		.loc 1 302 7 is_stmt 0 view .LVU1015
 3285 0022 0546     		mov	r5, r0
 3286 0024 D0B1     		cbz	r0, .L197
 307:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->target_inode = fs_superblock->rootinode;
 3287              		.loc 1 307 5 is_stmt 1 view .LVU1016
 307:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->target_inode = fs_superblock->rootinode;
 3288              		.loc 1 307 18 is_stmt 0 view .LVU1017
 3289 0026 0021     		movs	r1, #0
 3290 0028 4160     		str	r1, [r0, #4]
 308:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->magic =MAGIC;
 3291              		.loc 1 308 5 is_stmt 1 view .LVU1018
 308:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->magic =MAGIC;
 3292              		.loc 1 308 41 is_stmt 0 view .LVU1019
ARM GAS  /tmp/ccl8in31.s 			page 165


 3293 002a 7369     		ldr	r3, [r6, #20]
 308:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     dentry->magic =MAGIC;
 3294              		.loc 1 308 26 view .LVU1020
 3295 002c 8360     		str	r3, [r0, #8]
 309:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root->d_fsdata = dentry;
 3296              		.loc 1 309 5 is_stmt 1 view .LVU1021
 309:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root->d_fsdata = dentry;
 3297              		.loc 1 309 19 is_stmt 0 view .LVU1022
 3298 002e 1E4B     		ldr	r3, .L200+4
 3299 0030 0360     		str	r3, [r0]
 310:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode * root_inode = devfs_get_inode(dentry->target_inode,NULL);
 3300              		.loc 1 310 5 is_stmt 1 view .LVU1023
 310:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct inode * root_inode = devfs_get_inode(dentry->target_inode,NULL);
 3301              		.loc 1 310 20 is_stmt 0 view .LVU1024
 3302 0032 6065     		str	r0, [r4, #84]
 311:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root_inode == NULL){
 3303              		.loc 1 311 5 is_stmt 1 view .LVU1025
 311:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root_inode == NULL){
 3304              		.loc 1 311 33 is_stmt 0 view .LVU1026
 3305 0034 8068     		ldr	r0, [r0, #8]
 3306              	.LVL314:
 311:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(root_inode == NULL){
 3307              		.loc 1 311 33 view .LVU1027
 3308 0036 FFF7FEFF 		bl	devfs_get_inode
 3309              	.LVL315:
 312:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(dentry);
 3310              		.loc 1 312 5 is_stmt 1 view .LVU1028
 312:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(dentry);
 3311              		.loc 1 312 7 is_stmt 0 view .LVU1029
 3312 003a 0746     		mov	r7, r0
 3313 003c A0B1     		cbz	r0, .L198
 318:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3314              		.loc 1 318 5 is_stmt 1 view .LVU1030
 318:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3315              		.loc 1 318 19 is_stmt 0 view .LVU1031
 3316 003e A064     		str	r0, [r4, #72]
 320:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb == NULL){
 3317              		.loc 1 320 5 is_stmt 1 view .LVU1032
 320:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb == NULL){
 3318              		.loc 1 320 29 is_stmt 0 view .LVU1033
 3319 0040 3046     		mov	r0, r6
 3320              	.LVL316:
 320:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(sb == NULL){
 3321              		.loc 1 320 29 view .LVU1034
 3322 0042 FFF7FEFF 		bl	devfs_get_vfs_superblock
 3323              	.LVL317:
 321:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(root);
 3324              		.loc 1 321 5 is_stmt 1 view .LVU1035
 321:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(root);
 3325              		.loc 1 321 7 is_stmt 0 view .LVU1036
 3326 0046 D8B1     		cbz	r0, .L199
 328:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root->d_sb = sb;
 3327              		.loc 1 328 5 is_stmt 1 view .LVU1037
 328:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     root->d_sb = sb;
 3328              		.loc 1 328 16 is_stmt 0 view .LVU1038
 3329 0048 8461     		str	r4, [r0, #24]
 329:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
ARM GAS  /tmp/ccl8in31.s 			page 166


 3330              		.loc 1 329 5 is_stmt 1 view .LVU1039
 329:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3331              		.loc 1 329 16 is_stmt 0 view .LVU1040
 3332 004a 2065     		str	r0, [r4, #80]
 331:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 3333              		.loc 1 331 5 is_stmt 1 view .LVU1041
 3334              	.LVL318:
 3335              	.L188:
 332:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3336              		.loc 1 332 1 is_stmt 0 view .LVU1042
 3337 004c 2046     		mov	r0, r4
 3338 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3339              	.LVL319:
 3340              	.L196:
 296:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);   
 3341              		.loc 1 296 10 is_stmt 1 view .LVU1043
 3342 0050 3046     		mov	r0, r6
 3343              	.LVL320:
 296:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);   
 3344              		.loc 1 296 10 is_stmt 0 view .LVU1044
 3345 0052 FFF7FEFF 		bl	devfs_superblock_destory
 3346              	.LVL321:
 297:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3347              		.loc 1 297 9 is_stmt 1 view .LVU1045
 297:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3348              		.loc 1 297 16 is_stmt 0 view .LVU1046
 3349 0056 6FF00B04 		mvn	r4, #11
 3350              	.LVL322:
 297:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3351              		.loc 1 297 16 view .LVU1047
 3352 005a F7E7     		b	.L188
 3353              	.LVL323:
 3354              	.L197:
 304:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);        
 3355              		.loc 1 304 9 is_stmt 1 view .LVU1048
 3356              	.LBB348:
 3357              	.LBI348:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3358              		.loc 4 383 20 view .LVU1049
 3359              	.LBB349:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3360              		.loc 4 384 2 view .LVU1050
 3361 005c 2046     		mov	r0, r4
 3362              	.LVL324:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3363              		.loc 4 384 2 is_stmt 0 view .LVU1051
 3364 005e FFF7FEFF 		bl	__sfree__
 3365              	.LVL325:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3366              		.loc 4 384 2 view .LVU1052
 3367              	.LBE349:
 3368              	.LBE348:
 305:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3369              		.loc 1 305 9 is_stmt 1 view .LVU1053
 305:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3370              		.loc 1 305 16 is_stmt 0 view .LVU1054
 3371 0062 6FF00B04 		mvn	r4, #11
ARM GAS  /tmp/ccl8in31.s 			page 167


 3372              	.LVL326:
 305:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3373              		.loc 1 305 16 view .LVU1055
 3374 0066 F1E7     		b	.L188
 3375              	.LVL327:
 3376              	.L198:
 313:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         devfs_superblock_destory(fs_superblock);
 3377              		.loc 1 313 9 is_stmt 1 view .LVU1056
 3378              	.LBB350:
 3379              	.LBI350:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3380              		.loc 4 383 20 view .LVU1057
 3381              	.LBB351:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3382              		.loc 4 384 2 view .LVU1058
 3383 0068 2846     		mov	r0, r5
 3384              	.LVL328:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3385              		.loc 4 384 2 is_stmt 0 view .LVU1059
 3386 006a FFF7FEFF 		bl	__sfree__
 3387              	.LVL329:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3388              		.loc 4 384 2 view .LVU1060
 3389              	.LBE351:
 3390              	.LBE350:
 314:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(root);
 3391              		.loc 1 314 9 is_stmt 1 view .LVU1061
 3392 006e 3046     		mov	r0, r6
 3393 0070 FFF7FEFF 		bl	devfs_superblock_destory
 3394              	.LVL330:
 315:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);        
 3395              		.loc 1 315 9 view .LVU1062
 3396              	.LBB352:
 3397              	.LBI352:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3398              		.loc 4 383 20 view .LVU1063
 3399              	.LBB353:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3400              		.loc 4 384 2 view .LVU1064
 3401 0074 2046     		mov	r0, r4
 3402 0076 FFF7FEFF 		bl	__sfree__
 3403              	.LVL331:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3404              		.loc 4 384 2 is_stmt 0 view .LVU1065
 3405              	.LBE353:
 3406              	.LBE352:
 316:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     } 
 3407              		.loc 1 316 9 is_stmt 1 view .LVU1066
 316:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     } 
 3408              		.loc 1 316 16 is_stmt 0 view .LVU1067
 3409 007a 6FF00B04 		mvn	r4, #11
 3410              	.LVL332:
 316:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     } 
 3411              		.loc 1 316 16 view .LVU1068
 3412 007e E5E7     		b	.L188
 3413              	.LVL333:
 3414              	.L199:
ARM GAS  /tmp/ccl8in31.s 			page 168


 322:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         kfree(dentry);
 3415              		.loc 1 322 9 is_stmt 1 view .LVU1069
 3416              	.LBB354:
 3417              	.LBI354:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3418              		.loc 4 383 20 view .LVU1070
 3419              	.LBB355:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3420              		.loc 4 384 2 view .LVU1071
 3421 0080 2046     		mov	r0, r4
 3422              	.LVL334:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3423              		.loc 4 384 2 is_stmt 0 view .LVU1072
 3424 0082 FFF7FEFF 		bl	__sfree__
 3425              	.LVL335:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3426              		.loc 4 384 2 view .LVU1073
 3427              	.LBE355:
 3428              	.LBE354:
 323:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         inode_put(root_inode);
 3429              		.loc 1 323 9 is_stmt 1 view .LVU1074
 3430              	.LBB356:
 3431              	.LBI356:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 3432              		.loc 4 383 20 view .LVU1075
 3433              	.LBB357:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3434              		.loc 4 384 2 view .LVU1076
 3435 0086 2846     		mov	r0, r5
 3436 0088 FFF7FEFF 		bl	__sfree__
 3437              	.LVL336:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 3438              		.loc 4 384 2 is_stmt 0 view .LVU1077
 3439              	.LBE357:
 3440              	.LBE356:
 324:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         devfs_superblock_destory(fs_superblock);
 3441              		.loc 1 324 9 is_stmt 1 view .LVU1078
 3442 008c 3846     		mov	r0, r7
 3443 008e FFF7FEFF 		bl	inode_put
 3444              	.LVL337:
 325:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****         return ERR_PTR(-ENOMEM);       
 3445              		.loc 1 325 9 view .LVU1079
 3446 0092 3046     		mov	r0, r6
 3447 0094 FFF7FEFF 		bl	devfs_superblock_destory
 3448              	.LVL338:
 326:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3449              		.loc 1 326 9 view .LVU1080
 326:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3450              		.loc 1 326 16 is_stmt 0 view .LVU1081
 3451 0098 6FF00B04 		mvn	r4, #11
 3452              	.LVL339:
 326:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
 3453              		.loc 1 326 16 view .LVU1082
 3454 009c D6E7     		b	.L188
 3455              	.LVL340:
 3456              	.L194:
 292:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     }
ARM GAS  /tmp/ccl8in31.s 			page 169


 3457              		.loc 1 292 16 view .LVU1083
 3458 009e 6FF00B04 		mvn	r4, #11
 3459 00a2 D3E7     		b	.L188
 3460              	.L201:
 3461              		.align	2
 3462              	.L200:
 3463 00a4 00000000 		.word	.LC4
 3464 00a8 4E61BC00 		.word	12345678
 3465              		.cfi_endproc
 3466              	.LFE1053:
 3468              		.section	.text.devfs_mount_device,"ax",%progbits
 3469              		.align	1
 3470              		.global	devfs_mount_device
 3471              		.syntax unified
 3472              		.thumb
 3473              		.thumb_func
 3475              	devfs_mount_device:
 3476              	.LVL341:
 3477              	.LFB1035:
  42:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
 3478              		.loc 1 42 91 is_stmt 1 view -0
 3479              		.cfi_startproc
 3480              		@ args = 0, pretend = 0, frame = 0
 3481              		@ frame_needed = 0, uses_anonymous_args = 0
 3482              		@ link register save eliminated.
  42:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
 3483              		.loc 1 42 91 is_stmt 0 view .LVU1085
 3484 0000 30B4     		push	{r4, r5}
 3485              	.LCFI45:
 3486              		.cfi_def_cfa_offset 8
 3487              		.cfi_offset 4, -8
 3488              		.cfi_offset 5, -4
  43:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(devfs_inode->magic != MAGIC) return -1;
 3489              		.loc 1 43 5 is_stmt 1 view .LVU1086
  43:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(devfs_inode->magic != MAGIC) return -1;
 3490              		.loc 1 43 25 is_stmt 0 view .LVU1087
 3491 0002 D0F88430 		ldr	r3, [r0, #132]
 3492              	.LVL342:
  44:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_fop = fop;
 3493              		.loc 1 44 5 is_stmt 1 view .LVU1088
  44:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_fop = fop;
 3494              		.loc 1 44 7 is_stmt 0 view .LVU1089
 3495 0006 094C     		ldr	r4, .L206
 3496 0008 1D68     		ldr	r5, [r3]
 3497 000a A542     		cmp	r5, r4
 3498 000c 0BD1     		bne	.L204
  45:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
 3499              		.loc 1 45 5 is_stmt 1 view .LVU1090
  45:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
 3500              		.loc 1 45 24 is_stmt 0 view .LVU1091
 3501 000e 1A61     		str	r2, [r3, #16]
  46:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_mode = S_IFCHR | (devfs_inode->i_mode & 0777);
 3502              		.loc 1 46 5 is_stmt 1 view .LVU1092
  46:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_mode = S_IFCHR | (devfs_inode->i_mode & 0777);
 3503              		.loc 1 46 24 is_stmt 0 view .LVU1093
 3504 0010 9960     		str	r1, [r3, #8]
  47:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop = fop;
ARM GAS  /tmp/ccl8in31.s 			page 170


 3505              		.loc 1 47 5 is_stmt 1 view .LVU1094
  47:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop = fop;
 3506              		.loc 1 47 49 is_stmt 0 view .LVU1095
 3507 0012 5968     		ldr	r1, [r3, #4]
 3508              	.LVL343:
  47:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop = fop;
 3509              		.loc 1 47 58 view .LVU1096
 3510 0014 C1F30801 		ubfx	r1, r1, #0, #9
  47:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop = fop;
 3511              		.loc 1 47 35 view .LVU1097
 3512 0018 41F40051 		orr	r1, r1, #8192
  47:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     inode->i_fop = fop;
 3513              		.loc 1 47 25 view .LVU1098
 3514 001c 5960     		str	r1, [r3, #4]
  48:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 3515              		.loc 1 48 5 is_stmt 1 view .LVU1099
  48:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 3516              		.loc 1 48 18 is_stmt 0 view .LVU1100
 3517 001e C267     		str	r2, [r0, #124]
 3518              	.LVL344:
  49:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 3519              		.loc 1 49 5 is_stmt 1 view .LVU1101
  49:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 3520              		.loc 1 49 12 is_stmt 0 view .LVU1102
 3521 0020 0020     		movs	r0, #0
 3522              	.LVL345:
 3523              	.L202:
  50:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3524              		.loc 1 50 1 view .LVU1103
 3525 0022 30BC     		pop	{r4, r5}
 3526              	.LCFI46:
 3527              		.cfi_remember_state
 3528              		.cfi_restore 5
 3529              		.cfi_restore 4
 3530              		.cfi_def_cfa_offset 0
 3531 0024 7047     		bx	lr
 3532              	.LVL346:
 3533              	.L204:
 3534              	.LCFI47:
 3535              		.cfi_restore_state
  44:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_fop = fop;
 3536              		.loc 1 44 44 discriminator 1 view .LVU1104
 3537 0026 4FF0FF30 		mov	r0, #-1
 3538              	.LVL347:
  44:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_fop = fop;
 3539              		.loc 1 44 44 discriminator 1 view .LVU1105
 3540 002a FAE7     		b	.L202
 3541              	.L207:
 3542              		.align	2
 3543              	.L206:
 3544 002c 4E61BC00 		.word	12345678
 3545              		.cfi_endproc
 3546              	.LFE1035:
 3548              		.section	.text.devfs_mount_blk_device,"ax",%progbits
 3549              		.align	1
 3550              		.global	devfs_mount_blk_device
 3551              		.syntax unified
ARM GAS  /tmp/ccl8in31.s 			page 171


 3552              		.thumb
 3553              		.thumb_func
 3555              	devfs_mount_blk_device:
 3556              	.LVL348:
 3557              	.LFB1036:
  52:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
 3558              		.loc 1 52 90 is_stmt 1 view -0
 3559              		.cfi_startproc
 3560              		@ args = 0, pretend = 0, frame = 0
 3561              		@ frame_needed = 0, uses_anonymous_args = 0
 3562              		@ link register save eliminated.
  52:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
 3563              		.loc 1 52 90 is_stmt 0 view .LVU1107
 3564 0000 10B4     		push	{r4}
 3565              	.LCFI48:
 3566              		.cfi_def_cfa_offset 4
 3567              		.cfi_offset 4, -4
  53:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(devfs_inode->magic != MAGIC) return -1;
 3568              		.loc 1 53 5 is_stmt 1 view .LVU1108
  53:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if(devfs_inode->magic != MAGIC) return -1;
 3569              		.loc 1 53 25 is_stmt 0 view .LVU1109
 3570 0002 D0F88430 		ldr	r3, [r0, #132]
 3571              	.LVL349:
  54:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
 3572              		.loc 1 54 5 is_stmt 1 view .LVU1110
  54:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
 3573              		.loc 1 54 7 is_stmt 0 view .LVU1111
 3574 0006 0948     		ldr	r0, .L212
 3575              	.LVL350:
  54:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
 3576              		.loc 1 54 7 view .LVU1112
 3577 0008 1C68     		ldr	r4, [r3]
 3578 000a 8442     		cmp	r4, r0
 3579 000c 0BD1     		bne	.L210
  55:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->bdev = bdev;
 3580              		.loc 1 55 5 is_stmt 1 view .LVU1113
  55:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->bdev = bdev;
 3581              		.loc 1 55 24 is_stmt 0 view .LVU1114
 3582 000e 9A60     		str	r2, [r3, #8]
  56:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_mode = S_IFBLK | (devfs_inode->i_mode & 0777);
 3583              		.loc 1 56 5 is_stmt 1 view .LVU1115
  56:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->i_mode = S_IFBLK | (devfs_inode->i_mode & 0777);
 3584              		.loc 1 56 23 is_stmt 0 view .LVU1116
 3585 0010 5963     		str	r1, [r3, #52]
  57:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 3586              		.loc 1 57 5 is_stmt 1 view .LVU1117
  57:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 3587              		.loc 1 57 49 is_stmt 0 view .LVU1118
 3588 0012 5A68     		ldr	r2, [r3, #4]
 3589              	.LVL351:
  57:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 3590              		.loc 1 57 58 view .LVU1119
 3591 0014 C2F30802 		ubfx	r2, r2, #0, #9
  57:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
 3592              		.loc 1 57 35 view .LVU1120
 3593 0018 42F4C042 		orr	r2, r2, #24576
  57:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return 0;
ARM GAS  /tmp/ccl8in31.s 			page 172


 3594              		.loc 1 57 25 view .LVU1121
 3595 001c 5A60     		str	r2, [r3, #4]
  58:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 3596              		.loc 1 58 5 is_stmt 1 view .LVU1122
  58:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 3597              		.loc 1 58 12 is_stmt 0 view .LVU1123
 3598 001e 0020     		movs	r0, #0
 3599              	.LVL352:
 3600              	.L208:
  59:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** struct block_device* devfs_get_blk_dev(struct inode *inode)
 3601              		.loc 1 59 1 view .LVU1124
 3602 0020 5DF8044B 		ldr	r4, [sp], #4
 3603              	.LCFI49:
 3604              		.cfi_remember_state
 3605              		.cfi_restore 4
 3606              		.cfi_def_cfa_offset 0
 3607 0024 7047     		bx	lr
 3608              	.LVL353:
 3609              	.L210:
 3610              	.LCFI50:
 3611              		.cfi_restore_state
  54:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     devfs_inode->major = major;
 3612              		.loc 1 54 44 discriminator 1 view .LVU1125
 3613 0026 4FF0FF30 		mov	r0, #-1
 3614 002a F9E7     		b	.L208
 3615              	.L213:
 3616              		.align	2
 3617              	.L212:
 3618 002c 4E61BC00 		.word	12345678
 3619              		.cfi_endproc
 3620              	.LFE1036:
 3622              		.section	.text.devfs_get_blk_dev,"ax",%progbits
 3623              		.align	1
 3624              		.global	devfs_get_blk_dev
 3625              		.syntax unified
 3626              		.thumb
 3627              		.thumb_func
 3629              	devfs_get_blk_dev:
 3630              	.LVL354:
 3631              	.LFB1037:
  61:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     struct devfs_inode *devfs_inode = inode->i_private;
 3632              		.loc 1 61 1 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 3636              		@ link register save eliminated.
  62:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if((devfs_inode->i_mode & S_IFMT) == S_IFBLK) 
 3637              		.loc 1 62 5 view .LVU1127
  62:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     if((devfs_inode->i_mode & S_IFMT) == S_IFBLK) 
 3638              		.loc 1 62 25 is_stmt 0 view .LVU1128
 3639 0000 D0F88420 		ldr	r2, [r0, #132]
 3640              	.LVL355:
  63:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_inode->bdev;
 3641              		.loc 1 63 5 is_stmt 1 view .LVU1129
  63:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_inode->bdev;
 3642              		.loc 1 63 20 is_stmt 0 view .LVU1130
 3643 0004 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccl8in31.s 			page 173


  63:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_inode->bdev;
 3644              		.loc 1 63 29 view .LVU1131
 3645 0006 03F47043 		and	r3, r3, #61440
  63:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     return devfs_inode->bdev;
 3646              		.loc 1 63 7 view .LVU1132
 3647 000a B3F5C04F 		cmp	r3, #24576
 3648 000e 01D1     		bne	.L216
  64:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     else 
 3649              		.loc 1 64 5 is_stmt 1 view .LVU1133
  64:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     else 
 3650              		.loc 1 64 23 is_stmt 0 view .LVU1134
 3651 0010 506B     		ldr	r0, [r2, #52]
 3652              	.LVL356:
  64:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c ****     else 
 3653              		.loc 1 64 23 view .LVU1135
 3654 0012 7047     		bx	lr
 3655              	.LVL357:
 3656              	.L216:
  66:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** }
 3657              		.loc 1 66 12 view .LVU1136
 3658 0014 0020     		movs	r0, #0
 3659              	.LVL358:
  67:/mnt/c/Users/31740/Desktop/newcore/fs/devfs/devfs.c **** 
 3660              		.loc 1 67 1 view .LVU1137
 3661 0016 7047     		bx	lr
 3662              		.cfi_endproc
 3663              	.LFE1037:
 3665              		.section	.fsinitcall,"aw"
 3666              		.align	2
 3669              	_initcall_devfs_ops_init:
 3670 0000 00000000 		.word	devfs_ops_init
 3671              		.section	.rodata.str1.4,"aMS",%progbits,1
 3672              		.align	2
 3673              	.LC5:
 3674 0000 64657666 		.ascii	"devfs\000"
 3674      7300
 3675              		.section	.data.fs_type,"aw"
 3676              		.align	2
 3679              	fs_type:
 3680 0000 00000000 		.word	.LC5
 3681 0004 00000000 		.word	0
 3682 0008 00000000 		.word	0
 3683 000c 00000000 		.space	4
 3684 0010 00000000 		.word	devfs_mount
 3685 0014 00000000 		.word	devfs_kill_sb
 3686 0018 00000000 		.word	0
 3687 001c 00000000 		.space	8
 3687      00000000 
 3688              		.section	.data.devfs_inode_operation,"aw"
 3689              		.align	2
 3692              	devfs_inode_operation:
 3693 0000 00000000 		.word	devfs_vfs_lookup
 3694 0004 00000000 		.space	16
 3694      00000000 
 3694      00000000 
 3694      00000000 
 3695 0014 00000000 		.word	devfs_create
ARM GAS  /tmp/ccl8in31.s 			page 174


 3696 0018 00000000 		.word	devfs_link
 3697 001c 00000000 		.word	devfs_unlink
 3698 0020 00000000 		.space	4
 3699 0024 00000000 		.word	devfs_mkdir
 3700 0028 00000000 		.word	devfs_rmdir
 3701 002c 00000000 		.space	8
 3701      00000000 
 3702 0034 00000000 		.word	devfs_setattr
 3703 0038 00000000 		.word	devfs_getattr
 3704 003c 00000000 		.space	40
 3704      00000000 
 3704      00000000 
 3704      00000000 
 3704      00000000 
 3705              		.section	.data.devfs_dentry_operation,"aw"
 3706              		.align	7
 3709              	devfs_dentry_operation:
 3710 0000 00000000 		.space	24
 3710      00000000 
 3710      00000000 
 3710      00000000 
 3710      00000000 
 3711 0018 00000000 		.word	devfs_release_dentry
 3712 001c 00000000 		.space	100
 3712      00000000 
 3712      00000000 
 3712      00000000 
 3712      00000000 
 3713              		.section	.data.devfs_super_operation,"aw"
 3714              		.align	2
 3717              	devfs_super_operation:
 3718 0000 00000000 		.word	devfs_alloc_inode
 3719 0004 00000000 		.word	devfs_destroy_inode
 3720 0008 00000000 		.word	0
 3721 000c 00000000 		.word	0
 3722 0010 00000000 		.word	0
 3723 0014 00000000 		.word	0
 3724 0018 00000000 		.space	4
 3725 001c 00000000 		.word	devfs_kill_sb
 3726 0020 00000000 		.word	0
 3727 0024 00000000 		.space	16
 3727      00000000 
 3727      00000000 
 3727      00000000 
 3728 0034 00000000 		.word	devfs_statfs
 3729 0038 00000000 		.space	36
 3729      00000000 
 3729      00000000 
 3729      00000000 
 3729      00000000 
 3730              		.section	.data.devfs_file_fops,"aw"
 3731              		.align	2
 3734              	devfs_file_fops:
 3735 0000 00000000 		.word	0
 3736 0004 00000000 		.space	8
 3736      00000000 
 3737 000c 00000000 		.word	devfs_read
ARM GAS  /tmp/ccl8in31.s 			page 175


 3738 0010 00000000 		.word	devfs_write
 3739 0014 00000000 		.space	32
 3739      00000000 
 3739      00000000 
 3739      00000000 
 3739      00000000 
 3740 0034 00000000 		.word	devfs_open
 3741 0038 00000000 		.space	4
 3742 003c 00000000 		.word	devfs_release
 3743 0040 00000000 		.space	72
 3743      00000000 
 3743      00000000 
 3743      00000000 
 3743      00000000 
 3744              		.text
 3745              	.Letext0:
 3746              		.file 10 "/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/int-l64.h"
 3747              		.file 11 "/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/posix_types.h"
 3748              		.file 12 "/mnt/c/Users/31740/Desktop/newcore/include/uapi/linux/types.h"
 3749              		.file 13 "/mnt/c/Users/31740/Desktop/newcore/include/linux/types.h"
 3750              		.file 14 "/mnt/c/Users/31740/Desktop/newcore/include/linux/init.h"
 3751              		.file 15 "/mnt/c/Users/31740/Desktop/newcore/include/linux/time64.h"
 3752              		.file 16 "/mnt/c/Users/31740/Desktop/newcore/include/linux/uidgid_types.h"
 3753              		.file 17 "/mnt/c/Users/31740/Desktop/newcore/include/linux/stat.h"
 3754              		.file 18 "/mnt/c/Users/31740/Desktop/newcore/include/linux/errseq.h"
 3755              		.file 19 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/sched.h"
 3756              		.file 20 "/mnt/c/Users/31740/Desktop/newcore/include/linux/sched.h"
 3757              		.file 21 "/mnt/c/Users/31740/Desktop/newcore/include/linux/lockdep_types.h"
 3758              		.file 22 "/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock_types_raw.h"
 3759              		.file 23 "/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock_types.h"
 3760              		.file 24 "/mnt/c/Users/31740/Desktop/newcore/include/linux/rbtree_types.h"
 3761              		.file 25 "/mnt/c/Users/31740/Desktop/newcore/include/linux/projid.h"
 3762              		.file 26 "/mnt/c/Users/31740/Desktop/newcore/include/linux/fs.h"
 3763              		.file 27 "/mnt/c/Users/31740/Desktop/newcore/include/linux/mnt_idmapping.h"
 3764              		.file 28 "/mnt/c/Users/31740/Desktop/newcore/include/linux/mutex.h"
 3765              		.file 29 "/mnt/c/Users/31740/Desktop/newcore/include/linux/uio.h"
 3766              		.file 30 "/mnt/c/Users/31740/Desktop/newcore/include/linux/migrate_mode.h"
 3767              		.file 31 "/mnt/c/Users/31740/Desktop/newcore/include/linux/wait.h"
 3768              		.file 32 "/mnt/c/Users/31740/Desktop/newcore/include/linux/xarray.h"
 3769              		.file 33 "/mnt/c/Users/31740/Desktop/newcore/include/linux/rw_hint.h"
 3770              		.file 34 "/mnt/c/Users/31740/Desktop/newcore/include/linux/stddef.h"
 3771              		.file 35 "/mnt/c/Users/31740/Desktop/newcore/include/linux/gfp_types.h"
 3772              		.file 36 "/mnt/c/Users/31740/Desktop/newcore/include/linux/reciprocal_div.h"
 3773              		.file 37 "/mnt/c/Users/31740/Desktop/newcore/include/linux/mm_type.h"
 3774              		.file 38 "/mnt/c/Users/31740/Desktop/newcore/include/linux/bvec.h"
 3775              		.file 39 "/mnt/c/Users/31740/Desktop/newcore/include/linux/blk_types.h"
 3776              		.file 40 "/mnt/c/Users/31740/Desktop/newcore/include/linux/blkdev.h"
 3777              		.file 41 "/mnt/c/Users/31740/Desktop/newcore/include/linux/bio.h"
 3778              		.file 42 "/mnt/c/Users/31740/Desktop/newcore/include/linux/mempool_super_haper.h"
 3779              		.file 43 "/mnt/c/Users/31740/Desktop/newcore/include/linux/mempool.h"
 3780              		.file 44 "/mnt/c/Users/31740/Desktop/newcore/include/linux/workqueue_types.h"
 3781              		.file 45 "/mnt/c/Users/31740/Desktop/newcore/include/linux/blk-mq.h"
 3782              		.file 46 "/mnt/c/Users/31740/Desktop/newcore/include/linux/dcache.h"
 3783              		.file 47 "/mnt/c/Users/31740/Desktop/newcore/include/uapi/linux/pr.h"
 3784              		.file 48 "/mnt/c/Users/31740/Desktop/newcore/include/linux/pr.h"
 3785              		.file 49 "/mnt/c/Users/31740/Desktop/newcore/include/linux/hdreg.h"
 3786              		.file 50 "/mnt/c/Users/31740/Desktop/newcore/include/linux/lockref.h"
ARM GAS  /tmp/ccl8in31.s 			page 176


 3787              		.file 51 "/mnt/c/Users/31740/Desktop/newcore/include/linux/path.h"
 3788              		.file 52 "/mnt/c/Users/31740/Desktop/newcore/include/linux/statfs.h"
 3789              		.file 53 "/mnt/c/Users/31740/Desktop/newcore/include/linux/string.h"
 3790              		.file 54 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/string.h"
 3791              		.file 55 "/mnt/c/Users/31740/Desktop/newcore/include/linux/time.h"
 3792              		.file 56 "/mnt/c/Users/31740/Desktop/newcore/include/linux/printk.h"
 3793              		.file 57 "/mnt/c/Users/31740/Desktop/newcore/include/linux/instrumented.h"
 3794              		.file 58 "/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h"
 3795              		.file 59 "/mnt/c/Users/31740/Desktop/newcore/include/linux/kcsan-checks.h"
 3796              		.file 60 "/mnt/c/Users/31740/Desktop/newcore/include/linux/kasan-checks.h"
ARM GAS  /tmp/ccl8in31.s 			page 177


DEFINED SYMBOLS
                            *ABS*:00000000 devfs.c
     /tmp/ccl8in31.s:21     .text.__spin_init:00000000 $t
     /tmp/ccl8in31.s:26     .text.__spin_init:00000000 __spin_init
     /tmp/ccl8in31.s:46     .text.__spin_unlock:00000000 $t
     /tmp/ccl8in31.s:51     .text.__spin_unlock:00000000 __spin_unlock
     /tmp/ccl8in31.s:69     .text.spin_lock_init:00000000 $t
     /tmp/ccl8in31.s:74     .text.spin_lock_init:00000000 spin_lock_init
     /tmp/ccl8in31.s:97     .text.spin_unlock:00000000 $t
     /tmp/ccl8in31.s:102    .text.spin_unlock:00000000 spin_unlock
     /tmp/ccl8in31.s:124    .text.devfs_statfs:00000000 $t
     /tmp/ccl8in31.s:129    .text.devfs_statfs:00000000 devfs_statfs
     /tmp/ccl8in31.s:174    .text.devfs_statfs:0000001c $d
     /tmp/ccl8in31.s:179    .text.devfs_get_dentry:00000000 $t
     /tmp/ccl8in31.s:184    .text.devfs_get_dentry:00000000 devfs_get_dentry
     /tmp/ccl8in31.s:214    .text.devfs_setattr:00000000 $t
     /tmp/ccl8in31.s:219    .text.devfs_setattr:00000000 devfs_setattr
     /tmp/ccl8in31.s:251    .init.text:00000000 $t
     /tmp/ccl8in31.s:256    .init.text:00000000 devfs_ops_init
     /tmp/ccl8in31.s:278    .init.text:0000000c $d
     /tmp/ccl8in31.s:3679   .data.fs_type:00000000 fs_type
     /tmp/ccl8in31.s:283    .text.devfs_kill_sb:00000000 $t
     /tmp/ccl8in31.s:288    .text.devfs_kill_sb:00000000 devfs_kill_sb
     /tmp/ccl8in31.s:310    .rodata.devfs_release.str1.4:00000000 $d
     /tmp/ccl8in31.s:314    .text.devfs_release:00000000 $t
     /tmp/ccl8in31.s:319    .text.devfs_release:00000000 devfs_release
     /tmp/ccl8in31.s:345    .text.devfs_release:0000000c $d
     /tmp/ccl8in31.s:350    .rodata.devfs_open.str1.4:00000000 $d
     /tmp/ccl8in31.s:354    .text.devfs_open:00000000 $t
     /tmp/ccl8in31.s:359    .text.devfs_open:00000000 devfs_open
     /tmp/ccl8in31.s:385    .text.devfs_open:0000000c $d
     /tmp/ccl8in31.s:390    .rodata.devfs_write.str1.4:00000000 $d
     /tmp/ccl8in31.s:394    .text.devfs_write:00000000 $t
     /tmp/ccl8in31.s:399    .text.devfs_write:00000000 devfs_write
     /tmp/ccl8in31.s:425    .text.devfs_write:0000000c $d
     /tmp/ccl8in31.s:430    .rodata.devfs_read.str1.4:00000000 $d
     /tmp/ccl8in31.s:434    .text.devfs_read:00000000 $t
     /tmp/ccl8in31.s:439    .text.devfs_read:00000000 devfs_read
     /tmp/ccl8in31.s:465    .text.devfs_read:0000000c $d
     /tmp/ccl8in31.s:470    .text.__spin_lock:00000000 $t
     /tmp/ccl8in31.s:475    .text.__spin_lock:00000000 __spin_lock
     /tmp/ccl8in31.s:525    .text.spin_lock:00000000 $t
     /tmp/ccl8in31.s:530    .text.spin_lock:00000000 spin_lock
     /tmp/ccl8in31.s:590    .text.devfs_create_empty_inode:00000000 $t
     /tmp/ccl8in31.s:595    .text.devfs_create_empty_inode:00000000 devfs_create_empty_inode
     /tmp/ccl8in31.s:833    .text.devfs_create_empty_inode:00000068 $d
     /tmp/ccl8in31.s:838    .text.devfs_get_inode:00000000 $t
     /tmp/ccl8in31.s:843    .text.devfs_get_inode:00000000 devfs_get_inode
     /tmp/ccl8in31.s:897    .text.devfs_get_inode:00000020 $d
     /tmp/ccl8in31.s:3692   .data.devfs_inode_operation:00000000 devfs_inode_operation
     /tmp/ccl8in31.s:902    .text.devfs_getattr:00000000 $t
     /tmp/ccl8in31.s:907    .text.devfs_getattr:00000000 devfs_getattr
     /tmp/ccl8in31.s:1050   .text.devfs_getattr:0000007c $d
     /tmp/ccl8in31.s:1055   .text.devfs_lookup:00000000 $t
     /tmp/ccl8in31.s:1060   .text.devfs_lookup:00000000 devfs_lookup
     /tmp/ccl8in31.s:1174   .text.devfs_vfs_lookup:00000000 $t
     /tmp/ccl8in31.s:1179   .text.devfs_vfs_lookup:00000000 devfs_vfs_lookup
ARM GAS  /tmp/ccl8in31.s 			page 178


     /tmp/ccl8in31.s:1262   .text.devfs_get_vfs_superblock:00000000 $t
     /tmp/ccl8in31.s:1267   .text.devfs_get_vfs_superblock:00000000 devfs_get_vfs_superblock
     /tmp/ccl8in31.s:1315   .text.devfs_get_vfs_superblock:0000001c $d
     /tmp/ccl8in31.s:3709   .data.devfs_dentry_operation:00000000 devfs_dentry_operation
     /tmp/ccl8in31.s:3717   .data.devfs_super_operation:00000000 devfs_super_operation
     /tmp/ccl8in31.s:1321   .text.devfs_superblock_create:00000000 $t
     /tmp/ccl8in31.s:1326   .text.devfs_superblock_create:00000000 devfs_superblock_create
     /tmp/ccl8in31.s:1530   .text.devfs_superblock_create:00000068 $d
     /tmp/ccl8in31.s:3734   .data.devfs_file_fops:00000000 devfs_file_fops
     /tmp/ccl8in31.s:1536   .text.devfs_inode_put:00000000 $t
     /tmp/ccl8in31.s:1541   .text.devfs_inode_put:00000000 devfs_inode_put
     /tmp/ccl8in31.s:1583   .text.dentry_put:00000000 $t
     /tmp/ccl8in31.s:1588   .text.dentry_put:00000000 dentry_put
     /tmp/ccl8in31.s:1806   .text.devfs_release_dentry:00000000 $t
     /tmp/ccl8in31.s:1811   .text.devfs_release_dentry:00000000 devfs_release_dentry
     /tmp/ccl8in31.s:1843   .text.devfs_rmdir:00000000 $t
     /tmp/ccl8in31.s:1848   .text.devfs_rmdir:00000000 devfs_rmdir
     /tmp/ccl8in31.s:1884   .text.devfs_delete_dentry:00000000 $t
     /tmp/ccl8in31.s:1889   .text.devfs_delete_dentry:00000000 devfs_delete_dentry
     /tmp/ccl8in31.s:2037   .text.devfs_unlink:00000000 $t
     /tmp/ccl8in31.s:2042   .text.devfs_unlink:00000000 devfs_unlink
     /tmp/ccl8in31.s:2078   .text.devfs_create_dentry:00000000 $t
     /tmp/ccl8in31.s:2083   .text.devfs_create_dentry:00000000 devfs_create_dentry
     /tmp/ccl8in31.s:2351   .text.devfs_create_dentry:000000a8 $d
     /tmp/ccl8in31.s:2356   .text.devfs_create_inode:00000000 $t
     /tmp/ccl8in31.s:2361   .text.devfs_create_inode:00000000 devfs_create_inode
     /tmp/ccl8in31.s:2496   .text.devfs_create_dir:00000000 $t
     /tmp/ccl8in31.s:2501   .text.devfs_create_dir:00000000 devfs_create_dir
     /tmp/ccl8in31.s:2545   .text.devfs_create_dir:00000020 $d
     /tmp/ccl8in31.s:2550   .text.devfs_mkdir:00000000 $t
     /tmp/ccl8in31.s:2555   .text.devfs_mkdir:00000000 devfs_mkdir
     /tmp/ccl8in31.s:2678   .text.devfs_create_file:00000000 $t
     /tmp/ccl8in31.s:2683   .text.devfs_create_file:00000000 devfs_create_file
     /tmp/ccl8in31.s:2716   .text.devfs_create:00000000 $t
     /tmp/ccl8in31.s:2721   .text.devfs_create:00000000 devfs_create
     /tmp/ccl8in31.s:2857   .text.devfs_create:00000080 $d
     /tmp/ccl8in31.s:2862   .text.devfs_link:00000000 $t
     /tmp/ccl8in31.s:2867   .text.devfs_link:00000000 devfs_link
     /tmp/ccl8in31.s:2939   .text.devfs_destroy_inode:00000000 $t
     /tmp/ccl8in31.s:2944   .text.devfs_destroy_inode:00000000 devfs_destroy_inode
     /tmp/ccl8in31.s:3048   .text.devfs_alloc_inode:00000000 $t
     /tmp/ccl8in31.s:3053   .text.devfs_alloc_inode:00000000 devfs_alloc_inode
     /tmp/ccl8in31.s:3138   .text.devfs_alloc_inode:00000038 $d
     /tmp/ccl8in31.s:3144   .text.devfs_superblock_destory:00000000 $t
     /tmp/ccl8in31.s:3149   .text.devfs_superblock_destory:00000000 devfs_superblock_destory
     /tmp/ccl8in31.s:3219   .rodata.devfs_mount.str1.4:00000000 $d
     /tmp/ccl8in31.s:3223   .text.devfs_mount:00000000 $t
     /tmp/ccl8in31.s:3228   .text.devfs_mount:00000000 devfs_mount
     /tmp/ccl8in31.s:3463   .text.devfs_mount:000000a4 $d
     /tmp/ccl8in31.s:3469   .text.devfs_mount_device:00000000 $t
     /tmp/ccl8in31.s:3475   .text.devfs_mount_device:00000000 devfs_mount_device
     /tmp/ccl8in31.s:3544   .text.devfs_mount_device:0000002c $d
     /tmp/ccl8in31.s:3549   .text.devfs_mount_blk_device:00000000 $t
     /tmp/ccl8in31.s:3555   .text.devfs_mount_blk_device:00000000 devfs_mount_blk_device
     /tmp/ccl8in31.s:3618   .text.devfs_mount_blk_device:0000002c $d
     /tmp/ccl8in31.s:3623   .text.devfs_get_blk_dev:00000000 $t
     /tmp/ccl8in31.s:3629   .text.devfs_get_blk_dev:00000000 devfs_get_blk_dev
ARM GAS  /tmp/ccl8in31.s 			page 179


     /tmp/ccl8in31.s:3666   .fsinitcall:00000000 $d
     /tmp/ccl8in31.s:3669   .fsinitcall:00000000 _initcall_devfs_ops_init
     /tmp/ccl8in31.s:3672   .rodata.str1.4:00000000 $d
     /tmp/ccl8in31.s:3676   .data.fs_type:00000000 $d
     /tmp/ccl8in31.s:3689   .data.devfs_inode_operation:00000000 $d
     /tmp/ccl8in31.s:3706   .data.devfs_dentry_operation:00000000 $d
     /tmp/ccl8in31.s:3714   .data.devfs_super_operation:00000000 $d
     /tmp/ccl8in31.s:3731   .data.devfs_file_fops:00000000 $d

UNDEFINED SYMBOLS
register_filesystem
put_super
early_printk
stop_all_scheduler
start_all_scheduler
get_current_task
__delay
__smalloc__
new_inode
ktime_get
HZ
strcmp
d_add
alloc_super
__sfree__
simple_unlink
strlen
strcpy
d_getname
__d_alloc
inode_put
