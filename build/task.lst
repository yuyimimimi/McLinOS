ARM GAS  /tmp/cc1oyE6J.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"task.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c"
  20              		.section	.text.init_task_context,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	init_task_context:
  27              	.LVL0:
  28              	.LFB221:
  29              		.file 2 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h"
   1:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h **** #ifndef __CONTEXT_H__
   2:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h **** #define __CONTEXT_H__                
   3:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h **** 
   4:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h **** 
   5:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h **** extern void __init_Taskcontext(struct task_struct* task_data,uint32_t pic_offset);
   6:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h **** static void init_task_context(struct task_struct* task_data,uint32_t pic_offset){
  30              		.loc 2 6 81 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 2 6 81 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
   7:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h ****     __init_Taskcontext(task_data,pic_offset);
  40              		.loc 2 7 5 is_stmt 1 view .LVU2
  41 0002 FFF7FEFF 		bl	__init_Taskcontext
  42              	.LVL1:
   8:/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/context.h **** } 
  43              		.loc 2 8 1 is_stmt 0 view .LVU3
  44 0006 08BD     		pop	{r3, pc}
  45              		.cfi_endproc
  46              	.LFE221:
  48              		.section	.rodata.__new_task_create.str1.4,"aMS",%progbits,1
  49              		.align	2
  50              	.LC0:
  51 0000 63616E20 		.ascii	"can not create t\012\000"
ARM GAS  /tmp/cc1oyE6J.s 			page 2


  51      6E6F7420 
  51      63726561 
  51      74652074 
  51      0A00
  52 0012 0000     		.align	2
  53              	.LC1:
  54 0014 63616E20 		.ascii	"can not alloc memory: need %d kb\012\015\000"
  54      6E6F7420 
  54      616C6C6F 
  54      63206D65 
  54      6D6F7279 
  55              		.section	.text.__new_task_create,"ax",%progbits
  56              		.align	1
  57              		.global	__new_task_create
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  62              	__new_task_create:
  63              	.LVL2:
  64              	.LFB284:
   1:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** #include <linux/kernel.h>
   2:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** #include <linux/sched.h>
   3:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** #include <linux/slab.h>
   4:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** #include <linux/error.h>
   5:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** #include <linux/string.h>
   6:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****  
   7:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** static uint32_t id_count = 9;
   8:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** struct task_struct* __new_task_create(
   9:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****             int (*entry)(void*), 
  10:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****             int stack_size,
  11:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****             void *argv,
  12:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****             int priority,
  13:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****             char *name,
  14:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****             uint32_t offset
  15:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****             )
  16:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** {
  65              		.loc 1 16 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 8, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		.loc 1 16 1 is_stmt 0 view .LVU5
  70 0000 2DE9F846 		push	{r3, r4, r5, r6, r7, r9, r10, lr}
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 32
  73              		.cfi_offset 3, -32
  74              		.cfi_offset 4, -28
  75              		.cfi_offset 5, -24
  76              		.cfi_offset 6, -20
  77              		.cfi_offset 7, -16
  78              		.cfi_offset 9, -12
  79              		.cfi_offset 10, -8
  80              		.cfi_offset 14, -4
  81 0004 089F     		ldr	r7, [sp, #32]
  17:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(entry == NULL || name == NULL){
  82              		.loc 1 17 5 is_stmt 1 view .LVU6
  83              		.loc 1 17 7 is_stmt 0 view .LVU7
  84 0006 88B3     		cbz	r0, .L4
ARM GAS  /tmp/cc1oyE6J.s 			page 3


  85 0008 9146     		mov	r9, r2
  86 000a 1E46     		mov	r6, r3
  87 000c 8246     		mov	r10, r0
  88              		.loc 1 17 22 discriminator 1 view .LVU8
  89 000e 6FB3     		cbz	r7, .L4
  18:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         pr_info(KERN_INFO "can not create t\n");
  19:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -1;
  20:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
  21:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     stack_size += 64;
  90              		.loc 1 21 5 is_stmt 1 view .LVU9
  91              	.LVL3:
  22:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     stack_size += sizeof(struct task_struct);
  92              		.loc 1 22 5 view .LVU10
  23:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     stack_size = (stack_size + 127) & ~127; 
  93              		.loc 1 23 5 view .LVU11
  94 0010 01F24711 		addw	r1, r1, #327
  95              	.LVL4:
  96              		.loc 1 23 5 is_stmt 0 view .LVU12
  97 0014 21F07F05 		bic	r5, r1, #127
  98              	.LVL5:
  24:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     struct task_struct *new_task = kmalloc(stack_size, GFP_NOWAIT);
  99              		.loc 1 24 5 is_stmt 1 view .LVU13
 100              	.LBB10:
 101              	.LBI10:
 102              		.file 3 "/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
   3:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
   5:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
  11:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  12:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/cache.h>
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/overflow.h>
  17:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/types.h>
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/raid/pq.h>
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/gfp_types.h>
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/numa.h>
  21:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #include <linux/spinlock.h>
  23:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  24:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** enum _slab_flag_bits {
  25:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_POISON,
  28:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_STORE_USER,
ARM GAS  /tmp/cc1oyE6J.s 			page 4


  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_PANIC,
  34:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_TRACE,
  36:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  39:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NO_MERGE,
  41:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
  42:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_FAILSLAB,
  43:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  44:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  47:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
  48:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_KASAN,
  49:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  50:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  54:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  57:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
  62:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** };
  64:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  65:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  66:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  67:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
  70:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
  71:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
  74:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Poison objects */
  79:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
  83:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
  85:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
ARM GAS  /tmp/cc1oyE6J.s 			page 5


  90:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
  93:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Use GFP_DMA memory */
  95:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
  98:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
  99:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
 100:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
 103:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
 104:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 105:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
 107:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 110:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * object validation pass. Something like:
 113:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 114:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * ::
 115:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 116:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *  begin:
 117:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   rcu_read_lock();
 118:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   if (obj) {
 120:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       rcu_read_unlock();
 122:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       goto begin;
 123:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 124:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       put_ref(obj);
 126:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       rcu_read_unlock();
 127:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *       goto begin;
 128:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *     }
 129:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   }
 130:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *  rcu_read_unlock();
 131:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 132:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 138:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 141:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
ARM GAS  /tmp/cc1oyE6J.s 			page 6


 147:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * protection.
 151:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 152:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 154:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
 155:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Trace allocations and frees */
 156:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
 157:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 158:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Flag to prevent checks on free */
 159:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
 161:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 162:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 164:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 165:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 168:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 169:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * cautiously. Valid use cases:
 171:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 172:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 178:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 180:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Fault injection mark */
 181:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 184:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 186:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
 187:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 189:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 192:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 195:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 197:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 198:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 201:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 203:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
ARM GAS  /tmp/cc1oyE6J.s 			page 7


 204:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 205:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 209:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 211:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_KFENCE
 212:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
 213:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 214:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 216:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 217:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
 218:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /**
 219:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 221:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 225:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 228:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 230:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 232:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 236:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 238:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 239:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 240:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 243:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 245:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 246:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 248:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  *
 250:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  * Both make kfree a no-op.
 252:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h ****  */
 253:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 255:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 258:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 259:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 260:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
ARM GAS  /tmp/cc1oyE6J.s 			page 8


 261:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 262:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 265:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** ({						\
 267:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** })
 269:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 270:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
 271:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #else
 272:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 274:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
 275:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 276:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 278:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 279:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 281:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** /*
 282:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	* given order would contain.
 285:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	*/				
 286:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** struct kmem_cache_order_objects {
 287:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	unsigned int x;
 288:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** };
 289:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 290:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** struct kmem_cache_node {
 291:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	spinlock_t list_lock;
 292:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	unsigned long nr_partial;
 293:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	struct list_head partial;
 294:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	atomic_long_t total_objects;
 297:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	struct list_head full;
 298:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #endif
 299:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** };
 300:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 301:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** struct kmem_cache {
 302:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 305:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		slab_flags_t flags;
 307:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned long min_partial;
 308:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int cpu_partial;
 315:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
ARM GAS  /tmp/cc1oyE6J.s 			page 9


 318:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 320:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
 326:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int align;		/* Alignment */
 327:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
 328:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
 332:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 333:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned long random;
 335:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 336:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 337:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		/*
 339:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 			*/
 341:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 343:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 344:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int *random_seq;
 346:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 347:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 348:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 351:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 352:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	#endif
 356:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	
 357:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	};
 359:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 					
 360:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 361:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 362:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 363:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 364:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 366:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 367:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 370:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 371:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 374:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
ARM GAS  /tmp/cc1oyE6J.s 			page 10


 375:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline vfree(void *addr){
 376:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__(addr);
 377:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 378:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 379:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
 103              		.loc 3 379 21 view .LVU14
 104              	.LBB11:
 380:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 105              		.loc 3 380 2 view .LVU15
 106              		.loc 3 380 9 is_stmt 0 view .LVU16
 107 0018 4FF42051 		mov	r1, #10240
 108 001c 2846     		mov	r0, r5
 109              	.LVL6:
 110              		.loc 3 380 9 view .LVU17
 111 001e FFF7FEFF 		bl	__smalloc__
 112              	.LVL7:
 113              		.loc 3 380 9 view .LVU18
 114              	.LBE11:
 115              	.LBE10:
  25:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if (new_task == NULL){
 116              		.loc 1 25 5 is_stmt 1 view .LVU19
 117              		.loc 1 25 8 is_stmt 0 view .LVU20
 118 0022 0446     		mov	r4, r0
 119 0024 50B3     		cbz	r0, .L15
  26:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         pr_info("can not alloc memory: need %d kb\n\r",stack_size/1024);
  27:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -ENOMEM;
  28:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     } 
  29:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(priority == 0)
 120              		.loc 1 29 5 is_stmt 1 view .LVU21
 121              		.loc 1 29 7 is_stmt 0 view .LVU22
 122 0026 06B9     		cbnz	r6, .L9
  30:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         priority = defauld_thread_priority;
 123              		.loc 1 30 18 view .LVU23
 124 0028 0826     		movs	r6, #8
 125              	.LVL8:
 126              	.L9:
  31:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     
  32:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->stack_ptr = (void*)new_task + sizeof(struct task_struct);
 127              		.loc 1 32 5 is_stmt 1 view .LVU24
 128              		.loc 1 32 43 is_stmt 0 view .LVU25
 129 002a 04F18803 		add	r3, r4, #136
 130              		.loc 1 32 25 view .LVU26
 131 002e 2365     		str	r3, [r4, #80]
  33:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->magic  = task_struct_magic;
 132              		.loc 1 33 5 is_stmt 1 view .LVU27
 133              		.loc 1 33 22 is_stmt 0 view .LVU28
 134 0030 314B     		ldr	r3, .L17
 135 0032 2360     		str	r3, [r4]
  34:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->id     = id_count++;
 136              		.loc 1 34 5 is_stmt 1 view .LVU29
 137              		.loc 1 34 32 is_stmt 0 view .LVU30
 138 0034 314A     		ldr	r2, .L17+4
 139 0036 1368     		ldr	r3, [r2]
 140 0038 591C     		adds	r1, r3, #1
 141 003a 1160     		str	r1, [r2]
 142              		.loc 1 34 22 view .LVU31
 143 003c 6360     		str	r3, [r4, #4]
ARM GAS  /tmp/cc1oyE6J.s 			page 11


  35:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->entry  = entry;
 144              		.loc 1 35 5 is_stmt 1 view .LVU32
 145              		.loc 1 35 22 is_stmt 0 view .LVU33
 146 003e C4F858A0 		str	r10, [r4, #88]
  36:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->arg    = argv;
 147              		.loc 1 36 5 is_stmt 1 view .LVU34
 148              		.loc 1 36 22 is_stmt 0 view .LVU35
 149 0042 C4F85C90 		str	r9, [r4, #92]
  37:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->priority = priority;
 150              		.loc 1 37 5 is_stmt 1 view .LVU36
 151              		.loc 1 37 24 is_stmt 0 view .LVU37
 152 0046 A666     		str	r6, [r4, #104]
  38:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->stack_Top = (void*)new_task + stack_size;
 153              		.loc 1 38 5 is_stmt 1 view .LVU38
 154              		.loc 1 38 43 is_stmt 0 view .LVU39
 155 0048 2544     		add	r5, r5, r4
 156              	.LVL9:
 157              		.loc 1 38 25 view .LVU40
 158 004a 6565     		str	r5, [r4, #84]
  39:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->offset  = offset;
 159              		.loc 1 39 5 is_stmt 1 view .LVU41
 160              		.loc 1 39 23 is_stmt 0 view .LVU42
 161 004c 099B     		ldr	r3, [sp, #36]
 162 004e C4F88430 		str	r3, [r4, #132]
  40:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->comm    = new_task->task_name;
 163              		.loc 1 40 5 is_stmt 1 view .LVU43
 164              		.loc 1 40 25 is_stmt 0 view .LVU44
 165 0052 04F10805 		add	r5, r4, #8
 166              		.loc 1 40 23 view .LVU45
 167 0056 A564     		str	r5, [r4, #72]
  41:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     
  42:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(strlen(name) < task_name_max_len){
 168              		.loc 1 42 5 is_stmt 1 view .LVU46
 169              		.loc 1 42 8 is_stmt 0 view .LVU47
 170 0058 3846     		mov	r0, r7
 171              	.LVL10:
 172              		.loc 1 42 8 view .LVU48
 173 005a FFF7FEFF 		bl	strlen
 174              	.LVL11:
 175              		.loc 1 42 7 discriminator 1 view .LVU49
 176 005e 3F28     		cmp	r0, #63
 177 0060 1AD8     		bhi	.L10
  43:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         strcpy(new_task->task_name,name);
 178              		.loc 1 43 9 is_stmt 1 view .LVU50
 179 0062 3946     		mov	r1, r7
 180 0064 2846     		mov	r0, r5
 181 0066 FFF7FEFF 		bl	strcpy
 182              	.LVL12:
 183 006a 3BE0     		b	.L11
 184              	.LVL13:
 185              	.L4:
  18:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -1;
 186              		.loc 1 18 9 view .LVU51
 187 006c 244A     		ldr	r2, .L17+8
 188              	.LVL14:
  18:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -1;
 189              		.loc 1 18 9 is_stmt 0 view .LVU52
ARM GAS  /tmp/cc1oyE6J.s 			page 12


 190 006e 0621     		movs	r1, #6
 191              	.LVL15:
  18:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -1;
 192              		.loc 1 18 9 view .LVU53
 193 0070 0846     		mov	r0, r1
 194              	.LVL16:
  18:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -1;
 195              		.loc 1 18 9 view .LVU54
 196 0072 FFF7FEFF 		bl	printk
 197              	.LVL17:
  19:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 198              		.loc 1 19 9 is_stmt 1 view .LVU55
  19:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 199              		.loc 1 19 16 is_stmt 0 view .LVU56
 200 0076 4FF0FF34 		mov	r4, #-1
 201 007a 3AE0     		b	.L3
 202              	.LVL18:
 203              	.L15:
  26:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -ENOMEM;
 204              		.loc 1 26 9 is_stmt 1 view .LVU57
 205 007c 2A46     		mov	r2, r5
 206 007e 002D     		cmp	r5, #0
 207 0080 07DB     		blt	.L16
 208              	.L8:
 209 0082 9212     		asrs	r2, r2, #10
 210 0084 1F49     		ldr	r1, .L17+12
 211 0086 0620     		movs	r0, #6
 212              	.LVL19:
  26:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -ENOMEM;
 213              		.loc 1 26 9 is_stmt 0 view .LVU58
 214 0088 FFF7FEFF 		bl	printk
 215              	.LVL20:
  27:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     } 
 216              		.loc 1 27 9 is_stmt 1 view .LVU59
  27:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     } 
 217              		.loc 1 27 16 is_stmt 0 view .LVU60
 218 008c 6FF00B04 		mvn	r4, #11
 219              	.LVL21:
  27:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     } 
 220              		.loc 1 27 16 view .LVU61
 221 0090 2FE0     		b	.L3
 222              	.LVL22:
 223              	.L16:
  26:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -ENOMEM;
 224              		.loc 1 26 9 view .LVU62
 225 0092 05F2FF32 		addw	r2, r5, #1023
 226              	.LVL23:
  26:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return -ENOMEM;
 227              		.loc 1 26 9 view .LVU63
 228 0096 F4E7     		b	.L8
 229              	.LVL24:
 230              	.L10:
  44:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
  45:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     else{
  46:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         memcpy(new_task->task_name,name,task_name_max_len -1);
 231              		.loc 1 46 9 is_stmt 1 view .LVU64
 232 0098 BC46     		mov	ip, r7
ARM GAS  /tmp/cc1oyE6J.s 			page 13


 233 009a 2846     		mov	r0, r5
 234 009c 3037     		adds	r7, r7, #48
 235              	.LVL25:
 236              	.L12:
 237              		.loc 1 46 9 is_stmt 0 view .LVU65
 238 009e DCF80050 		ldr	r5, [ip]	@ unaligned
 239 00a2 DCF80410 		ldr	r1, [ip, #4]	@ unaligned
 240 00a6 DCF80820 		ldr	r2, [ip, #8]	@ unaligned
 241 00aa DCF80C30 		ldr	r3, [ip, #12]	@ unaligned
 242 00ae 0560     		str	r5, [r0]	@ unaligned
 243 00b0 4160     		str	r1, [r0, #4]	@ unaligned
 244 00b2 8260     		str	r2, [r0, #8]	@ unaligned
 245 00b4 C360     		str	r3, [r0, #12]	@ unaligned
 246 00b6 0CF1100C 		add	ip, ip, #16
 247 00ba 1030     		adds	r0, r0, #16
 248 00bc BC45     		cmp	ip, r7
 249 00be EED1     		bne	.L12
 250 00c0 DCF80010 		ldr	r1, [ip]	@ unaligned
 251 00c4 DCF80420 		ldr	r2, [ip, #4]	@ unaligned
 252 00c8 DCF80830 		ldr	r3, [ip, #8]	@ unaligned
 253 00cc 0160     		str	r1, [r0]	@ unaligned
 254 00ce 4260     		str	r2, [r0, #4]	@ unaligned
 255 00d0 8360     		str	r3, [r0, #8]	@ unaligned
 256 00d2 BCF80C20 		ldrh	r2, [ip, #12]	@ unaligned
 257 00d6 9CF80E30 		ldrb	r3, [ip, #14]	@ zero_extendqisi2
 258 00da 8281     		strh	r2, [r0, #12]	@ unaligned
 259 00dc 8373     		strb	r3, [r0, #14]
  47:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         new_task->task_name[task_name_max_len -1] = '\0';
 260              		.loc 1 47 9 is_stmt 1 view .LVU66
 261              		.loc 1 47 51 is_stmt 0 view .LVU67
 262 00de 0023     		movs	r3, #0
 263 00e0 84F84730 		strb	r3, [r4, #71]
 264              	.L11:
  48:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
  49:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     init_task_context(new_task,offset);
 265              		.loc 1 49 5 is_stmt 1 view .LVU68
 266 00e4 0999     		ldr	r1, [sp, #36]
 267 00e6 2046     		mov	r0, r4
 268 00e8 FFF7FEFF 		bl	init_task_context
 269              	.LVL26:
  50:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     new_task->state = TASK_READY;
 270              		.loc 1 50 5 view .LVU69
 271              		.loc 1 50 21 is_stmt 0 view .LVU70
 272 00ec 0223     		movs	r3, #2
 273 00ee 84F86030 		strb	r3, [r4, #96]
  51:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     return new_task;
 274              		.loc 1 51 5 is_stmt 1 view .LVU71
 275              	.LVL27:
 276              	.L3:
  52:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** }
 277              		.loc 1 52 1 is_stmt 0 view .LVU72
 278 00f2 2046     		mov	r0, r4
 279 00f4 BDE8F886 		pop	{r3, r4, r5, r6, r7, r9, r10, pc}
 280              	.L18:
 281              		.align	2
 282              	.L17:
 283 00f8 40E20100 		.word	123456
ARM GAS  /tmp/cc1oyE6J.s 			page 14


 284 00fc 00000000 		.word	id_count
 285 0100 00000000 		.word	.LC0
 286 0104 14000000 		.word	.LC1
 287              		.cfi_endproc
 288              	.LFE284:
 290              		.section	.text.__destory_task,"ax",%progbits
 291              		.align	1
 292              		.global	__destory_task
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 297              	__destory_task:
 298              	.LVL28:
 299              	.LFB285:
  53:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  54:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  55:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  56:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  57:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** void __destory_task(struct task_struct *t) 
  58:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** {
 300              		.loc 1 58 1 is_stmt 1 view -0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
  59:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(t == NULL) return;
 304              		.loc 1 59 5 view .LVU74
 305              		.loc 1 59 7 is_stmt 0 view .LVU75
 306 0000 58B1     		cbz	r0, .L23
  58:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(t == NULL) return;
 307              		.loc 1 58 1 view .LVU76
 308 0002 10B5     		push	{r4, lr}
 309              	.LCFI2:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 4, -8
 312              		.cfi_offset 14, -4
 313 0004 0446     		mov	r4, r0
  60:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(t->offset != NULL)
 314              		.loc 1 60 5 is_stmt 1 view .LVU77
 315              		.loc 1 60 9 is_stmt 0 view .LVU78
 316 0006 D0F88400 		ldr	r0, [r0, #132]
 317              	.LVL29:
 318              		.loc 1 60 7 view .LVU79
 319 000a 18B9     		cbnz	r0, .L26
 320              	.L21:
  61:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         kfree(t->offset);
  62:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     kfree(t);
 321              		.loc 1 62 5 is_stmt 1 view .LVU80
 322              	.LVL30:
 323              	.LBB12:
 324              	.LBI12:
 381:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 382:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** static void inline kfree(const void *ptr){
 325              		.loc 3 383 20 view .LVU81
 326              	.LBB13:
 384:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 327              		.loc 3 384 2 view .LVU82
ARM GAS  /tmp/cc1oyE6J.s 			page 15


 328 000c 2046     		mov	r0, r4
 329 000e FFF7FEFF 		bl	__sfree__
 330              	.LVL31:
 331              		.loc 3 384 2 is_stmt 0 view .LVU83
 332              	.LBE13:
 333              	.LBE12:
  63:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** }
 334              		.loc 1 63 1 view .LVU84
 335 0012 10BD     		pop	{r4, pc}
 336              	.LVL32:
 337              	.L26:
  61:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     kfree(t);
 338              		.loc 1 61 9 is_stmt 1 view .LVU85
 339              	.LBB14:
 340              	.LBI14:
 383:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** 	__sfree__((void*)ptr);
 341              		.loc 3 383 20 view .LVU86
 342              	.LBB15:
 343              		.loc 3 384 2 view .LVU87
 344 0014 FFF7FEFF 		bl	__sfree__
 345              	.LVL33:
 385:/mnt/c/Users/31740/Desktop/newcore/include/linux/slab.h **** }
 346              		.loc 3 385 1 is_stmt 0 view .LVU88
 347 0018 F8E7     		b	.L21
 348              	.LVL34:
 349              	.L23:
 350              	.LCFI3:
 351              		.cfi_def_cfa_offset 0
 352              		.cfi_restore 4
 353              		.cfi_restore 14
 354              		.loc 3 385 1 view .LVU89
 355 001a 7047     		bx	lr
 356              	.LBE15:
 357              	.LBE14:
 358              		.cfi_endproc
 359              	.LFE285:
 361              		.section	.text.__register_task,"ax",%progbits
 362              		.align	1
 363              		.global	__register_task
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 368              	__register_task:
 369              	.LVL35:
 370              	.LFB286:
  64:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  65:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  66:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** int __register_task(struct task_struct* new_task ,struct scheduler* scheduler){
 371              		.loc 1 66 79 is_stmt 1 view -0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		.loc 1 66 79 is_stmt 0 view .LVU91
 376 0000 08B5     		push	{r3, lr}
 377              	.LCFI4:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 3, -8
ARM GAS  /tmp/cc1oyE6J.s 			page 16


 380              		.cfi_offset 14, -4
  67:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****    return scheduler->t_pop->add_task(new_task,scheduler);
 381              		.loc 1 67 4 is_stmt 1 view .LVU92
 382              		.loc 1 67 20 is_stmt 0 view .LVU93
 383 0002 CB68     		ldr	r3, [r1, #12]
 384              		.loc 1 67 27 view .LVU94
 385 0004 5B68     		ldr	r3, [r3, #4]
 386              		.loc 1 67 11 view .LVU95
 387 0006 9847     		blx	r3
 388              	.LVL36:
  68:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** }
 389              		.loc 1 68 1 view .LVU96
 390 0008 08BD     		pop	{r3, pc}
 391              		.cfi_endproc
 392              	.LFE286:
 394              		.section	.rodata.__default_Task_return_function.str1.4,"aMS",%progbits,1
 395              		.align	2
 396              	.LC2:
 397 0000 7461736B 		.ascii	"task : %s has return\012\000"
 397      203A2025 
 397      73206861 
 397      73207265 
 397      7475726E 
 398              		.section	.text.__default_Task_return_function,"ax",%progbits
 399              		.align	1
 400              		.global	__default_Task_return_function
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	__default_Task_return_function:
 406              	.LFB287:
  69:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  70:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  71:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** void __default_Task_return_function(void){
 407              		.loc 1 71 42 is_stmt 1 view -0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411 0000 10B5     		push	{r4, lr}
 412              	.LCFI5:
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 4, -8
 415              		.cfi_offset 14, -4
  72:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     struct task_struct* cutrrent_task = get_current_task();
 416              		.loc 1 72 5 view .LVU98
 417              		.loc 1 72 41 is_stmt 0 view .LVU99
 418 0002 FFF7FEFF 		bl	get_current_task
 419              	.LVL37:
 420 0006 0446     		mov	r4, r0
 421              	.LVL38:
  73:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     pr_info("task : %s has return\n" ,cutrrent_task->task_name);
 422              		.loc 1 73 5 is_stmt 1 view .LVU100
 423 0008 00F10802 		add	r2, r0, #8
 424 000c 0449     		ldr	r1, .L32
 425 000e 0620     		movs	r0, #6
 426              	.LVL39:
 427              		.loc 1 73 5 is_stmt 0 view .LVU101
ARM GAS  /tmp/cc1oyE6J.s 			page 17


 428 0010 FFF7FEFF 		bl	printk
 429              	.LVL40:
 430              	.L30:
  74:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     while (1){
 431              		.loc 1 74 5 is_stmt 1 view .LVU102
  75:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         cutrrent_task->state = TASK_DEAD;
 432              		.loc 1 75 9 view .LVU103
 433              		.loc 1 75 30 is_stmt 0 view .LVU104
 434 0014 0623     		movs	r3, #6
 435 0016 84F86030 		strb	r3, [r4, #96]
  76:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         sched();
 436              		.loc 1 76 9 is_stmt 1 discriminator 1 view .LVU105
 437 001a FFF7FEFF 		bl	sched
 438              	.LVL41:
  74:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     while (1){
 439              		.loc 1 74 11 view .LVU106
 440 001e F9E7     		b	.L30
 441              	.L33:
 442              		.align	2
 443              	.L32:
 444 0020 00000000 		.word	.LC2
 445              		.cfi_endproc
 446              	.LFE287:
 448              		.section	.text.exit,"ax",%progbits
 449              		.align	1
 450              		.global	exit
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 455              	exit:
 456              	.LFB288:
  77:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
  78:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** } 
  79:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** void exit(){
 457              		.loc 1 79 12 view -0
 458              		.cfi_startproc
 459              		@ Volatile: function does not return.
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462 0000 08B5     		push	{r3, lr}
 463              	.LCFI6:
 464              		.cfi_def_cfa_offset 8
 465              		.cfi_offset 3, -8
 466              		.cfi_offset 14, -4
  80:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     __default_Task_return_function();
 467              		.loc 1 80 5 view .LVU108
 468 0002 FFF7FEFF 		bl	__default_Task_return_function
 469              	.LVL42:
 470              		.cfi_endproc
 471              	.LFE288:
 473              		.section	.rodata.task_run.str1.4,"aMS",%progbits,1
 474              		.align	2
 475              	.LC3:
 476 0000 63707520 		.ascii	"cpu number err\012\000"
 476      6E756D62 
 476      65722065 
 476      72720A00 
ARM GAS  /tmp/cc1oyE6J.s 			page 18


 477              		.align	2
 478              	.LC4:
 479 0010 73636865 		.ascii	"sched: task : %s(%d) has create\012\000"
 479      643A2074 
 479      61736B20 
 479      3A202573 
 479      28256429 
 480              		.section	.text.task_run,"ax",%progbits
 481              		.align	1
 482              		.global	task_run
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 487              	task_run:
 488              	.LVL43:
 489              	.LFB289:
  81:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** }
  82:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  83:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** 
  84:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** struct task_struct* task_run(       
  85:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** int (*entry)(void*), 
  86:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** int stack_size,
  87:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** void *argv,
  88:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** int priority,
  89:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** char *name,
  90:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** uint32_t core_id,
  91:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** uint32_t offset
  92:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** )
  93:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** {
 490              		.loc 1 93 1 view -0
 491              		.cfi_startproc
 492              		@ args = 12, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		.loc 1 93 1 is_stmt 0 view .LVU110
 495 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 496              	.LCFI7:
 497              		.cfi_def_cfa_offset 28
 498              		.cfi_offset 4, -28
 499              		.cfi_offset 5, -24
 500              		.cfi_offset 6, -20
 501              		.cfi_offset 7, -16
 502              		.cfi_offset 8, -12
 503              		.cfi_offset 9, -8
 504              		.cfi_offset 14, -4
 505 0004 83B0     		sub	sp, sp, #12
 506              	.LCFI8:
 507              		.cfi_def_cfa_offset 40
 508 0006 0446     		mov	r4, r0
 509 0008 0D46     		mov	r5, r1
 510 000a 9146     		mov	r9, r2
 511 000c 1E46     		mov	r6, r3
 512 000e 0A9F     		ldr	r7, [sp, #40]
  94:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     struct scheduler * schedule = 
 513              		.loc 1 94 5 is_stmt 1 view .LVU111
  95:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     get_scheduler_by_cpu_core_id(core_id);
 514              		.loc 1 95 5 is_stmt 0 view .LVU112
 515 0010 0B98     		ldr	r0, [sp, #44]
ARM GAS  /tmp/cc1oyE6J.s 			page 19


 516              	.LVL44:
 517              		.loc 1 95 5 view .LVU113
 518 0012 FFF7FEFF 		bl	get_scheduler_by_cpu_core_id
 519              	.LVL45:
  96:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(schedule == NULL){
 520              		.loc 1 96 5 is_stmt 1 view .LVU114
 521              		.loc 1 96 7 is_stmt 0 view .LVU115
 522 0016 8046     		mov	r8, r0
 523 0018 D8B1     		cbz	r0, .L41
  97:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         pr_err("cpu number err\n");
  98:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return NULL;
  99:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 100:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     struct task_struct* task =
 524              		.loc 1 100 5 is_stmt 1 view .LVU116
 101:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     __new_task_create(entry,stack_size,argv,priority,name,offset);
 525              		.loc 1 101 5 is_stmt 0 view .LVU117
 526 001a 0C9B     		ldr	r3, [sp, #48]
 527 001c 0193     		str	r3, [sp, #4]
 528 001e 0097     		str	r7, [sp]
 529 0020 3346     		mov	r3, r6
 530 0022 4A46     		mov	r2, r9
 531 0024 2946     		mov	r1, r5
 532 0026 2046     		mov	r0, r4
 533              	.LVL46:
 534              		.loc 1 101 5 view .LVU118
 535 0028 FFF7FEFF 		bl	__new_task_create
 536              	.LVL47:
 537 002c 0446     		mov	r4, r0
 538              	.LVL48:
 102:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if(IS_ERR(task)){
 539              		.loc 1 102 5 is_stmt 1 view .LVU119
 540              	.LBB16:
 541              	.LBI16:
 542              		.file 4 "/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h"
   1:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #ifndef _LINUX_ERR_H
   3:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #define _LINUX_ERR_H
   4:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
   5:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #include <linux/compiler_attributes.h>
   6:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #include <linux/compiler.h>
   7:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #include <linux/types.h>
   8:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
   9:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #include <asm/errno.h>
  10:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  11:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /*
  12:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * Kernel pointers have redundant information, so we can use a
  13:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * scheme where we can return either an error code or a normal
  14:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * pointer with the same return value.
  15:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  *
  16:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * This should be a per-architecture thing, to allow different
  17:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * error and pointer decisions.
  18:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  */
  19:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #define MAX_ERRNO	4095
  20:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  21:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #ifndef __ASSEMBLY__
  22:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  23:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /**
ARM GAS  /tmp/cc1oyE6J.s 			page 20


  24:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * IS_ERR_VALUE - Detect an error pointer.
  25:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * @x: The pointer to check.
  26:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  *
  27:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * Like IS_ERR(), but does not generate a compiler warning if result is unused.
  28:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  */
  29:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  30:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #ifndef unlikely
  31:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #  define unlikely(x) __builtin_expect(!!(x), 0)
  32:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #endif
  33:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  34:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #ifndef likely
  35:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #  define likely(x) __builtin_expect(!!(x), 1)
  36:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #endif
  37:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  38:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #define IS_ERR_VALUE(x) unlikely((unsigned long)(void *)(x) >= (unsigned long)-MAX_ERRNO)
  39:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  40:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /**
  41:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * ERR_PTR - Create an error pointer.
  42:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * @error: A negative error code.
  43:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  *
  44:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * Encodes @error into a pointer value. Users should consider the result
  45:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * opaque and not assume anything about how the error is encoded.
  46:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  *
  47:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * Return: A pointer with @error encoded within its value.
  48:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  */
  49:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** static inline void * __must_check ERR_PTR(long error)
  50:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** {
  51:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 	return (void *) error;
  52:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** }
  53:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  54:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /* Return the pointer in the percpu address space. */
  55:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #define ERR_PTR_PCPU(error) ((void __percpu *)(unsigned long)ERR_PTR(error))
  56:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  57:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /**
  58:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * PTR_ERR - Extract the error code from an error pointer.
  59:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * @ptr: An error pointer.
  60:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * Return: The error code within @ptr.
  61:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  */
  62:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** static inline long __must_check PTR_ERR(__force const void *ptr)
  63:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** {
  64:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 	return (long) ptr;
  65:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** }
  66:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  67:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /* Read an error pointer from the percpu address space. */
  68:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** #define PTR_ERR_PCPU(ptr) (PTR_ERR((const void *)(__force const unsigned long)(ptr)))
  69:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 
  70:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** /**
  71:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * IS_ERR - Detect an error pointer.
  72:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * @ptr: The pointer to check.
  73:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  * Return: true if @ptr is an error pointer, false otherwise.
  74:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h ****  */
  75:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** static inline bool __must_check IS_ERR(__force const void *ptr)
 543              		.loc 4 75 33 view .LVU120
 544              	.LBB17:
  76:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** {
  77:/mnt/c/Users/31740/Desktop/newcore/include/linux/err.h **** 	return IS_ERR_VALUE((unsigned long)ptr);
 545              		.loc 4 77 2 view .LVU121
ARM GAS  /tmp/cc1oyE6J.s 			page 21


 546              		.loc 4 77 2 is_stmt 0 view .LVU122
 547              	.LBE17:
 548              	.LBE16:
 549              		.loc 1 102 7 discriminator 1 view .LVU123
 550 002e 10F5805F 		cmn	r0, #4096
 551 0032 0AD8     		bhi	.L36
 103:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return task;   
 104:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 105:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     if( __register_task(task,schedule) < 0){
 552              		.loc 1 105 5 is_stmt 1 view .LVU124
 553              		.loc 1 105 9 is_stmt 0 view .LVU125
 554 0034 4146     		mov	r1, r8
 555 0036 FFF7FEFF 		bl	__register_task
 556              	.LVL49:
 557              		.loc 1 105 7 discriminator 1 view .LVU126
 558 003a 0028     		cmp	r0, #0
 559 003c 0FDB     		blt	.L42
 106:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         __destory_task(task);
 107:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return NULL;
 108:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 109:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     pr_info("sched: task : %s(%d) has create\n" ,name,task->id);
 560              		.loc 1 109 5 is_stmt 1 view .LVU127
 561 003e 6368     		ldr	r3, [r4, #4]
 562 0040 3A46     		mov	r2, r7
 563 0042 0949     		ldr	r1, .L43
 564 0044 0620     		movs	r0, #6
 565 0046 FFF7FEFF 		bl	printk
 566              	.LVL50:
 110:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     return task;
 567              		.loc 1 110 5 view .LVU128
 568              	.L36:
 111:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c **** }
 569              		.loc 1 111 1 is_stmt 0 view .LVU129
 570 004a 2046     		mov	r0, r4
 571 004c 03B0     		add	sp, sp, #12
 572              	.LCFI9:
 573              		.cfi_remember_state
 574              		.cfi_def_cfa_offset 28
 575              		@ sp needed
 576 004e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 577              	.LVL51:
 578              	.L41:
 579              	.LCFI10:
 580              		.cfi_restore_state
  97:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return NULL;
 581              		.loc 1 97 9 is_stmt 1 view .LVU130
 582 0052 0649     		ldr	r1, .L43+4
 583 0054 0320     		movs	r0, #3
 584              	.LVL52:
  97:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return NULL;
 585              		.loc 1 97 9 is_stmt 0 view .LVU131
 586 0056 FFF7FEFF 		bl	printk
 587              	.LVL53:
  98:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 588              		.loc 1 98 9 is_stmt 1 view .LVU132
  98:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 589              		.loc 1 98 16 is_stmt 0 view .LVU133
ARM GAS  /tmp/cc1oyE6J.s 			page 22


 590 005a 4446     		mov	r4, r8
 591              	.LVL54:
  98:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 592              		.loc 1 98 16 view .LVU134
 593 005c F5E7     		b	.L36
 594              	.LVL55:
 595              	.L42:
 106:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****         return NULL;
 596              		.loc 1 106 9 is_stmt 1 view .LVU135
 597 005e 2046     		mov	r0, r4
 598 0060 FFF7FEFF 		bl	__destory_task
 599              	.LVL56:
 107:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 600              		.loc 1 107 9 view .LVU136
 107:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 601              		.loc 1 107 16 is_stmt 0 view .LVU137
 602 0064 0024     		movs	r4, #0
 603              	.LVL57:
 107:/mnt/c/Users/31740/Desktop/newcore/kernel/sched/task.c ****     }
 604              		.loc 1 107 16 view .LVU138
 605 0066 F0E7     		b	.L36
 606              	.L44:
 607              		.align	2
 608              	.L43:
 609 0068 10000000 		.word	.LC4
 610 006c 00000000 		.word	.LC3
 611              		.cfi_endproc
 612              	.LFE289:
 614              		.section	.data.id_count,"aw"
 615              		.align	2
 618              	id_count:
 619 0000 09000000 		.word	9
 620              		.text
 621              	.Letext0:
 622              		.file 5 "/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/int-l64.h"
 623              		.file 6 "/mnt/c/Users/31740/Desktop/newcore/include/asm-generic/posix_types.h"
 624              		.file 7 "/mnt/c/Users/31740/Desktop/newcore/include/linux/types.h"
 625              		.file 8 "/mnt/c/Users/31740/Desktop/newcore/include/linux/time64.h"
 626              		.file 9 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/sched.h"
 627              		.file 10 "/mnt/c/Users/31740/Desktop/newcore/include/linux/sched.h"
 628              		.file 11 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/spinlock.h"
 629              		.file 12 "/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock_types_raw.h"
 630              		.file 13 "/mnt/c/Users/31740/Desktop/newcore/include/linux/spinlock_types.h"
 631              		.file 14 "/mnt/c/Users/31740/Desktop/newcore/include/linux/mutex.h"
 632              		.file 15 "/mnt/c/Users/31740/Desktop/newcore/include/linux/error.h"
 633              		.file 16 "/mnt/c/Users/31740/Desktop/newcore/arch/arm_m/include/asm/string.h"
 634              		.file 17 "/mnt/c/Users/31740/Desktop/newcore/include/linux/string.h"
 635              		.file 18 "/mnt/c/Users/31740/Desktop/newcore/include/linux/printk.h"
 636              		.file 19 "/mnt/c/Users/31740/Desktop/newcore/include/linux/gfp_types.h"
ARM GAS  /tmp/cc1oyE6J.s 			page 23


DEFINED SYMBOLS
                            *ABS*:00000000 task.c
     /tmp/cc1oyE6J.s:21     .text.init_task_context:00000000 $t
     /tmp/cc1oyE6J.s:26     .text.init_task_context:00000000 init_task_context
     /tmp/cc1oyE6J.s:49     .rodata.__new_task_create.str1.4:00000000 $d
     /tmp/cc1oyE6J.s:56     .text.__new_task_create:00000000 $t
     /tmp/cc1oyE6J.s:62     .text.__new_task_create:00000000 __new_task_create
     /tmp/cc1oyE6J.s:283    .text.__new_task_create:000000f8 $d
     /tmp/cc1oyE6J.s:618    .data.id_count:00000000 id_count
     /tmp/cc1oyE6J.s:291    .text.__destory_task:00000000 $t
     /tmp/cc1oyE6J.s:297    .text.__destory_task:00000000 __destory_task
     /tmp/cc1oyE6J.s:362    .text.__register_task:00000000 $t
     /tmp/cc1oyE6J.s:368    .text.__register_task:00000000 __register_task
     /tmp/cc1oyE6J.s:395    .rodata.__default_Task_return_function.str1.4:00000000 $d
     /tmp/cc1oyE6J.s:399    .text.__default_Task_return_function:00000000 $t
     /tmp/cc1oyE6J.s:405    .text.__default_Task_return_function:00000000 __default_Task_return_function
     /tmp/cc1oyE6J.s:444    .text.__default_Task_return_function:00000020 $d
     /tmp/cc1oyE6J.s:449    .text.exit:00000000 $t
     /tmp/cc1oyE6J.s:455    .text.exit:00000000 exit
     /tmp/cc1oyE6J.s:474    .rodata.task_run.str1.4:00000000 $d
     /tmp/cc1oyE6J.s:481    .text.task_run:00000000 $t
     /tmp/cc1oyE6J.s:487    .text.task_run:00000000 task_run
     /tmp/cc1oyE6J.s:609    .text.task_run:00000068 $d
     /tmp/cc1oyE6J.s:615    .data.id_count:00000000 $d

UNDEFINED SYMBOLS
__init_Taskcontext
__smalloc__
strlen
strcpy
printk
__sfree__
get_current_task
sched
get_scheduler_by_cpu_core_id
