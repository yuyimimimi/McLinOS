ARM GAS  /tmp/cc5nsFM2.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"error.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./lib/error.c"
  20              		.section	.text.__write_error_message,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	__write_error_message:
  27              	.LVL0:
  28              	.LFB286:
   1:./lib/error.c **** #include <linux/kernel.h>
   2:./lib/error.c **** #include <linux/errno.h>
   3:./lib/error.c **** #include <linux/error.h>
   4:./lib/error.c **** #include <linux/time.h>
   5:./lib/error.c **** #include <linux/slab.h>
   6:./lib/error.c **** #include <linux/string.h>
   7:./lib/error.c **** #include <linux/stdarg.h>
   8:./lib/error.c **** #include <linux/sprintf.h>
   9:./lib/error.c **** 
  10:./lib/error.c **** 
  11:./lib/error.c **** error_t *l_error_create(void *target,char *name,size_t error_buffer_size,enum error_exception_mode 
  12:./lib/error.c **** {
  13:./lib/error.c ****     error_t *error = (error_t *)kmalloc(sizeof(error_t), GFP_KERNEL);
  14:./lib/error.c ****     if(error == NULL)return (error_t*)-MAX_ERRNO;
  15:./lib/error.c ****  
  16:./lib/error.c ****     if(error_buffer_size <= 0) error_buffer_size = DEFAULT_ERRR_BUFFER_SIZE;
  17:./lib/error.c ****     error->errmsg = (char *)kmalloc(error_buffer_size, GFP_KERNEL);
  18:./lib/error.c ****     if(error->errmsg == NULL){
  19:./lib/error.c ****         kfree(error);
  20:./lib/error.c ****         return (error_t*) -ENOMEM;
  21:./lib/error.c ****     }
  22:./lib/error.c ****     error->errmsg_size = error_buffer_size; 
  23:./lib/error.c ****  
  24:./lib/error.c ****     if(name == NULL) name = __FILE__;
  25:./lib/error.c ****     int name_length = strlen(name);
  26:./lib/error.c ****     error->name = (char *)kmalloc(name_length+1, GFP_KERNEL);
  27:./lib/error.c ****     if(error->name == NULL){
  28:./lib/error.c ****         kfree(error->errmsg);
  29:./lib/error.c ****         kfree(error);
  30:./lib/error.c ****         return (error_t*)-ENOMEM;
ARM GAS  /tmp/cc5nsFM2.s 			page 2


  31:./lib/error.c ****     }        
  32:./lib/error.c ****     strcpy(error->name, name);
  33:./lib/error.c **** 
  34:./lib/error.c ****     error->target = target;
  35:./lib/error.c ****     error->error_count = 0;
  36:./lib/error.c ****     error->mode = mode;
  37:./lib/error.c ****     return error;
  38:./lib/error.c **** }
  39:./lib/error.c **** 
  40:./lib/error.c **** void l_delete_error(error_t *error)
  41:./lib/error.c **** {
  42:./lib/error.c ****     if(error == NULL) return;
  43:./lib/error.c ****     if(error->name != NULL) kfree(error->name);
  44:./lib/error.c ****     if(error->errmsg != NULL) kfree(error->errmsg);
  45:./lib/error.c ****     kfree(error);
  46:./lib/error.c **** }
  47:./lib/error.c **** 
  48:./lib/error.c **** static void __write_error_message(error_t *error,char *errmsg,...){
  29              		.loc 1 48 67 view -0
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 12, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 1
  33              		.loc 1 48 67 is_stmt 0 view .LVU1
  34 0000 0EB4     		push	{r1, r2, r3}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 1, -12
  38              		.cfi_offset 2, -8
  39              		.cfi_offset 3, -4
  40 0002 00B5     		push	{lr}
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 16
  43              		.cfi_offset 14, -16
  44 0004 82B0     		sub	sp, sp, #8
  45              	.LCFI2:
  46              		.cfi_def_cfa_offset 24
  47 0006 039A     		ldr	r2, [sp, #12]
  49:./lib/error.c ****     if(error == NULL) return;
  48              		.loc 1 49 5 is_stmt 1 view .LVU2
  49              		.loc 1 49 7 is_stmt 0 view .LVU3
  50 0008 30B1     		cbz	r0, .L1
  50:./lib/error.c ****     if(errmsg == NULL) return;
  51              		.loc 1 50 5 is_stmt 1 view .LVU4
  52              		.loc 1 50 7 is_stmt 0 view .LVU5
  53 000a 2AB1     		cbz	r2, .L1
  51:./lib/error.c ****     va_list args;
  54              		.loc 1 51 5 is_stmt 1 view .LVU6
  52:./lib/error.c ****     va_start(args, errmsg);
  55              		.loc 1 52 5 view .LVU7
  56 000c 04AB     		add	r3, sp, #16
  57 000e 0193     		str	r3, [sp, #4]
  53:./lib/error.c ****     vsnprintf(error->errmsg,error->errmsg_size,errmsg,args);
  58              		.loc 1 53 5 view .LVU8
  59 0010 0169     		ldr	r1, [r0, #16]
  60 0012 4069     		ldr	r0, [r0, #20]
  61              	.LVL1:
  62              		.loc 1 53 5 is_stmt 0 view .LVU9
ARM GAS  /tmp/cc5nsFM2.s 			page 3


  63 0014 FFF7FEFF 		bl	vsnprintf
  64              	.LVL2:
  54:./lib/error.c ****     va_end(args);
  65              		.loc 1 54 5 is_stmt 1 view .LVU10
  55:./lib/error.c ****     return;
  66              		.loc 1 55 5 view .LVU11
  67              	.L1:
  56:./lib/error.c **** }
  68              		.loc 1 56 1 is_stmt 0 view .LVU12
  69 0018 02B0     		add	sp, sp, #8
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 16
  72              		@ sp needed
  73 001a 5DF804EB 		ldr	lr, [sp], #4
  74              	.LCFI4:
  75              		.cfi_restore 14
  76              		.cfi_def_cfa_offset 12
  77 001e 03B0     		add	sp, sp, #12
  78              	.LCFI5:
  79              		.cfi_restore 3
  80              		.cfi_restore 2
  81              		.cfi_restore 1
  82              		.cfi_def_cfa_offset 0
  83 0020 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE286:
  87              		.section	.rodata.l_error_create.str1.4,"aMS",%progbits,1
  88              		.align	2
  89              	.LC0:
  90 0000 2E2F6C69 		.ascii	"./lib/error.c\000"
  90      622F6572 
  90      726F722E 
  90      6300
  91              		.section	.text.l_error_create,"ax",%progbits
  92              		.align	1
  93              		.global	l_error_create
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  98              	l_error_create:
  99              	.LVL3:
 100              	.LFB284:
  12:./lib/error.c ****     error_t *error = (error_t *)kmalloc(sizeof(error_t), GFP_KERNEL);
 101              		.loc 1 12 1 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
  12:./lib/error.c ****     error_t *error = (error_t *)kmalloc(sizeof(error_t), GFP_KERNEL);
 105              		.loc 1 12 1 is_stmt 0 view .LVU14
 106 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 107              	.LCFI6:
 108              		.cfi_def_cfa_offset 24
 109              		.cfi_offset 4, -24
 110              		.cfi_offset 5, -20
 111              		.cfi_offset 6, -16
 112              		.cfi_offset 7, -12
 113              		.cfi_offset 8, -8
ARM GAS  /tmp/cc5nsFM2.s 			page 4


 114              		.cfi_offset 14, -4
 115 0004 8046     		mov	r8, r0
 116 0006 0E46     		mov	r6, r1
 117 0008 1546     		mov	r5, r2
 118 000a 1F46     		mov	r7, r3
  13:./lib/error.c ****     if(error == NULL)return (error_t*)-MAX_ERRNO;
 119              		.loc 1 13 5 is_stmt 1 view .LVU15
 120              	.LVL4:
 121              	.LBB20:
 122              	.LBI20:
 123              		.file 2 "./include/linux/slab.h"
   1:./include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/slab.h **** /*
   3:./include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:./include/linux/slab.h ****  *
   5:./include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:./include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:./include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:./include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:./include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:./include/linux/slab.h ****  */
  11:./include/linux/slab.h **** 
  12:./include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:./include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:./include/linux/slab.h **** 
  15:./include/linux/slab.h **** #include <linux/cache.h>
  16:./include/linux/slab.h **** #include <linux/overflow.h>
  17:./include/linux/slab.h **** #include <linux/types.h>
  18:./include/linux/slab.h **** #include <linux/raid/pq.h>
  19:./include/linux/slab.h **** #include <linux/gfp_types.h>
  20:./include/linux/slab.h **** #include <linux/numa.h>
  21:./include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:./include/linux/slab.h **** #include <linux/spinlock.h>
  23:./include/linux/slab.h **** 
  24:./include/linux/slab.h **** enum _slab_flag_bits {
  25:./include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:./include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:./include/linux/slab.h **** 	_SLAB_POISON,
  28:./include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:./include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:./include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:./include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:./include/linux/slab.h **** 	_SLAB_STORE_USER,
  33:./include/linux/slab.h **** 	_SLAB_PANIC,
  34:./include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:./include/linux/slab.h **** 	_SLAB_TRACE,
  36:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:./include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:./include/linux/slab.h **** #endif
  39:./include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:./include/linux/slab.h **** 	_SLAB_NO_MERGE,
  41:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
  42:./include/linux/slab.h **** 	_SLAB_FAILSLAB,
  43:./include/linux/slab.h **** #endif
  44:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:./include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:./include/linux/slab.h **** #endif
ARM GAS  /tmp/cc5nsFM2.s 			page 5


  47:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
  48:./include/linux/slab.h **** 	_SLAB_KASAN,
  49:./include/linux/slab.h **** #endif
  50:./include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:./include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:./include/linux/slab.h **** #endif
  54:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:./include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:./include/linux/slab.h **** #endif
  57:./include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:./include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:./include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:./include/linux/slab.h **** #endif
  62:./include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:./include/linux/slab.h **** };
  64:./include/linux/slab.h **** 
  65:./include/linux/slab.h **** 
  66:./include/linux/slab.h **** 
  67:./include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:./include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:./include/linux/slab.h **** 
  70:./include/linux/slab.h **** /*
  71:./include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:./include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:./include/linux/slab.h ****  */
  74:./include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:./include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:./include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:./include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:./include/linux/slab.h **** /* DEBUG: Poison objects */
  79:./include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:./include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:./include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:./include/linux/slab.h **** /**
  83:./include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:./include/linux/slab.h ****  *
  85:./include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:./include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:./include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:./include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:./include/linux/slab.h ****  *
  90:./include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:./include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:./include/linux/slab.h ****  */
  93:./include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:./include/linux/slab.h **** /* Use GFP_DMA memory */
  95:./include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:./include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:./include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
  98:./include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
  99:./include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
 100:./include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:./include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:./include/linux/slab.h **** /**
 103:./include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
ARM GAS  /tmp/cc5nsFM2.s 			page 6


 104:./include/linux/slab.h ****  *
 105:./include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:./include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
 107:./include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:./include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:./include/linux/slab.h ****  *
 110:./include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:./include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:./include/linux/slab.h ****  * object validation pass. Something like:
 113:./include/linux/slab.h ****  *
 114:./include/linux/slab.h ****  * ::
 115:./include/linux/slab.h ****  *
 116:./include/linux/slab.h ****  *  begin:
 117:./include/linux/slab.h ****  *   rcu_read_lock();
 118:./include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:./include/linux/slab.h ****  *   if (obj) {
 120:./include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:./include/linux/slab.h ****  *       rcu_read_unlock();
 122:./include/linux/slab.h ****  *       goto begin;
 123:./include/linux/slab.h ****  *
 124:./include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:./include/linux/slab.h ****  *       put_ref(obj);
 126:./include/linux/slab.h ****  *       rcu_read_unlock();
 127:./include/linux/slab.h ****  *       goto begin;
 128:./include/linux/slab.h ****  *     }
 129:./include/linux/slab.h ****  *   }
 130:./include/linux/slab.h ****  *  rcu_read_unlock();
 131:./include/linux/slab.h ****  *
 132:./include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:./include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:./include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:./include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:./include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:./include/linux/slab.h ****  *
 138:./include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:./include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:./include/linux/slab.h ****  *
 141:./include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:./include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:./include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:./include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:./include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:./include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
 147:./include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:./include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:./include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:./include/linux/slab.h ****  * protection.
 151:./include/linux/slab.h ****  *
 152:./include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:./include/linux/slab.h ****  */
 154:./include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
 155:./include/linux/slab.h **** /* Trace allocations and frees */
 156:./include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
 157:./include/linux/slab.h **** 
 158:./include/linux/slab.h **** /* Flag to prevent checks on free */
 159:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
ARM GAS  /tmp/cc5nsFM2.s 			page 7


 161:./include/linux/slab.h **** #else
 162:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:./include/linux/slab.h **** #endif
 164:./include/linux/slab.h **** 
 165:./include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:./include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:./include/linux/slab.h **** 
 168:./include/linux/slab.h **** /*
 169:./include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:./include/linux/slab.h ****  * cautiously. Valid use cases:
 171:./include/linux/slab.h ****  *
 172:./include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:./include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:./include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:./include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:./include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:./include/linux/slab.h ****  */
 178:./include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:./include/linux/slab.h **** 
 180:./include/linux/slab.h **** /* Fault injection mark */
 181:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:./include/linux/slab.h **** #else
 184:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:./include/linux/slab.h **** #endif
 186:./include/linux/slab.h **** /**
 187:./include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:./include/linux/slab.h ****  *
 189:./include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:./include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:./include/linux/slab.h ****  */
 192:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:./include/linux/slab.h **** #else
 195:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:./include/linux/slab.h **** #endif
 197:./include/linux/slab.h **** 
 198:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:./include/linux/slab.h **** #else
 201:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:./include/linux/slab.h **** #endif
 203:./include/linux/slab.h **** 
 204:./include/linux/slab.h **** /*
 205:./include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:./include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:./include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:./include/linux/slab.h ****  */
 209:./include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:./include/linux/slab.h **** 
 211:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
 212:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
 213:./include/linux/slab.h **** #else
 214:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:./include/linux/slab.h **** #endif
 216:./include/linux/slab.h **** 
 217:./include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
ARM GAS  /tmp/cc5nsFM2.s 			page 8


 218:./include/linux/slab.h **** /**
 219:./include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:./include/linux/slab.h ****  *
 221:./include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:./include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:./include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:./include/linux/slab.h ****  */
 225:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:./include/linux/slab.h **** #else
 228:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:./include/linux/slab.h **** #endif
 230:./include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:./include/linux/slab.h **** 
 232:./include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:./include/linux/slab.h **** #else
 236:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:./include/linux/slab.h **** #endif
 238:./include/linux/slab.h **** 
 239:./include/linux/slab.h **** /*
 240:./include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:./include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:./include/linux/slab.h ****  */
 243:./include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:./include/linux/slab.h **** 
 245:./include/linux/slab.h **** /*
 246:./include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:./include/linux/slab.h ****  *
 248:./include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:./include/linux/slab.h ****  *
 250:./include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:./include/linux/slab.h ****  * Both make kfree a no-op.
 252:./include/linux/slab.h ****  */
 253:./include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:./include/linux/slab.h **** 
 255:./include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:./include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:./include/linux/slab.h **** 
 258:./include/linux/slab.h **** 
 259:./include/linux/slab.h **** 
 260:./include/linux/slab.h **** 
 261:./include/linux/slab.h **** 
 262:./include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:./include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:./include/linux/slab.h **** 
 265:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:./include/linux/slab.h **** ({						\
 267:./include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:./include/linux/slab.h **** })
 269:./include/linux/slab.h **** 
 270:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
 271:./include/linux/slab.h **** #else
 272:./include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:./include/linux/slab.h **** 
 274:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
ARM GAS  /tmp/cc5nsFM2.s 			page 9


 275:./include/linux/slab.h **** 
 276:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:./include/linux/slab.h **** 
 278:./include/linux/slab.h **** 
 279:./include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:./include/linux/slab.h **** 
 281:./include/linux/slab.h **** /*
 282:./include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:./include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:./include/linux/slab.h **** 	* given order would contain.
 285:./include/linux/slab.h **** 	*/				
 286:./include/linux/slab.h **** struct kmem_cache_order_objects {
 287:./include/linux/slab.h **** 	unsigned int x;
 288:./include/linux/slab.h **** };
 289:./include/linux/slab.h **** 
 290:./include/linux/slab.h **** struct kmem_cache_node {
 291:./include/linux/slab.h **** 	spinlock_t list_lock;
 292:./include/linux/slab.h **** 	unsigned long nr_partial;
 293:./include/linux/slab.h **** 	struct list_head partial;
 294:./include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:./include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:./include/linux/slab.h **** 	atomic_long_t total_objects;
 297:./include/linux/slab.h **** 	struct list_head full;
 298:./include/linux/slab.h **** #endif
 299:./include/linux/slab.h **** };
 300:./include/linux/slab.h **** 
 301:./include/linux/slab.h **** struct kmem_cache {
 302:./include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:./include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:./include/linux/slab.h **** 	#endif
 305:./include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:./include/linux/slab.h **** 		slab_flags_t flags;
 307:./include/linux/slab.h **** 		unsigned long min_partial;
 308:./include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:./include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:./include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:./include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:./include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:./include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:./include/linux/slab.h **** 		unsigned int cpu_partial;
 315:./include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:./include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:./include/linux/slab.h **** 	#endif
 318:./include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:./include/linux/slab.h **** 	
 320:./include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:./include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:./include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:./include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:./include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:./include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
 326:./include/linux/slab.h **** 		unsigned int align;		/* Alignment */
 327:./include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
 328:./include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:./include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:./include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:./include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
ARM GAS  /tmp/cc5nsFM2.s 			page 10


 332:./include/linux/slab.h **** 	#endif
 333:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:./include/linux/slab.h **** 		unsigned long random;
 335:./include/linux/slab.h **** 	#endif
 336:./include/linux/slab.h **** 	
 337:./include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:./include/linux/slab.h **** 		/*
 339:./include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:./include/linux/slab.h **** 			*/
 341:./include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:./include/linux/slab.h **** 	#endif
 343:./include/linux/slab.h **** 	
 344:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:./include/linux/slab.h **** 		unsigned int *random_seq;
 346:./include/linux/slab.h **** 	#endif
 347:./include/linux/slab.h **** 	
 348:./include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:./include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:./include/linux/slab.h **** 	#endif
 351:./include/linux/slab.h **** 	
 352:./include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:./include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:./include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:./include/linux/slab.h **** 	#endif
 356:./include/linux/slab.h **** 	
 357:./include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:./include/linux/slab.h **** 	};
 359:./include/linux/slab.h **** 					
 360:./include/linux/slab.h **** 
 361:./include/linux/slab.h **** 
 362:./include/linux/slab.h **** 
 363:./include/linux/slab.h **** 
 364:./include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:./include/linux/slab.h **** 
 366:./include/linux/slab.h **** 
 367:./include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:./include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:./include/linux/slab.h **** 
 370:./include/linux/slab.h **** 
 371:./include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:./include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:./include/linux/slab.h **** }
 374:./include/linux/slab.h **** 
 375:./include/linux/slab.h **** static void inline vfree(void *addr){
 376:./include/linux/slab.h **** 	__sfree__(addr);
 377:./include/linux/slab.h **** }
 378:./include/linux/slab.h **** 
 379:./include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
 124              		.loc 2 379 21 view .LVU16
 125              	.LBB21:
 380:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 126              		.loc 2 380 2 view .LVU17
 127              		.loc 2 380 9 is_stmt 0 view .LVU18
 128 000c 4FF44C61 		mov	r1, #3264
 129              	.LVL5:
 130              		.loc 2 380 9 view .LVU19
 131 0010 3C20     		movs	r0, #60
ARM GAS  /tmp/cc5nsFM2.s 			page 11


 132              	.LVL6:
 133              		.loc 2 380 9 view .LVU20
 134 0012 FFF7FEFF 		bl	__smalloc__
 135              	.LVL7:
 136              		.loc 2 380 9 view .LVU21
 137              	.LBE21:
 138              	.LBE20:
  14:./lib/error.c ****  
 139              		.loc 1 14 5 is_stmt 1 view .LVU22
  14:./lib/error.c ****  
 140              		.loc 1 14 7 is_stmt 0 view .LVU23
 141 0016 90B3     		cbz	r0, .L10
 142 0018 0446     		mov	r4, r0
  16:./lib/error.c ****     error->errmsg = (char *)kmalloc(error_buffer_size, GFP_KERNEL);
 143              		.loc 1 16 5 is_stmt 1 view .LVU24
  16:./lib/error.c ****     error->errmsg = (char *)kmalloc(error_buffer_size, GFP_KERNEL);
 144              		.loc 1 16 7 is_stmt 0 view .LVU25
 145 001a 0DB9     		cbnz	r5, .L6
  16:./lib/error.c ****     error->errmsg = (char *)kmalloc(error_buffer_size, GFP_KERNEL);
 146              		.loc 1 16 50 discriminator 1 view .LVU26
 147 001c 4FF40075 		mov	r5, #512
 148              	.LVL8:
 149              	.L6:
  17:./lib/error.c ****     if(error->errmsg == NULL){
 150              		.loc 1 17 5 is_stmt 1 view .LVU27
 151              	.LBB22:
 152              	.LBI22:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 153              		.loc 2 379 21 view .LVU28
 154              	.LBB23:
 155              		.loc 2 380 2 view .LVU29
 156              		.loc 2 380 9 is_stmt 0 view .LVU30
 157 0020 4FF44C61 		mov	r1, #3264
 158 0024 2846     		mov	r0, r5
 159              	.LVL9:
 160              		.loc 2 380 9 view .LVU31
 161 0026 FFF7FEFF 		bl	__smalloc__
 162              	.LVL10:
 163              		.loc 2 380 9 view .LVU32
 164              	.LBE23:
 165              	.LBE22:
  17:./lib/error.c ****     if(error->errmsg == NULL){
 166              		.loc 1 17 19 discriminator 1 view .LVU33
 167 002a 6061     		str	r0, [r4, #20]
  18:./lib/error.c ****         kfree(error);
 168              		.loc 1 18 5 is_stmt 1 view .LVU34
  18:./lib/error.c ****         kfree(error);
 169              		.loc 1 18 7 is_stmt 0 view .LVU35
 170 002c B0B1     		cbz	r0, .L14
  22:./lib/error.c ****  
 171              		.loc 1 22 5 is_stmt 1 view .LVU36
  22:./lib/error.c ****  
 172              		.loc 1 22 24 is_stmt 0 view .LVU37
 173 002e 2561     		str	r5, [r4, #16]
  24:./lib/error.c ****     int name_length = strlen(name);
 174              		.loc 1 24 5 is_stmt 1 view .LVU38
  24:./lib/error.c ****     int name_length = strlen(name);
ARM GAS  /tmp/cc5nsFM2.s 			page 12


 175              		.loc 1 24 7 is_stmt 0 view .LVU39
 176 0030 D6B1     		cbz	r6, .L15
 177              	.LVL11:
 178              	.L8:
  25:./lib/error.c ****     error->name = (char *)kmalloc(name_length+1, GFP_KERNEL);
 179              		.loc 1 25 5 is_stmt 1 view .LVU40
  25:./lib/error.c ****     error->name = (char *)kmalloc(name_length+1, GFP_KERNEL);
 180              		.loc 1 25 23 is_stmt 0 view .LVU41
 181 0032 3046     		mov	r0, r6
 182 0034 FFF7FEFF 		bl	strlen
 183              	.LVL12:
  26:./lib/error.c ****     if(error->name == NULL){
 184              		.loc 1 26 5 is_stmt 1 view .LVU42
 185              	.LBB24:
 186              	.LBI24:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 187              		.loc 2 379 21 view .LVU43
 188              	.LBB25:
 189              		.loc 2 380 2 view .LVU44
 190              		.loc 2 380 9 is_stmt 0 view .LVU45
 191 0038 4FF44C61 		mov	r1, #3264
 192 003c 0130     		adds	r0, r0, #1
 193              	.LVL13:
 194              		.loc 2 380 9 view .LVU46
 195 003e FFF7FEFF 		bl	__smalloc__
 196              	.LVL14:
 197              		.loc 2 380 9 view .LVU47
 198              	.LBE25:
 199              	.LBE24:
  26:./lib/error.c ****     if(error->name == NULL){
 200              		.loc 1 26 17 discriminator 1 view .LVU48
 201 0042 2060     		str	r0, [r4]
  27:./lib/error.c ****         kfree(error->errmsg);
 202              		.loc 1 27 5 is_stmt 1 view .LVU49
  27:./lib/error.c ****         kfree(error->errmsg);
 203              		.loc 1 27 7 is_stmt 0 view .LVU50
 204 0044 90B1     		cbz	r0, .L16
  32:./lib/error.c **** 
 205              		.loc 1 32 5 is_stmt 1 view .LVU51
 206 0046 3146     		mov	r1, r6
 207 0048 FFF7FEFF 		bl	strcpy
 208              	.LVL15:
  34:./lib/error.c ****     error->error_count = 0;
 209              		.loc 1 34 5 view .LVU52
  34:./lib/error.c ****     error->error_count = 0;
 210              		.loc 1 34 19 is_stmt 0 view .LVU53
 211 004c C4F82080 		str	r8, [r4, #32]
  35:./lib/error.c ****     error->mode = mode;
 212              		.loc 1 35 5 is_stmt 1 view .LVU54
  35:./lib/error.c ****     error->mode = mode;
 213              		.loc 1 35 24 is_stmt 0 view .LVU55
 214 0050 0023     		movs	r3, #0
 215 0052 A361     		str	r3, [r4, #24]
  36:./lib/error.c ****     return error;
 216              		.loc 1 36 5 is_stmt 1 view .LVU56
  36:./lib/error.c ****     return error;
 217              		.loc 1 36 17 is_stmt 0 view .LVU57
ARM GAS  /tmp/cc5nsFM2.s 			page 13


 218 0054 2777     		strb	r7, [r4, #28]
  37:./lib/error.c **** }
 219              		.loc 1 37 5 is_stmt 1 view .LVU58
 220              	.LVL16:
 221              	.L4:
  38:./lib/error.c **** 
 222              		.loc 1 38 1 is_stmt 0 view .LVU59
 223 0056 2046     		mov	r0, r4
 224 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 225              	.LVL17:
 226              	.L14:
  19:./lib/error.c ****         return (error_t*) -ENOMEM;
 227              		.loc 1 19 9 is_stmt 1 view .LVU60
 228              	.LBB26:
 229              	.LBI26:
 381:./include/linux/slab.h **** }
 382:./include/linux/slab.h **** 
 383:./include/linux/slab.h **** static void inline kfree(const void *ptr){
 230              		.loc 2 383 20 view .LVU61
 231              	.LBB27:
 384:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 232              		.loc 2 384 2 view .LVU62
 233 005c 2046     		mov	r0, r4
 234 005e FFF7FEFF 		bl	__sfree__
 235              	.LVL18:
 236              		.loc 2 384 2 is_stmt 0 view .LVU63
 237              	.LBE27:
 238              	.LBE26:
  20:./lib/error.c ****     }
 239              		.loc 1 20 9 is_stmt 1 view .LVU64
  20:./lib/error.c ****     }
 240              		.loc 1 20 16 is_stmt 0 view .LVU65
 241 0062 6FF00B04 		mvn	r4, #11
 242              	.LVL19:
  20:./lib/error.c ****     }
 243              		.loc 1 20 16 view .LVU66
 244 0066 F6E7     		b	.L4
 245              	.LVL20:
 246              	.L15:
  24:./lib/error.c ****     int name_length = strlen(name);
 247              		.loc 1 24 27 discriminator 1 view .LVU67
 248 0068 064E     		ldr	r6, .L17
 249              	.LVL21:
  24:./lib/error.c ****     int name_length = strlen(name);
 250              		.loc 1 24 27 discriminator 1 view .LVU68
 251 006a E2E7     		b	.L8
 252              	.LVL22:
 253              	.L16:
  28:./lib/error.c ****         kfree(error);
 254              		.loc 1 28 9 is_stmt 1 view .LVU69
 255              	.LBB28:
 256              	.LBI28:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 257              		.loc 2 383 20 view .LVU70
 258              	.LBB29:
 259              		.loc 2 384 2 view .LVU71
 260 006c 6069     		ldr	r0, [r4, #20]
ARM GAS  /tmp/cc5nsFM2.s 			page 14


 261 006e FFF7FEFF 		bl	__sfree__
 262              	.LVL23:
 263              		.loc 2 384 2 is_stmt 0 view .LVU72
 264              	.LBE29:
 265              	.LBE28:
  29:./lib/error.c ****         return (error_t*)-ENOMEM;
 266              		.loc 1 29 9 is_stmt 1 view .LVU73
 267              	.LBB30:
 268              	.LBI30:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 269              		.loc 2 383 20 view .LVU74
 270              	.LBB31:
 271              		.loc 2 384 2 view .LVU75
 272 0072 2046     		mov	r0, r4
 273 0074 FFF7FEFF 		bl	__sfree__
 274              	.LVL24:
 275              		.loc 2 384 2 is_stmt 0 view .LVU76
 276              	.LBE31:
 277              	.LBE30:
  30:./lib/error.c ****     }        
 278              		.loc 1 30 9 is_stmt 1 view .LVU77
  30:./lib/error.c ****     }        
 279              		.loc 1 30 16 is_stmt 0 view .LVU78
 280 0078 6FF00B04 		mvn	r4, #11
 281              	.LVL25:
  30:./lib/error.c ****     }        
 282              		.loc 1 30 16 view .LVU79
 283 007c EBE7     		b	.L4
 284              	.LVL26:
 285              	.L10:
  14:./lib/error.c ****  
 286              		.loc 1 14 29 discriminator 1 view .LVU80
 287 007e 024C     		ldr	r4, .L17+4
 288 0080 E9E7     		b	.L4
 289              	.L18:
 290 0082 00BF     		.align	2
 291              	.L17:
 292 0084 00000000 		.word	.LC0
 293 0088 01F0FFFF 		.word	-4095
 294              		.cfi_endproc
 295              	.LFE284:
 297              		.section	.text.l_delete_error,"ax",%progbits
 298              		.align	1
 299              		.global	l_delete_error
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 304              	l_delete_error:
 305              	.LVL27:
 306              	.LFB285:
  41:./lib/error.c ****     if(error == NULL) return;
 307              		.loc 1 41 1 is_stmt 1 view -0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
  42:./lib/error.c ****     if(error->name != NULL) kfree(error->name);
 311              		.loc 1 42 5 view .LVU82
ARM GAS  /tmp/cc5nsFM2.s 			page 15


  42:./lib/error.c ****     if(error->name != NULL) kfree(error->name);
 312              		.loc 1 42 7 is_stmt 0 view .LVU83
 313 0000 68B1     		cbz	r0, .L24
  41:./lib/error.c ****     if(error == NULL) return;
 314              		.loc 1 41 1 view .LVU84
 315 0002 10B5     		push	{r4, lr}
 316              	.LCFI7:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 4, -8
 319              		.cfi_offset 14, -4
 320 0004 0446     		mov	r4, r0
  43:./lib/error.c ****     if(error->errmsg != NULL) kfree(error->errmsg);
 321              		.loc 1 43 5 is_stmt 1 view .LVU85
  43:./lib/error.c ****     if(error->errmsg != NULL) kfree(error->errmsg);
 322              		.loc 1 43 13 is_stmt 0 view .LVU86
 323 0006 0068     		ldr	r0, [r0]
 324              	.LVL28:
  43:./lib/error.c ****     if(error->errmsg != NULL) kfree(error->errmsg);
 325              		.loc 1 43 7 view .LVU87
 326 0008 08B1     		cbz	r0, .L21
  43:./lib/error.c ****     if(error->errmsg != NULL) kfree(error->errmsg);
 327              		.loc 1 43 29 is_stmt 1 discriminator 1 view .LVU88
 328              	.LVL29:
 329              	.LBB32:
 330              	.LBI32:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 331              		.loc 2 383 20 view .LVU89
 332              	.LBB33:
 333              		.loc 2 384 2 view .LVU90
 334 000a FFF7FEFF 		bl	__sfree__
 335              	.LVL30:
 336              	.L21:
 337              		.loc 2 384 2 is_stmt 0 view .LVU91
 338              	.LBE33:
 339              	.LBE32:
  44:./lib/error.c ****     kfree(error);
 340              		.loc 1 44 5 is_stmt 1 view .LVU92
  44:./lib/error.c ****     kfree(error);
 341              		.loc 1 44 13 is_stmt 0 view .LVU93
 342 000e 6069     		ldr	r0, [r4, #20]
  44:./lib/error.c ****     kfree(error);
 343              		.loc 1 44 7 view .LVU94
 344 0010 08B1     		cbz	r0, .L22
  44:./lib/error.c ****     kfree(error);
 345              		.loc 1 44 31 is_stmt 1 discriminator 1 view .LVU95
 346              	.LVL31:
 347              	.LBB34:
 348              	.LBI34:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 349              		.loc 2 383 20 view .LVU96
 350              	.LBB35:
 351              		.loc 2 384 2 view .LVU97
 352 0012 FFF7FEFF 		bl	__sfree__
 353              	.LVL32:
 354              	.L22:
 355              		.loc 2 384 2 is_stmt 0 view .LVU98
 356              	.LBE35:
ARM GAS  /tmp/cc5nsFM2.s 			page 16


 357              	.LBE34:
  45:./lib/error.c **** }
 358              		.loc 1 45 5 is_stmt 1 view .LVU99
 359              	.LBB36:
 360              	.LBI36:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 361              		.loc 2 383 20 view .LVU100
 362              	.LBB37:
 363              		.loc 2 384 2 view .LVU101
 364 0016 2046     		mov	r0, r4
 365 0018 FFF7FEFF 		bl	__sfree__
 366              	.LVL33:
 367              		.loc 2 384 2 is_stmt 0 view .LVU102
 368              	.LBE37:
 369              	.LBE36:
  46:./lib/error.c **** 
 370              		.loc 1 46 1 view .LVU103
 371 001c 10BD     		pop	{r4, pc}
 372              	.LVL34:
 373              	.L24:
 374              	.LCFI8:
 375              		.cfi_def_cfa_offset 0
 376              		.cfi_restore 4
 377              		.cfi_restore 14
  46:./lib/error.c **** 
 378              		.loc 1 46 1 view .LVU104
 379 001e 7047     		bx	lr
 380              		.cfi_endproc
 381              	.LFE285:
 383              		.section	.rodata.l_output_error_message.str1.4,"aMS",%progbits,1
 384              		.align	2
 385              	.LC1:
 386 0000 2825752E 		.ascii	"(%u.%06u) (%d)[ \"%s\":(%d)] %s free memory size:%d"
 386      25303675 
 386      29202825 
 386      64295B20 
 386      22257322 
 387 0031 620A00   		.ascii	"b\012\000"
 388              		.section	.text.l_output_error_message,"ax",%progbits
 389              		.align	1
 390              		.global	l_output_error_message
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 395              	l_output_error_message:
 396              	.LVL35:
 397              	.LFB288:
  57:./lib/error.c **** 
  58:./lib/error.c **** extern size_t get_global_heap_size(void);
  59:./lib/error.c **** void l_error_exception(error_t *error, intptr_t errnum, int line, char *errmsg, ...) 
  60:./lib/error.c **** {
  61:./lib/error.c ****     if(error == NULL) return;
  62:./lib/error.c ****     if(errnum >= 0) return;
  63:./lib/error.c ****     error->errnum = errnum;
  64:./lib/error.c ****     error->line = line;
  65:./lib/error.c ****     error->time = ktime_get();
  66:./lib/error.c ****     error->haper_size = get_global_heap_size();
ARM GAS  /tmp/cc5nsFM2.s 			page 17


  67:./lib/error.c ****     error->error_count++;
  68:./lib/error.c ****     if (errmsg != NULL) {
  69:./lib/error.c ****         va_list args;
  70:./lib/error.c ****         va_start(args, errmsg);
  71:./lib/error.c ****         vsnprintf(error->errmsg, error->errmsg_size, errmsg, args);
  72:./lib/error.c ****         va_end(args);
  73:./lib/error.c ****     } 
  74:./lib/error.c ****     else 
  75:./lib/error.c ****     {
  76:./lib/error.c ****         switch (errnum) {
  77:./lib/error.c ****             case -EPERM:
  78:./lib/error.c ****                 __write_error_message(error, "ERROR: EPERM: Operation not permitted");
  79:./lib/error.c ****                 break;
  80:./lib/error.c ****             case -ENOENT:
  81:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOENT: No such file or directory");
  82:./lib/error.c ****                 break;
  83:./lib/error.c ****             case -ESRCH:
  84:./lib/error.c ****                 __write_error_message(error, "ERROR: ESRCH: No such process");
  85:./lib/error.c ****                 break;
  86:./lib/error.c ****             case -EINTR:
  87:./lib/error.c ****                 __write_error_message(error, "WARN: EINTR: Interrupted system call");
  88:./lib/error.c ****                 break;
  89:./lib/error.c ****             case -EIO:
  90:./lib/error.c ****                 __write_error_message(error, "ERROR: EIO: I/O error");
  91:./lib/error.c ****                 break;
  92:./lib/error.c ****             case -ENXIO:
  93:./lib/error.c ****                 __write_error_message(error, "ERROR: ENXIO: No such device or address");
  94:./lib/error.c ****                 break;
  95:./lib/error.c ****             case -E2BIG:
  96:./lib/error.c ****                 __write_error_message(error, "ERROR: E2BIG: Argument list too long");
  97:./lib/error.c ****                 break;
  98:./lib/error.c ****             case -ENOEXEC:
  99:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOEXEC: Exec format error");
 100:./lib/error.c ****                 break;
 101:./lib/error.c ****             case -EBADF:
 102:./lib/error.c ****                 __write_error_message(error, "ERROR: EBADF: Bad file descriptor");
 103:./lib/error.c ****                 break;
 104:./lib/error.c ****             case -ECHILD:
 105:./lib/error.c ****                 __write_error_message(error, "ERROR: ECHILD: No child processes");
 106:./lib/error.c ****                 break;
 107:./lib/error.c ****             case -EAGAIN:
 108:./lib/error.c ****                 __write_error_message(error, "WARN: EAGAIN: Resource temporarily unavailable");
 109:./lib/error.c ****                 break;
 110:./lib/error.c ****             case -ENOMEM:
 111:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOMEM: Out of memory");
 112:./lib/error.c ****                 break;
 113:./lib/error.c ****             case -EACCES:
 114:./lib/error.c ****                 __write_error_message(error, "ERROR: EACCES: Permission denied");
 115:./lib/error.c ****                 break;
 116:./lib/error.c ****             case -EFAULT:
 117:./lib/error.c ****                 __write_error_message(error, "ERROR: EFAULT: Bad address");
 118:./lib/error.c ****                 break;
 119:./lib/error.c ****             case -ENOTBLK:
 120:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTBLK: Block device required");
 121:./lib/error.c ****                 break;
 122:./lib/error.c ****             case -EBUSY:
 123:./lib/error.c ****                 __write_error_message(error, "ERROR: EBUSY: Device or resource busy");
ARM GAS  /tmp/cc5nsFM2.s 			page 18


 124:./lib/error.c ****                 break;
 125:./lib/error.c ****             case -EEXIST:
 126:./lib/error.c ****                 __write_error_message(error, "ERROR: EEXIST: File exists");
 127:./lib/error.c ****                 break;
 128:./lib/error.c ****             case -EXDEV:
 129:./lib/error.c ****                 __write_error_message(error, "ERROR: EXDEV: Cross-device link");
 130:./lib/error.c ****                 break;
 131:./lib/error.c ****             case -ENODEV:
 132:./lib/error.c ****                 __write_error_message(error, "ERROR: ENODEV: No such device");
 133:./lib/error.c ****                 break;
 134:./lib/error.c ****             case -ENOTDIR:
 135:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTDIR: Not a directory");
 136:./lib/error.c ****                 break;
 137:./lib/error.c ****             case -EISDIR:
 138:./lib/error.c ****                 __write_error_message(error, "ERROR: EISDIR: Is a directory");
 139:./lib/error.c ****                 break;
 140:./lib/error.c ****             case -EINVAL:
 141:./lib/error.c ****                 __write_error_message(error, "ERROR: EINVAL: Invalid argument");
 142:./lib/error.c ****                 break;
 143:./lib/error.c ****             case -ENFILE:
 144:./lib/error.c ****                 __write_error_message(error, "ERROR: ENFILE: File table overflow");
 145:./lib/error.c ****                 break;
 146:./lib/error.c ****             case -EMFILE:
 147:./lib/error.c ****                 __write_error_message(error, "ERROR: EMFILE: Too many open files");
 148:./lib/error.c ****                 break;
 149:./lib/error.c ****             case -ENOTTY:
 150:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTTY: Not a terminal");
 151:./lib/error.c ****                 break;
 152:./lib/error.c ****             case -ETXTBSY:
 153:./lib/error.c ****                 __write_error_message(error, "ERROR: ETXTBSY: Text file busy");
 154:./lib/error.c ****                 break;
 155:./lib/error.c ****             case -EFBIG:
 156:./lib/error.c ****                 __write_error_message(error, "ERROR: EFBIG: File too large");
 157:./lib/error.c ****                 break;
 158:./lib/error.c ****             case -ENOSPC:
 159:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOSPC: No space left on device");
 160:./lib/error.c ****                 break;
 161:./lib/error.c ****             case -ESPIPE:
 162:./lib/error.c ****                 __write_error_message(error, "ERROR: ESPIPE: Illegal seek");
 163:./lib/error.c ****                 break;
 164:./lib/error.c ****             case -EROFS:
 165:./lib/error.c ****                 __write_error_message(error, "ERROR: EROFS: Read-only file system");
 166:./lib/error.c ****                 break;
 167:./lib/error.c ****             case -EMLINK:
 168:./lib/error.c ****                 __write_error_message(error, "ERROR: EMLINK: Too many links");
 169:./lib/error.c ****                 break;
 170:./lib/error.c ****             case -EPIPE:
 171:./lib/error.c ****                 __write_error_message(error, "ERROR: EPIPE: Broken pipe");
 172:./lib/error.c ****                 break;
 173:./lib/error.c ****             case -EDOM:
 174:./lib/error.c ****                 __write_error_message(error, "ERROR: EDOM: Math argument out of domain");
 175:./lib/error.c ****                 break;
 176:./lib/error.c ****             case -ERANGE:
 177:./lib/error.c ****                 __write_error_message(error, "ERROR: ERANGE: Math result not representable");
 178:./lib/error.c ****                 break;
 179:./lib/error.c ****         
 180:./lib/error.c ****             /* 扩展错误码 (from errno.h) */
ARM GAS  /tmp/cc5nsFM2.s 			page 19


 181:./lib/error.c ****             case -EDEADLK:
 182:./lib/error.c ****                 __write_error_message(error, "ERROR: EDEADLK: Resource deadlock would occur");
 183:./lib/error.c ****                 break;
 184:./lib/error.c ****             case -ENAMETOOLONG:
 185:./lib/error.c ****                 __write_error_message(error, "ERROR: ENAMETOOLONG: File name too long");
 186:./lib/error.c ****                 break;
 187:./lib/error.c ****             case -ENOLCK:
 188:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOLCK: No record locks available");
 189:./lib/error.c ****                 break;
 190:./lib/error.c ****             case -ENOSYS:
 191:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOSYS: Function not implemented");
 192:./lib/error.c ****                 break;
 193:./lib/error.c ****             case -ENOTEMPTY:
 194:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTEMPTY: Directory not empty");
 195:./lib/error.c ****                 break;
 196:./lib/error.c ****             case -ELOOP:
 197:./lib/error.c ****                 __write_error_message(error, "ERROR: ELOOP: Too many symbolic links encountered");
 198:./lib/error.c ****                 break;
 199:./lib/error.c ****             /* 网络相关错误码 */
 200:./lib/error.c ****             case -ENOTSOCK:
 201:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTSOCK: Socket operation on non-socket");
 202:./lib/error.c ****                 break;
 203:./lib/error.c ****             case -EDESTADDRREQ:
 204:./lib/error.c ****                 __write_error_message(error, "ERROR: EDESTADDRREQ: Destination address required");
 205:./lib/error.c ****                 break;
 206:./lib/error.c ****             case -EMSGSIZE:
 207:./lib/error.c ****                 __write_error_message(error, "ERROR: EMSGSIZE: Message too long");
 208:./lib/error.c ****                 break;
 209:./lib/error.c ****             case -EPROTOTYPE:
 210:./lib/error.c ****                 __write_error_message(error, "ERROR: EPROTOTYPE: Protocol wrong type for socket");
 211:./lib/error.c ****                 break;
 212:./lib/error.c ****             case -ENOPROTOOPT:
 213:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOPROTOOPT: Protocol not available");
 214:./lib/error.c ****                 break;
 215:./lib/error.c ****             case -EPROTONOSUPPORT:
 216:./lib/error.c ****                 __write_error_message(error, "ERROR: EPROTONOSUPPORT: Protocol not supported");
 217:./lib/error.c ****                 break;
 218:./lib/error.c ****             case -ESOCKTNOSUPPORT:
 219:./lib/error.c ****                 __write_error_message(error, "ERROR: ESOCKTNOSUPPORT: Socket type not supported");
 220:./lib/error.c ****                 break;
 221:./lib/error.c ****             case -EOPNOTSUPP:
 222:./lib/error.c ****                 __write_error_message(error, "ERROR: EOPNOTSUPP: Operation not supported");
 223:./lib/error.c ****                 break;
 224:./lib/error.c ****             case -EPFNOSUPPORT:
 225:./lib/error.c ****                 __write_error_message(error, "ERROR: EPFNOSUPPORT: Protocol family not supported");
 226:./lib/error.c ****                 break;
 227:./lib/error.c ****             case -EAFNOSUPPORT:
 228:./lib/error.c ****                 __write_error_message(error, "ERROR: EAFNOSUPPORT: Address family not supported");
 229:./lib/error.c ****                 break;
 230:./lib/error.c ****             case -EADDRINUSE:
 231:./lib/error.c ****                 __write_error_message(error, "ERROR: EADDRINUSE: Address already in use");
 232:./lib/error.c ****                 break;
 233:./lib/error.c ****             case -EADDRNOTAVAIL:
 234:./lib/error.c ****                 __write_error_message(error, "ERROR: EADDRNOTAVAIL: Cannot assign requested address
 235:./lib/error.c ****                 break;
 236:./lib/error.c ****             case -ENETDOWN:
 237:./lib/error.c ****                 __write_error_message(error, "ERROR: ENETDOWN: Network is down");
ARM GAS  /tmp/cc5nsFM2.s 			page 20


 238:./lib/error.c ****                 break;
 239:./lib/error.c ****             case -ENETUNREACH:
 240:./lib/error.c ****                 __write_error_message(error, "ERROR: ENETUNREACH: Network is unreachable");
 241:./lib/error.c ****                 break;
 242:./lib/error.c ****             case -ENETRESET:
 243:./lib/error.c ****                 __write_error_message(error, "ERROR: ENETRESET: Network dropped connection on reset
 244:./lib/error.c ****                 break;
 245:./lib/error.c ****             case -ECONNABORTED:
 246:./lib/error.c ****                 __write_error_message(error, "ERROR: ECONNABORTED: Software caused connection abort
 247:./lib/error.c ****                 break;
 248:./lib/error.c ****             case -ECONNRESET:
 249:./lib/error.c ****                 __write_error_message(error, "ERROR: ECONNRESET: Connection reset by peer");
 250:./lib/error.c ****                 break;
 251:./lib/error.c ****             case -ENOBUFS:
 252:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOBUFS: No buffer space available");
 253:./lib/error.c ****                 break;
 254:./lib/error.c ****             case -EISCONN:
 255:./lib/error.c ****                 __write_error_message(error, "ERROR: EISCONN: Transport endpoint is already connect
 256:./lib/error.c ****                 break;
 257:./lib/error.c ****             case -ENOTCONN:
 258:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTCONN: Transport endpoint is not connected"
 259:./lib/error.c ****                 break;
 260:./lib/error.c ****             case -ESHUTDOWN:
 261:./lib/error.c ****                 __write_error_message(error, "ERROR: ESHUTDOWN: Cannot send after transport endpoin
 262:./lib/error.c ****                 break;
 263:./lib/error.c ****             case -ETOOMANYREFS:
 264:./lib/error.c ****                 __write_error_message(error, "ERROR: ETOOMANYREFS: Too many references");
 265:./lib/error.c ****                 break;
 266:./lib/error.c ****             case -ETIMEDOUT:
 267:./lib/error.c ****                 __write_error_message(error, "ERROR: ETIMEDOUT: Connection timed out");
 268:./lib/error.c ****                 break;
 269:./lib/error.c ****             case -ECONNREFUSED:
 270:./lib/error.c ****                 __write_error_message(error, "ERROR: ECONNREFUSED: Connection refused");
 271:./lib/error.c ****                 break;
 272:./lib/error.c ****             case -EHOSTDOWN:
 273:./lib/error.c ****                 __write_error_message(error, "ERROR: EHOSTDOWN: Host is down");
 274:./lib/error.c ****                 break;
 275:./lib/error.c ****             case -EHOSTUNREACH:
 276:./lib/error.c ****                 __write_error_message(error, "ERROR: EHOSTUNREACH: No route to host");
 277:./lib/error.c ****                 break;
 278:./lib/error.c ****             /* 其他错误码 */
 279:./lib/error.c ****             case -EALREADY:
 280:./lib/error.c ****                 __write_error_message(error, "INFO: EALREADY: Operation already in progress");
 281:./lib/error.c ****                 break;
 282:./lib/error.c ****             case -EINPROGRESS:
 283:./lib/error.c ****                 __write_error_message(error, "INFO: EINPROGRESS: Operation now in progress");
 284:./lib/error.c ****                 break;
 285:./lib/error.c ****             case -ESTALE:
 286:./lib/error.c ****                 __write_error_message(error, "ERROR: ESTALE: Stale file handle");
 287:./lib/error.c ****                 break;
 288:./lib/error.c ****             case -EUCLEAN:
 289:./lib/error.c ****                 __write_error_message(error, "ERROR: EUCLEAN: Structure needs cleaning");
 290:./lib/error.c ****                 break;
 291:./lib/error.c ****             case -ENOTNAM:
 292:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTNAM: Not a XENIX named type file");
 293:./lib/error.c ****                 break;
 294:./lib/error.c ****             case -ENAVAIL:
ARM GAS  /tmp/cc5nsFM2.s 			page 21


 295:./lib/error.c ****                 __write_error_message(error, "ERROR: ENAVAIL: No XENIX semaphores available");
 296:./lib/error.c ****                 break;
 297:./lib/error.c ****             case -EISNAM:
 298:./lib/error.c ****                 __write_error_message(error, "ERROR: EISNAM: Is a named type file");
 299:./lib/error.c ****                 break;
 300:./lib/error.c ****             case -EREMOTEIO:
 301:./lib/error.c ****                 __write_error_message(error, "ERROR: EREMOTEIO: Remote I/O error");
 302:./lib/error.c ****                 break;
 303:./lib/error.c ****             case -EDQUOT:
 304:./lib/error.c ****                 __write_error_message(error, "ERROR: EDQUOT: Disk quota exceeded");
 305:./lib/error.c ****                 break;
 306:./lib/error.c ****             case -ENOMEDIUM:
 307:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOMEDIUM: No medium found");
 308:./lib/error.c ****                 break;
 309:./lib/error.c ****             case -EMEDIUMTYPE:
 310:./lib/error.c ****                 __write_error_message(error, "ERROR: EMEDIUMTYPE: Wrong medium type");
 311:./lib/error.c ****                 break;
 312:./lib/error.c ****             case -ECANCELED:
 313:./lib/error.c ****                 __write_error_message(error, "WARN: ECANCELED: Operation canceled");
 314:./lib/error.c ****                 break;
 315:./lib/error.c ****             case -ENOKEY:
 316:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOKEY: Required key not available");
 317:./lib/error.c ****                 break;
 318:./lib/error.c ****             case -EKEYEXPIRED:
 319:./lib/error.c ****                 __write_error_message(error, "ERROR: EKEYEXPIRED: Key has expired");
 320:./lib/error.c ****                 break;
 321:./lib/error.c ****             case -EKEYREVOKED:
 322:./lib/error.c ****                 __write_error_message(error, "ERROR: EKEYREVOKED: Key has been revoked");
 323:./lib/error.c ****                 break;
 324:./lib/error.c ****             case -EKEYREJECTED:
 325:./lib/error.c ****                 __write_error_message(error, "ERROR: EKEYREJECTED: Key was rejected by service");
 326:./lib/error.c ****                 break;
 327:./lib/error.c ****             case -EOWNERDEAD:
 328:./lib/error.c ****                 __write_error_message(error, "ERROR: EOWNERDEAD: Owner died");
 329:./lib/error.c ****                 break;
 330:./lib/error.c ****             case -ENOTRECOVERABLE:
 331:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTRECOVERABLE: State not recoverable");
 332:./lib/error.c ****                 break;
 333:./lib/error.c ****             case -ERFKILL:
 334:./lib/error.c ****                 __write_error_message(error, "ERROR: ERFKILL: Operation not possible due to RF-kill
 335:./lib/error.c ****                 break;
 336:./lib/error.c ****             case -EHWPOISON:
 337:./lib/error.c ****                 __write_error_message(error, "ERROR: EHWPOISON: Memory page has hardware error");
 338:./lib/error.c ****                 break;
 339:./lib/error.c ****             default:
 340:./lib/error.c ****                 __write_error_message(error, "ERROR: Unknown error code");
 341:./lib/error.c ****                 break;
 342:./lib/error.c ****         }
 343:./lib/error.c ****     }
 344:./lib/error.c ****     if (error->mode == ERROR_SAVE_ONLY) {
 345:./lib/error.c ****         return;
 346:./lib/error.c ****     }
 347:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_PRINT_TO_LOG || error->mode == ERROR_SAVE_AND_BLOCK) {
 348:./lib/error.c ****         l_output_error_message(error,NULL,0,printk);
 349:./lib/error.c ****     }
 350:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_BLOCK) 
 351:./lib/error.c ****     {
ARM GAS  /tmp/cc5nsFM2.s 			page 22


 352:./lib/error.c ****         while (1);
 353:./lib/error.c ****     }
 354:./lib/error.c ****     return;
 355:./lib/error.c **** }
 356:./lib/error.c **** 
 357:./lib/error.c **** 
 358:./lib/error.c **** int l_output_error_message(error_t *error,char *buffer,int buffer_size,void (out_function)(char *,.
 359:./lib/error.c **** {
 398              		.loc 1 359 1 is_stmt 1 view -0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 360:./lib/error.c ****     if(error == NULL) return -1;
 402              		.loc 1 360 5 view .LVU106
 403              		.loc 1 360 7 is_stmt 0 view .LVU107
 404 0000 0028     		cmp	r0, #0
 405 0002 37D0     		beq	.L31
 359:./lib/error.c ****     if(error == NULL) return -1;
 406              		.loc 1 359 1 view .LVU108
 407 0004 70B5     		push	{r4, r5, r6, lr}
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 16
 410              		.cfi_offset 4, -16
 411              		.cfi_offset 5, -12
 412              		.cfi_offset 6, -8
 413              		.cfi_offset 14, -4
 414 0006 86B0     		sub	sp, sp, #24
 415              	.LCFI10:
 416              		.cfi_def_cfa_offset 40
 417 0008 0D46     		mov	r5, r1
 418 000a 1146     		mov	r1, r2
 419              	.LVL36:
 359:./lib/error.c ****     if(error == NULL) return -1;
 420              		.loc 1 359 1 view .LVU109
 421 000c 1E46     		mov	r6, r3
 422 000e 0446     		mov	r4, r0
 361:./lib/error.c ****     if(buffer != NULL)
 423              		.loc 1 361 5 is_stmt 1 view .LVU110
 424              		.loc 1 361 7 is_stmt 0 view .LVU111
 425 0010 DDB1     		cbz	r5, .L29
 426              	.LBB38:
 362:./lib/error.c ****     {
 363:./lib/error.c ****         uint32_t sec  = error->time / HZ;
 427              		.loc 1 363 9 is_stmt 1 view .LVU112
 428              		.loc 1 363 30 is_stmt 0 view .LVU113
 429 0012 8068     		ldr	r0, [r0, #8]
 430              	.LVL37:
 431              		.loc 1 363 37 view .LVU114
 432 0014 194B     		ldr	r3, .L36
 433              	.LVL38:
 434              		.loc 1 363 37 view .LVU115
 435 0016 1A68     		ldr	r2, [r3]
 436              	.LVL39:
 437              		.loc 1 363 18 view .LVU116
 438 0018 B0FBF2F3 		udiv	r3, r0, r2
 439              	.LVL40:
 364:./lib/error.c ****         uint32_t nsec = error->time % HZ;
ARM GAS  /tmp/cc5nsFM2.s 			page 23


 440              		.loc 1 364 9 is_stmt 1 view .LVU117
 441              		.loc 1 364 18 is_stmt 0 view .LVU118
 442 001c 02FB1300 		mls	r0, r2, r3, r0
 443              	.LVL41:
 365:./lib/error.c ****         int len = snprintf(buffer, buffer_size, "(%u.%06u) (%d)[ \"%s\":(%d)] %s free memory size:%
 444              		.loc 1 365 9 is_stmt 1 view .LVU119
 445              		.loc 1 365 19 is_stmt 0 view .LVU120
 446 0020 626A     		ldr	r2, [r4, #36]
 447 0022 0592     		str	r2, [sp, #20]
 448 0024 6269     		ldr	r2, [r4, #20]
 449 0026 0492     		str	r2, [sp, #16]
 450 0028 E268     		ldr	r2, [r4, #12]
 451 002a 0392     		str	r2, [sp, #12]
 452 002c 2268     		ldr	r2, [r4]
 453 002e 0292     		str	r2, [sp, #8]
 454 0030 A269     		ldr	r2, [r4, #24]
 455 0032 0192     		str	r2, [sp, #4]
 456 0034 0090     		str	r0, [sp]
 457 0036 124A     		ldr	r2, .L36+4
 458 0038 2846     		mov	r0, r5
 459              	.LVL42:
 460              		.loc 1 365 19 view .LVU121
 461 003a FFF7FEFF 		bl	snprintf
 462              	.LVL43:
 366:./lib/error.c ****         if(len >= error->errmsg_size) return -1;
 463              		.loc 1 366 9 is_stmt 1 view .LVU122
 464              		.loc 1 366 24 is_stmt 0 view .LVU123
 465 003e 2369     		ldr	r3, [r4, #16]
 466              		.loc 1 366 11 view .LVU124
 467 0040 8342     		cmp	r3, r0
 468 0042 15D8     		bhi	.L27
 469              		.loc 1 366 46 discriminator 1 view .LVU125
 470 0044 4FF0FF30 		mov	r0, #-1
 471              	.LVL44:
 472              		.loc 1 366 46 discriminator 1 view .LVU126
 473 0048 12E0     		b	.L27
 474              	.LVL45:
 475              	.L29:
 476              		.loc 1 366 46 discriminator 1 view .LVU127
 477              	.LBE38:
 367:./lib/error.c ****         return len;
 368:./lib/error.c ****     }
 369:./lib/error.c ****     if(out_function != NULL)
 478              		.loc 1 369 5 is_stmt 1 view .LVU128
 479              		.loc 1 369 7 is_stmt 0 view .LVU129
 480 004a 8BB1     		cbz	r3, .L27
 481              	.LBB39:
 370:./lib/error.c ****     {
 371:./lib/error.c ****         uint32_t sec  = error->time / HZ;
 482              		.loc 1 371 9 is_stmt 1 view .LVU130
 483              		.loc 1 371 30 is_stmt 0 view .LVU131
 484 004c 8068     		ldr	r0, [r0, #8]
 485              	.LVL46:
 486              		.loc 1 371 37 view .LVU132
 487 004e 0B4B     		ldr	r3, .L36
 488              	.LVL47:
 489              		.loc 1 371 37 view .LVU133
ARM GAS  /tmp/cc5nsFM2.s 			page 24


 490 0050 1A68     		ldr	r2, [r3]
 491              		.loc 1 371 18 view .LVU134
 492 0052 B0FBF2F1 		udiv	r1, r0, r2
 493              	.LVL48:
 372:./lib/error.c ****         uint32_t nsec = error->time % HZ;
 494              		.loc 1 372 9 is_stmt 1 view .LVU135
 373:./lib/error.c ****         out_function(KERN_INFO "(%u.%06u) (%d)[ \"%s\":(%d)] %s free memory size:%db\n",sec ,nsec,e
 495              		.loc 1 373 9 view .LVU136
 496 0056 636A     		ldr	r3, [r4, #36]
 497 0058 0393     		str	r3, [sp, #12]
 498 005a 6369     		ldr	r3, [r4, #20]
 499 005c 0293     		str	r3, [sp, #8]
 500 005e E368     		ldr	r3, [r4, #12]
 501 0060 0193     		str	r3, [sp, #4]
 502 0062 2368     		ldr	r3, [r4]
 503 0064 0093     		str	r3, [sp]
 504 0066 A369     		ldr	r3, [r4, #24]
 505 0068 02FB1102 		mls	r2, r2, r1, r0
 506              	.LVL49:
 507              		.loc 1 373 9 is_stmt 0 view .LVU137
 508 006c 0448     		ldr	r0, .L36+4
 509 006e B047     		blx	r6
 510              	.LVL50:
 511              	.LVL51:
 512              	.L27:
 513              		.loc 1 373 9 view .LVU138
 514              	.LBE39:
 374:./lib/error.c ****     }
 375:./lib/error.c **** }...
 515              		.loc 1 375 1 view .LVU139
 516 0070 06B0     		add	sp, sp, #24
 517              	.LCFI11:
 518              		.cfi_def_cfa_offset 16
 519              		@ sp needed
 520 0072 70BD     		pop	{r4, r5, r6, pc}
 521              	.LVL52:
 522              	.L31:
 523              	.LCFI12:
 524              		.cfi_def_cfa_offset 0
 525              		.cfi_restore 4
 526              		.cfi_restore 5
 527              		.cfi_restore 6
 528              		.cfi_restore 14
 360:./lib/error.c ****     if(error == NULL) return -1;
 529              		.loc 1 360 30 discriminator 1 view .LVU140
 530 0074 4FF0FF30 		mov	r0, #-1
 531              	.LVL53:
 532              		.loc 1 375 1 view .LVU141
 533 0078 7047     		bx	lr
 534              	.L37:
 535 007a 00BF     		.align	2
 536              	.L36:
 537 007c 00000000 		.word	HZ
 538 0080 00000000 		.word	.LC1
 539              		.cfi_endproc
 540              	.LFE288:
 542              		.section	.rodata.l_error_exception.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cc5nsFM2.s 			page 25


 543              		.align	2
 544              	.LC2:
 545 0000 4552524F 		.ascii	"ERROR: EPERM: Operation not permitted\000"
 545      523A2045 
 545      5045524D 
 545      3A204F70 
 545      65726174 
 546 0026 0000     		.align	2
 547              	.LC3:
 548 0028 4552524F 		.ascii	"ERROR: ENOENT: No such file or directory\000"
 548      523A2045 
 548      4E4F454E 
 548      543A204E 
 548      6F207375 
 549 0051 000000   		.align	2
 550              	.LC4:
 551 0054 4552524F 		.ascii	"ERROR: ESRCH: No such process\000"
 551      523A2045 
 551      53524348 
 551      3A204E6F 
 551      20737563 
 552 0072 0000     		.align	2
 553              	.LC5:
 554 0074 5741524E 		.ascii	"WARN: EINTR: Interrupted system call\000"
 554      3A204549 
 554      4E54523A 
 554      20496E74 
 554      65727275 
 555 0099 000000   		.align	2
 556              	.LC6:
 557 009c 4552524F 		.ascii	"ERROR: EIO: I/O error\000"
 557      523A2045 
 557      494F3A20 
 557      492F4F20 
 557      6572726F 
 558 00b2 0000     		.align	2
 559              	.LC7:
 560 00b4 4552524F 		.ascii	"ERROR: ENXIO: No such device or address\000"
 560      523A2045 
 560      4E58494F 
 560      3A204E6F 
 560      20737563 
 561              		.align	2
 562              	.LC8:
 563 00dc 4552524F 		.ascii	"ERROR: E2BIG: Argument list too long\000"
 563      523A2045 
 563      32424947 
 563      3A204172 
 563      67756D65 
 564 0101 000000   		.align	2
 565              	.LC9:
 566 0104 4552524F 		.ascii	"ERROR: ENOEXEC: Exec format error\000"
 566      523A2045 
 566      4E4F4558 
 566      45433A20 
 566      45786563 
 567 0126 0000     		.align	2
ARM GAS  /tmp/cc5nsFM2.s 			page 26


 568              	.LC10:
 569 0128 4552524F 		.ascii	"ERROR: EBADF: Bad file descriptor\000"
 569      523A2045 
 569      42414446 
 569      3A204261 
 569      64206669 
 570 014a 0000     		.align	2
 571              	.LC11:
 572 014c 4552524F 		.ascii	"ERROR: ECHILD: No child processes\000"
 572      523A2045 
 572      4348494C 
 572      443A204E 
 572      6F206368 
 573 016e 0000     		.align	2
 574              	.LC12:
 575 0170 5741524E 		.ascii	"WARN: EAGAIN: Resource temporarily unavailable\000"
 575      3A204541 
 575      4741494E 
 575      3A205265 
 575      736F7572 
 576 019f 00       		.align	2
 577              	.LC13:
 578 01a0 4552524F 		.ascii	"ERROR: ENOMEM: Out of memory\000"
 578      523A2045 
 578      4E4F4D45 
 578      4D3A204F 
 578      7574206F 
 579 01bd 000000   		.align	2
 580              	.LC14:
 581 01c0 4552524F 		.ascii	"ERROR: EACCES: Permission denied\000"
 581      523A2045 
 581      41434345 
 581      533A2050 
 581      65726D69 
 582 01e1 000000   		.align	2
 583              	.LC15:
 584 01e4 4552524F 		.ascii	"ERROR: EFAULT: Bad address\000"
 584      523A2045 
 584      4641554C 
 584      543A2042 
 584      61642061 
 585 01ff 00       		.align	2
 586              	.LC16:
 587 0200 4552524F 		.ascii	"ERROR: ENOTBLK: Block device required\000"
 587      523A2045 
 587      4E4F5442 
 587      4C4B3A20 
 587      426C6F63 
 588 0226 0000     		.align	2
 589              	.LC17:
 590 0228 4552524F 		.ascii	"ERROR: EBUSY: Device or resource busy\000"
 590      523A2045 
 590      42555359 
 590      3A204465 
 590      76696365 
 591 024e 0000     		.align	2
 592              	.LC18:
ARM GAS  /tmp/cc5nsFM2.s 			page 27


 593 0250 4552524F 		.ascii	"ERROR: EEXIST: File exists\000"
 593      523A2045 
 593      45584953 
 593      543A2046 
 593      696C6520 
 594 026b 00       		.align	2
 595              	.LC19:
 596 026c 4552524F 		.ascii	"ERROR: EXDEV: Cross-device link\000"
 596      523A2045 
 596      58444556 
 596      3A204372 
 596      6F73732D 
 597              		.align	2
 598              	.LC20:
 599 028c 4552524F 		.ascii	"ERROR: ENODEV: No such device\000"
 599      523A2045 
 599      4E4F4445 
 599      563A204E 
 599      6F207375 
 600 02aa 0000     		.align	2
 601              	.LC21:
 602 02ac 4552524F 		.ascii	"ERROR: ENOTDIR: Not a directory\000"
 602      523A2045 
 602      4E4F5444 
 602      49523A20 
 602      4E6F7420 
 603              		.align	2
 604              	.LC22:
 605 02cc 4552524F 		.ascii	"ERROR: EISDIR: Is a directory\000"
 605      523A2045 
 605      49534449 
 605      523A2049 
 605      73206120 
 606 02ea 0000     		.align	2
 607              	.LC23:
 608 02ec 4552524F 		.ascii	"ERROR: EINVAL: Invalid argument\000"
 608      523A2045 
 608      494E5641 
 608      4C3A2049 
 608      6E76616C 
 609              		.align	2
 610              	.LC24:
 611 030c 4552524F 		.ascii	"ERROR: ENFILE: File table overflow\000"
 611      523A2045 
 611      4E46494C 
 611      453A2046 
 611      696C6520 
 612 032f 00       		.align	2
 613              	.LC25:
 614 0330 4552524F 		.ascii	"ERROR: EMFILE: Too many open files\000"
 614      523A2045 
 614      4D46494C 
 614      453A2054 
 614      6F6F206D 
 615 0353 00       		.align	2
 616              	.LC26:
 617 0354 4552524F 		.ascii	"ERROR: ENOTTY: Not a terminal\000"
ARM GAS  /tmp/cc5nsFM2.s 			page 28


 617      523A2045 
 617      4E4F5454 
 617      593A204E 
 617      6F742061 
 618 0372 0000     		.align	2
 619              	.LC27:
 620 0374 4552524F 		.ascii	"ERROR: ETXTBSY: Text file busy\000"
 620      523A2045 
 620      54585442 
 620      53593A20 
 620      54657874 
 621 0393 00       		.align	2
 622              	.LC28:
 623 0394 4552524F 		.ascii	"ERROR: EFBIG: File too large\000"
 623      523A2045 
 623      46424947 
 623      3A204669 
 623      6C652074 
 624 03b1 000000   		.align	2
 625              	.LC29:
 626 03b4 4552524F 		.ascii	"ERROR: ENOSPC: No space left on device\000"
 626      523A2045 
 626      4E4F5350 
 626      433A204E 
 626      6F207370 
 627 03db 00       		.align	2
 628              	.LC30:
 629 03dc 4552524F 		.ascii	"ERROR: ESPIPE: Illegal seek\000"
 629      523A2045 
 629      53504950 
 629      453A2049 
 629      6C6C6567 
 630              		.align	2
 631              	.LC31:
 632 03f8 4552524F 		.ascii	"ERROR: EROFS: Read-only file system\000"
 632      523A2045 
 632      524F4653 
 632      3A205265 
 632      61642D6F 
 633              		.align	2
 634              	.LC32:
 635 041c 4552524F 		.ascii	"ERROR: EMLINK: Too many links\000"
 635      523A2045 
 635      4D4C494E 
 635      4B3A2054 
 635      6F6F206D 
 636 043a 0000     		.align	2
 637              	.LC33:
 638 043c 4552524F 		.ascii	"ERROR: EPIPE: Broken pipe\000"
 638      523A2045 
 638      50495045 
 638      3A204272 
 638      6F6B656E 
 639 0456 0000     		.align	2
 640              	.LC34:
 641 0458 4552524F 		.ascii	"ERROR: EDOM: Math argument out of domain\000"
 641      523A2045 
ARM GAS  /tmp/cc5nsFM2.s 			page 29


 641      444F4D3A 
 641      204D6174 
 641      68206172 
 642 0481 000000   		.align	2
 643              	.LC35:
 644 0484 4552524F 		.ascii	"ERROR: ERANGE: Math result not representable\000"
 644      523A2045 
 644      52414E47 
 644      453A204D 
 644      61746820 
 645 04b1 000000   		.align	2
 646              	.LC36:
 647 04b4 4552524F 		.ascii	"ERROR: EDEADLK: Resource deadlock would occur\000"
 647      523A2045 
 647      44454144 
 647      4C4B3A20 
 647      5265736F 
 648 04e2 0000     		.align	2
 649              	.LC37:
 650 04e4 4552524F 		.ascii	"ERROR: ENAMETOOLONG: File name too long\000"
 650      523A2045 
 650      4E414D45 
 650      544F4F4C 
 650      4F4E473A 
 651              		.align	2
 652              	.LC38:
 653 050c 4552524F 		.ascii	"ERROR: ENOLCK: No record locks available\000"
 653      523A2045 
 653      4E4F4C43 
 653      4B3A204E 
 653      6F207265 
 654 0535 000000   		.align	2
 655              	.LC39:
 656 0538 4552524F 		.ascii	"ERROR: ENOSYS: Function not implemented\000"
 656      523A2045 
 656      4E4F5359 
 656      533A2046 
 656      756E6374 
 657              		.align	2
 658              	.LC40:
 659 0560 4552524F 		.ascii	"ERROR: ENOTEMPTY: Directory not empty\000"
 659      523A2045 
 659      4E4F5445 
 659      4D505459 
 659      3A204469 
 660 0586 0000     		.align	2
 661              	.LC41:
 662 0588 4552524F 		.ascii	"ERROR: ELOOP: Too many symbolic links encountered\000"
 662      523A2045 
 662      4C4F4F50 
 662      3A20546F 
 662      6F206D61 
 663 05ba 0000     		.align	2
 664              	.LC42:
 665 05bc 4552524F 		.ascii	"ERROR: ENOTSOCK: Socket operation on non-socket\000"
 665      523A2045 
 665      4E4F5453 
ARM GAS  /tmp/cc5nsFM2.s 			page 30


 665      4F434B3A 
 665      20536F63 
 666              		.align	2
 667              	.LC43:
 668 05ec 4552524F 		.ascii	"ERROR: EDESTADDRREQ: Destination address required\000"
 668      523A2045 
 668      44455354 
 668      41444452 
 668      5245513A 
 669 061e 0000     		.align	2
 670              	.LC44:
 671 0620 4552524F 		.ascii	"ERROR: EMSGSIZE: Message too long\000"
 671      523A2045 
 671      4D534753 
 671      495A453A 
 671      204D6573 
 672 0642 0000     		.align	2
 673              	.LC45:
 674 0644 4552524F 		.ascii	"ERROR: EPROTOTYPE: Protocol wrong type for socket\000"
 674      523A2045 
 674      50524F54 
 674      4F545950 
 674      453A2050 
 675 0676 0000     		.align	2
 676              	.LC46:
 677 0678 4552524F 		.ascii	"ERROR: ENOPROTOOPT: Protocol not available\000"
 677      523A2045 
 677      4E4F5052 
 677      4F544F4F 
 677      50543A20 
 678 06a3 00       		.align	2
 679              	.LC47:
 680 06a4 4552524F 		.ascii	"ERROR: EPROTONOSUPPORT: Protocol not supported\000"
 680      523A2045 
 680      50524F54 
 680      4F4E4F53 
 680      5550504F 
 681 06d3 00       		.align	2
 682              	.LC48:
 683 06d4 4552524F 		.ascii	"ERROR: ESOCKTNOSUPPORT: Socket type not supported\000"
 683      523A2045 
 683      534F434B 
 683      544E4F53 
 683      5550504F 
 684 0706 0000     		.align	2
 685              	.LC49:
 686 0708 4552524F 		.ascii	"ERROR: EOPNOTSUPP: Operation not supported\000"
 686      523A2045 
 686      4F504E4F 
 686      54535550 
 686      503A204F 
 687 0733 00       		.align	2
 688              	.LC50:
 689 0734 4552524F 		.ascii	"ERROR: EPFNOSUPPORT: Protocol family not supported\000"
 689      523A2045 
 689      50464E4F 
 689      53555050 
ARM GAS  /tmp/cc5nsFM2.s 			page 31


 689      4F52543A 
 690 0767 00       		.align	2
 691              	.LC51:
 692 0768 4552524F 		.ascii	"ERROR: EAFNOSUPPORT: Address family not supported\000"
 692      523A2045 
 692      41464E4F 
 692      53555050 
 692      4F52543A 
 693 079a 0000     		.align	2
 694              	.LC52:
 695 079c 4552524F 		.ascii	"ERROR: EADDRINUSE: Address already in use\000"
 695      523A2045 
 695      41444452 
 695      494E5553 
 695      453A2041 
 696 07c6 0000     		.align	2
 697              	.LC53:
 698 07c8 4552524F 		.ascii	"ERROR: EADDRNOTAVAIL: Cannot assign requested addre"
 698      523A2045 
 698      41444452 
 698      4E4F5441 
 698      5641494C 
 699 07fb 737300   		.ascii	"ss\000"
 700 07fe 0000     		.align	2
 701              	.LC54:
 702 0800 4552524F 		.ascii	"ERROR: ENETDOWN: Network is down\000"
 702      523A2045 
 702      4E455444 
 702      4F574E3A 
 702      204E6574 
 703 0821 000000   		.align	2
 704              	.LC55:
 705 0824 4552524F 		.ascii	"ERROR: ENETUNREACH: Network is unreachable\000"
 705      523A2045 
 705      4E455455 
 705      4E524541 
 705      43483A20 
 706 084f 00       		.align	2
 707              	.LC56:
 708 0850 4552524F 		.ascii	"ERROR: ENETRESET: Network dropped connection on res"
 708      523A2045 
 708      4E455452 
 708      45534554 
 708      3A204E65 
 709 0883 657400   		.ascii	"et\000"
 710 0886 0000     		.align	2
 711              	.LC57:
 712 0888 4552524F 		.ascii	"ERROR: ECONNABORTED: Software caused connection abo"
 712      523A2045 
 712      434F4E4E 
 712      41424F52 
 712      5445443A 
 713 08bb 727400   		.ascii	"rt\000"
 714 08be 0000     		.align	2
 715              	.LC58:
 716 08c0 4552524F 		.ascii	"ERROR: ECONNRESET: Connection reset by peer\000"
 716      523A2045 
ARM GAS  /tmp/cc5nsFM2.s 			page 32


 716      434F4E4E 
 716      52455345 
 716      543A2043 
 717              		.align	2
 718              	.LC59:
 719 08ec 4552524F 		.ascii	"ERROR: ENOBUFS: No buffer space available\000"
 719      523A2045 
 719      4E4F4255 
 719      46533A20 
 719      4E6F2062 
 720 0916 0000     		.align	2
 721              	.LC60:
 722 0918 4552524F 		.ascii	"ERROR: EISCONN: Transport endpoint is already conne"
 722      523A2045 
 722      4953434F 
 722      4E4E3A20 
 722      5472616E 
 723 094b 63746564 		.ascii	"cted\000"
 723      00
 724              		.align	2
 725              	.LC61:
 726 0950 4552524F 		.ascii	"ERROR: ENOTCONN: Transport endpoint is not connecte"
 726      523A2045 
 726      4E4F5443 
 726      4F4E4E3A 
 726      20547261 
 727 0983 6400     		.ascii	"d\000"
 728 0985 000000   		.align	2
 729              	.LC62:
 730 0988 4552524F 		.ascii	"ERROR: ESHUTDOWN: Cannot send after transport endpo"
 730      523A2045 
 730      53485554 
 730      444F574E 
 730      3A204361 
 731 09bb 696E7420 		.ascii	"int shutdown\000"
 731      73687574 
 731      646F776E 
 731      00
 732              		.align	2
 733              	.LC63:
 734 09c8 4552524F 		.ascii	"ERROR: ETOOMANYREFS: Too many references\000"
 734      523A2045 
 734      544F4F4D 
 734      414E5952 
 734      4546533A 
 735 09f1 000000   		.align	2
 736              	.LC64:
 737 09f4 4552524F 		.ascii	"ERROR: ETIMEDOUT: Connection timed out\000"
 737      523A2045 
 737      54494D45 
 737      444F5554 
 737      3A20436F 
 738 0a1b 00       		.align	2
 739              	.LC65:
 740 0a1c 4552524F 		.ascii	"ERROR: ECONNREFUSED: Connection refused\000"
 740      523A2045 
 740      434F4E4E 
ARM GAS  /tmp/cc5nsFM2.s 			page 33


 740      52454655 
 740      5345443A 
 741              		.align	2
 742              	.LC66:
 743 0a44 4552524F 		.ascii	"ERROR: EHOSTDOWN: Host is down\000"
 743      523A2045 
 743      484F5354 
 743      444F574E 
 743      3A20486F 
 744 0a63 00       		.align	2
 745              	.LC67:
 746 0a64 4552524F 		.ascii	"ERROR: EHOSTUNREACH: No route to host\000"
 746      523A2045 
 746      484F5354 
 746      554E5245 
 746      4143483A 
 747 0a8a 0000     		.align	2
 748              	.LC68:
 749 0a8c 494E464F 		.ascii	"INFO: EALREADY: Operation already in progress\000"
 749      3A204541 
 749      4C524541 
 749      44593A20 
 749      4F706572 
 750 0aba 0000     		.align	2
 751              	.LC69:
 752 0abc 494E464F 		.ascii	"INFO: EINPROGRESS: Operation now in progress\000"
 752      3A204549 
 752      4E50524F 
 752      47524553 
 752      533A204F 
 753 0ae9 000000   		.align	2
 754              	.LC70:
 755 0aec 4552524F 		.ascii	"ERROR: ESTALE: Stale file handle\000"
 755      523A2045 
 755      5354414C 
 755      453A2053 
 755      74616C65 
 756 0b0d 000000   		.align	2
 757              	.LC71:
 758 0b10 4552524F 		.ascii	"ERROR: EUCLEAN: Structure needs cleaning\000"
 758      523A2045 
 758      55434C45 
 758      414E3A20 
 758      53747275 
 759 0b39 000000   		.align	2
 760              	.LC72:
 761 0b3c 4552524F 		.ascii	"ERROR: ENOTNAM: Not a XENIX named type file\000"
 761      523A2045 
 761      4E4F544E 
 761      414D3A20 
 761      4E6F7420 
 762              		.align	2
 763              	.LC73:
 764 0b68 4552524F 		.ascii	"ERROR: ENAVAIL: No XENIX semaphores available\000"
 764      523A2045 
 764      4E415641 
 764      494C3A20 
ARM GAS  /tmp/cc5nsFM2.s 			page 34


 764      4E6F2058 
 765 0b96 0000     		.align	2
 766              	.LC74:
 767 0b98 4552524F 		.ascii	"ERROR: EISNAM: Is a named type file\000"
 767      523A2045 
 767      49534E41 
 767      4D3A2049 
 767      73206120 
 768              		.align	2
 769              	.LC75:
 770 0bbc 4552524F 		.ascii	"ERROR: EREMOTEIO: Remote I/O error\000"
 770      523A2045 
 770      52454D4F 
 770      5445494F 
 770      3A205265 
 771 0bdf 00       		.align	2
 772              	.LC76:
 773 0be0 4552524F 		.ascii	"ERROR: EDQUOT: Disk quota exceeded\000"
 773      523A2045 
 773      4451554F 
 773      543A2044 
 773      69736B20 
 774 0c03 00       		.align	2
 775              	.LC77:
 776 0c04 4552524F 		.ascii	"ERROR: ENOMEDIUM: No medium found\000"
 776      523A2045 
 776      4E4F4D45 
 776      4449554D 
 776      3A204E6F 
 777 0c26 0000     		.align	2
 778              	.LC78:
 779 0c28 4552524F 		.ascii	"ERROR: EMEDIUMTYPE: Wrong medium type\000"
 779      523A2045 
 779      4D454449 
 779      554D5459 
 779      50453A20 
 780 0c4e 0000     		.align	2
 781              	.LC79:
 782 0c50 5741524E 		.ascii	"WARN: ECANCELED: Operation canceled\000"
 782      3A204543 
 782      414E4345 
 782      4C45443A 
 782      204F7065 
 783              		.align	2
 784              	.LC80:
 785 0c74 4552524F 		.ascii	"ERROR: ENOKEY: Required key not available\000"
 785      523A2045 
 785      4E4F4B45 
 785      593A2052 
 785      65717569 
 786 0c9e 0000     		.align	2
 787              	.LC81:
 788 0ca0 4552524F 		.ascii	"ERROR: EKEYEXPIRED: Key has expired\000"
 788      523A2045 
 788      4B455945 
 788      58504952 
 788      45443A20 
ARM GAS  /tmp/cc5nsFM2.s 			page 35


 789              		.align	2
 790              	.LC82:
 791 0cc4 4552524F 		.ascii	"ERROR: EKEYREVOKED: Key has been revoked\000"
 791      523A2045 
 791      4B455952 
 791      45564F4B 
 791      45443A20 
 792 0ced 000000   		.align	2
 793              	.LC83:
 794 0cf0 4552524F 		.ascii	"ERROR: EKEYREJECTED: Key was rejected by service\000"
 794      523A2045 
 794      4B455952 
 794      454A4543 
 794      5445443A 
 795 0d21 000000   		.align	2
 796              	.LC84:
 797 0d24 4552524F 		.ascii	"ERROR: EOWNERDEAD: Owner died\000"
 797      523A2045 
 797      4F574E45 
 797      52444541 
 797      443A204F 
 798 0d42 0000     		.align	2
 799              	.LC85:
 800 0d44 4552524F 		.ascii	"ERROR: ENOTRECOVERABLE: State not recoverable\000"
 800      523A2045 
 800      4E4F5452 
 800      45434F56 
 800      45524142 
 801 0d72 0000     		.align	2
 802              	.LC86:
 803 0d74 4552524F 		.ascii	"ERROR: ERFKILL: Operation not possible due to RF-ki"
 803      523A2045 
 803      52464B49 
 803      4C4C3A20 
 803      4F706572 
 804 0da7 6C6C00   		.ascii	"ll\000"
 805 0daa 0000     		.align	2
 806              	.LC87:
 807 0dac 4552524F 		.ascii	"ERROR: EHWPOISON: Memory page has hardware error\000"
 807      523A2045 
 807      4857504F 
 807      49534F4E 
 807      3A204D65 
 808 0ddd 000000   		.align	2
 809              	.LC88:
 810 0de0 4552524F 		.ascii	"ERROR: Unknown error code\000"
 810      523A2055 
 810      6E6B6E6F 
 810      776E2065 
 810      72726F72 
 811              		.section	.text.l_error_exception,"ax",%progbits
 812              		.align	1
 813              		.global	l_error_exception
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 818              	l_error_exception:
ARM GAS  /tmp/cc5nsFM2.s 			page 36


 819              	.LVL54:
 820              	.LFB287:
  60:./lib/error.c **** {
 821              		.loc 1 60 1 is_stmt 1 view -0
 822              		.cfi_startproc
 823              		@ args = 4, pretend = 4, frame = 8
 824              		@ frame_needed = 0, uses_anonymous_args = 1
  61:./lib/error.c ****     if(error == NULL) return;
 825              		.loc 1 61 5 view .LVU143
  61:./lib/error.c ****     if(error == NULL) return;
 826              		.loc 1 61 7 is_stmt 0 view .LVU144
 827 0000 0028     		cmp	r0, #0
 828 0002 00F00783 		beq	.L133
  60:./lib/error.c **** {
 829              		.loc 1 60 1 view .LVU145
 830 0006 08B4     		push	{r3}
 831              	.LCFI13:
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 3, -4
 834 0008 30B5     		push	{r4, r5, lr}
 835              	.LCFI14:
 836              		.cfi_def_cfa_offset 16
 837              		.cfi_offset 4, -16
 838              		.cfi_offset 5, -12
 839              		.cfi_offset 14, -8
 840 000a 82B0     		sub	sp, sp, #8
 841              	.LCFI15:
 842              		.cfi_def_cfa_offset 24
 843 000c 0C46     		mov	r4, r1
 844 000e 0546     		mov	r5, r0
  62:./lib/error.c ****     if(errnum >= 0) return;
 845              		.loc 1 62 5 is_stmt 1 view .LVU146
  62:./lib/error.c ****     if(errnum >= 0) return;
 846              		.loc 1 62 7 is_stmt 0 view .LVU147
 847 0010 0029     		cmp	r1, #0
 848 0012 04DB     		blt	.L136
 849              	.LVL55:
 850              	.L38:
 355:./lib/error.c **** }
 851              		.loc 1 355 1 view .LVU148
 852 0014 02B0     		add	sp, sp, #8
 853              	.LCFI16:
 854              		.cfi_remember_state
 855              		.cfi_def_cfa_offset 16
 856              		@ sp needed
 857 0016 BDE83040 		pop	{r4, r5, lr}
 858              	.LCFI17:
 859              		.cfi_restore 14
 860              		.cfi_restore 5
 861              		.cfi_restore 4
 862              		.cfi_def_cfa_offset 4
 863              	.LVL56:
 355:./lib/error.c **** }
 864              		.loc 1 355 1 view .LVU149
 865 001a 01B0     		add	sp, sp, #4
 866              	.LCFI18:
 867              		.cfi_restore 3
ARM GAS  /tmp/cc5nsFM2.s 			page 37


 868              		.cfi_def_cfa_offset 0
 869 001c 7047     		bx	lr
 870              	.LVL57:
 871              	.L136:
 872              	.LCFI19:
 873              		.cfi_restore_state
  63:./lib/error.c ****     error->errnum = errnum;
 874              		.loc 1 63 5 is_stmt 1 view .LVU150
  63:./lib/error.c ****     error->errnum = errnum;
 875              		.loc 1 63 19 is_stmt 0 view .LVU151
 876 001e 4160     		str	r1, [r0, #4]
  64:./lib/error.c ****     error->line = line;
 877              		.loc 1 64 5 is_stmt 1 view .LVU152
  64:./lib/error.c ****     error->line = line;
 878              		.loc 1 64 17 is_stmt 0 view .LVU153
 879 0020 C260     		str	r2, [r0, #12]
  65:./lib/error.c ****     error->time = ktime_get();
 880              		.loc 1 65 5 is_stmt 1 view .LVU154
  65:./lib/error.c ****     error->time = ktime_get();
 881              		.loc 1 65 19 is_stmt 0 view .LVU155
 882 0022 FFF7FEFF 		bl	ktime_get
 883              	.LVL58:
  65:./lib/error.c ****     error->time = ktime_get();
 884              		.loc 1 65 17 discriminator 1 view .LVU156
 885 0026 A860     		str	r0, [r5, #8]
  66:./lib/error.c ****     error->haper_size = get_global_heap_size();
 886              		.loc 1 66 5 is_stmt 1 view .LVU157
  66:./lib/error.c ****     error->haper_size = get_global_heap_size();
 887              		.loc 1 66 25 is_stmt 0 view .LVU158
 888 0028 FFF7FEFF 		bl	get_global_heap_size
 889              	.LVL59:
  66:./lib/error.c ****     error->haper_size = get_global_heap_size();
 890              		.loc 1 66 23 discriminator 1 view .LVU159
 891 002c 6862     		str	r0, [r5, #36]
  67:./lib/error.c ****     error->error_count++;
 892              		.loc 1 67 5 is_stmt 1 view .LVU160
  67:./lib/error.c ****     error->error_count++;
 893              		.loc 1 67 10 is_stmt 0 view .LVU161
 894 002e AB69     		ldr	r3, [r5, #24]
  67:./lib/error.c ****     error->error_count++;
 895              		.loc 1 67 23 view .LVU162
 896 0030 0133     		adds	r3, r3, #1
 897 0032 AB61     		str	r3, [r5, #24]
  68:./lib/error.c ****     if (errmsg != NULL) {
 898              		.loc 1 68 5 is_stmt 1 view .LVU163
  68:./lib/error.c ****     if (errmsg != NULL) {
 899              		.loc 1 68 8 is_stmt 0 view .LVU164
 900 0034 059B     		ldr	r3, [sp, #20]
 901 0036 93B1     		cbz	r3, .L40
 902              	.LBB40:
  69:./lib/error.c ****         va_list args;
 903              		.loc 1 69 9 is_stmt 1 view .LVU165
  70:./lib/error.c ****         va_start(args, errmsg);
 904              		.loc 1 70 9 view .LVU166
 905 0038 06AB     		add	r3, sp, #24
 906 003a 0193     		str	r3, [sp, #4]
  71:./lib/error.c ****         vsnprintf(error->errmsg, error->errmsg_size, errmsg, args);
ARM GAS  /tmp/cc5nsFM2.s 			page 38


 907              		.loc 1 71 9 view .LVU167
 908 003c 059A     		ldr	r2, [sp, #20]
 909 003e 2969     		ldr	r1, [r5, #16]
 910 0040 6869     		ldr	r0, [r5, #20]
 911 0042 FFF7FEFF 		bl	vsnprintf
 912              	.LVL60:
  72:./lib/error.c ****         va_end(args);
 913              		.loc 1 72 9 view .LVU168
 914              	.L41:
  72:./lib/error.c ****         va_end(args);
 915              		.loc 1 72 9 is_stmt 0 view .LVU169
 916              	.LBE40:
 344:./lib/error.c ****     if (error->mode == ERROR_SAVE_ONLY) {
 917              		.loc 1 344 5 is_stmt 1 view .LVU170
 344:./lib/error.c ****     if (error->mode == ERROR_SAVE_ONLY) {
 918              		.loc 1 344 14 is_stmt 0 view .LVU171
 919 0046 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 344:./lib/error.c ****     if (error->mode == ERROR_SAVE_ONLY) {
 920              		.loc 1 344 8 view .LVU172
 921 0048 002B     		cmp	r3, #0
 922 004a E3D0     		beq	.L38
 347:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_PRINT_TO_LOG || error->mode == ERROR_SAVE_AND_BLOCK) {
 923              		.loc 1 347 5 is_stmt 1 view .LVU173
 347:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_PRINT_TO_LOG || error->mode == ERROR_SAVE_AND_BLOCK) {
 924              		.loc 1 347 52 is_stmt 0 view .LVU174
 925 004c 013B     		subs	r3, r3, #1
 926 004e DBB2     		uxtb	r3, r3
 347:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_PRINT_TO_LOG || error->mode == ERROR_SAVE_AND_BLOCK) {
 927              		.loc 1 347 8 view .LVU175
 928 0050 012B     		cmp	r3, #1
 929 0052 40F2D882 		bls	.L137
 930              	.L130:
 350:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_BLOCK) 
 931              		.loc 1 350 5 is_stmt 1 view .LVU176
 350:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_BLOCK) 
 932              		.loc 1 350 14 is_stmt 0 view .LVU177
 933 0056 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 350:./lib/error.c ****     if (error->mode == ERROR_SAVE_AND_BLOCK) 
 934              		.loc 1 350 8 view .LVU178
 935 0058 022B     		cmp	r3, #2
 936 005a DBD1     		bne	.L38
 937              	.L131:
 352:./lib/error.c ****         while (1);
 938              		.loc 1 352 9 is_stmt 1 view .LVU179
 352:./lib/error.c ****         while (1);
 939              		.loc 1 352 15 view .LVU180
 940 005c FEE7     		b	.L131
 941              	.LVL61:
 942              	.L40:
  76:./lib/error.c ****         switch (errnum) {
 943              		.loc 1 76 9 view .LVU181
 944 005e 8B34     		adds	r4, r4, #139
 945              	.LVL62:
  76:./lib/error.c ****         switch (errnum) {
 946              		.loc 1 76 9 is_stmt 0 view .LVU182
 947 0060 8A2C     		cmp	r4, #138
 948 0062 00F2CB82 		bhi	.L42
ARM GAS  /tmp/cc5nsFM2.s 			page 39


 949 0066 DFE814F0 		tbh	[pc, r4, lsl #1]
 950              	.L44:
 951 006a C402     		.2byte	(.L129-.L44)/2
 952 006c BF02     		.2byte	(.L128-.L44)/2
 953 006e BA02     		.2byte	(.L127-.L44)/2
 954 0070 B502     		.2byte	(.L126-.L44)/2
 955 0072 B002     		.2byte	(.L125-.L44)/2
 956 0074 AB02     		.2byte	(.L124-.L44)/2
 957 0076 A602     		.2byte	(.L123-.L44)/2
 958 0078 A102     		.2byte	(.L122-.L44)/2
 959 007a 9C02     		.2byte	(.L121-.L44)/2
 960 007c 9702     		.2byte	(.L120-.L44)/2
 961 007e 9202     		.2byte	(.L119-.L44)/2
 962 0080 C902     		.2byte	(.L42-.L44)/2
 963 0082 C902     		.2byte	(.L42-.L44)/2
 964 0084 C902     		.2byte	(.L42-.L44)/2
 965 0086 C902     		.2byte	(.L42-.L44)/2
 966 0088 C902     		.2byte	(.L42-.L44)/2
 967 008a C902     		.2byte	(.L42-.L44)/2
 968 008c C902     		.2byte	(.L42-.L44)/2
 969 008e 8802     		.2byte	(.L118-.L44)/2
 970 0090 8302     		.2byte	(.L117-.L44)/2
 971 0092 EE01     		.2byte	(.L116-.L44)/2
 972 0094 E901     		.2byte	(.L115-.L44)/2
 973 0096 E401     		.2byte	(.L114-.L44)/2
 974 0098 C902     		.2byte	(.L42-.L44)/2
 975 009a C902     		.2byte	(.L42-.L44)/2
 976 009c C902     		.2byte	(.L42-.L44)/2
 977 009e C902     		.2byte	(.L42-.L44)/2
 978 00a0 C902     		.2byte	(.L42-.L44)/2
 979 00a2 C902     		.2byte	(.L42-.L44)/2
 980 00a4 C902     		.2byte	(.L42-.L44)/2
 981 00a6 C902     		.2byte	(.L42-.L44)/2
 982 00a8 C902     		.2byte	(.L42-.L44)/2
 983 00aa C902     		.2byte	(.L42-.L44)/2
 984 00ac C902     		.2byte	(.L42-.L44)/2
 985 00ae C902     		.2byte	(.L42-.L44)/2
 986 00b0 C902     		.2byte	(.L42-.L44)/2
 987 00b2 C902     		.2byte	(.L42-.L44)/2
 988 00b4 C902     		.2byte	(.L42-.L44)/2
 989 00b6 C902     		.2byte	(.L42-.L44)/2
 990 00b8 C902     		.2byte	(.L42-.L44)/2
 991 00ba C902     		.2byte	(.L42-.L44)/2
 992 00bc C902     		.2byte	(.L42-.L44)/2
 993 00be C902     		.2byte	(.L42-.L44)/2
 994 00c0 C902     		.2byte	(.L42-.L44)/2
 995 00c2 C902     		.2byte	(.L42-.L44)/2
 996 00c4 C902     		.2byte	(.L42-.L44)/2
 997 00c6 C902     		.2byte	(.L42-.L44)/2
 998 00c8 C902     		.2byte	(.L42-.L44)/2
 999 00ca C902     		.2byte	(.L42-.L44)/2
 1000 00cc C902     		.2byte	(.L42-.L44)/2
 1001 00ce C902     		.2byte	(.L42-.L44)/2
 1002 00d0 C902     		.2byte	(.L42-.L44)/2
 1003 00d2 C902     		.2byte	(.L42-.L44)/2
 1004 00d4 C902     		.2byte	(.L42-.L44)/2
 1005 00d6 C902     		.2byte	(.L42-.L44)/2
ARM GAS  /tmp/cc5nsFM2.s 			page 40


 1006 00d8 C902     		.2byte	(.L42-.L44)/2
 1007 00da C902     		.2byte	(.L42-.L44)/2
 1008 00dc C902     		.2byte	(.L42-.L44)/2
 1009 00de C902     		.2byte	(.L42-.L44)/2
 1010 00e0 C902     		.2byte	(.L42-.L44)/2
 1011 00e2 C902     		.2byte	(.L42-.L44)/2
 1012 00e4 4401     		.2byte	(.L113-.L44)/2
 1013 00e6 3F01     		.2byte	(.L112-.L44)/2
 1014 00e8 C902     		.2byte	(.L42-.L44)/2
 1015 00ea C902     		.2byte	(.L42-.L44)/2
 1016 00ec C902     		.2byte	(.L42-.L44)/2
 1017 00ee C902     		.2byte	(.L42-.L44)/2
 1018 00f0 C902     		.2byte	(.L42-.L44)/2
 1019 00f2 C902     		.2byte	(.L42-.L44)/2
 1020 00f4 DF01     		.2byte	(.L111-.L44)/2
 1021 00f6 8D02     		.2byte	(.L110-.L44)/2
 1022 00f8 C902     		.2byte	(.L42-.L44)/2
 1023 00fa C902     		.2byte	(.L42-.L44)/2
 1024 00fc 4901     		.2byte	(.L109-.L44)/2
 1025 00fe D001     		.2byte	(.L108-.L44)/2
 1026 0100 CB01     		.2byte	(.L107-.L44)/2
 1027 0102 3A01     		.2byte	(.L106-.L44)/2
 1028 0104 4E01     		.2byte	(.L105-.L44)/2
 1029 0106 C601     		.2byte	(.L104-.L44)/2
 1030 0108 C101     		.2byte	(.L103-.L44)/2
 1031 010a BC01     		.2byte	(.L102-.L44)/2
 1032 010c B701     		.2byte	(.L101-.L44)/2
 1033 010e B201     		.2byte	(.L100-.L44)/2
 1034 0110 AD01     		.2byte	(.L99-.L44)/2
 1035 0112 A801     		.2byte	(.L98-.L44)/2
 1036 0114 A301     		.2byte	(.L97-.L44)/2
 1037 0116 9E01     		.2byte	(.L96-.L44)/2
 1038 0118 9901     		.2byte	(.L95-.L44)/2
 1039 011a 9401     		.2byte	(.L94-.L44)/2
 1040 011c 8F01     		.2byte	(.L93-.L44)/2
 1041 011e 8A01     		.2byte	(.L92-.L44)/2
 1042 0120 8501     		.2byte	(.L91-.L44)/2
 1043 0122 8001     		.2byte	(.L90-.L44)/2
 1044 0124 7B01     		.2byte	(.L89-.L44)/2
 1045 0126 7601     		.2byte	(.L88-.L44)/2
 1046 0128 7101     		.2byte	(.L87-.L44)/2
 1047 012a 6C01     		.2byte	(.L86-.L44)/2
 1048 012c 6701     		.2byte	(.L85-.L44)/2
 1049 012e 6201     		.2byte	(.L84-.L44)/2
 1050 0130 5D01     		.2byte	(.L83-.L44)/2
 1051 0132 5801     		.2byte	(.L82-.L44)/2
 1052 0134 5301     		.2byte	(.L81-.L44)/2
 1053 0136 D501     		.2byte	(.L80-.L44)/2
 1054 0138 DA01     		.2byte	(.L79-.L44)/2
 1055 013a BD00     		.2byte	(.L78-.L44)/2
 1056 013c 3001     		.2byte	(.L77-.L44)/2
 1057 013e 2B01     		.2byte	(.L76-.L44)/2
 1058 0140 2601     		.2byte	(.L75-.L44)/2
 1059 0142 2101     		.2byte	(.L74-.L44)/2
 1060 0144 1C01     		.2byte	(.L73-.L44)/2
 1061 0146 1701     		.2byte	(.L72-.L44)/2
 1062 0148 1201     		.2byte	(.L71-.L44)/2
ARM GAS  /tmp/cc5nsFM2.s 			page 41


 1063 014a 0D01     		.2byte	(.L70-.L44)/2
 1064 014c 0801     		.2byte	(.L69-.L44)/2
 1065 014e 0301     		.2byte	(.L68-.L44)/2
 1066 0150 FE00     		.2byte	(.L67-.L44)/2
 1067 0152 F900     		.2byte	(.L66-.L44)/2
 1068 0154 F400     		.2byte	(.L65-.L44)/2
 1069 0156 EF00     		.2byte	(.L64-.L44)/2
 1070 0158 EA00     		.2byte	(.L63-.L44)/2
 1071 015a E500     		.2byte	(.L62-.L44)/2
 1072 015c E000     		.2byte	(.L61-.L44)/2
 1073 015e DB00     		.2byte	(.L60-.L44)/2
 1074 0160 D600     		.2byte	(.L59-.L44)/2
 1075 0162 D100     		.2byte	(.L58-.L44)/2
 1076 0164 CC00     		.2byte	(.L57-.L44)/2
 1077 0166 C700     		.2byte	(.L56-.L44)/2
 1078 0168 C200     		.2byte	(.L55-.L44)/2
 1079 016a 3501     		.2byte	(.L54-.L44)/2
 1080 016c B800     		.2byte	(.L53-.L44)/2
 1081 016e B300     		.2byte	(.L52-.L44)/2
 1082 0170 AE00     		.2byte	(.L51-.L44)/2
 1083 0172 A900     		.2byte	(.L50-.L44)/2
 1084 0174 A400     		.2byte	(.L49-.L44)/2
 1085 0176 9F00     		.2byte	(.L48-.L44)/2
 1086 0178 9A00     		.2byte	(.L47-.L44)/2
 1087 017a 9500     		.2byte	(.L46-.L44)/2
 1088 017c 9000     		.2byte	(.L45-.L44)/2
 1089 017e 8B00     		.2byte	(.L43-.L44)/2
 1090              		.p2align 1
 1091              	.L43:
  78:./lib/error.c ****                 __write_error_message(error, "ERROR: EPERM: Operation not permitted");
 1092              		.loc 1 78 17 is_stmt 1 view .LVU183
 1093 0180 B349     		ldr	r1, .L138
 1094 0182 2846     		mov	r0, r5
 1095 0184 FFF7FEFF 		bl	__write_error_message
 1096              	.LVL63:
  79:./lib/error.c ****                 break;
 1097              		.loc 1 79 17 view .LVU184
 1098 0188 5DE7     		b	.L41
 1099              	.L45:
  81:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOENT: No such file or directory");
 1100              		.loc 1 81 17 view .LVU185
 1101 018a B249     		ldr	r1, .L138+4
 1102 018c 2846     		mov	r0, r5
 1103 018e FFF7FEFF 		bl	__write_error_message
 1104              	.LVL64:
  82:./lib/error.c ****                 break;
 1105              		.loc 1 82 17 view .LVU186
 1106 0192 58E7     		b	.L41
 1107              	.L46:
  84:./lib/error.c ****                 __write_error_message(error, "ERROR: ESRCH: No such process");
 1108              		.loc 1 84 17 view .LVU187
 1109 0194 B049     		ldr	r1, .L138+8
 1110 0196 2846     		mov	r0, r5
 1111 0198 FFF7FEFF 		bl	__write_error_message
 1112              	.LVL65:
  85:./lib/error.c ****                 break;
 1113              		.loc 1 85 17 view .LVU188
ARM GAS  /tmp/cc5nsFM2.s 			page 42


 1114 019c 53E7     		b	.L41
 1115              	.L47:
  87:./lib/error.c ****                 __write_error_message(error, "WARN: EINTR: Interrupted system call");
 1116              		.loc 1 87 17 view .LVU189
 1117 019e AF49     		ldr	r1, .L138+12
 1118 01a0 2846     		mov	r0, r5
 1119 01a2 FFF7FEFF 		bl	__write_error_message
 1120              	.LVL66:
  88:./lib/error.c ****                 break;
 1121              		.loc 1 88 17 view .LVU190
 1122 01a6 4EE7     		b	.L41
 1123              	.L48:
  90:./lib/error.c ****                 __write_error_message(error, "ERROR: EIO: I/O error");
 1124              		.loc 1 90 17 view .LVU191
 1125 01a8 AD49     		ldr	r1, .L138+16
 1126 01aa 2846     		mov	r0, r5
 1127 01ac FFF7FEFF 		bl	__write_error_message
 1128              	.LVL67:
  91:./lib/error.c ****                 break;
 1129              		.loc 1 91 17 view .LVU192
 1130 01b0 49E7     		b	.L41
 1131              	.L49:
  93:./lib/error.c ****                 __write_error_message(error, "ERROR: ENXIO: No such device or address");
 1132              		.loc 1 93 17 view .LVU193
 1133 01b2 AC49     		ldr	r1, .L138+20
 1134 01b4 2846     		mov	r0, r5
 1135 01b6 FFF7FEFF 		bl	__write_error_message
 1136              	.LVL68:
  94:./lib/error.c ****                 break;
 1137              		.loc 1 94 17 view .LVU194
 1138 01ba 44E7     		b	.L41
 1139              	.L50:
  96:./lib/error.c ****                 __write_error_message(error, "ERROR: E2BIG: Argument list too long");
 1140              		.loc 1 96 17 view .LVU195
 1141 01bc AA49     		ldr	r1, .L138+24
 1142 01be 2846     		mov	r0, r5
 1143 01c0 FFF7FEFF 		bl	__write_error_message
 1144              	.LVL69:
  97:./lib/error.c ****                 break;
 1145              		.loc 1 97 17 view .LVU196
 1146 01c4 3FE7     		b	.L41
 1147              	.L51:
  99:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOEXEC: Exec format error");
 1148              		.loc 1 99 17 view .LVU197
 1149 01c6 A949     		ldr	r1, .L138+28
 1150 01c8 2846     		mov	r0, r5
 1151 01ca FFF7FEFF 		bl	__write_error_message
 1152              	.LVL70:
 100:./lib/error.c ****                 break;
 1153              		.loc 1 100 17 view .LVU198
 1154 01ce 3AE7     		b	.L41
 1155              	.L52:
 102:./lib/error.c ****                 __write_error_message(error, "ERROR: EBADF: Bad file descriptor");
 1156              		.loc 1 102 17 view .LVU199
 1157 01d0 A749     		ldr	r1, .L138+32
 1158 01d2 2846     		mov	r0, r5
 1159 01d4 FFF7FEFF 		bl	__write_error_message
ARM GAS  /tmp/cc5nsFM2.s 			page 43


 1160              	.LVL71:
 103:./lib/error.c ****                 break;
 1161              		.loc 1 103 17 view .LVU200
 1162 01d8 35E7     		b	.L41
 1163              	.L53:
 105:./lib/error.c ****                 __write_error_message(error, "ERROR: ECHILD: No child processes");
 1164              		.loc 1 105 17 view .LVU201
 1165 01da A649     		ldr	r1, .L138+36
 1166 01dc 2846     		mov	r0, r5
 1167 01de FFF7FEFF 		bl	__write_error_message
 1168              	.LVL72:
 106:./lib/error.c ****                 break;
 1169              		.loc 1 106 17 view .LVU202
 1170 01e2 30E7     		b	.L41
 1171              	.L78:
 108:./lib/error.c ****                 __write_error_message(error, "WARN: EAGAIN: Resource temporarily unavailable");
 1172              		.loc 1 108 17 view .LVU203
 1173 01e4 A449     		ldr	r1, .L138+40
 1174 01e6 2846     		mov	r0, r5
 1175 01e8 FFF7FEFF 		bl	__write_error_message
 1176              	.LVL73:
 109:./lib/error.c ****                 break;
 1177              		.loc 1 109 17 view .LVU204
 1178 01ec 2BE7     		b	.L41
 1179              	.L55:
 111:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOMEM: Out of memory");
 1180              		.loc 1 111 17 view .LVU205
 1181 01ee A349     		ldr	r1, .L138+44
 1182 01f0 2846     		mov	r0, r5
 1183 01f2 FFF7FEFF 		bl	__write_error_message
 1184              	.LVL74:
 112:./lib/error.c ****                 break;
 1185              		.loc 1 112 17 view .LVU206
 1186 01f6 26E7     		b	.L41
 1187              	.L56:
 114:./lib/error.c ****                 __write_error_message(error, "ERROR: EACCES: Permission denied");
 1188              		.loc 1 114 17 view .LVU207
 1189 01f8 A149     		ldr	r1, .L138+48
 1190 01fa 2846     		mov	r0, r5
 1191 01fc FFF7FEFF 		bl	__write_error_message
 1192              	.LVL75:
 115:./lib/error.c ****                 break;
 1193              		.loc 1 115 17 view .LVU208
 1194 0200 21E7     		b	.L41
 1195              	.L57:
 117:./lib/error.c ****                 __write_error_message(error, "ERROR: EFAULT: Bad address");
 1196              		.loc 1 117 17 view .LVU209
 1197 0202 A049     		ldr	r1, .L138+52
 1198 0204 2846     		mov	r0, r5
 1199 0206 FFF7FEFF 		bl	__write_error_message
 1200              	.LVL76:
 118:./lib/error.c ****                 break;
 1201              		.loc 1 118 17 view .LVU210
 1202 020a 1CE7     		b	.L41
 1203              	.L58:
 120:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTBLK: Block device required");
 1204              		.loc 1 120 17 view .LVU211
ARM GAS  /tmp/cc5nsFM2.s 			page 44


 1205 020c 9E49     		ldr	r1, .L138+56
 1206 020e 2846     		mov	r0, r5
 1207 0210 FFF7FEFF 		bl	__write_error_message
 1208              	.LVL77:
 121:./lib/error.c ****                 break;
 1209              		.loc 1 121 17 view .LVU212
 1210 0214 17E7     		b	.L41
 1211              	.L59:
 123:./lib/error.c ****                 __write_error_message(error, "ERROR: EBUSY: Device or resource busy");
 1212              		.loc 1 123 17 view .LVU213
 1213 0216 9D49     		ldr	r1, .L138+60
 1214 0218 2846     		mov	r0, r5
 1215 021a FFF7FEFF 		bl	__write_error_message
 1216              	.LVL78:
 124:./lib/error.c ****                 break;
 1217              		.loc 1 124 17 view .LVU214
 1218 021e 12E7     		b	.L41
 1219              	.L60:
 126:./lib/error.c ****                 __write_error_message(error, "ERROR: EEXIST: File exists");
 1220              		.loc 1 126 17 view .LVU215
 1221 0220 9B49     		ldr	r1, .L138+64
 1222 0222 2846     		mov	r0, r5
 1223 0224 FFF7FEFF 		bl	__write_error_message
 1224              	.LVL79:
 127:./lib/error.c ****                 break;
 1225              		.loc 1 127 17 view .LVU216
 1226 0228 0DE7     		b	.L41
 1227              	.L61:
 129:./lib/error.c ****                 __write_error_message(error, "ERROR: EXDEV: Cross-device link");
 1228              		.loc 1 129 17 view .LVU217
 1229 022a 9A49     		ldr	r1, .L138+68
 1230 022c 2846     		mov	r0, r5
 1231 022e FFF7FEFF 		bl	__write_error_message
 1232              	.LVL80:
 130:./lib/error.c ****                 break;
 1233              		.loc 1 130 17 view .LVU218
 1234 0232 08E7     		b	.L41
 1235              	.L62:
 132:./lib/error.c ****                 __write_error_message(error, "ERROR: ENODEV: No such device");
 1236              		.loc 1 132 17 view .LVU219
 1237 0234 9849     		ldr	r1, .L138+72
 1238 0236 2846     		mov	r0, r5
 1239 0238 FFF7FEFF 		bl	__write_error_message
 1240              	.LVL81:
 133:./lib/error.c ****                 break;
 1241              		.loc 1 133 17 view .LVU220
 1242 023c 03E7     		b	.L41
 1243              	.L63:
 135:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTDIR: Not a directory");
 1244              		.loc 1 135 17 view .LVU221
 1245 023e 9749     		ldr	r1, .L138+76
 1246 0240 2846     		mov	r0, r5
 1247 0242 FFF7FEFF 		bl	__write_error_message
 1248              	.LVL82:
 136:./lib/error.c ****                 break;
 1249              		.loc 1 136 17 view .LVU222
 1250 0246 FEE6     		b	.L41
ARM GAS  /tmp/cc5nsFM2.s 			page 45


 1251              	.L64:
 138:./lib/error.c ****                 __write_error_message(error, "ERROR: EISDIR: Is a directory");
 1252              		.loc 1 138 17 view .LVU223
 1253 0248 9549     		ldr	r1, .L138+80
 1254 024a 2846     		mov	r0, r5
 1255 024c FFF7FEFF 		bl	__write_error_message
 1256              	.LVL83:
 139:./lib/error.c ****                 break;
 1257              		.loc 1 139 17 view .LVU224
 1258 0250 F9E6     		b	.L41
 1259              	.L65:
 141:./lib/error.c ****                 __write_error_message(error, "ERROR: EINVAL: Invalid argument");
 1260              		.loc 1 141 17 view .LVU225
 1261 0252 9449     		ldr	r1, .L138+84
 1262 0254 2846     		mov	r0, r5
 1263 0256 FFF7FEFF 		bl	__write_error_message
 1264              	.LVL84:
 142:./lib/error.c ****                 break;
 1265              		.loc 1 142 17 view .LVU226
 1266 025a F4E6     		b	.L41
 1267              	.L66:
 144:./lib/error.c ****                 __write_error_message(error, "ERROR: ENFILE: File table overflow");
 1268              		.loc 1 144 17 view .LVU227
 1269 025c 9249     		ldr	r1, .L138+88
 1270 025e 2846     		mov	r0, r5
 1271 0260 FFF7FEFF 		bl	__write_error_message
 1272              	.LVL85:
 145:./lib/error.c ****                 break;
 1273              		.loc 1 145 17 view .LVU228
 1274 0264 EFE6     		b	.L41
 1275              	.L67:
 147:./lib/error.c ****                 __write_error_message(error, "ERROR: EMFILE: Too many open files");
 1276              		.loc 1 147 17 view .LVU229
 1277 0266 9149     		ldr	r1, .L138+92
 1278 0268 2846     		mov	r0, r5
 1279 026a FFF7FEFF 		bl	__write_error_message
 1280              	.LVL86:
 148:./lib/error.c ****                 break;
 1281              		.loc 1 148 17 view .LVU230
 1282 026e EAE6     		b	.L41
 1283              	.L68:
 150:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTTY: Not a terminal");
 1284              		.loc 1 150 17 view .LVU231
 1285 0270 8F49     		ldr	r1, .L138+96
 1286 0272 2846     		mov	r0, r5
 1287 0274 FFF7FEFF 		bl	__write_error_message
 1288              	.LVL87:
 151:./lib/error.c ****                 break;
 1289              		.loc 1 151 17 view .LVU232
 1290 0278 E5E6     		b	.L41
 1291              	.L69:
 153:./lib/error.c ****                 __write_error_message(error, "ERROR: ETXTBSY: Text file busy");
 1292              		.loc 1 153 17 view .LVU233
 1293 027a 8E49     		ldr	r1, .L138+100
 1294 027c 2846     		mov	r0, r5
 1295 027e FFF7FEFF 		bl	__write_error_message
 1296              	.LVL88:
ARM GAS  /tmp/cc5nsFM2.s 			page 46


 154:./lib/error.c ****                 break;
 1297              		.loc 1 154 17 view .LVU234
 1298 0282 E0E6     		b	.L41
 1299              	.L70:
 156:./lib/error.c ****                 __write_error_message(error, "ERROR: EFBIG: File too large");
 1300              		.loc 1 156 17 view .LVU235
 1301 0284 8C49     		ldr	r1, .L138+104
 1302 0286 2846     		mov	r0, r5
 1303 0288 FFF7FEFF 		bl	__write_error_message
 1304              	.LVL89:
 157:./lib/error.c ****                 break;
 1305              		.loc 1 157 17 view .LVU236
 1306 028c DBE6     		b	.L41
 1307              	.L71:
 159:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOSPC: No space left on device");
 1308              		.loc 1 159 17 view .LVU237
 1309 028e 8B49     		ldr	r1, .L138+108
 1310 0290 2846     		mov	r0, r5
 1311 0292 FFF7FEFF 		bl	__write_error_message
 1312              	.LVL90:
 160:./lib/error.c ****                 break;
 1313              		.loc 1 160 17 view .LVU238
 1314 0296 D6E6     		b	.L41
 1315              	.L72:
 162:./lib/error.c ****                 __write_error_message(error, "ERROR: ESPIPE: Illegal seek");
 1316              		.loc 1 162 17 view .LVU239
 1317 0298 8949     		ldr	r1, .L138+112
 1318 029a 2846     		mov	r0, r5
 1319 029c FFF7FEFF 		bl	__write_error_message
 1320              	.LVL91:
 163:./lib/error.c ****                 break;
 1321              		.loc 1 163 17 view .LVU240
 1322 02a0 D1E6     		b	.L41
 1323              	.L73:
 165:./lib/error.c ****                 __write_error_message(error, "ERROR: EROFS: Read-only file system");
 1324              		.loc 1 165 17 view .LVU241
 1325 02a2 8849     		ldr	r1, .L138+116
 1326 02a4 2846     		mov	r0, r5
 1327 02a6 FFF7FEFF 		bl	__write_error_message
 1328              	.LVL92:
 166:./lib/error.c ****                 break;
 1329              		.loc 1 166 17 view .LVU242
 1330 02aa CCE6     		b	.L41
 1331              	.L74:
 168:./lib/error.c ****                 __write_error_message(error, "ERROR: EMLINK: Too many links");
 1332              		.loc 1 168 17 view .LVU243
 1333 02ac 8649     		ldr	r1, .L138+120
 1334 02ae 2846     		mov	r0, r5
 1335 02b0 FFF7FEFF 		bl	__write_error_message
 1336              	.LVL93:
 169:./lib/error.c ****                 break;
 1337              		.loc 1 169 17 view .LVU244
 1338 02b4 C7E6     		b	.L41
 1339              	.L75:
 171:./lib/error.c ****                 __write_error_message(error, "ERROR: EPIPE: Broken pipe");
 1340              		.loc 1 171 17 view .LVU245
 1341 02b6 8549     		ldr	r1, .L138+124
ARM GAS  /tmp/cc5nsFM2.s 			page 47


 1342 02b8 2846     		mov	r0, r5
 1343 02ba FFF7FEFF 		bl	__write_error_message
 1344              	.LVL94:
 172:./lib/error.c ****                 break;
 1345              		.loc 1 172 17 view .LVU246
 1346 02be C2E6     		b	.L41
 1347              	.L76:
 174:./lib/error.c ****                 __write_error_message(error, "ERROR: EDOM: Math argument out of domain");
 1348              		.loc 1 174 17 view .LVU247
 1349 02c0 8349     		ldr	r1, .L138+128
 1350 02c2 2846     		mov	r0, r5
 1351 02c4 FFF7FEFF 		bl	__write_error_message
 1352              	.LVL95:
 175:./lib/error.c ****                 break;
 1353              		.loc 1 175 17 view .LVU248
 1354 02c8 BDE6     		b	.L41
 1355              	.L77:
 177:./lib/error.c ****                 __write_error_message(error, "ERROR: ERANGE: Math result not representable");
 1356              		.loc 1 177 17 view .LVU249
 1357 02ca 8249     		ldr	r1, .L138+132
 1358 02cc 2846     		mov	r0, r5
 1359 02ce FFF7FEFF 		bl	__write_error_message
 1360              	.LVL96:
 178:./lib/error.c ****                 break;
 1361              		.loc 1 178 17 view .LVU250
 1362 02d2 B8E6     		b	.L41
 1363              	.L54:
 182:./lib/error.c ****                 __write_error_message(error, "ERROR: EDEADLK: Resource deadlock would occur");
 1364              		.loc 1 182 17 view .LVU251
 1365 02d4 8049     		ldr	r1, .L138+136
 1366 02d6 2846     		mov	r0, r5
 1367 02d8 FFF7FEFF 		bl	__write_error_message
 1368              	.LVL97:
 183:./lib/error.c ****                 break;
 1369              		.loc 1 183 17 view .LVU252
 1370 02dc B3E6     		b	.L41
 1371              	.L106:
 185:./lib/error.c ****                 __write_error_message(error, "ERROR: ENAMETOOLONG: File name too long");
 1372              		.loc 1 185 17 view .LVU253
 1373 02de 7F49     		ldr	r1, .L138+140
 1374 02e0 2846     		mov	r0, r5
 1375 02e2 FFF7FEFF 		bl	__write_error_message
 1376              	.LVL98:
 186:./lib/error.c ****                 break;
 1377              		.loc 1 186 17 view .LVU254
 1378 02e6 AEE6     		b	.L41
 1379              	.L112:
 188:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOLCK: No record locks available");
 1380              		.loc 1 188 17 view .LVU255
 1381 02e8 7D49     		ldr	r1, .L138+144
 1382 02ea 2846     		mov	r0, r5
 1383 02ec FFF7FEFF 		bl	__write_error_message
 1384              	.LVL99:
 189:./lib/error.c ****                 break;
 1385              		.loc 1 189 17 view .LVU256
 1386 02f0 A9E6     		b	.L41
 1387              	.L113:
ARM GAS  /tmp/cc5nsFM2.s 			page 48


 191:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOSYS: Function not implemented");
 1388              		.loc 1 191 17 view .LVU257
 1389 02f2 7C49     		ldr	r1, .L138+148
 1390 02f4 2846     		mov	r0, r5
 1391 02f6 FFF7FEFF 		bl	__write_error_message
 1392              	.LVL100:
 192:./lib/error.c ****                 break;
 1393              		.loc 1 192 17 view .LVU258
 1394 02fa A4E6     		b	.L41
 1395              	.L109:
 194:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTEMPTY: Directory not empty");
 1396              		.loc 1 194 17 view .LVU259
 1397 02fc 7A49     		ldr	r1, .L138+152
 1398 02fe 2846     		mov	r0, r5
 1399 0300 FFF7FEFF 		bl	__write_error_message
 1400              	.LVL101:
 195:./lib/error.c ****                 break;
 1401              		.loc 1 195 17 view .LVU260
 1402 0304 9FE6     		b	.L41
 1403              	.L105:
 197:./lib/error.c ****                 __write_error_message(error, "ERROR: ELOOP: Too many symbolic links encountered");
 1404              		.loc 1 197 17 view .LVU261
 1405 0306 7949     		ldr	r1, .L138+156
 1406 0308 2846     		mov	r0, r5
 1407 030a FFF7FEFF 		bl	__write_error_message
 1408              	.LVL102:
 198:./lib/error.c ****                 break;
 1409              		.loc 1 198 17 view .LVU262
 1410 030e 9AE6     		b	.L41
 1411              	.L81:
 201:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTSOCK: Socket operation on non-socket");
 1412              		.loc 1 201 17 view .LVU263
 1413 0310 7749     		ldr	r1, .L138+160
 1414 0312 2846     		mov	r0, r5
 1415 0314 FFF7FEFF 		bl	__write_error_message
 1416              	.LVL103:
 202:./lib/error.c ****                 break;
 1417              		.loc 1 202 17 view .LVU264
 1418 0318 95E6     		b	.L41
 1419              	.L82:
 204:./lib/error.c ****                 __write_error_message(error, "ERROR: EDESTADDRREQ: Destination address required");
 1420              		.loc 1 204 17 view .LVU265
 1421 031a 7649     		ldr	r1, .L138+164
 1422 031c 2846     		mov	r0, r5
 1423 031e FFF7FEFF 		bl	__write_error_message
 1424              	.LVL104:
 205:./lib/error.c ****                 break;
 1425              		.loc 1 205 17 view .LVU266
 1426 0322 90E6     		b	.L41
 1427              	.L83:
 207:./lib/error.c ****                 __write_error_message(error, "ERROR: EMSGSIZE: Message too long");
 1428              		.loc 1 207 17 view .LVU267
 1429 0324 7449     		ldr	r1, .L138+168
 1430 0326 2846     		mov	r0, r5
 1431 0328 FFF7FEFF 		bl	__write_error_message
 1432              	.LVL105:
 208:./lib/error.c ****                 break;
ARM GAS  /tmp/cc5nsFM2.s 			page 49


 1433              		.loc 1 208 17 view .LVU268
 1434 032c 8BE6     		b	.L41
 1435              	.L84:
 210:./lib/error.c ****                 __write_error_message(error, "ERROR: EPROTOTYPE: Protocol wrong type for socket");
 1436              		.loc 1 210 17 view .LVU269
 1437 032e 7349     		ldr	r1, .L138+172
 1438 0330 2846     		mov	r0, r5
 1439 0332 FFF7FEFF 		bl	__write_error_message
 1440              	.LVL106:
 211:./lib/error.c ****                 break;
 1441              		.loc 1 211 17 view .LVU270
 1442 0336 86E6     		b	.L41
 1443              	.L85:
 213:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOPROTOOPT: Protocol not available");
 1444              		.loc 1 213 17 view .LVU271
 1445 0338 7149     		ldr	r1, .L138+176
 1446 033a 2846     		mov	r0, r5
 1447 033c FFF7FEFF 		bl	__write_error_message
 1448              	.LVL107:
 214:./lib/error.c ****                 break;
 1449              		.loc 1 214 17 view .LVU272
 1450 0340 81E6     		b	.L41
 1451              	.L86:
 216:./lib/error.c ****                 __write_error_message(error, "ERROR: EPROTONOSUPPORT: Protocol not supported");
 1452              		.loc 1 216 17 view .LVU273
 1453 0342 7049     		ldr	r1, .L138+180
 1454 0344 2846     		mov	r0, r5
 1455 0346 FFF7FEFF 		bl	__write_error_message
 1456              	.LVL108:
 217:./lib/error.c ****                 break;
 1457              		.loc 1 217 17 view .LVU274
 1458 034a 7CE6     		b	.L41
 1459              	.L87:
 219:./lib/error.c ****                 __write_error_message(error, "ERROR: ESOCKTNOSUPPORT: Socket type not supported");
 1460              		.loc 1 219 17 view .LVU275
 1461 034c 6E49     		ldr	r1, .L138+184
 1462 034e 2846     		mov	r0, r5
 1463 0350 FFF7FEFF 		bl	__write_error_message
 1464              	.LVL109:
 220:./lib/error.c ****                 break;
 1465              		.loc 1 220 17 view .LVU276
 1466 0354 77E6     		b	.L41
 1467              	.L88:
 222:./lib/error.c ****                 __write_error_message(error, "ERROR: EOPNOTSUPP: Operation not supported");
 1468              		.loc 1 222 17 view .LVU277
 1469 0356 6D49     		ldr	r1, .L138+188
 1470 0358 2846     		mov	r0, r5
 1471 035a FFF7FEFF 		bl	__write_error_message
 1472              	.LVL110:
 223:./lib/error.c ****                 break;
 1473              		.loc 1 223 17 view .LVU278
 1474 035e 72E6     		b	.L41
 1475              	.L89:
 225:./lib/error.c ****                 __write_error_message(error, "ERROR: EPFNOSUPPORT: Protocol family not supported");
 1476              		.loc 1 225 17 view .LVU279
 1477 0360 6B49     		ldr	r1, .L138+192
 1478 0362 2846     		mov	r0, r5
ARM GAS  /tmp/cc5nsFM2.s 			page 50


 1479 0364 FFF7FEFF 		bl	__write_error_message
 1480              	.LVL111:
 226:./lib/error.c ****                 break;
 1481              		.loc 1 226 17 view .LVU280
 1482 0368 6DE6     		b	.L41
 1483              	.L90:
 228:./lib/error.c ****                 __write_error_message(error, "ERROR: EAFNOSUPPORT: Address family not supported");
 1484              		.loc 1 228 17 view .LVU281
 1485 036a 6A49     		ldr	r1, .L138+196
 1486 036c 2846     		mov	r0, r5
 1487 036e FFF7FEFF 		bl	__write_error_message
 1488              	.LVL112:
 229:./lib/error.c ****                 break;
 1489              		.loc 1 229 17 view .LVU282
 1490 0372 68E6     		b	.L41
 1491              	.L91:
 231:./lib/error.c ****                 __write_error_message(error, "ERROR: EADDRINUSE: Address already in use");
 1492              		.loc 1 231 17 view .LVU283
 1493 0374 6849     		ldr	r1, .L138+200
 1494 0376 2846     		mov	r0, r5
 1495 0378 FFF7FEFF 		bl	__write_error_message
 1496              	.LVL113:
 232:./lib/error.c ****                 break;
 1497              		.loc 1 232 17 view .LVU284
 1498 037c 63E6     		b	.L41
 1499              	.L92:
 234:./lib/error.c ****                 __write_error_message(error, "ERROR: EADDRNOTAVAIL: Cannot assign requested address
 1500              		.loc 1 234 17 view .LVU285
 1501 037e 6749     		ldr	r1, .L138+204
 1502 0380 2846     		mov	r0, r5
 1503 0382 FFF7FEFF 		bl	__write_error_message
 1504              	.LVL114:
 235:./lib/error.c ****                 break;
 1505              		.loc 1 235 17 view .LVU286
 1506 0386 5EE6     		b	.L41
 1507              	.L93:
 237:./lib/error.c ****                 __write_error_message(error, "ERROR: ENETDOWN: Network is down");
 1508              		.loc 1 237 17 view .LVU287
 1509 0388 6549     		ldr	r1, .L138+208
 1510 038a 2846     		mov	r0, r5
 1511 038c FFF7FEFF 		bl	__write_error_message
 1512              	.LVL115:
 238:./lib/error.c ****                 break;
 1513              		.loc 1 238 17 view .LVU288
 1514 0390 59E6     		b	.L41
 1515              	.L94:
 240:./lib/error.c ****                 __write_error_message(error, "ERROR: ENETUNREACH: Network is unreachable");
 1516              		.loc 1 240 17 view .LVU289
 1517 0392 6449     		ldr	r1, .L138+212
 1518 0394 2846     		mov	r0, r5
 1519 0396 FFF7FEFF 		bl	__write_error_message
 1520              	.LVL116:
 241:./lib/error.c ****                 break;
 1521              		.loc 1 241 17 view .LVU290
 1522 039a 54E6     		b	.L41
 1523              	.L95:
 243:./lib/error.c ****                 __write_error_message(error, "ERROR: ENETRESET: Network dropped connection on reset
ARM GAS  /tmp/cc5nsFM2.s 			page 51


 1524              		.loc 1 243 17 view .LVU291
 1525 039c 6249     		ldr	r1, .L138+216
 1526 039e 2846     		mov	r0, r5
 1527 03a0 FFF7FEFF 		bl	__write_error_message
 1528              	.LVL117:
 244:./lib/error.c ****                 break;
 1529              		.loc 1 244 17 view .LVU292
 1530 03a4 4FE6     		b	.L41
 1531              	.L96:
 246:./lib/error.c ****                 __write_error_message(error, "ERROR: ECONNABORTED: Software caused connection abort
 1532              		.loc 1 246 17 view .LVU293
 1533 03a6 6149     		ldr	r1, .L138+220
 1534 03a8 2846     		mov	r0, r5
 1535 03aa FFF7FEFF 		bl	__write_error_message
 1536              	.LVL118:
 247:./lib/error.c ****                 break;
 1537              		.loc 1 247 17 view .LVU294
 1538 03ae 4AE6     		b	.L41
 1539              	.L97:
 249:./lib/error.c ****                 __write_error_message(error, "ERROR: ECONNRESET: Connection reset by peer");
 1540              		.loc 1 249 17 view .LVU295
 1541 03b0 5F49     		ldr	r1, .L138+224
 1542 03b2 2846     		mov	r0, r5
 1543 03b4 FFF7FEFF 		bl	__write_error_message
 1544              	.LVL119:
 250:./lib/error.c ****                 break;
 1545              		.loc 1 250 17 view .LVU296
 1546 03b8 45E6     		b	.L41
 1547              	.L98:
 252:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOBUFS: No buffer space available");
 1548              		.loc 1 252 17 view .LVU297
 1549 03ba 5E49     		ldr	r1, .L138+228
 1550 03bc 2846     		mov	r0, r5
 1551 03be FFF7FEFF 		bl	__write_error_message
 1552              	.LVL120:
 253:./lib/error.c ****                 break;
 1553              		.loc 1 253 17 view .LVU298
 1554 03c2 40E6     		b	.L41
 1555              	.L99:
 255:./lib/error.c ****                 __write_error_message(error, "ERROR: EISCONN: Transport endpoint is already connect
 1556              		.loc 1 255 17 view .LVU299
 1557 03c4 5C49     		ldr	r1, .L138+232
 1558 03c6 2846     		mov	r0, r5
 1559 03c8 FFF7FEFF 		bl	__write_error_message
 1560              	.LVL121:
 256:./lib/error.c ****                 break;
 1561              		.loc 1 256 17 view .LVU300
 1562 03cc 3BE6     		b	.L41
 1563              	.L100:
 258:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTCONN: Transport endpoint is not connected"
 1564              		.loc 1 258 17 view .LVU301
 1565 03ce 5B49     		ldr	r1, .L138+236
 1566 03d0 2846     		mov	r0, r5
 1567 03d2 FFF7FEFF 		bl	__write_error_message
 1568              	.LVL122:
 259:./lib/error.c ****                 break;
 1569              		.loc 1 259 17 view .LVU302
ARM GAS  /tmp/cc5nsFM2.s 			page 52


 1570 03d6 36E6     		b	.L41
 1571              	.L101:
 261:./lib/error.c ****                 __write_error_message(error, "ERROR: ESHUTDOWN: Cannot send after transport endpoin
 1572              		.loc 1 261 17 view .LVU303
 1573 03d8 5949     		ldr	r1, .L138+240
 1574 03da 2846     		mov	r0, r5
 1575 03dc FFF7FEFF 		bl	__write_error_message
 1576              	.LVL123:
 262:./lib/error.c ****                 break;
 1577              		.loc 1 262 17 view .LVU304
 1578 03e0 31E6     		b	.L41
 1579              	.L102:
 264:./lib/error.c ****                 __write_error_message(error, "ERROR: ETOOMANYREFS: Too many references");
 1580              		.loc 1 264 17 view .LVU305
 1581 03e2 5849     		ldr	r1, .L138+244
 1582 03e4 2846     		mov	r0, r5
 1583 03e6 FFF7FEFF 		bl	__write_error_message
 1584              	.LVL124:
 265:./lib/error.c ****                 break;
 1585              		.loc 1 265 17 view .LVU306
 1586 03ea 2CE6     		b	.L41
 1587              	.L103:
 267:./lib/error.c ****                 __write_error_message(error, "ERROR: ETIMEDOUT: Connection timed out");
 1588              		.loc 1 267 17 view .LVU307
 1589 03ec 5649     		ldr	r1, .L138+248
 1590 03ee 2846     		mov	r0, r5
 1591 03f0 FFF7FEFF 		bl	__write_error_message
 1592              	.LVL125:
 268:./lib/error.c ****                 break;
 1593              		.loc 1 268 17 view .LVU308
 1594 03f4 27E6     		b	.L41
 1595              	.L104:
 270:./lib/error.c ****                 __write_error_message(error, "ERROR: ECONNREFUSED: Connection refused");
 1596              		.loc 1 270 17 view .LVU309
 1597 03f6 5549     		ldr	r1, .L138+252
 1598 03f8 2846     		mov	r0, r5
 1599 03fa FFF7FEFF 		bl	__write_error_message
 1600              	.LVL126:
 271:./lib/error.c ****                 break;
 1601              		.loc 1 271 17 view .LVU310
 1602 03fe 22E6     		b	.L41
 1603              	.L107:
 273:./lib/error.c ****                 __write_error_message(error, "ERROR: EHOSTDOWN: Host is down");
 1604              		.loc 1 273 17 view .LVU311
 1605 0400 5349     		ldr	r1, .L138+256
 1606 0402 2846     		mov	r0, r5
 1607 0404 FFF7FEFF 		bl	__write_error_message
 1608              	.LVL127:
 274:./lib/error.c ****                 break;
 1609              		.loc 1 274 17 view .LVU312
 1610 0408 1DE6     		b	.L41
 1611              	.L108:
 276:./lib/error.c ****                 __write_error_message(error, "ERROR: EHOSTUNREACH: No route to host");
 1612              		.loc 1 276 17 view .LVU313
 1613 040a 5249     		ldr	r1, .L138+260
 1614 040c 2846     		mov	r0, r5
 1615 040e FFF7FEFF 		bl	__write_error_message
ARM GAS  /tmp/cc5nsFM2.s 			page 53


 1616              	.LVL128:
 277:./lib/error.c ****                 break;
 1617              		.loc 1 277 17 view .LVU314
 1618 0412 18E6     		b	.L41
 1619              	.L80:
 280:./lib/error.c ****                 __write_error_message(error, "INFO: EALREADY: Operation already in progress");
 1620              		.loc 1 280 17 view .LVU315
 1621 0414 5049     		ldr	r1, .L138+264
 1622 0416 2846     		mov	r0, r5
 1623 0418 FFF7FEFF 		bl	__write_error_message
 1624              	.LVL129:
 281:./lib/error.c ****                 break;
 1625              		.loc 1 281 17 view .LVU316
 1626 041c 13E6     		b	.L41
 1627              	.L79:
 283:./lib/error.c ****                 __write_error_message(error, "INFO: EINPROGRESS: Operation now in progress");
 1628              		.loc 1 283 17 view .LVU317
 1629 041e 4F49     		ldr	r1, .L138+268
 1630 0420 2846     		mov	r0, r5
 1631 0422 FFF7FEFF 		bl	__write_error_message
 1632              	.LVL130:
 284:./lib/error.c ****                 break;
 1633              		.loc 1 284 17 view .LVU318
 1634 0426 0EE6     		b	.L41
 1635              	.L111:
 286:./lib/error.c ****                 __write_error_message(error, "ERROR: ESTALE: Stale file handle");
 1636              		.loc 1 286 17 view .LVU319
 1637 0428 4D49     		ldr	r1, .L138+272
 1638 042a 2846     		mov	r0, r5
 1639 042c FFF7FEFF 		bl	__write_error_message
 1640              	.LVL131:
 287:./lib/error.c ****                 break;
 1641              		.loc 1 287 17 view .LVU320
 1642 0430 09E6     		b	.L41
 1643              	.L114:
 289:./lib/error.c ****                 __write_error_message(error, "ERROR: EUCLEAN: Structure needs cleaning");
 1644              		.loc 1 289 17 view .LVU321
 1645 0432 4C49     		ldr	r1, .L138+276
 1646 0434 2846     		mov	r0, r5
 1647 0436 FFF7FEFF 		bl	__write_error_message
 1648              	.LVL132:
 290:./lib/error.c ****                 break;
 1649              		.loc 1 290 17 view .LVU322
 1650 043a 04E6     		b	.L41
 1651              	.L115:
 292:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTNAM: Not a XENIX named type file");
 1652              		.loc 1 292 17 view .LVU323
 1653 043c 4A49     		ldr	r1, .L138+280
 1654 043e 2846     		mov	r0, r5
 1655 0440 FFF7FEFF 		bl	__write_error_message
 1656              	.LVL133:
 293:./lib/error.c ****                 break;
 1657              		.loc 1 293 17 view .LVU324
 1658 0444 FFE5     		b	.L41
 1659              	.L116:
 295:./lib/error.c ****                 __write_error_message(error, "ERROR: ENAVAIL: No XENIX semaphores available");
 1660              		.loc 1 295 17 view .LVU325
ARM GAS  /tmp/cc5nsFM2.s 			page 54


 1661 0446 4949     		ldr	r1, .L138+284
 1662 0448 2846     		mov	r0, r5
 1663 044a FFF7FEFF 		bl	__write_error_message
 1664              	.LVL134:
 296:./lib/error.c ****                 break;
 1665              		.loc 1 296 17 view .LVU326
 1666 044e FAE5     		b	.L41
 1667              	.L139:
 1668              		.align	2
 1669              	.L138:
 1670 0450 00000000 		.word	.LC2
 1671 0454 28000000 		.word	.LC3
 1672 0458 54000000 		.word	.LC4
 1673 045c 74000000 		.word	.LC5
 1674 0460 9C000000 		.word	.LC6
 1675 0464 B4000000 		.word	.LC7
 1676 0468 DC000000 		.word	.LC8
 1677 046c 04010000 		.word	.LC9
 1678 0470 28010000 		.word	.LC10
 1679 0474 4C010000 		.word	.LC11
 1680 0478 70010000 		.word	.LC12
 1681 047c A0010000 		.word	.LC13
 1682 0480 C0010000 		.word	.LC14
 1683 0484 E4010000 		.word	.LC15
 1684 0488 00020000 		.word	.LC16
 1685 048c 28020000 		.word	.LC17
 1686 0490 50020000 		.word	.LC18
 1687 0494 6C020000 		.word	.LC19
 1688 0498 8C020000 		.word	.LC20
 1689 049c AC020000 		.word	.LC21
 1690 04a0 CC020000 		.word	.LC22
 1691 04a4 EC020000 		.word	.LC23
 1692 04a8 0C030000 		.word	.LC24
 1693 04ac 30030000 		.word	.LC25
 1694 04b0 54030000 		.word	.LC26
 1695 04b4 74030000 		.word	.LC27
 1696 04b8 94030000 		.word	.LC28
 1697 04bc B4030000 		.word	.LC29
 1698 04c0 DC030000 		.word	.LC30
 1699 04c4 F8030000 		.word	.LC31
 1700 04c8 1C040000 		.word	.LC32
 1701 04cc 3C040000 		.word	.LC33
 1702 04d0 58040000 		.word	.LC34
 1703 04d4 84040000 		.word	.LC35
 1704 04d8 B4040000 		.word	.LC36
 1705 04dc E4040000 		.word	.LC37
 1706 04e0 0C050000 		.word	.LC38
 1707 04e4 38050000 		.word	.LC39
 1708 04e8 60050000 		.word	.LC40
 1709 04ec 88050000 		.word	.LC41
 1710 04f0 BC050000 		.word	.LC42
 1711 04f4 EC050000 		.word	.LC43
 1712 04f8 20060000 		.word	.LC44
 1713 04fc 44060000 		.word	.LC45
 1714 0500 78060000 		.word	.LC46
 1715 0504 A4060000 		.word	.LC47
 1716 0508 D4060000 		.word	.LC48
ARM GAS  /tmp/cc5nsFM2.s 			page 55


 1717 050c 08070000 		.word	.LC49
 1718 0510 34070000 		.word	.LC50
 1719 0514 68070000 		.word	.LC51
 1720 0518 9C070000 		.word	.LC52
 1721 051c C8070000 		.word	.LC53
 1722 0520 00080000 		.word	.LC54
 1723 0524 24080000 		.word	.LC55
 1724 0528 50080000 		.word	.LC56
 1725 052c 88080000 		.word	.LC57
 1726 0530 C0080000 		.word	.LC58
 1727 0534 EC080000 		.word	.LC59
 1728 0538 18090000 		.word	.LC60
 1729 053c 50090000 		.word	.LC61
 1730 0540 88090000 		.word	.LC62
 1731 0544 C8090000 		.word	.LC63
 1732 0548 F4090000 		.word	.LC64
 1733 054c 1C0A0000 		.word	.LC65
 1734 0550 440A0000 		.word	.LC66
 1735 0554 640A0000 		.word	.LC67
 1736 0558 8C0A0000 		.word	.LC68
 1737 055c BC0A0000 		.word	.LC69
 1738 0560 EC0A0000 		.word	.LC70
 1739 0564 100B0000 		.word	.LC71
 1740 0568 3C0B0000 		.word	.LC72
 1741 056c 680B0000 		.word	.LC73
 1742              	.L117:
 298:./lib/error.c ****                 __write_error_message(error, "ERROR: EISNAM: Is a named type file");
 1743              		.loc 1 298 17 view .LVU327
 1744 0570 2949     		ldr	r1, .L140
 1745 0572 2846     		mov	r0, r5
 1746 0574 FFF7FEFF 		bl	__write_error_message
 1747              	.LVL135:
 299:./lib/error.c ****                 break;
 1748              		.loc 1 299 17 view .LVU328
 1749 0578 65E5     		b	.L41
 1750              	.L118:
 301:./lib/error.c ****                 __write_error_message(error, "ERROR: EREMOTEIO: Remote I/O error");
 1751              		.loc 1 301 17 view .LVU329
 1752 057a 2849     		ldr	r1, .L140+4
 1753 057c 2846     		mov	r0, r5
 1754 057e FFF7FEFF 		bl	__write_error_message
 1755              	.LVL136:
 302:./lib/error.c ****                 break;
 1756              		.loc 1 302 17 view .LVU330
 1757 0582 60E5     		b	.L41
 1758              	.L110:
 304:./lib/error.c ****                 __write_error_message(error, "ERROR: EDQUOT: Disk quota exceeded");
 1759              		.loc 1 304 17 view .LVU331
 1760 0584 2649     		ldr	r1, .L140+8
 1761 0586 2846     		mov	r0, r5
 1762 0588 FFF7FEFF 		bl	__write_error_message
 1763              	.LVL137:
 305:./lib/error.c ****                 break;
 1764              		.loc 1 305 17 view .LVU332
 1765 058c 5BE5     		b	.L41
 1766              	.L119:
 307:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOMEDIUM: No medium found");
ARM GAS  /tmp/cc5nsFM2.s 			page 56


 1767              		.loc 1 307 17 view .LVU333
 1768 058e 2549     		ldr	r1, .L140+12
 1769 0590 2846     		mov	r0, r5
 1770 0592 FFF7FEFF 		bl	__write_error_message
 1771              	.LVL138:
 308:./lib/error.c ****                 break;
 1772              		.loc 1 308 17 view .LVU334
 1773 0596 56E5     		b	.L41
 1774              	.L120:
 310:./lib/error.c ****                 __write_error_message(error, "ERROR: EMEDIUMTYPE: Wrong medium type");
 1775              		.loc 1 310 17 view .LVU335
 1776 0598 2349     		ldr	r1, .L140+16
 1777 059a 2846     		mov	r0, r5
 1778 059c FFF7FEFF 		bl	__write_error_message
 1779              	.LVL139:
 311:./lib/error.c ****                 break;
 1780              		.loc 1 311 17 view .LVU336
 1781 05a0 51E5     		b	.L41
 1782              	.L121:
 313:./lib/error.c ****                 __write_error_message(error, "WARN: ECANCELED: Operation canceled");
 1783              		.loc 1 313 17 view .LVU337
 1784 05a2 2249     		ldr	r1, .L140+20
 1785 05a4 2846     		mov	r0, r5
 1786 05a6 FFF7FEFF 		bl	__write_error_message
 1787              	.LVL140:
 314:./lib/error.c ****                 break;
 1788              		.loc 1 314 17 view .LVU338
 1789 05aa 4CE5     		b	.L41
 1790              	.L122:
 316:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOKEY: Required key not available");
 1791              		.loc 1 316 17 view .LVU339
 1792 05ac 2049     		ldr	r1, .L140+24
 1793 05ae 2846     		mov	r0, r5
 1794 05b0 FFF7FEFF 		bl	__write_error_message
 1795              	.LVL141:
 317:./lib/error.c ****                 break;
 1796              		.loc 1 317 17 view .LVU340
 1797 05b4 47E5     		b	.L41
 1798              	.L123:
 319:./lib/error.c ****                 __write_error_message(error, "ERROR: EKEYEXPIRED: Key has expired");
 1799              		.loc 1 319 17 view .LVU341
 1800 05b6 1F49     		ldr	r1, .L140+28
 1801 05b8 2846     		mov	r0, r5
 1802 05ba FFF7FEFF 		bl	__write_error_message
 1803              	.LVL142:
 320:./lib/error.c ****                 break;
 1804              		.loc 1 320 17 view .LVU342
 1805 05be 42E5     		b	.L41
 1806              	.L124:
 322:./lib/error.c ****                 __write_error_message(error, "ERROR: EKEYREVOKED: Key has been revoked");
 1807              		.loc 1 322 17 view .LVU343
 1808 05c0 1D49     		ldr	r1, .L140+32
 1809 05c2 2846     		mov	r0, r5
 1810 05c4 FFF7FEFF 		bl	__write_error_message
 1811              	.LVL143:
 323:./lib/error.c ****                 break;
 1812              		.loc 1 323 17 view .LVU344
ARM GAS  /tmp/cc5nsFM2.s 			page 57


 1813 05c8 3DE5     		b	.L41
 1814              	.L125:
 325:./lib/error.c ****                 __write_error_message(error, "ERROR: EKEYREJECTED: Key was rejected by service");
 1815              		.loc 1 325 17 view .LVU345
 1816 05ca 1C49     		ldr	r1, .L140+36
 1817 05cc 2846     		mov	r0, r5
 1818 05ce FFF7FEFF 		bl	__write_error_message
 1819              	.LVL144:
 326:./lib/error.c ****                 break;
 1820              		.loc 1 326 17 view .LVU346
 1821 05d2 38E5     		b	.L41
 1822              	.L126:
 328:./lib/error.c ****                 __write_error_message(error, "ERROR: EOWNERDEAD: Owner died");
 1823              		.loc 1 328 17 view .LVU347
 1824 05d4 1A49     		ldr	r1, .L140+40
 1825 05d6 2846     		mov	r0, r5
 1826 05d8 FFF7FEFF 		bl	__write_error_message
 1827              	.LVL145:
 329:./lib/error.c ****                 break;
 1828              		.loc 1 329 17 view .LVU348
 1829 05dc 33E5     		b	.L41
 1830              	.L127:
 331:./lib/error.c ****                 __write_error_message(error, "ERROR: ENOTRECOVERABLE: State not recoverable");
 1831              		.loc 1 331 17 view .LVU349
 1832 05de 1949     		ldr	r1, .L140+44
 1833 05e0 2846     		mov	r0, r5
 1834 05e2 FFF7FEFF 		bl	__write_error_message
 1835              	.LVL146:
 332:./lib/error.c ****                 break;
 1836              		.loc 1 332 17 view .LVU350
 1837 05e6 2EE5     		b	.L41
 1838              	.L128:
 334:./lib/error.c ****                 __write_error_message(error, "ERROR: ERFKILL: Operation not possible due to RF-kill
 1839              		.loc 1 334 17 view .LVU351
 1840 05e8 1749     		ldr	r1, .L140+48
 1841 05ea 2846     		mov	r0, r5
 1842 05ec FFF7FEFF 		bl	__write_error_message
 1843              	.LVL147:
 335:./lib/error.c ****                 break;
 1844              		.loc 1 335 17 view .LVU352
 1845 05f0 29E5     		b	.L41
 1846              	.L129:
 337:./lib/error.c ****                 __write_error_message(error, "ERROR: EHWPOISON: Memory page has hardware error");
 1847              		.loc 1 337 17 view .LVU353
 1848 05f2 1649     		ldr	r1, .L140+52
 1849 05f4 2846     		mov	r0, r5
 1850 05f6 FFF7FEFF 		bl	__write_error_message
 1851              	.LVL148:
 338:./lib/error.c ****                 break;
 1852              		.loc 1 338 17 view .LVU354
 1853 05fa 24E5     		b	.L41
 1854              	.L42:
 340:./lib/error.c ****                 __write_error_message(error, "ERROR: Unknown error code");
 1855              		.loc 1 340 17 view .LVU355
 1856 05fc 1449     		ldr	r1, .L140+56
 1857 05fe 2846     		mov	r0, r5
 1858 0600 FFF7FEFF 		bl	__write_error_message
ARM GAS  /tmp/cc5nsFM2.s 			page 58


 1859              	.LVL149:
 341:./lib/error.c ****                 break;
 1860              		.loc 1 341 17 view .LVU356
 1861 0604 1FE5     		b	.L41
 1862              	.LVL150:
 1863              	.L137:
 348:./lib/error.c ****         l_output_error_message(error,NULL,0,printk);
 1864              		.loc 1 348 9 view .LVU357
 1865 0606 134B     		ldr	r3, .L140+60
 1866 0608 0022     		movs	r2, #0
 1867 060a 1146     		mov	r1, r2
 1868 060c 2846     		mov	r0, r5
 1869 060e FFF7FEFF 		bl	l_output_error_message
 1870              	.LVL151:
 1871 0612 20E5     		b	.L130
 1872              	.LVL152:
 1873              	.L133:
 1874              	.LCFI20:
 1875              		.cfi_def_cfa_offset 0
 1876              		.cfi_restore 3
 1877              		.cfi_restore 4
 1878              		.cfi_restore 5
 1879              		.cfi_restore 14
 348:./lib/error.c ****         l_output_error_message(error,NULL,0,printk);
 1880              		.loc 1 348 9 is_stmt 0 view .LVU358
 1881 0614 7047     		bx	lr
 1882              	.L141:
 1883 0616 00BF     		.align	2
 1884              	.L140:
 1885 0618 980B0000 		.word	.LC74
 1886 061c BC0B0000 		.word	.LC75
 1887 0620 E00B0000 		.word	.LC76
 1888 0624 040C0000 		.word	.LC77
 1889 0628 280C0000 		.word	.LC78
 1890 062c 500C0000 		.word	.LC79
 1891 0630 740C0000 		.word	.LC80
 1892 0634 A00C0000 		.word	.LC81
 1893 0638 C40C0000 		.word	.LC82
 1894 063c F00C0000 		.word	.LC83
 1895 0640 240D0000 		.word	.LC84
 1896 0644 440D0000 		.word	.LC85
 1897 0648 740D0000 		.word	.LC86
 1898 064c AC0D0000 		.word	.LC87
 1899 0650 E00D0000 		.word	.LC88
 1900 0654 00000000 		.word	printk
 1901              		.cfi_endproc
 1902              	.LFE287:
 1904              		.text
 1905              	.Letext0:
 1906              		.file 3 "./include/linux/stdarg.h"
 1907              		.file 4 "./include/asm-generic/int-l64.h"
 1908              		.file 5 "./include/asm-generic/posix_types.h"
 1909              		.file 6 "./include/linux/types.h"
 1910              		.file 7 "./include/linux/time64.h"
 1911              		.file 8 "./arch/arm_m/include/asm/spinlock.h"
 1912              		.file 9 "./include/linux/spinlock_types_raw.h"
 1913              		.file 10 "./include/linux/spinlock_types.h"
ARM GAS  /tmp/cc5nsFM2.s 			page 59


 1914              		.file 11 "./include/linux/mutex.h"
 1915              		.file 12 "./include/linux/error.h"
 1916              		.file 13 "./include/linux/sprintf.h"
 1917              		.file 14 "./include/linux/printk.h"
 1918              		.file 15 "./include/linux/time.h"
 1919              		.file 16 "./include/linux/string.h"
 1920              		.file 17 "./arch/arm_m/include/asm/string.h"
 1921              		.file 18 "<built-in>"
 1922              		.file 19 "./include/linux/gfp_types.h"
ARM GAS  /tmp/cc5nsFM2.s 			page 60


DEFINED SYMBOLS
                            *ABS*:00000000 error.c
     /tmp/cc5nsFM2.s:21     .text.__write_error_message:00000000 $t
     /tmp/cc5nsFM2.s:26     .text.__write_error_message:00000000 __write_error_message
     /tmp/cc5nsFM2.s:88     .rodata.l_error_create.str1.4:00000000 $d
     /tmp/cc5nsFM2.s:92     .text.l_error_create:00000000 $t
     /tmp/cc5nsFM2.s:98     .text.l_error_create:00000000 l_error_create
     /tmp/cc5nsFM2.s:292    .text.l_error_create:00000084 $d
     /tmp/cc5nsFM2.s:298    .text.l_delete_error:00000000 $t
     /tmp/cc5nsFM2.s:304    .text.l_delete_error:00000000 l_delete_error
     /tmp/cc5nsFM2.s:384    .rodata.l_output_error_message.str1.4:00000000 $d
     /tmp/cc5nsFM2.s:389    .text.l_output_error_message:00000000 $t
     /tmp/cc5nsFM2.s:395    .text.l_output_error_message:00000000 l_output_error_message
     /tmp/cc5nsFM2.s:537    .text.l_output_error_message:0000007c $d
     /tmp/cc5nsFM2.s:543    .rodata.l_error_exception.str1.4:00000000 $d
     /tmp/cc5nsFM2.s:812    .text.l_error_exception:00000000 $t
     /tmp/cc5nsFM2.s:818    .text.l_error_exception:00000000 l_error_exception
     /tmp/cc5nsFM2.s:951    .text.l_error_exception:0000006a $d
     /tmp/cc5nsFM2.s:1090   .text.l_error_exception:00000180 $t
     /tmp/cc5nsFM2.s:1670   .text.l_error_exception:00000450 $d
     /tmp/cc5nsFM2.s:1744   .text.l_error_exception:00000570 $t
     /tmp/cc5nsFM2.s:1885   .text.l_error_exception:00000618 $d

UNDEFINED SYMBOLS
vsnprintf
__smalloc__
strlen
strcpy
__sfree__
snprintf
HZ
ktime_get
get_global_heap_size
printk
