ARM GAS  /tmp/ccVeuSEG.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"fs_superblock.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./fs/fs_superblock.c"
  20              		.section	.text.alloc_super,"ax",%progbits
  21              		.align	1
  22              		.global	alloc_super
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	alloc_super:
  28              	.LVL0:
  29              	.LFB1033:
   1:./fs/fs_superblock.c **** #include <linux/kernel.h>
   2:./fs/fs_superblock.c **** #include <linux/fs.h>
   3:./fs/fs_superblock.c **** #include <linux/spinlock.h>
   4:./fs/fs_superblock.c **** #include <linux/string.h>
   5:./fs/fs_superblock.c **** #include <linux/slab.h>
   6:./fs/fs_superblock.c **** #include <linux/dcache.h>
   7:./fs/fs_superblock.c **** #include <linux/export.h>
   8:./fs/fs_superblock.c **** #include <linux/list.h>
   9:./fs/fs_superblock.c **** #include <linux/fs.h>
  10:./fs/fs_superblock.c **** #include <linux/stat.h>
  11:./fs/fs_superblock.c **** #include <linux/time.h>
  12:./fs/fs_superblock.c **** #include <linux/atomic.h>
  13:./fs/fs_superblock.c **** 
  14:./fs/fs_superblock.c **** 
  15:./fs/fs_superblock.c **** 
  16:./fs/fs_superblock.c **** 
  17:./fs/fs_superblock.c **** struct super_block *alloc_super(struct block_device *bdev)
  18:./fs/fs_superblock.c **** {
  30              		.loc 1 18 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 18 1 is_stmt 0 view .LVU1
  35 0000 38B5     		push	{r3, r4, r5, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
ARM GAS  /tmp/ccVeuSEG.s 			page 2


  41              		.cfi_offset 14, -4
  42 0002 0546     		mov	r5, r0
  19:./fs/fs_superblock.c **** 	struct super_block * sb = kmalloc(sizeof(struct super_block),GFP_KERNEL);
  43              		.loc 1 19 2 is_stmt 1 view .LVU2
  44              	.LVL1:
  45              	.LBB18:
  46              	.LBI18:
  47              		.file 2 "./include/linux/slab.h"
   1:./include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/slab.h **** /*
   3:./include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:./include/linux/slab.h ****  *
   5:./include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:./include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:./include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:./include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:./include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:./include/linux/slab.h ****  */
  11:./include/linux/slab.h **** 
  12:./include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:./include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:./include/linux/slab.h **** 
  15:./include/linux/slab.h **** #include <linux/cache.h>
  16:./include/linux/slab.h **** #include <linux/overflow.h>
  17:./include/linux/slab.h **** #include <linux/types.h>
  18:./include/linux/slab.h **** #include <linux/raid/pq.h>
  19:./include/linux/slab.h **** #include <linux/gfp_types.h>
  20:./include/linux/slab.h **** #include <linux/numa.h>
  21:./include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:./include/linux/slab.h **** #include <linux/spinlock.h>
  23:./include/linux/slab.h **** 
  24:./include/linux/slab.h **** enum _slab_flag_bits {
  25:./include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:./include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:./include/linux/slab.h **** 	_SLAB_POISON,
  28:./include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:./include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:./include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:./include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:./include/linux/slab.h **** 	_SLAB_STORE_USER,
  33:./include/linux/slab.h **** 	_SLAB_PANIC,
  34:./include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:./include/linux/slab.h **** 	_SLAB_TRACE,
  36:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:./include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:./include/linux/slab.h **** #endif
  39:./include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:./include/linux/slab.h **** 	_SLAB_NO_MERGE,
  41:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
  42:./include/linux/slab.h **** 	_SLAB_FAILSLAB,
  43:./include/linux/slab.h **** #endif
  44:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:./include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:./include/linux/slab.h **** #endif
  47:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
  48:./include/linux/slab.h **** 	_SLAB_KASAN,
  49:./include/linux/slab.h **** #endif
ARM GAS  /tmp/ccVeuSEG.s 			page 3


  50:./include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:./include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:./include/linux/slab.h **** #endif
  54:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:./include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:./include/linux/slab.h **** #endif
  57:./include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:./include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:./include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:./include/linux/slab.h **** #endif
  62:./include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:./include/linux/slab.h **** };
  64:./include/linux/slab.h **** 
  65:./include/linux/slab.h **** 
  66:./include/linux/slab.h **** 
  67:./include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:./include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:./include/linux/slab.h **** 
  70:./include/linux/slab.h **** /*
  71:./include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:./include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:./include/linux/slab.h ****  */
  74:./include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:./include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:./include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:./include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:./include/linux/slab.h **** /* DEBUG: Poison objects */
  79:./include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:./include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:./include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:./include/linux/slab.h **** /**
  83:./include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:./include/linux/slab.h ****  *
  85:./include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:./include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:./include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:./include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:./include/linux/slab.h ****  *
  90:./include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:./include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:./include/linux/slab.h ****  */
  93:./include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:./include/linux/slab.h **** /* Use GFP_DMA memory */
  95:./include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:./include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:./include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
  98:./include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
  99:./include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
 100:./include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:./include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:./include/linux/slab.h **** /**
 103:./include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
 104:./include/linux/slab.h ****  *
 105:./include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:./include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
ARM GAS  /tmp/ccVeuSEG.s 			page 4


 107:./include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:./include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:./include/linux/slab.h ****  *
 110:./include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:./include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:./include/linux/slab.h ****  * object validation pass. Something like:
 113:./include/linux/slab.h ****  *
 114:./include/linux/slab.h ****  * ::
 115:./include/linux/slab.h ****  *
 116:./include/linux/slab.h ****  *  begin:
 117:./include/linux/slab.h ****  *   rcu_read_lock();
 118:./include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:./include/linux/slab.h ****  *   if (obj) {
 120:./include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:./include/linux/slab.h ****  *       rcu_read_unlock();
 122:./include/linux/slab.h ****  *       goto begin;
 123:./include/linux/slab.h ****  *
 124:./include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:./include/linux/slab.h ****  *       put_ref(obj);
 126:./include/linux/slab.h ****  *       rcu_read_unlock();
 127:./include/linux/slab.h ****  *       goto begin;
 128:./include/linux/slab.h ****  *     }
 129:./include/linux/slab.h ****  *   }
 130:./include/linux/slab.h ****  *  rcu_read_unlock();
 131:./include/linux/slab.h ****  *
 132:./include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:./include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:./include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:./include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:./include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:./include/linux/slab.h ****  *
 138:./include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:./include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:./include/linux/slab.h ****  *
 141:./include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:./include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:./include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:./include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:./include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:./include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
 147:./include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:./include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:./include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:./include/linux/slab.h ****  * protection.
 151:./include/linux/slab.h ****  *
 152:./include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:./include/linux/slab.h ****  */
 154:./include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
 155:./include/linux/slab.h **** /* Trace allocations and frees */
 156:./include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
 157:./include/linux/slab.h **** 
 158:./include/linux/slab.h **** /* Flag to prevent checks on free */
 159:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
 161:./include/linux/slab.h **** #else
 162:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:./include/linux/slab.h **** #endif
ARM GAS  /tmp/ccVeuSEG.s 			page 5


 164:./include/linux/slab.h **** 
 165:./include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:./include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:./include/linux/slab.h **** 
 168:./include/linux/slab.h **** /*
 169:./include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:./include/linux/slab.h ****  * cautiously. Valid use cases:
 171:./include/linux/slab.h ****  *
 172:./include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:./include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:./include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:./include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:./include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:./include/linux/slab.h ****  */
 178:./include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:./include/linux/slab.h **** 
 180:./include/linux/slab.h **** /* Fault injection mark */
 181:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:./include/linux/slab.h **** #else
 184:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:./include/linux/slab.h **** #endif
 186:./include/linux/slab.h **** /**
 187:./include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:./include/linux/slab.h ****  *
 189:./include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:./include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:./include/linux/slab.h ****  */
 192:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:./include/linux/slab.h **** #else
 195:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:./include/linux/slab.h **** #endif
 197:./include/linux/slab.h **** 
 198:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:./include/linux/slab.h **** #else
 201:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:./include/linux/slab.h **** #endif
 203:./include/linux/slab.h **** 
 204:./include/linux/slab.h **** /*
 205:./include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:./include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:./include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:./include/linux/slab.h ****  */
 209:./include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:./include/linux/slab.h **** 
 211:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
 212:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
 213:./include/linux/slab.h **** #else
 214:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:./include/linux/slab.h **** #endif
 216:./include/linux/slab.h **** 
 217:./include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
 218:./include/linux/slab.h **** /**
 219:./include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:./include/linux/slab.h ****  *
ARM GAS  /tmp/ccVeuSEG.s 			page 6


 221:./include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:./include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:./include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:./include/linux/slab.h ****  */
 225:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:./include/linux/slab.h **** #else
 228:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:./include/linux/slab.h **** #endif
 230:./include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:./include/linux/slab.h **** 
 232:./include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:./include/linux/slab.h **** #else
 236:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:./include/linux/slab.h **** #endif
 238:./include/linux/slab.h **** 
 239:./include/linux/slab.h **** /*
 240:./include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:./include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:./include/linux/slab.h ****  */
 243:./include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:./include/linux/slab.h **** 
 245:./include/linux/slab.h **** /*
 246:./include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:./include/linux/slab.h ****  *
 248:./include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:./include/linux/slab.h ****  *
 250:./include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:./include/linux/slab.h ****  * Both make kfree a no-op.
 252:./include/linux/slab.h ****  */
 253:./include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:./include/linux/slab.h **** 
 255:./include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:./include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:./include/linux/slab.h **** 
 258:./include/linux/slab.h **** 
 259:./include/linux/slab.h **** 
 260:./include/linux/slab.h **** 
 261:./include/linux/slab.h **** 
 262:./include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:./include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:./include/linux/slab.h **** 
 265:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:./include/linux/slab.h **** ({						\
 267:./include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:./include/linux/slab.h **** })
 269:./include/linux/slab.h **** 
 270:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
 271:./include/linux/slab.h **** #else
 272:./include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:./include/linux/slab.h **** 
 274:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
 275:./include/linux/slab.h **** 
 276:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:./include/linux/slab.h **** 
ARM GAS  /tmp/ccVeuSEG.s 			page 7


 278:./include/linux/slab.h **** 
 279:./include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:./include/linux/slab.h **** 
 281:./include/linux/slab.h **** /*
 282:./include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:./include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:./include/linux/slab.h **** 	* given order would contain.
 285:./include/linux/slab.h **** 	*/				
 286:./include/linux/slab.h **** struct kmem_cache_order_objects {
 287:./include/linux/slab.h **** 	unsigned int x;
 288:./include/linux/slab.h **** };
 289:./include/linux/slab.h **** 
 290:./include/linux/slab.h **** struct kmem_cache_node {
 291:./include/linux/slab.h **** 	spinlock_t list_lock;
 292:./include/linux/slab.h **** 	unsigned long nr_partial;
 293:./include/linux/slab.h **** 	struct list_head partial;
 294:./include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:./include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:./include/linux/slab.h **** 	atomic_long_t total_objects;
 297:./include/linux/slab.h **** 	struct list_head full;
 298:./include/linux/slab.h **** #endif
 299:./include/linux/slab.h **** };
 300:./include/linux/slab.h **** 
 301:./include/linux/slab.h **** struct kmem_cache {
 302:./include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:./include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:./include/linux/slab.h **** 	#endif
 305:./include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:./include/linux/slab.h **** 		slab_flags_t flags;
 307:./include/linux/slab.h **** 		unsigned long min_partial;
 308:./include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:./include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:./include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:./include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:./include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:./include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:./include/linux/slab.h **** 		unsigned int cpu_partial;
 315:./include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:./include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:./include/linux/slab.h **** 	#endif
 318:./include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:./include/linux/slab.h **** 	
 320:./include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:./include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:./include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:./include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:./include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:./include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
 326:./include/linux/slab.h **** 		unsigned int align;		/* Alignment */
 327:./include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
 328:./include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:./include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:./include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:./include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
 332:./include/linux/slab.h **** 	#endif
 333:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:./include/linux/slab.h **** 		unsigned long random;
ARM GAS  /tmp/ccVeuSEG.s 			page 8


 335:./include/linux/slab.h **** 	#endif
 336:./include/linux/slab.h **** 	
 337:./include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:./include/linux/slab.h **** 		/*
 339:./include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:./include/linux/slab.h **** 			*/
 341:./include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:./include/linux/slab.h **** 	#endif
 343:./include/linux/slab.h **** 	
 344:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:./include/linux/slab.h **** 		unsigned int *random_seq;
 346:./include/linux/slab.h **** 	#endif
 347:./include/linux/slab.h **** 	
 348:./include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:./include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:./include/linux/slab.h **** 	#endif
 351:./include/linux/slab.h **** 	
 352:./include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:./include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:./include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:./include/linux/slab.h **** 	#endif
 356:./include/linux/slab.h **** 	
 357:./include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:./include/linux/slab.h **** 	};
 359:./include/linux/slab.h **** 					
 360:./include/linux/slab.h **** 
 361:./include/linux/slab.h **** 
 362:./include/linux/slab.h **** 
 363:./include/linux/slab.h **** 
 364:./include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:./include/linux/slab.h **** 
 366:./include/linux/slab.h **** 
 367:./include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:./include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:./include/linux/slab.h **** 
 370:./include/linux/slab.h **** 
 371:./include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:./include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:./include/linux/slab.h **** }
 374:./include/linux/slab.h **** 
 375:./include/linux/slab.h **** static void inline vfree(void *addr){
 376:./include/linux/slab.h **** 	__sfree__(addr);
 377:./include/linux/slab.h **** }
 378:./include/linux/slab.h **** 
 379:./include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
  48              		.loc 2 379 21 view .LVU3
  49              	.LBB19:
 380:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
  50              		.loc 2 380 2 view .LVU4
  51              		.loc 2 380 9 is_stmt 0 view .LVU5
  52 0004 4FF44C61 		mov	r1, #3264
  53 0008 7820     		movs	r0, #120
  54              	.LVL2:
  55              		.loc 2 380 9 view .LVU6
  56 000a FFF7FEFF 		bl	__smalloc__
  57              	.LVL3:
  58              		.loc 2 380 9 view .LVU7
ARM GAS  /tmp/ccVeuSEG.s 			page 9


  59              	.LBE19:
  60              	.LBE18:
  20:./fs/fs_superblock.c ****     if(sb == NULL) 
  61              		.loc 1 20 5 is_stmt 1 view .LVU8
  62              		.loc 1 20 7 is_stmt 0 view .LVU9
  63 000e 78B1     		cbz	r0, .L4
  64 0010 0446     		mov	r4, r0
  21:./fs/fs_superblock.c ****     return -ENOMEM;
  22:./fs/fs_superblock.c **** 	memset(sb,0,sizeof(struct super_block));
  65              		.loc 1 22 2 is_stmt 1 view .LVU10
  66 0012 7822     		movs	r2, #120
  67 0014 0021     		movs	r1, #0
  68 0016 FFF7FEFF 		bl	memset
  69              	.LVL4:
  23:./fs/fs_superblock.c **** 	INIT_LIST_HEAD(&sb->s_list);
  70              		.loc 1 23 2 view .LVU11
  71              	.LBB20:
  72              	.LBI20:
  73              		.file 3 "./include/linux/list.h"
   1:./include/linux/list.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/list.h **** #ifndef _LINUX_LIST_H
   3:./include/linux/list.h **** #define _LINUX_LIST_H
   4:./include/linux/list.h **** 
   5:./include/linux/list.h **** #include <linux/container_of.h>
   6:./include/linux/list.h **** #include <linux/types.h>
   7:./include/linux/list.h **** #include <linux/stddef.h>
   8:./include/linux/list.h **** #include <linux/poison.h>
   9:./include/linux/list.h **** #include <linux/const.h>
  10:./include/linux/list.h **** 
  11:./include/linux/list.h **** #include <asm/barrier.h>
  12:./include/linux/list.h **** #include <linux/rwonce.h>
  13:./include/linux/list.h **** /*
  14:./include/linux/list.h ****  * Circular doubly linked list implementation.
  15:./include/linux/list.h ****  *
  16:./include/linux/list.h ****  * Some of the internal functions ("__xxx") are useful when
  17:./include/linux/list.h ****  * manipulating whole lists rather than single entries, as
  18:./include/linux/list.h ****  * sometimes we already know the next/prev entries and we can
  19:./include/linux/list.h ****  * generate better code by using them directly rather than
  20:./include/linux/list.h ****  * using the generic single-entry routines.
  21:./include/linux/list.h ****  */
  22:./include/linux/list.h **** 
  23:./include/linux/list.h **** #define LIST_HEAD_INIT(name) { &(name), &(name) }
  24:./include/linux/list.h **** 
  25:./include/linux/list.h **** #define LIST_HEAD(name) \
  26:./include/linux/list.h **** 	struct list_head name = LIST_HEAD_INIT(name)
  27:./include/linux/list.h **** 
  28:./include/linux/list.h **** /**
  29:./include/linux/list.h ****  * INIT_LIST_HEAD - Initialize a list_head structure
  30:./include/linux/list.h ****  * @list: list_head structure to be initialized.
  31:./include/linux/list.h ****  *
  32:./include/linux/list.h ****  * Initializes the list_head to point to itself.  If it is a list header,
  33:./include/linux/list.h ****  * the result is an empty list.
  34:./include/linux/list.h ****  */
  35:./include/linux/list.h **** static inline void INIT_LIST_HEAD(struct list_head *list)
  74              		.loc 3 35 20 view .LVU12
  75              	.LBB21:
  36:./include/linux/list.h **** {
ARM GAS  /tmp/ccVeuSEG.s 			page 10


  37:./include/linux/list.h **** 	WRITE_ONCE(list->next, list);
  76              		.loc 3 37 2 view .LVU13
  77              		.loc 3 37 2 view .LVU14
  78              	.LBB22:
  79              		.loc 3 37 2 view .LVU15
  80              		.loc 3 37 2 view .LVU16
  81              	.LBE22:
  82              		.loc 3 37 2 discriminator 2 view .LVU17
  83              		.loc 3 37 2 discriminator 2 view .LVU18
  84              		.loc 3 37 2 discriminator 2 view .LVU19
  85 001a 2460     		str	r4, [r4]
  86              		.loc 3 37 2 discriminator 2 view .LVU20
  87              		.loc 3 37 2 discriminator 2 view .LVU21
  38:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
  88              		.loc 3 38 2 view .LVU22
  89              		.loc 3 38 2 view .LVU23
  90              	.LBB23:
  91              		.loc 3 38 2 view .LVU24
  92              		.loc 3 38 2 view .LVU25
  93              	.LBE23:
  94              		.loc 3 38 2 discriminator 2 view .LVU26
  95              		.loc 3 38 2 discriminator 2 view .LVU27
  96              		.loc 3 38 2 discriminator 2 view .LVU28
  97 001c 6460     		str	r4, [r4, #4]
  98              		.loc 3 38 2 discriminator 2 view .LVU29
  99              		.loc 3 38 2 discriminator 2 view .LVU30
 100              	.LVL5:
 101              		.loc 3 38 2 is_stmt 0 discriminator 2 view .LVU31
 102              	.LBE21:
 103              	.LBE20:
  24:./fs/fs_superblock.c **** 	sb->s_bdev = bdev;
 104              		.loc 1 24 2 is_stmt 1 view .LVU32
 105              		.loc 1 24 13 is_stmt 0 view .LVU33
 106 001e E561     		str	r5, [r4, #28]
  25:./fs/fs_superblock.c ****     INIT_HLIST_NODE(&sb->s_instances);
 107              		.loc 1 25 5 is_stmt 1 view .LVU34
  26:./fs/fs_superblock.c ****     INIT_LIST_HEAD(&sb->s_mounts);
 108              		.loc 1 26 5 view .LVU35
 109 0020 04F12803 		add	r3, r4, #40
 110              	.LVL6:
 111              	.LBB24:
 112              	.LBI24:
  35:./include/linux/list.h **** {
 113              		.loc 3 35 20 view .LVU36
 114              	.LBB25:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 115              		.loc 3 37 2 view .LVU37
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 116              		.loc 3 37 2 view .LVU38
 117              	.LBB26:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 118              		.loc 3 37 2 view .LVU39
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 119              		.loc 3 37 2 view .LVU40
 120              	.LBE26:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 121              		.loc 3 37 2 discriminator 2 view .LVU41
ARM GAS  /tmp/ccVeuSEG.s 			page 11


  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 122              		.loc 3 37 2 discriminator 2 view .LVU42
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 123              		.loc 3 37 2 discriminator 2 view .LVU43
 124 0024 A362     		str	r3, [r4, #40]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 125              		.loc 3 37 2 discriminator 2 view .LVU44
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 126              		.loc 3 37 2 discriminator 2 view .LVU45
 127              		.loc 3 38 2 view .LVU46
 128              		.loc 3 38 2 view .LVU47
 129              	.LBB27:
 130              		.loc 3 38 2 view .LVU48
 131              		.loc 3 38 2 view .LVU49
 132              	.LBE27:
 133              		.loc 3 38 2 discriminator 2 view .LVU50
 134              		.loc 3 38 2 discriminator 2 view .LVU51
 135              		.loc 3 38 2 discriminator 2 view .LVU52
 136 0026 E362     		str	r3, [r4, #44]
 137              		.loc 3 38 2 discriminator 2 view .LVU53
 138              		.loc 3 38 2 discriminator 2 view .LVU54
 139              	.LVL7:
 140              		.loc 3 38 2 is_stmt 0 discriminator 2 view .LVU55
 141              	.LBE25:
 142              	.LBE24:
  27:./fs/fs_superblock.c **** 	mutex_init(&sb->s_vfs_rename_mutex);
 143              		.loc 1 27 2 is_stmt 1 view .LVU56
  28:./fs/fs_superblock.c **** 	sb->s_blocksize = 512;
 144              		.loc 1 28 2 view .LVU57
 145              		.loc 1 28 18 is_stmt 0 view .LVU58
 146 0028 4FF40073 		mov	r3, #512
 147 002c E360     		str	r3, [r4, #12]
  29:./fs/fs_superblock.c **** 	INIT_HLIST_HEAD(&sb->s_pins);
 148              		.loc 1 29 2 is_stmt 1 view .LVU59
 149              	.LVL8:
 150              	.L1:
  30:./fs/fs_superblock.c **** }
 151              		.loc 1 30 1 is_stmt 0 view .LVU60
 152 002e 38BD     		pop	{r3, r4, r5, pc}
 153              	.LVL9:
 154              	.L4:
  21:./fs/fs_superblock.c **** 	memset(sb,0,sizeof(struct super_block));
 155              		.loc 1 21 5 is_stmt 1 view .LVU61
  21:./fs/fs_superblock.c **** 	memset(sb,0,sizeof(struct super_block));
 156              		.loc 1 21 12 is_stmt 0 discriminator 1 view .LVU62
 157 0030 6FF00B00 		mvn	r0, #11
 158              	.LVL10:
  21:./fs/fs_superblock.c **** 	memset(sb,0,sizeof(struct super_block));
 159              		.loc 1 21 12 view .LVU63
 160 0034 FBE7     		b	.L1
 161              		.cfi_endproc
 162              	.LFE1033:
 164              		.section	.text.put_super,"ax",%progbits
 165              		.align	1
 166              		.global	put_super
 167              		.syntax unified
 168              		.thumb
ARM GAS  /tmp/ccVeuSEG.s 			page 12


 169              		.thumb_func
 171              	put_super:
 172              	.LVL11:
 173              	.LFB1034:
  31:./fs/fs_superblock.c **** EXPORT_SYMBOL(alloc_super);
  32:./fs/fs_superblock.c **** 
  33:./fs/fs_superblock.c **** void put_super(struct super_block *sb){
 174              		.loc 1 33 39 is_stmt 1 view -0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
  34:./fs/fs_superblock.c **** 	if(sb !=  NULL)
 178              		.loc 1 34 2 view .LVU65
 179              		.loc 1 34 4 is_stmt 0 view .LVU66
 180 0000 18B1     		cbz	r0, .L8
  33:./fs/fs_superblock.c **** 	if(sb !=  NULL)
 181              		.loc 1 33 39 view .LVU67
 182 0002 08B5     		push	{r3, lr}
 183              	.LCFI1:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 3, -8
 186              		.cfi_offset 14, -4
  35:./fs/fs_superblock.c **** 	kfree(sb);	
 187              		.loc 1 35 2 is_stmt 1 view .LVU68
 188              	.LVL12:
 189              	.LBB28:
 190              	.LBI28:
 381:./include/linux/slab.h **** }
 382:./include/linux/slab.h **** 
 383:./include/linux/slab.h **** static void inline kfree(const void *ptr){
 191              		.loc 2 383 20 view .LVU69
 192              	.LBB29:
 384:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 193              		.loc 2 384 2 view .LVU70
 194 0004 FFF7FEFF 		bl	__sfree__
 195              	.LVL13:
 196              		.loc 2 384 2 is_stmt 0 view .LVU71
 197              	.LBE29:
 198              	.LBE28:
  36:./fs/fs_superblock.c **** }
 199              		.loc 1 36 1 view .LVU72
 200 0008 08BD     		pop	{r3, pc}
 201              	.LVL14:
 202              	.L8:
 203              	.LCFI2:
 204              		.cfi_def_cfa_offset 0
 205              		.cfi_restore 3
 206              		.cfi_restore 14
 207              		.loc 1 36 1 view .LVU73
 208 000a 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE1034:
 212              		.section	.rodata.str1.4,"aMS",%progbits,1
 213              		.align	2
 214              	.LC0:
 215 0000 7075745F 		.ascii	"put_super\000"
 215      73757065 
ARM GAS  /tmp/ccVeuSEG.s 			page 13


 215      7200
 216 000a 0000     		.align	2
 217              	.LC1:
 218 000c 00       		.ascii	"\000"
 219              		.section	.export_table,"aw"
 220              		.align	2
 223              	put_super_export_struct:
 224 0000 00000000 		.word	.LC0
 225 0004 0C000000 		.word	.LC1
 226 0008 00000000 		.word	put_super
 227              		.section	.rodata.str1.4
 228 000d 000000   		.align	2
 229              	.LC2:
 230 0010 616C6C6F 		.ascii	"alloc_super\000"
 230      635F7375 
 230      70657200 
 231              		.section	.export_table
 232              		.align	2
 235              	alloc_super_export_struct:
 236 000c 10000000 		.word	.LC2
 237 0010 0C000000 		.word	.LC1
 238 0014 00000000 		.word	alloc_super
 239              		.text
 240              	.Letext0:
 241              		.file 4 "./include/asm-generic/int-l64.h"
 242              		.file 5 "./include/asm-generic/posix_types.h"
 243              		.file 6 "./include/uapi/linux/types.h"
 244              		.file 7 "./include/linux/types.h"
 245              		.file 8 "./include/linux/export.h"
 246              		.file 9 "./include/linux/errseq.h"
 247              		.file 10 "./include/linux/time64.h"
 248              		.file 11 "./arch/arm_m/include/asm/spinlock.h"
 249              		.file 12 "./include/linux/spinlock_types_raw.h"
 250              		.file 13 "./include/linux/spinlock_types.h"
 251              		.file 14 "./include/linux/rbtree_types.h"
 252              		.file 15 "./include/linux/uidgid_types.h"
 253              		.file 16 "./include/linux/projid.h"
 254              		.file 17 "./include/linux/fs.h"
 255              		.file 18 "./include/linux/mnt_idmapping.h"
 256              		.file 19 "./include/linux/mutex.h"
 257              		.file 20 "./include/linux/uio.h"
 258              		.file 21 "./include/linux/wait.h"
 259              		.file 22 "./include/linux/xarray.h"
 260              		.file 23 "./include/linux/migrate_mode.h"
 261              		.file 24 "./include/linux/rw_hint.h"
 262              		.file 25 "./include/linux/reciprocal_div.h"
 263              		.file 26 "./include/linux/mm_type.h"
 264              		.file 27 "./include/linux/bvec.h"
 265              		.file 28 "./include/linux/blk_types.h"
 266              		.file 29 "./include/linux/blkdev.h"
 267              		.file 30 "./include/linux/bio.h"
 268              		.file 31 "./include/linux/mempool_super_haper.h"
 269              		.file 32 "./include/linux/mempool.h"
 270              		.file 33 "./include/linux/lockdep_types.h"
 271              		.file 34 "./include/linux/workqueue_types.h"
 272              		.file 35 "./include/linux/blk-mq.h"
 273              		.file 36 "./include/linux/dcache.h"
ARM GAS  /tmp/ccVeuSEG.s 			page 14


 274              		.file 37 "./include/uapi/linux/pr.h"
 275              		.file 38 "./include/linux/pr.h"
 276              		.file 39 "./include/linux/hdreg.h"
 277              		.file 40 "./include/linux/lockref.h"
 278              		.file 41 "./include/linux/path.h"
 279              		.file 42 "./include/linux/statfs.h"
 280              		.file 43 "./include/linux/stat.h"
 281              		.file 44 "./include/linux/gfp_types.h"
 282              		.file 45 "./arch/arm_m/include/asm/string.h"
 283              		.file 46 "<built-in>"
ARM GAS  /tmp/ccVeuSEG.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 fs_superblock.c
     /tmp/ccVeuSEG.s:21     .text.alloc_super:00000000 $t
     /tmp/ccVeuSEG.s:27     .text.alloc_super:00000000 alloc_super
     /tmp/ccVeuSEG.s:165    .text.put_super:00000000 $t
     /tmp/ccVeuSEG.s:171    .text.put_super:00000000 put_super
     /tmp/ccVeuSEG.s:213    .rodata.str1.4:00000000 $d
     /tmp/ccVeuSEG.s:220    .export_table:00000000 $d
     /tmp/ccVeuSEG.s:223    .export_table:00000000 put_super_export_struct
     /tmp/ccVeuSEG.s:235    .export_table:0000000c alloc_super_export_struct

UNDEFINED SYMBOLS
__smalloc__
memset
__sfree__
