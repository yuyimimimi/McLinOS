ARM GAS  /tmp/cc7mVM5J.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"add_disk.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./block/add_disk.c"
  20              		.section	.text.__spin_init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	__spin_init:
  27              	.LVL0:
  28              	.LFB238:
  29              		.file 2 "./arch/arm_m/include/asm/spinlock.h"
   1:./arch/arm_m/include/asm/spinlock.h **** #ifndef __SPIN_LOCK_H_
   2:./arch/arm_m/include/asm/spinlock.h **** #define __SPIN_LOCK_H_
   3:./arch/arm_m/include/asm/spinlock.h **** 
   4:./arch/arm_m/include/asm/spinlock.h **** #include <linux/sched.h>
   5:./arch/arm_m/include/asm/spinlock.h **** 
   6:./arch/arm_m/include/asm/spinlock.h **** typedef struct { 
   7:./arch/arm_m/include/asm/spinlock.h ****      int flag; 
   8:./arch/arm_m/include/asm/spinlock.h **** } arch_spinlock_t;
   9:./arch/arm_m/include/asm/spinlock.h **** 
  10:./arch/arm_m/include/asm/spinlock.h **** static int __spin_init(arch_spinlock_t *lock) 
  11:./arch/arm_m/include/asm/spinlock.h **** {
  30              		.loc 2 11 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  12:./arch/arm_m/include/asm/spinlock.h ****     lock->flag = 0;
  35              		.loc 2 12 5 view .LVU1
  36              		.loc 2 12 16 is_stmt 0 view .LVU2
  37 0000 0023     		movs	r3, #0
  38 0002 0360     		str	r3, [r0]
  39              	.LVL1:
  13:./arch/arm_m/include/asm/spinlock.h **** }
  40              		.loc 2 13 1 view .LVU3
  41 0004 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE238:
  45              		.section	.text.spin_lock_init,"ax",%progbits
  46              		.align	1
ARM GAS  /tmp/cc7mVM5J.s 			page 2


  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  51              	spin_lock_init:
  52              	.LVL2:
  53              	.LFB241:
  54              		.file 3 "./include/linux/spinlock.h"
   1:./include/linux/spinlock.h **** #ifndef __SPINLOCK_H__
   2:./include/linux/spinlock.h **** #define __SPINLOCK_H__
   3:./include/linux/spinlock.h **** 
   4:./include/linux/spinlock.h **** #include <linux/types.h>
   5:./include/linux/spinlock.h **** #include <linux/spinlock_types.h>
   6:./include/linux/spinlock.h **** #include <linux/sched.h>
   7:./include/linux/spinlock.h **** 
   8:./include/linux/spinlock.h **** 
   9:./include/linux/spinlock.h **** 
  10:./include/linux/spinlock.h **** static void spin_lock_init(spinlock_t* lock){
  55              		.loc 3 10 45 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		.loc 3 10 45 is_stmt 0 view .LVU5
  60 0000 08B5     		push	{r3, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 3, -8
  64              		.cfi_offset 14, -4
  11:./include/linux/spinlock.h ****     __spin_init(&lock->rlock.raw_lock);
  65              		.loc 3 11 5 is_stmt 1 view .LVU6
  66 0002 FFF7FEFF 		bl	__spin_init
  67              	.LVL3:
  12:./include/linux/spinlock.h **** }
  68              		.loc 3 12 1 is_stmt 0 view .LVU7
  69 0006 08BD     		pop	{r3, pc}
  70              		.cfi_endproc
  71              	.LFE241:
  73              		.section	.rodata.add_mbr_son_disk.str1.4,"aMS",%progbits,1
  74              		.align	2
  75              	.LC0:
  76 0000 63616E20 		.ascii	"can not alloc more memory\012\000"
  76      6E6F7420 
  76      616C6C6F 
  76      63206D6F 
  76      7265206D 
  77              		.section	.text.add_mbr_son_disk,"ax",%progbits
  78              		.align	1
  79              		.global	add_mbr_son_disk
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	add_mbr_son_disk:
  85              	.LVL4:
  86              	.LFB1036:
   1:./block/add_disk.c **** #include <linux/kernel.h>
   2:./block/add_disk.c **** #include <linux/slab.h>
   3:./block/add_disk.c **** #include <linux/fs.h>
   4:./block/add_disk.c **** #include <linux/blkdev.h>
ARM GAS  /tmp/cc7mVM5J.s 			page 3


   5:./block/add_disk.c **** #include <linux/spinlock.h>
   6:./block/add_disk.c **** #include <linux/string.h>
   7:./block/add_disk.c **** 
   8:./block/add_disk.c **** static void register_son_disk(struct block_device *bdev);
   9:./block/add_disk.c **** int __register_disk(struct block_device *dev,struct gendisk *disk,char *name);
  10:./block/add_disk.c **** 
  11:./block/add_disk.c **** int __add_disk(struct gendisk *disk)
  12:./block/add_disk.c **** {
  13:./block/add_disk.c ****     struct block_device *dev;
  14:./block/add_disk.c ****     if(disk->part0 == NULL){
  15:./block/add_disk.c ****         dev = kmalloc(sizeof(struct block_device) , GFP_KERNEL);
  16:./block/add_disk.c ****         if(dev == NULL){
  17:./block/add_disk.c ****             printk(KERN_INFO "can not alloc more memory\n");
  18:./block/add_disk.c ****             return -ENOMEM;
  19:./block/add_disk.c ****         }   
  20:./block/add_disk.c ****         disk->part0 = dev;     
  21:./block/add_disk.c ****     }
  22:./block/add_disk.c **** 
  23:./block/add_disk.c ****     dev = disk->part0;
  24:./block/add_disk.c ****     dev->bd_disk = disk;
  25:./block/add_disk.c ****     dev->bd_queue = disk->queue;
  26:./block/add_disk.c ****     dev->bd_stamp = jiffies;
  27:./block/add_disk.c ****     dev->bd_dev = disk->major;
  28:./block/add_disk.c ****     spin_lock_init(&dev->bd_size_lock);
  29:./block/add_disk.c ****     dev->bd_claiming = NULL;
  30:./block/add_disk.c ****     dev->bd_holder = NULL;
  31:./block/add_disk.c ****     mutex_init(&dev->bd_holder_lock);
  32:./block/add_disk.c ****     mutex_init(&dev->bd_fsfreeze_mutex);
  33:./block/add_disk.c ****     dev->bd_holders = 0;
  34:./block/add_disk.c ****     __register_disk(dev,disk,NULL);
  35:./block/add_disk.c **** 
  36:./block/add_disk.c ****     register_son_disk(dev);
  37:./block/add_disk.c **** 
  38:./block/add_disk.c ****     return 0;
  39:./block/add_disk.c **** }
  40:./block/add_disk.c **** 
  41:./block/add_disk.c **** #define mbr_partiton_startaddress 0x01
  42:./block/add_disk.c **** #define mbr_partiton_size         0x02
  43:./block/add_disk.c **** #define mbr_partiton_magic        0x03
  44:./block/add_disk.c **** 
  45:./block/add_disk.c **** extern uint32_t get_partiton_data(struct partition* partition,int number,uint32_t flag);
  46:./block/add_disk.c **** extern struct partition* get_partition_from_device(struct block_device *bdev);
  47:./block/add_disk.c **** extern int check_empty_MBR_Table(struct partition *partition,int number);
  48:./block/add_disk.c **** 
  49:./block/add_disk.c **** int add_mbr_son_disk(struct block_device *dev,struct partition* partition,uint32_t number)
  50:./block/add_disk.c **** {
  87              		.loc 1 50 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 32
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		.loc 1 50 1 is_stmt 0 view .LVU9
  92 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 28
  95              		.cfi_offset 4, -28
  96              		.cfi_offset 5, -24
  97              		.cfi_offset 6, -20
ARM GAS  /tmp/cc7mVM5J.s 			page 4


  98              		.cfi_offset 7, -16
  99              		.cfi_offset 8, -12
 100              		.cfi_offset 9, -8
 101              		.cfi_offset 14, -4
 102 0004 89B0     		sub	sp, sp, #36
 103              	.LCFI2:
 104              		.cfi_def_cfa_offset 64
 105 0006 0646     		mov	r6, r0
 106 0008 0F46     		mov	r7, r1
 107 000a 1546     		mov	r5, r2
  51:./block/add_disk.c ****     struct block_device* son_dev = kmalloc(sizeof(struct block_device) , GFP_KERNEL);
 108              		.loc 1 51 5 is_stmt 1 view .LVU10
 109              	.LVL5:
 110              	.LBB17:
 111              	.LBI17:
 112              		.file 4 "./include/linux/slab.h"
   1:./include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/slab.h **** /*
   3:./include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:./include/linux/slab.h ****  *
   5:./include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:./include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:./include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:./include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:./include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:./include/linux/slab.h ****  */
  11:./include/linux/slab.h **** 
  12:./include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:./include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:./include/linux/slab.h **** 
  15:./include/linux/slab.h **** #include <linux/cache.h>
  16:./include/linux/slab.h **** #include <linux/overflow.h>
  17:./include/linux/slab.h **** #include <linux/types.h>
  18:./include/linux/slab.h **** #include <linux/raid/pq.h>
  19:./include/linux/slab.h **** #include <linux/gfp_types.h>
  20:./include/linux/slab.h **** #include <linux/numa.h>
  21:./include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:./include/linux/slab.h **** #include <linux/spinlock.h>
  23:./include/linux/slab.h **** 
  24:./include/linux/slab.h **** enum _slab_flag_bits {
  25:./include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:./include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:./include/linux/slab.h **** 	_SLAB_POISON,
  28:./include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:./include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:./include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:./include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:./include/linux/slab.h **** 	_SLAB_STORE_USER,
  33:./include/linux/slab.h **** 	_SLAB_PANIC,
  34:./include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:./include/linux/slab.h **** 	_SLAB_TRACE,
  36:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:./include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:./include/linux/slab.h **** #endif
  39:./include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:./include/linux/slab.h **** 	_SLAB_NO_MERGE,
  41:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
ARM GAS  /tmp/cc7mVM5J.s 			page 5


  42:./include/linux/slab.h **** 	_SLAB_FAILSLAB,
  43:./include/linux/slab.h **** #endif
  44:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:./include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:./include/linux/slab.h **** #endif
  47:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
  48:./include/linux/slab.h **** 	_SLAB_KASAN,
  49:./include/linux/slab.h **** #endif
  50:./include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:./include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:./include/linux/slab.h **** #endif
  54:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:./include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:./include/linux/slab.h **** #endif
  57:./include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:./include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:./include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:./include/linux/slab.h **** #endif
  62:./include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:./include/linux/slab.h **** };
  64:./include/linux/slab.h **** 
  65:./include/linux/slab.h **** 
  66:./include/linux/slab.h **** 
  67:./include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:./include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:./include/linux/slab.h **** 
  70:./include/linux/slab.h **** /*
  71:./include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:./include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:./include/linux/slab.h ****  */
  74:./include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:./include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:./include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:./include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:./include/linux/slab.h **** /* DEBUG: Poison objects */
  79:./include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:./include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:./include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:./include/linux/slab.h **** /**
  83:./include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:./include/linux/slab.h ****  *
  85:./include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:./include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:./include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:./include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:./include/linux/slab.h ****  *
  90:./include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:./include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:./include/linux/slab.h ****  */
  93:./include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:./include/linux/slab.h **** /* Use GFP_DMA memory */
  95:./include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:./include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:./include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
  98:./include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
ARM GAS  /tmp/cc7mVM5J.s 			page 6


  99:./include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
 100:./include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:./include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:./include/linux/slab.h **** /**
 103:./include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
 104:./include/linux/slab.h ****  *
 105:./include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:./include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
 107:./include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:./include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:./include/linux/slab.h ****  *
 110:./include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:./include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:./include/linux/slab.h ****  * object validation pass. Something like:
 113:./include/linux/slab.h ****  *
 114:./include/linux/slab.h ****  * ::
 115:./include/linux/slab.h ****  *
 116:./include/linux/slab.h ****  *  begin:
 117:./include/linux/slab.h ****  *   rcu_read_lock();
 118:./include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:./include/linux/slab.h ****  *   if (obj) {
 120:./include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:./include/linux/slab.h ****  *       rcu_read_unlock();
 122:./include/linux/slab.h ****  *       goto begin;
 123:./include/linux/slab.h ****  *
 124:./include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:./include/linux/slab.h ****  *       put_ref(obj);
 126:./include/linux/slab.h ****  *       rcu_read_unlock();
 127:./include/linux/slab.h ****  *       goto begin;
 128:./include/linux/slab.h ****  *     }
 129:./include/linux/slab.h ****  *   }
 130:./include/linux/slab.h ****  *  rcu_read_unlock();
 131:./include/linux/slab.h ****  *
 132:./include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:./include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:./include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:./include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:./include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:./include/linux/slab.h ****  *
 138:./include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:./include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:./include/linux/slab.h ****  *
 141:./include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:./include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:./include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:./include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:./include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:./include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
 147:./include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:./include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:./include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:./include/linux/slab.h ****  * protection.
 151:./include/linux/slab.h ****  *
 152:./include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:./include/linux/slab.h ****  */
 154:./include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
 155:./include/linux/slab.h **** /* Trace allocations and frees */
ARM GAS  /tmp/cc7mVM5J.s 			page 7


 156:./include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
 157:./include/linux/slab.h **** 
 158:./include/linux/slab.h **** /* Flag to prevent checks on free */
 159:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
 161:./include/linux/slab.h **** #else
 162:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:./include/linux/slab.h **** #endif
 164:./include/linux/slab.h **** 
 165:./include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:./include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:./include/linux/slab.h **** 
 168:./include/linux/slab.h **** /*
 169:./include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:./include/linux/slab.h ****  * cautiously. Valid use cases:
 171:./include/linux/slab.h ****  *
 172:./include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:./include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:./include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:./include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:./include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:./include/linux/slab.h ****  */
 178:./include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:./include/linux/slab.h **** 
 180:./include/linux/slab.h **** /* Fault injection mark */
 181:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:./include/linux/slab.h **** #else
 184:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:./include/linux/slab.h **** #endif
 186:./include/linux/slab.h **** /**
 187:./include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:./include/linux/slab.h ****  *
 189:./include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:./include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:./include/linux/slab.h ****  */
 192:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:./include/linux/slab.h **** #else
 195:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:./include/linux/slab.h **** #endif
 197:./include/linux/slab.h **** 
 198:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:./include/linux/slab.h **** #else
 201:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:./include/linux/slab.h **** #endif
 203:./include/linux/slab.h **** 
 204:./include/linux/slab.h **** /*
 205:./include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:./include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:./include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:./include/linux/slab.h ****  */
 209:./include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:./include/linux/slab.h **** 
 211:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
 212:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
ARM GAS  /tmp/cc7mVM5J.s 			page 8


 213:./include/linux/slab.h **** #else
 214:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:./include/linux/slab.h **** #endif
 216:./include/linux/slab.h **** 
 217:./include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
 218:./include/linux/slab.h **** /**
 219:./include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:./include/linux/slab.h ****  *
 221:./include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:./include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:./include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:./include/linux/slab.h ****  */
 225:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:./include/linux/slab.h **** #else
 228:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:./include/linux/slab.h **** #endif
 230:./include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:./include/linux/slab.h **** 
 232:./include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:./include/linux/slab.h **** #else
 236:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:./include/linux/slab.h **** #endif
 238:./include/linux/slab.h **** 
 239:./include/linux/slab.h **** /*
 240:./include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:./include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:./include/linux/slab.h ****  */
 243:./include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:./include/linux/slab.h **** 
 245:./include/linux/slab.h **** /*
 246:./include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:./include/linux/slab.h ****  *
 248:./include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:./include/linux/slab.h ****  *
 250:./include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:./include/linux/slab.h ****  * Both make kfree a no-op.
 252:./include/linux/slab.h ****  */
 253:./include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:./include/linux/slab.h **** 
 255:./include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:./include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:./include/linux/slab.h **** 
 258:./include/linux/slab.h **** 
 259:./include/linux/slab.h **** 
 260:./include/linux/slab.h **** 
 261:./include/linux/slab.h **** 
 262:./include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:./include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:./include/linux/slab.h **** 
 265:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:./include/linux/slab.h **** ({						\
 267:./include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:./include/linux/slab.h **** })
 269:./include/linux/slab.h **** 
ARM GAS  /tmp/cc7mVM5J.s 			page 9


 270:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
 271:./include/linux/slab.h **** #else
 272:./include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:./include/linux/slab.h **** 
 274:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
 275:./include/linux/slab.h **** 
 276:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:./include/linux/slab.h **** 
 278:./include/linux/slab.h **** 
 279:./include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:./include/linux/slab.h **** 
 281:./include/linux/slab.h **** /*
 282:./include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:./include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:./include/linux/slab.h **** 	* given order would contain.
 285:./include/linux/slab.h **** 	*/				
 286:./include/linux/slab.h **** struct kmem_cache_order_objects {
 287:./include/linux/slab.h **** 	unsigned int x;
 288:./include/linux/slab.h **** };
 289:./include/linux/slab.h **** 
 290:./include/linux/slab.h **** struct kmem_cache_node {
 291:./include/linux/slab.h **** 	spinlock_t list_lock;
 292:./include/linux/slab.h **** 	unsigned long nr_partial;
 293:./include/linux/slab.h **** 	struct list_head partial;
 294:./include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:./include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:./include/linux/slab.h **** 	atomic_long_t total_objects;
 297:./include/linux/slab.h **** 	struct list_head full;
 298:./include/linux/slab.h **** #endif
 299:./include/linux/slab.h **** };
 300:./include/linux/slab.h **** 
 301:./include/linux/slab.h **** struct kmem_cache {
 302:./include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:./include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:./include/linux/slab.h **** 	#endif
 305:./include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:./include/linux/slab.h **** 		slab_flags_t flags;
 307:./include/linux/slab.h **** 		unsigned long min_partial;
 308:./include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:./include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:./include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:./include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:./include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:./include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:./include/linux/slab.h **** 		unsigned int cpu_partial;
 315:./include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:./include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:./include/linux/slab.h **** 	#endif
 318:./include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:./include/linux/slab.h **** 	
 320:./include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:./include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:./include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:./include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:./include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:./include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
 326:./include/linux/slab.h **** 		unsigned int align;		/* Alignment */
ARM GAS  /tmp/cc7mVM5J.s 			page 10


 327:./include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
 328:./include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:./include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:./include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:./include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
 332:./include/linux/slab.h **** 	#endif
 333:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:./include/linux/slab.h **** 		unsigned long random;
 335:./include/linux/slab.h **** 	#endif
 336:./include/linux/slab.h **** 	
 337:./include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:./include/linux/slab.h **** 		/*
 339:./include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:./include/linux/slab.h **** 			*/
 341:./include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:./include/linux/slab.h **** 	#endif
 343:./include/linux/slab.h **** 	
 344:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:./include/linux/slab.h **** 		unsigned int *random_seq;
 346:./include/linux/slab.h **** 	#endif
 347:./include/linux/slab.h **** 	
 348:./include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:./include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:./include/linux/slab.h **** 	#endif
 351:./include/linux/slab.h **** 	
 352:./include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:./include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:./include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:./include/linux/slab.h **** 	#endif
 356:./include/linux/slab.h **** 	
 357:./include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:./include/linux/slab.h **** 	};
 359:./include/linux/slab.h **** 					
 360:./include/linux/slab.h **** 
 361:./include/linux/slab.h **** 
 362:./include/linux/slab.h **** 
 363:./include/linux/slab.h **** 
 364:./include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:./include/linux/slab.h **** 
 366:./include/linux/slab.h **** 
 367:./include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:./include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:./include/linux/slab.h **** 
 370:./include/linux/slab.h **** 
 371:./include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:./include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:./include/linux/slab.h **** }
 374:./include/linux/slab.h **** 
 375:./include/linux/slab.h **** static void inline vfree(void *addr){
 376:./include/linux/slab.h **** 	__sfree__(addr);
 377:./include/linux/slab.h **** }
 378:./include/linux/slab.h **** 
 379:./include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
 113              		.loc 4 379 21 view .LVU11
 114              	.LBB18:
 380:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 115              		.loc 4 380 2 view .LVU12
ARM GAS  /tmp/cc7mVM5J.s 			page 11


 116              		.loc 4 380 9 is_stmt 0 view .LVU13
 117 000c 4FF44C61 		mov	r1, #3264
 118              	.LVL6:
 119              		.loc 4 380 9 view .LVU14
 120 0010 6C20     		movs	r0, #108
 121              	.LVL7:
 122              		.loc 4 380 9 view .LVU15
 123 0012 FFF7FEFF 		bl	__smalloc__
 124              	.LVL8:
 125              		.loc 4 380 9 view .LVU16
 126              	.LBE18:
 127              	.LBE17:
  52:./block/add_disk.c ****     if(son_dev == NULL){
 128              		.loc 1 52 5 is_stmt 1 view .LVU17
 129              		.loc 1 52 7 is_stmt 0 view .LVU18
 130 0016 0028     		cmp	r0, #0
 131 0018 59D0     		beq	.L9
 132 001a 0446     		mov	r4, r0
  53:./block/add_disk.c ****         printk(KERN_INFO "can not alloc more memory\n");
  54:./block/add_disk.c ****         return -ENOMEM;
  55:./block/add_disk.c ****     }
  56:./block/add_disk.c ****     if(check_empty_MBR_Table(partition,number) == 1){
 133              		.loc 1 56 5 is_stmt 1 view .LVU19
 134              		.loc 1 56 8 is_stmt 0 view .LVU20
 135 001c 2946     		mov	r1, r5
 136 001e 3846     		mov	r0, r7
 137              	.LVL9:
 138              		.loc 1 56 8 view .LVU21
 139 0020 FFF7FEFF 		bl	check_empty_MBR_Table
 140              	.LVL10:
 141              		.loc 1 56 7 discriminator 1 view .LVU22
 142 0024 0128     		cmp	r0, #1
 143 0026 58D0     		beq	.L7
  57:./block/add_disk.c ****          return -1;
  58:./block/add_disk.c ****     }
  59:./block/add_disk.c ****     sector_t startaddress = get_partiton_data(partition,number,mbr_partiton_startaddress);
 144              		.loc 1 59 5 is_stmt 1 view .LVU23
 145              		.loc 1 59 29 is_stmt 0 view .LVU24
 146 0028 0122     		movs	r2, #1
 147 002a 2946     		mov	r1, r5
 148 002c 3846     		mov	r0, r7
 149 002e FFF7FEFF 		bl	get_partiton_data
 150              	.LVL11:
 151 0032 8146     		mov	r9, r0
 152              	.LVL12:
  60:./block/add_disk.c ****     sector_t size  = get_partiton_data(partition,number,mbr_partiton_size);
 153              		.loc 1 60 5 is_stmt 1 view .LVU25
 154              		.loc 1 60 22 is_stmt 0 view .LVU26
 155 0034 0222     		movs	r2, #2
 156 0036 2946     		mov	r1, r5
 157 0038 3846     		mov	r0, r7
 158              	.LVL13:
 159              		.loc 1 60 22 view .LVU27
 160 003a FFF7FEFF 		bl	get_partiton_data
 161              	.LVL14:
 162 003e 8046     		mov	r8, r0
 163              	.LVL15:
ARM GAS  /tmp/cc7mVM5J.s 			page 12


  61:./block/add_disk.c ****     uint8_t flag = get_partiton_data(partition,number,mbr_partiton_magic);
 164              		.loc 1 61 5 is_stmt 1 view .LVU28
 165              		.loc 1 61 20 is_stmt 0 view .LVU29
 166 0040 0322     		movs	r2, #3
 167 0042 2946     		mov	r1, r5
 168 0044 3846     		mov	r0, r7
 169              	.LVL16:
 170              		.loc 1 61 20 view .LVU30
 171 0046 FFF7FEFF 		bl	get_partiton_data
 172              	.LVL17:
  62:./block/add_disk.c **** 
  63:./block/add_disk.c ****     son_dev->bd_start_sect = startaddress;
 173              		.loc 1 63 5 is_stmt 1 view .LVU31
 174              		.loc 1 63 28 is_stmt 0 view .LVU32
 175 004a C4F80090 		str	r9, [r4]
  64:./block/add_disk.c ****     son_dev->bd_nr_sectors = size;
 176              		.loc 1 64 5 is_stmt 1 view .LVU33
 177              		.loc 1 64 28 is_stmt 0 view .LVU34
 178 004e C4F80480 		str	r8, [r4, #4]
  65:./block/add_disk.c ****     son_dev->bd_disk = dev->bd_disk;
 179              		.loc 1 65 5 is_stmt 1 view .LVU35
 180              		.loc 1 65 27 is_stmt 0 view .LVU36
 181 0052 B368     		ldr	r3, [r6, #8]
 182              		.loc 1 65 22 view .LVU37
 183 0054 A360     		str	r3, [r4, #8]
  66:./block/add_disk.c ****     son_dev->bd_stamp = jiffies;
 184              		.loc 1 66 5 is_stmt 1 view .LVU38
 185              		.loc 1 66 25 is_stmt 0 view .LVU39
 186 0056 FFF7FEFF 		bl	ktime_get
 187              	.LVL18:
 188              		.loc 1 66 23 discriminator 1 view .LVU40
 189 005a 2061     		str	r0, [r4, #16]
  67:./block/add_disk.c ****     son_dev->bd_queue = dev->bd_queue;
 190              		.loc 1 67 5 is_stmt 1 view .LVU41
 191              		.loc 1 67 28 is_stmt 0 view .LVU42
 192 005c F368     		ldr	r3, [r6, #12]
 193              		.loc 1 67 23 view .LVU43
 194 005e E360     		str	r3, [r4, #12]
  68:./block/add_disk.c ****     son_dev->bd_dev   = dev->bd_dev++;
 195              		.loc 1 68 5 is_stmt 1 view .LVU44
 196              		.loc 1 68 28 is_stmt 0 view .LVU45
 197 0060 B369     		ldr	r3, [r6, #24]
 198              		.loc 1 68 36 view .LVU46
 199 0062 5A1C     		adds	r2, r3, #1
 200 0064 B261     		str	r2, [r6, #24]
 201              		.loc 1 68 23 view .LVU47
 202 0066 A361     		str	r3, [r4, #24]
  69:./block/add_disk.c ****     spin_lock_init(&son_dev->bd_size_lock);
 203              		.loc 1 69 5 is_stmt 1 view .LVU48
 204 0068 04F12400 		add	r0, r4, #36
 205 006c FFF7FEFF 		bl	spin_lock_init
 206              	.LVL19:
  70:./block/add_disk.c ****     son_dev->bd_claiming = NULL;
 207              		.loc 1 70 5 view .LVU49
 208              		.loc 1 70 26 is_stmt 0 view .LVU50
 209 0070 0027     		movs	r7, #0
 210              	.LVL20:
ARM GAS  /tmp/cc7mVM5J.s 			page 13


 211              		.loc 1 70 26 view .LVU51
 212 0072 6763     		str	r7, [r4, #52]
  71:./block/add_disk.c ****     son_dev->bd_holder = NULL;
 213              		.loc 1 71 5 is_stmt 1 view .LVU52
 214              		.loc 1 71 24 is_stmt 0 view .LVU53
 215 0074 A763     		str	r7, [r4, #56]
  72:./block/add_disk.c ****     mutex_init(&son_dev->bd_holder_lock);
 216              		.loc 1 72 5 is_stmt 1 view .LVU54
  73:./block/add_disk.c ****     mutex_init(&son_dev->bd_fsfreeze_mutex);
 217              		.loc 1 73 5 view .LVU55
  74:./block/add_disk.c ****     son_dev->bd_holders = 0;
 218              		.loc 1 74 5 view .LVU56
 219              		.loc 1 74 25 is_stmt 0 view .LVU57
 220 0076 E764     		str	r7, [r4, #76]
  75:./block/add_disk.c ****     char name[32];
 221              		.loc 1 75 5 is_stmt 1 view .LVU58
  76:./block/add_disk.c ****     memset(name,"\0",32);
 222              		.loc 1 76 5 view .LVU59
 223 0078 2022     		movs	r2, #32
 224 007a 1949     		ldr	r1, .L10
 225 007c 6846     		mov	r0, sp
 226 007e FFF7FEFF 		bl	memset
 227              	.LVL21:
  77:./block/add_disk.c ****     strcpy(name,dev->bd_disk->disk_name);
 228              		.loc 1 77 5 view .LVU60
 229              		.loc 1 77 20 is_stmt 0 view .LVU61
 230 0082 B168     		ldr	r1, [r6, #8]
 231              		.loc 1 77 5 view .LVU62
 232 0084 0C31     		adds	r1, r1, #12
 233 0086 6846     		mov	r0, sp
 234 0088 FFF7FEFF 		bl	strcpy
 235              	.LVL22:
  78:./block/add_disk.c ****     name[strlen(name)+1] =  name[strlen(name)];
 236              		.loc 1 78 5 is_stmt 1 view .LVU63
 237              		.loc 1 78 34 is_stmt 0 view .LVU64
 238 008c 6846     		mov	r0, sp
 239 008e FFF7FEFF 		bl	strlen
 240              	.LVL23:
 241              		.loc 1 78 22 discriminator 2 view .LVU65
 242 0092 431C     		adds	r3, r0, #1
 243              		.loc 1 78 33 discriminator 2 view .LVU66
 244 0094 00F12002 		add	r2, r0, #32
 245 0098 0DEB0200 		add	r0, sp, r2
 246 009c 10F8202C 		ldrb	r2, [r0, #-32]	@ zero_extendqisi2
 247              		.loc 1 78 26 discriminator 2 view .LVU67
 248 00a0 2033     		adds	r3, r3, #32
 249 00a2 6B44     		add	r3, sp, r3
 250 00a4 03F8202C 		strb	r2, [r3, #-32]
  79:./block/add_disk.c ****     name[strlen(name)] = '0' + number;
 251              		.loc 1 79 5 is_stmt 1 view .LVU68
 252              		.loc 1 79 10 is_stmt 0 view .LVU69
 253 00a8 6846     		mov	r0, sp
 254 00aa FFF7FEFF 		bl	strlen
 255              	.LVL24:
 256              		.loc 1 79 30 discriminator 1 view .LVU70
 257 00ae 3035     		adds	r5, r5, #48
 258              	.LVL25:
ARM GAS  /tmp/cc7mVM5J.s 			page 14


 259              		.loc 1 79 24 discriminator 1 view .LVU71
 260 00b0 00F12003 		add	r3, r0, #32
 261 00b4 0DEB0300 		add	r0, sp, r3
 262 00b8 00F8205C 		strb	r5, [r0, #-32]
  80:./block/add_disk.c **** 
  81:./block/add_disk.c ****     __register_disk(son_dev,dev->bd_disk,name);
 263              		.loc 1 81 5 is_stmt 1 view .LVU72
 264 00bc 6A46     		mov	r2, sp
 265 00be B168     		ldr	r1, [r6, #8]
 266 00c0 2046     		mov	r0, r4
 267 00c2 FFF7FEFF 		bl	__register_disk
 268              	.LVL26:
  82:./block/add_disk.c ****     return 0;
 269              		.loc 1 82 5 view .LVU73
 270              		.loc 1 82 12 is_stmt 0 view .LVU74
 271 00c6 3846     		mov	r0, r7
 272              	.LVL27:
 273              	.L4:
  83:./block/add_disk.c **** }
 274              		.loc 1 83 1 view .LVU75
 275 00c8 09B0     		add	sp, sp, #36
 276              	.LCFI3:
 277              		.cfi_remember_state
 278              		.cfi_def_cfa_offset 28
 279              		@ sp needed
 280 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 281              	.LVL28:
 282              	.L9:
 283              	.LCFI4:
 284              		.cfi_restore_state
  53:./block/add_disk.c ****         return -ENOMEM;
 285              		.loc 1 53 9 is_stmt 1 view .LVU76
 286 00ce 0548     		ldr	r0, .L10+4
 287              	.LVL29:
  53:./block/add_disk.c ****         return -ENOMEM;
 288              		.loc 1 53 9 is_stmt 0 view .LVU77
 289 00d0 FFF7FEFF 		bl	printk
 290              	.LVL30:
  54:./block/add_disk.c ****     }
 291              		.loc 1 54 9 is_stmt 1 view .LVU78
  54:./block/add_disk.c ****     }
 292              		.loc 1 54 16 is_stmt 0 view .LVU79
 293 00d4 6FF00B00 		mvn	r0, #11
 294 00d8 F6E7     		b	.L4
 295              	.LVL31:
 296              	.L7:
  57:./block/add_disk.c ****     }
 297              		.loc 1 57 17 view .LVU80
 298 00da 4FF0FF30 		mov	r0, #-1
 299 00de F3E7     		b	.L4
 300              	.L11:
 301              		.align	2
 302              	.L10:
 303 00e0 00000000 		.word	.LANCHOR0
 304 00e4 00000000 		.word	.LC0
 305              		.cfi_endproc
 306              	.LFE1036:
ARM GAS  /tmp/cc7mVM5J.s 			page 15


 308              		.section	.rodata.register_son_disk.str1.4,"aMS",%progbits,1
 309              		.align	2
 310              	.LC2:
 311 0000 6E6F206D 		.ascii	"no mbr partition table\012\000"
 311      62722070 
 311      61727469 
 311      74696F6E 
 311      20746162 
 312              		.align	2
 313              	.LC3:
 314 0018 64656374 		.ascii	"dected mbr partition table\012\000"
 314      6564206D 
 314      62722070 
 314      61727469 
 314      74696F6E 
 315              		.section	.text.register_son_disk,"ax",%progbits
 316              		.align	1
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 321              	register_son_disk:
 322              	.LVL32:
 323              	.LFB1037:
  84:./block/add_disk.c **** 
  85:./block/add_disk.c **** static void register_son_disk(struct block_device *bdev)
  86:./block/add_disk.c **** {
 324              		.loc 1 86 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              		.loc 1 86 1 is_stmt 0 view .LVU82
 329 0000 70B5     		push	{r4, r5, r6, lr}
 330              	.LCFI5:
 331              		.cfi_def_cfa_offset 16
 332              		.cfi_offset 4, -16
 333              		.cfi_offset 5, -12
 334              		.cfi_offset 6, -8
 335              		.cfi_offset 14, -4
 336 0002 0646     		mov	r6, r0
  87:./block/add_disk.c ****     struct partition* p = get_partition_from_device(bdev);
 337              		.loc 1 87 5 is_stmt 1 view .LVU83
 338              		.loc 1 87 27 is_stmt 0 view .LVU84
 339 0004 FFF7FEFF 		bl	get_partition_from_device
 340              	.LVL33:
  88:./block/add_disk.c ****     if(IS_ERR(p)){ 
 341              		.loc 1 88 5 is_stmt 1 view .LVU85
 342              	.LBB19:
 343              	.LBI19:
 344              		.file 5 "./include/linux/err.h"
   1:./include/linux/err.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/err.h **** #ifndef _LINUX_ERR_H
   3:./include/linux/err.h **** #define _LINUX_ERR_H
   4:./include/linux/err.h **** 
   5:./include/linux/err.h **** #include <linux/compiler_attributes.h>
   6:./include/linux/err.h **** #include <linux/compiler.h>
   7:./include/linux/err.h **** #include <linux/types.h>
   8:./include/linux/err.h **** 
ARM GAS  /tmp/cc7mVM5J.s 			page 16


   9:./include/linux/err.h **** #include <asm/errno.h>
  10:./include/linux/err.h **** 
  11:./include/linux/err.h **** /*
  12:./include/linux/err.h ****  * Kernel pointers have redundant information, so we can use a
  13:./include/linux/err.h ****  * scheme where we can return either an error code or a normal
  14:./include/linux/err.h ****  * pointer with the same return value.
  15:./include/linux/err.h ****  *
  16:./include/linux/err.h ****  * This should be a per-architecture thing, to allow different
  17:./include/linux/err.h ****  * error and pointer decisions.
  18:./include/linux/err.h ****  */
  19:./include/linux/err.h **** #define MAX_ERRNO	4095
  20:./include/linux/err.h **** 
  21:./include/linux/err.h **** #ifndef __ASSEMBLY__
  22:./include/linux/err.h **** 
  23:./include/linux/err.h **** /**
  24:./include/linux/err.h ****  * IS_ERR_VALUE - Detect an error pointer.
  25:./include/linux/err.h ****  * @x: The pointer to check.
  26:./include/linux/err.h ****  *
  27:./include/linux/err.h ****  * Like IS_ERR(), but does not generate a compiler warning if result is unused.
  28:./include/linux/err.h ****  */
  29:./include/linux/err.h **** 
  30:./include/linux/err.h **** #ifndef unlikely
  31:./include/linux/err.h **** #  define unlikely(x) __builtin_expect(!!(x), 0)
  32:./include/linux/err.h **** #endif
  33:./include/linux/err.h **** 
  34:./include/linux/err.h **** #ifndef likely
  35:./include/linux/err.h **** #  define likely(x) __builtin_expect(!!(x), 1)
  36:./include/linux/err.h **** #endif
  37:./include/linux/err.h **** 
  38:./include/linux/err.h **** #define IS_ERR_VALUE(x) unlikely((unsigned long)(void *)(x) >= (unsigned long)-MAX_ERRNO)
  39:./include/linux/err.h **** 
  40:./include/linux/err.h **** /**
  41:./include/linux/err.h ****  * ERR_PTR - Create an error pointer.
  42:./include/linux/err.h ****  * @error: A negative error code.
  43:./include/linux/err.h ****  *
  44:./include/linux/err.h ****  * Encodes @error into a pointer value. Users should consider the result
  45:./include/linux/err.h ****  * opaque and not assume anything about how the error is encoded.
  46:./include/linux/err.h ****  *
  47:./include/linux/err.h ****  * Return: A pointer with @error encoded within its value.
  48:./include/linux/err.h ****  */
  49:./include/linux/err.h **** static inline void * __must_check ERR_PTR(long error)
  50:./include/linux/err.h **** {
  51:./include/linux/err.h **** 	return (void *) error;
  52:./include/linux/err.h **** }
  53:./include/linux/err.h **** 
  54:./include/linux/err.h **** /* Return the pointer in the percpu address space. */
  55:./include/linux/err.h **** #define ERR_PTR_PCPU(error) ((void __percpu *)(unsigned long)ERR_PTR(error))
  56:./include/linux/err.h **** 
  57:./include/linux/err.h **** /**
  58:./include/linux/err.h ****  * PTR_ERR - Extract the error code from an error pointer.
  59:./include/linux/err.h ****  * @ptr: An error pointer.
  60:./include/linux/err.h ****  * Return: The error code within @ptr.
  61:./include/linux/err.h ****  */
  62:./include/linux/err.h **** static inline long __must_check PTR_ERR(__force const void *ptr)
  63:./include/linux/err.h **** {
  64:./include/linux/err.h **** 	return (long) ptr;
  65:./include/linux/err.h **** }
ARM GAS  /tmp/cc7mVM5J.s 			page 17


  66:./include/linux/err.h **** 
  67:./include/linux/err.h **** /* Read an error pointer from the percpu address space. */
  68:./include/linux/err.h **** #define PTR_ERR_PCPU(ptr) (PTR_ERR((const void *)(__force const unsigned long)(ptr)))
  69:./include/linux/err.h **** 
  70:./include/linux/err.h **** /**
  71:./include/linux/err.h ****  * IS_ERR - Detect an error pointer.
  72:./include/linux/err.h ****  * @ptr: The pointer to check.
  73:./include/linux/err.h ****  * Return: true if @ptr is an error pointer, false otherwise.
  74:./include/linux/err.h ****  */
  75:./include/linux/err.h **** static inline bool __must_check IS_ERR(__force const void *ptr)
 345              		.loc 5 75 33 view .LVU86
 346              	.LBB20:
  76:./include/linux/err.h **** {
  77:./include/linux/err.h **** 	return IS_ERR_VALUE((unsigned long)ptr);
 347              		.loc 5 77 2 view .LVU87
 348              		.loc 5 77 9 is_stmt 0 view .LVU88
 349 0008 10F5805F 		cmn	r0, #4096
 350 000c 94BF     		ite	ls
 351 000e 0024     		movls	r4, #0
 352 0010 0124     		movhi	r4, #1
 353              	.LVL34:
 354              		.loc 5 77 9 view .LVU89
 355              	.LBE20:
 356              	.LBE19:
 357              		.loc 1 88 7 discriminator 1 view .LVU90
 358 0012 24B9     		cbnz	r4, .L18
 359 0014 0546     		mov	r5, r0
  89:./block/add_disk.c ****          printk(KERN_INFO "no mbr partition table\n");
  90:./block/add_disk.c ****          return;
  91:./block/add_disk.c ****     }
  92:./block/add_disk.c ****     printk(KERN_INFO "dected mbr partition table\n");
 360              		.loc 1 92 5 is_stmt 1 view .LVU91
 361 0016 0948     		ldr	r0, .L20
 362              	.LVL35:
 363              		.loc 1 92 5 is_stmt 0 view .LVU92
 364 0018 FFF7FEFF 		bl	printk
 365              	.LVL36:
  93:./block/add_disk.c **** 
  94:./block/add_disk.c ****     for(int i =0;i<4;i++){
 366              		.loc 1 94 5 is_stmt 1 view .LVU93
 367              	.LBB21:
 368              		.loc 1 94 9 view .LVU94
 369              		.loc 1 94 5 is_stmt 0 view .LVU95
 370 001c 04E0     		b	.L15
 371              	.LVL37:
 372              	.L18:
 373              		.loc 1 94 5 view .LVU96
 374              	.LBE21:
  89:./block/add_disk.c ****          printk(KERN_INFO "no mbr partition table\n");
 375              		.loc 1 89 10 is_stmt 1 view .LVU97
 376 001e 0848     		ldr	r0, .L20+4
 377              	.LVL38:
  89:./block/add_disk.c ****          printk(KERN_INFO "no mbr partition table\n");
 378              		.loc 1 89 10 is_stmt 0 view .LVU98
 379 0020 FFF7FEFF 		bl	printk
 380              	.LVL39:
  90:./block/add_disk.c ****     }
ARM GAS  /tmp/cc7mVM5J.s 			page 18


 381              		.loc 1 90 10 is_stmt 1 view .LVU99
 382 0024 09E0     		b	.L12
 383              	.LVL40:
 384              	.L19:
 385              	.LBB22:
 386              		.loc 1 94 23 discriminator 2 view .LVU100
 387 0026 0134     		adds	r4, r4, #1
 388              	.LVL41:
 389              	.L15:
 390              		.loc 1 94 19 discriminator 1 view .LVU101
 391 0028 032C     		cmp	r4, #3
 392 002a 06DC     		bgt	.L12
  95:./block/add_disk.c ****         if(add_mbr_son_disk(bdev,p,i) < 0)break;
 393              		.loc 1 95 9 view .LVU102
 394              		.loc 1 95 12 is_stmt 0 view .LVU103
 395 002c 2246     		mov	r2, r4
 396 002e 2946     		mov	r1, r5
 397 0030 3046     		mov	r0, r6
 398 0032 FFF7FEFF 		bl	add_mbr_son_disk
 399              	.LVL42:
 400              		.loc 1 95 11 discriminator 1 view .LVU104
 401 0036 0028     		cmp	r0, #0
 402 0038 F5DA     		bge	.L19
 403              	.LVL43:
 404              	.L12:
 405              		.loc 1 95 11 discriminator 1 view .LVU105
 406              	.LBE22:
  96:./block/add_disk.c ****     }
  97:./block/add_disk.c **** }
 407              		.loc 1 97 1 view .LVU106
 408 003a 70BD     		pop	{r4, r5, r6, pc}
 409              	.LVL44:
 410              	.L21:
 411              		.loc 1 97 1 view .LVU107
 412              		.align	2
 413              	.L20:
 414 003c 18000000 		.word	.LC3
 415 0040 00000000 		.word	.LC2
 416              		.cfi_endproc
 417              	.LFE1037:
 419              		.section	.text.__add_disk,"ax",%progbits
 420              		.align	1
 421              		.global	__add_disk
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 426              	__add_disk:
 427              	.LVL45:
 428              	.LFB1035:
  12:./block/add_disk.c ****     struct block_device *dev;
 429              		.loc 1 12 1 is_stmt 1 view -0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
  12:./block/add_disk.c ****     struct block_device *dev;
 433              		.loc 1 12 1 is_stmt 0 view .LVU109
 434 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/cc7mVM5J.s 			page 19


 435              	.LCFI6:
 436              		.cfi_def_cfa_offset 16
 437              		.cfi_offset 4, -16
 438              		.cfi_offset 5, -12
 439              		.cfi_offset 6, -8
 440              		.cfi_offset 14, -4
 441 0002 0546     		mov	r5, r0
  13:./block/add_disk.c ****     if(disk->part0 == NULL){
 442              		.loc 1 13 5 is_stmt 1 view .LVU110
  14:./block/add_disk.c ****         dev = kmalloc(sizeof(struct block_device) , GFP_KERNEL);
 443              		.loc 1 14 5 view .LVU111
  14:./block/add_disk.c ****         dev = kmalloc(sizeof(struct block_device) , GFP_KERNEL);
 444              		.loc 1 14 12 is_stmt 0 view .LVU112
 445 0004 836B     		ldr	r3, [r0, #56]
  14:./block/add_disk.c ****         dev = kmalloc(sizeof(struct block_device) , GFP_KERNEL);
 446              		.loc 1 14 7 view .LVU113
 447 0006 D3B1     		cbz	r3, .L27
 448              	.LVL46:
 449              	.L23:
  23:./block/add_disk.c ****     dev->bd_disk = disk;
 450              		.loc 1 23 5 is_stmt 1 view .LVU114
  23:./block/add_disk.c ****     dev->bd_disk = disk;
 451              		.loc 1 23 9 is_stmt 0 view .LVU115
 452 0008 AC6B     		ldr	r4, [r5, #56]
 453              	.LVL47:
  24:./block/add_disk.c ****     dev->bd_queue = disk->queue;
 454              		.loc 1 24 5 is_stmt 1 view .LVU116
  24:./block/add_disk.c ****     dev->bd_queue = disk->queue;
 455              		.loc 1 24 18 is_stmt 0 view .LVU117
 456 000a A560     		str	r5, [r4, #8]
  25:./block/add_disk.c ****     dev->bd_stamp = jiffies;
 457              		.loc 1 25 5 is_stmt 1 view .LVU118
  25:./block/add_disk.c ****     dev->bd_stamp = jiffies;
 458              		.loc 1 25 25 is_stmt 0 view .LVU119
 459 000c 2B6C     		ldr	r3, [r5, #64]
  25:./block/add_disk.c ****     dev->bd_stamp = jiffies;
 460              		.loc 1 25 19 view .LVU120
 461 000e E360     		str	r3, [r4, #12]
  26:./block/add_disk.c ****     dev->bd_dev = disk->major;
 462              		.loc 1 26 5 is_stmt 1 view .LVU121
  26:./block/add_disk.c ****     dev->bd_dev = disk->major;
 463              		.loc 1 26 21 is_stmt 0 view .LVU122
 464 0010 FFF7FEFF 		bl	ktime_get
 465              	.LVL48:
  26:./block/add_disk.c ****     dev->bd_dev = disk->major;
 466              		.loc 1 26 19 discriminator 1 view .LVU123
 467 0014 2061     		str	r0, [r4, #16]
  27:./block/add_disk.c ****     spin_lock_init(&dev->bd_size_lock);
 468              		.loc 1 27 5 is_stmt 1 view .LVU124
  27:./block/add_disk.c ****     spin_lock_init(&dev->bd_size_lock);
 469              		.loc 1 27 23 is_stmt 0 view .LVU125
 470 0016 2B68     		ldr	r3, [r5]
  27:./block/add_disk.c ****     spin_lock_init(&dev->bd_size_lock);
 471              		.loc 1 27 17 view .LVU126
 472 0018 A361     		str	r3, [r4, #24]
  28:./block/add_disk.c ****     dev->bd_claiming = NULL;
 473              		.loc 1 28 5 is_stmt 1 view .LVU127
ARM GAS  /tmp/cc7mVM5J.s 			page 20


 474 001a 04F12400 		add	r0, r4, #36
 475 001e FFF7FEFF 		bl	spin_lock_init
 476              	.LVL49:
  29:./block/add_disk.c ****     dev->bd_holder = NULL;
 477              		.loc 1 29 5 view .LVU128
  29:./block/add_disk.c ****     dev->bd_holder = NULL;
 478              		.loc 1 29 22 is_stmt 0 view .LVU129
 479 0022 0026     		movs	r6, #0
 480 0024 6663     		str	r6, [r4, #52]
  30:./block/add_disk.c ****     mutex_init(&dev->bd_holder_lock);
 481              		.loc 1 30 5 is_stmt 1 view .LVU130
  30:./block/add_disk.c ****     mutex_init(&dev->bd_holder_lock);
 482              		.loc 1 30 20 is_stmt 0 view .LVU131
 483 0026 A663     		str	r6, [r4, #56]
  31:./block/add_disk.c ****     mutex_init(&dev->bd_fsfreeze_mutex);
 484              		.loc 1 31 5 is_stmt 1 view .LVU132
  32:./block/add_disk.c ****     dev->bd_holders = 0;
 485              		.loc 1 32 5 view .LVU133
  33:./block/add_disk.c ****     __register_disk(dev,disk,NULL);
 486              		.loc 1 33 5 view .LVU134
  33:./block/add_disk.c ****     __register_disk(dev,disk,NULL);
 487              		.loc 1 33 21 is_stmt 0 view .LVU135
 488 0028 E664     		str	r6, [r4, #76]
  34:./block/add_disk.c **** 
 489              		.loc 1 34 5 is_stmt 1 view .LVU136
 490 002a 3246     		mov	r2, r6
 491 002c 2946     		mov	r1, r5
 492 002e 2046     		mov	r0, r4
 493 0030 FFF7FEFF 		bl	__register_disk
 494              	.LVL50:
  36:./block/add_disk.c **** 
 495              		.loc 1 36 5 view .LVU137
 496 0034 2046     		mov	r0, r4
 497 0036 FFF7FEFF 		bl	register_son_disk
 498              	.LVL51:
  38:./block/add_disk.c **** }
 499              		.loc 1 38 5 view .LVU138
  38:./block/add_disk.c **** }
 500              		.loc 1 38 12 is_stmt 0 view .LVU139
 501 003a 3046     		mov	r0, r6
 502              	.LVL52:
 503              	.L22:
  39:./block/add_disk.c **** 
 504              		.loc 1 39 1 view .LVU140
 505 003c 70BD     		pop	{r4, r5, r6, pc}
 506              	.LVL53:
 507              	.L27:
  15:./block/add_disk.c ****         if(dev == NULL){
 508              		.loc 1 15 9 is_stmt 1 view .LVU141
 509              	.LBB23:
 510              	.LBI23:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 511              		.loc 4 379 21 view .LVU142
 512              	.LBB24:
 513              		.loc 4 380 2 view .LVU143
 514              		.loc 4 380 9 is_stmt 0 view .LVU144
 515 003e 4FF44C61 		mov	r1, #3264
ARM GAS  /tmp/cc7mVM5J.s 			page 21


 516 0042 6C20     		movs	r0, #108
 517              	.LVL54:
 518              		.loc 4 380 9 view .LVU145
 519 0044 FFF7FEFF 		bl	__smalloc__
 520              	.LVL55:
 521              		.loc 4 380 9 view .LVU146
 522              	.LBE24:
 523              	.LBE23:
  16:./block/add_disk.c ****             printk(KERN_INFO "can not alloc more memory\n");
 524              		.loc 1 16 9 is_stmt 1 view .LVU147
  16:./block/add_disk.c ****             printk(KERN_INFO "can not alloc more memory\n");
 525              		.loc 1 16 11 is_stmt 0 view .LVU148
 526 0048 08B1     		cbz	r0, .L28
  20:./block/add_disk.c ****     }
 527              		.loc 1 20 9 is_stmt 1 view .LVU149
  20:./block/add_disk.c ****     }
 528              		.loc 1 20 21 is_stmt 0 view .LVU150
 529 004a A863     		str	r0, [r5, #56]
 530 004c DCE7     		b	.L23
 531              	.L28:
  17:./block/add_disk.c ****             return -ENOMEM;
 532              		.loc 1 17 13 is_stmt 1 view .LVU151
 533 004e 0348     		ldr	r0, .L29
 534              	.LVL56:
  17:./block/add_disk.c ****             return -ENOMEM;
 535              		.loc 1 17 13 is_stmt 0 view .LVU152
 536 0050 FFF7FEFF 		bl	printk
 537              	.LVL57:
  18:./block/add_disk.c ****         }   
 538              		.loc 1 18 13 is_stmt 1 view .LVU153
  18:./block/add_disk.c ****         }   
 539              		.loc 1 18 20 is_stmt 0 view .LVU154
 540 0054 6FF00B00 		mvn	r0, #11
 541 0058 F0E7     		b	.L22
 542              	.L30:
 543 005a 00BF     		.align	2
 544              	.L29:
 545 005c 00000000 		.word	.LC0
 546              		.cfi_endproc
 547              	.LFE1035:
 549              		.section	.rodata
 550              		.align	2
 551              		.set	.LANCHOR0,. + 0
 552              	.LC1:
 553 0000 0000     		.ascii	"\000\000"
 554              		.text
 555              	.Letext0:
 556              		.file 6 "./include/asm-generic/int-l64.h"
 557              		.file 7 "./include/asm-generic/posix_types.h"
 558              		.file 8 "./include/uapi/linux/types.h"
 559              		.file 9 "./include/linux/types.h"
 560              		.file 10 "./include/linux/reciprocal_div.h"
 561              		.file 11 "./include/linux/time64.h"
 562              		.file 12 "./include/linux/spinlock_types_raw.h"
 563              		.file 13 "./include/linux/spinlock_types.h"
 564              		.file 14 "./include/linux/errseq.h"
 565              		.file 15 "./include/linux/rbtree_types.h"
ARM GAS  /tmp/cc7mVM5J.s 			page 22


 566              		.file 16 "./include/linux/uidgid_types.h"
 567              		.file 17 "./include/linux/projid.h"
 568              		.file 18 "./include/linux/fs.h"
 569              		.file 19 "./include/linux/mnt_idmapping.h"
 570              		.file 20 "./include/linux/mutex.h"
 571              		.file 21 "./include/linux/uio.h"
 572              		.file 22 "./include/linux/wait.h"
 573              		.file 23 "./include/linux/xarray.h"
 574              		.file 24 "./include/linux/migrate_mode.h"
 575              		.file 25 "./include/linux/rw_hint.h"
 576              		.file 26 "./include/linux/mm_type.h"
 577              		.file 27 "./include/linux/bvec.h"
 578              		.file 28 "./include/linux/blk_types.h"
 579              		.file 29 "./include/linux/blkdev.h"
 580              		.file 30 "./include/linux/bio.h"
 581              		.file 31 "./include/linux/mempool_super_haper.h"
 582              		.file 32 "./include/linux/mempool.h"
 583              		.file 33 "./include/linux/lockdep_types.h"
 584              		.file 34 "./include/linux/workqueue_types.h"
 585              		.file 35 "./include/linux/blk-mq.h"
 586              		.file 36 "./include/linux/dcache.h"
 587              		.file 37 "./include/uapi/linux/pr.h"
 588              		.file 38 "./include/linux/pr.h"
 589              		.file 39 "./include/linux/hdreg.h"
 590              		.file 40 "./include/linux/lockref.h"
 591              		.file 41 "./include/linux/path.h"
 592              		.file 42 "./include/linux/statfs.h"
 593              		.file 43 "./include/linux/stat.h"
 594              		.file 44 "./arch/arm_m/include/asm/string.h"
 595              		.file 45 "./include/linux/string.h"
 596              		.file 46 "./include/linux/time.h"
 597              		.file 47 "./include/linux/printk.h"
 598              		.file 48 "./include/linux/gfp_types.h"
ARM GAS  /tmp/cc7mVM5J.s 			page 23


DEFINED SYMBOLS
                            *ABS*:00000000 add_disk.c
     /tmp/cc7mVM5J.s:21     .text.__spin_init:00000000 $t
     /tmp/cc7mVM5J.s:26     .text.__spin_init:00000000 __spin_init
     /tmp/cc7mVM5J.s:46     .text.spin_lock_init:00000000 $t
     /tmp/cc7mVM5J.s:51     .text.spin_lock_init:00000000 spin_lock_init
     /tmp/cc7mVM5J.s:74     .rodata.add_mbr_son_disk.str1.4:00000000 $d
     /tmp/cc7mVM5J.s:78     .text.add_mbr_son_disk:00000000 $t
     /tmp/cc7mVM5J.s:84     .text.add_mbr_son_disk:00000000 add_mbr_son_disk
     /tmp/cc7mVM5J.s:303    .text.add_mbr_son_disk:000000e0 $d
     /tmp/cc7mVM5J.s:309    .rodata.register_son_disk.str1.4:00000000 $d
     /tmp/cc7mVM5J.s:316    .text.register_son_disk:00000000 $t
     /tmp/cc7mVM5J.s:321    .text.register_son_disk:00000000 register_son_disk
     /tmp/cc7mVM5J.s:414    .text.register_son_disk:0000003c $d
     /tmp/cc7mVM5J.s:420    .text.__add_disk:00000000 $t
     /tmp/cc7mVM5J.s:426    .text.__add_disk:00000000 __add_disk
     /tmp/cc7mVM5J.s:545    .text.__add_disk:0000005c $d
     /tmp/cc7mVM5J.s:550    .rodata:00000000 $d

UNDEFINED SYMBOLS
__smalloc__
check_empty_MBR_Table
get_partiton_data
ktime_get
memset
strcpy
strlen
__register_disk
printk
get_partition_from_device
