ARM GAS  /tmp/ccZILEbd.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"pipefs.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./fs/pipefs/pipefs.c"
  20              		.section	.text.__spin_init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	__spin_init:
  27              	.LVL0:
  28              	.LFB850:
  29              		.file 2 "./arch/arm_m/include/asm/spinlock.h"
   1:./arch/arm_m/include/asm/spinlock.h **** #ifndef __SPIN_LOCK_H_
   2:./arch/arm_m/include/asm/spinlock.h **** #define __SPIN_LOCK_H_
   3:./arch/arm_m/include/asm/spinlock.h **** 
   4:./arch/arm_m/include/asm/spinlock.h **** #include <linux/sched.h>
   5:./arch/arm_m/include/asm/spinlock.h **** 
   6:./arch/arm_m/include/asm/spinlock.h **** typedef struct { 
   7:./arch/arm_m/include/asm/spinlock.h ****      int flag; 
   8:./arch/arm_m/include/asm/spinlock.h **** } arch_spinlock_t;
   9:./arch/arm_m/include/asm/spinlock.h **** 
  10:./arch/arm_m/include/asm/spinlock.h **** static int __spin_init(arch_spinlock_t *lock) 
  11:./arch/arm_m/include/asm/spinlock.h **** {
  30              		.loc 2 11 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  12:./arch/arm_m/include/asm/spinlock.h ****     lock->flag = 0;
  35              		.loc 2 12 5 view .LVU1
  36              		.loc 2 12 16 is_stmt 0 view .LVU2
  37 0000 0023     		movs	r3, #0
  38 0002 0360     		str	r3, [r0]
  39              	.LVL1:
  13:./arch/arm_m/include/asm/spinlock.h **** }
  40              		.loc 2 13 1 view .LVU3
  41 0004 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE850:
  45              		.section	.text.__spin_unlock,"ax",%progbits
  46              		.align	1
ARM GAS  /tmp/ccZILEbd.s 			page 2


  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  51              	__spin_unlock:
  52              	.LVL2:
  53              	.LFB852:
  14:./arch/arm_m/include/asm/spinlock.h **** 
  15:./arch/arm_m/include/asm/spinlock.h **** static int __spin_lock(arch_spinlock_t *lock) {
  16:./arch/arm_m/include/asm/spinlock.h **** 
  17:./arch/arm_m/include/asm/spinlock.h ****     stop_all_scheduler();
  18:./arch/arm_m/include/asm/spinlock.h ****     if(lock->flag == 0){
  19:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
  20:./arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
  21:./arch/arm_m/include/asm/spinlock.h ****         return 1;
  22:./arch/arm_m/include/asm/spinlock.h ****     }
  23:./arch/arm_m/include/asm/spinlock.h ****     else
  24:./arch/arm_m/include/asm/spinlock.h ****     {
  25:./arch/arm_m/include/asm/spinlock.h ****         start_all_scheduler();
  26:./arch/arm_m/include/asm/spinlock.h ****         return 0;
  27:./arch/arm_m/include/asm/spinlock.h ****     }
  28:./arch/arm_m/include/asm/spinlock.h **** }
  29:./arch/arm_m/include/asm/spinlock.h **** 
  30:./arch/arm_m/include/asm/spinlock.h **** static void  __spin_unlock( arch_spinlock_t *lock ){
  54              		.loc 2 30 52 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  31:./arch/arm_m/include/asm/spinlock.h ****     lock->flag = 0;
  59              		.loc 2 31 5 view .LVU5
  60              		.loc 2 31 16 is_stmt 0 view .LVU6
  61 0000 0023     		movs	r3, #0
  62 0002 0360     		str	r3, [r0]
  32:./arch/arm_m/include/asm/spinlock.h **** }
  63              		.loc 2 32 1 view .LVU7
  64 0004 7047     		bx	lr
  65              		.cfi_endproc
  66              	.LFE852:
  68              		.section	.text.spin_lock_init,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  74              	spin_lock_init:
  75              	.LVL3:
  76              	.LFB853:
  77              		.file 3 "./include/linux/spinlock.h"
   1:./include/linux/spinlock.h **** #ifndef __SPINLOCK_H__
   2:./include/linux/spinlock.h **** #define __SPINLOCK_H__
   3:./include/linux/spinlock.h **** 
   4:./include/linux/spinlock.h **** #include <linux/types.h>
   5:./include/linux/spinlock.h **** #include <linux/spinlock_types.h>
   6:./include/linux/spinlock.h **** #include <linux/sched.h>
   7:./include/linux/spinlock.h **** 
   8:./include/linux/spinlock.h **** 
   9:./include/linux/spinlock.h **** 
  10:./include/linux/spinlock.h **** static void spin_lock_init(spinlock_t* lock){
ARM GAS  /tmp/ccZILEbd.s 			page 3


  78              		.loc 3 10 45 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		.loc 3 10 45 is_stmt 0 view .LVU9
  83 0000 08B5     		push	{r3, lr}
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
  11:./include/linux/spinlock.h ****     __spin_init(&lock->rlock.raw_lock);
  88              		.loc 3 11 5 is_stmt 1 view .LVU10
  89 0002 FFF7FEFF 		bl	__spin_init
  90              	.LVL4:
  12:./include/linux/spinlock.h **** }
  91              		.loc 3 12 1 is_stmt 0 view .LVU11
  92 0006 08BD     		pop	{r3, pc}
  93              		.cfi_endproc
  94              	.LFE853:
  96              		.section	.text.spin_unlock,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 102              	spin_unlock:
 103              	.LVL5:
 104              	.LFB855:
  13:./include/linux/spinlock.h **** 
  14:./include/linux/spinlock.h **** static void spin_lock(spinlock_t* lock)
  15:./include/linux/spinlock.h **** {  
  16:./include/linux/spinlock.h ****     while (1)
  17:./include/linux/spinlock.h ****     {
  18:./include/linux/spinlock.h ****         if(__spin_lock(&lock->rlock.raw_lock) == 1){
  19:./include/linux/spinlock.h ****             lock->owner = get_current_task();
  20:./include/linux/spinlock.h ****             break;
  21:./include/linux/spinlock.h ****         }
  22:./include/linux/spinlock.h ****         else  if(lock->owner == get_current_task()){  //Â¶ÇÊûúÂ∑≤ÁªèË¢´ÈîÅ‰Ωè‰ΩÜÊòØÈîÅÊòØËá™Â∑±ÁöÑÔ
  23:./include/linux/spinlock.h ****             return;   
  24:./include/linux/spinlock.h ****         }
  25:./include/linux/spinlock.h ****         else{
  26:./include/linux/spinlock.h ****             __delay(5); //‰∏ªÂä®ËÆ©Âá∫Êó∂Èó¥Áâá
  27:./include/linux/spinlock.h ****         }
  28:./include/linux/spinlock.h ****     }
  29:./include/linux/spinlock.h **** }
  30:./include/linux/spinlock.h **** 
  31:./include/linux/spinlock.h **** static void spin_unlock(spinlock_t* lock)
  32:./include/linux/spinlock.h **** {
 105              		.loc 3 32 1 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		.loc 3 32 1 is_stmt 0 view .LVU13
 110 0000 08B5     		push	{r3, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 3, -8
 114              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZILEbd.s 			page 4


  33:./include/linux/spinlock.h ****     __spin_unlock(&lock->rlock.raw_lock);
 115              		.loc 3 33 5 is_stmt 1 view .LVU14
 116 0002 FFF7FEFF 		bl	__spin_unlock
 117              	.LVL6:
  34:./include/linux/spinlock.h **** }
 118              		.loc 3 34 1 is_stmt 0 view .LVU15
 119 0006 08BD     		pop	{r3, pc}
 120              		.cfi_endproc
 121              	.LFE855:
 123              		.section	.text.pipefs_statfs,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	pipefs_statfs:
 130              	.LVL7:
 131              	.LFB1058:
   1:./fs/pipefs/pipefs.c **** #include <linux/kernel.h>
   2:./fs/pipefs/pipefs.c **** #include <linux/uaccess.h>
   3:./fs/pipefs/pipefs.c **** #include <linux/atomic.h>
   4:./fs/pipefs/pipefs.c **** #include <linux/types.h>
   5:./fs/pipefs/pipefs.c **** #include <linux/module.h>
   6:./fs/pipefs/pipefs.c **** #include <linux/string.h>
   7:./fs/pipefs/pipefs.c **** #include <linux/fs.h>
   8:./fs/pipefs/pipefs.c **** #include <linux/slab.h>
   9:./fs/pipefs/pipefs.c **** #include <linux/init.h>
  10:./fs/pipefs/pipefs.c **** #include <linux/sched.h>
  11:./fs/pipefs/pipefs.c **** 
  12:./fs/pipefs/pipefs.c **** 
  13:./fs/pipefs/pipefs.c **** 
  14:./fs/pipefs/pipefs.c **** 
  15:./fs/pipefs/pipefs.c **** #define MAGIC 12345678
  16:./fs/pipefs/pipefs.c **** struct pipefs_dentry {
  17:./fs/pipefs/pipefs.c ****     int                    magic;
  18:./fs/pipefs/pipefs.c ****     char *name;                             // ÂêçÂ≠ó
  19:./fs/pipefs/pipefs.c ****     struct pipefs_inode *target_inode;       // ËØ•dentryÊåáÂêëÁöÑÁõÆÊ†áinode
  20:./fs/pipefs/pipefs.c ****     struct list_head list_node;             // ÊåÇËΩΩÂà∞Áà∂ÁõÆÂΩïinode‰∏≠ÁöÑlisthead‰∏≠
  21:./fs/pipefs/pipefs.c **** };
  22:./fs/pipefs/pipefs.c **** struct pipefs_superblock {
  23:./fs/pipefs/pipefs.c ****     int                    magic;
  24:./fs/pipefs/pipefs.c ****     spinlock_t             lock;
  25:./fs/pipefs/pipefs.c ****     struct pipefs_inode *rootinode;
  26:./fs/pipefs/pipefs.c ****     struct list_head inode_list_head;       // ËØ•superblock‰∏ãÁöÑinodeÈìæË°®Â§¥
  27:./fs/pipefs/pipefs.c **** };
  28:./fs/pipefs/pipefs.c **** 
  29:./fs/pipefs/pipefs.c **** 
  30:./fs/pipefs/pipefs.c **** int pipe_buffer_read(struct pipe_buffer *buf, char* data) 
  31:./fs/pipefs/pipefs.c **** {
  32:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
  33:./fs/pipefs/pipefs.c **** 
  34:./fs/pipefs/pipefs.c ****     if (buf->head == buf->tail) {
  35:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
  36:./fs/pipefs/pipefs.c ****         return -1; // Buffer empty
  37:./fs/pipefs/pipefs.c ****     }
  38:./fs/pipefs/pipefs.c **** 
  39:./fs/pipefs/pipefs.c ****     data[0] = buf->buffer[buf->tail];
  40:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
ARM GAS  /tmp/ccZILEbd.s 			page 5


  41:./fs/pipefs/pipefs.c **** 
  42:./fs/pipefs/pipefs.c ****     spin_unlock(&buf->lock);
  43:./fs/pipefs/pipefs.c ****     return 0;
  44:./fs/pipefs/pipefs.c **** }
  45:./fs/pipefs/pipefs.c **** 
  46:./fs/pipefs/pipefs.c **** int pipe_buffer_write(struct pipe_buffer *buf, char data)
  47:./fs/pipefs/pipefs.c **** {
  48:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
  49:./fs/pipefs/pipefs.c **** 
  50:./fs/pipefs/pipefs.c ****     if ((buf->head + 1) % buf->size == buf->tail) {
  51:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
  52:./fs/pipefs/pipefs.c ****         return -1; // Buffer full
  53:./fs/pipefs/pipefs.c ****     }
  54:./fs/pipefs/pipefs.c **** 
  55:./fs/pipefs/pipefs.c ****     buf->buffer[buf->head] = data;
  56:./fs/pipefs/pipefs.c ****     buf->head = (buf->head + 1) % buf->size;
  57:./fs/pipefs/pipefs.c **** 
  58:./fs/pipefs/pipefs.c ****     spin_unlock(&buf->lock);
  59:./fs/pipefs/pipefs.c ****     return 0;
  60:./fs/pipefs/pipefs.c **** }
  61:./fs/pipefs/pipefs.c **** 
  62:./fs/pipefs/pipefs.c **** 
  63:./fs/pipefs/pipefs.c **** static int pipefs_open(struct inode *inode, struct file *file)
  64:./fs/pipefs/pipefs.c **** {
  65:./fs/pipefs/pipefs.c ****     struct pipefs_inode *p_inode = inode->i_private;
  66:./fs/pipefs/pipefs.c ****     if(p_inode->buf == NULL)
  67:./fs/pipefs/pipefs.c ****     {
  68:./fs/pipefs/pipefs.c ****         p_inode->buf = kmalloc(sizeof(struct pipe_buffer),GFP_KERNEL);
  69:./fs/pipefs/pipefs.c ****         if(!p_inode->buf)
  70:./fs/pipefs/pipefs.c ****            return -1;
  71:./fs/pipefs/pipefs.c ****     }
  72:./fs/pipefs/pipefs.c ****     return 0;
  73:./fs/pipefs/pipefs.c **** }
  74:./fs/pipefs/pipefs.c **** 
  75:./fs/pipefs/pipefs.c **** static int pipefs_release(struct inode *inode, struct file *file){
  76:./fs/pipefs/pipefs.c ****     pr_info("pipefs test close\n");
  77:./fs/pipefs/pipefs.c ****     return 0;
  78:./fs/pipefs/pipefs.c **** }
  79:./fs/pipefs/pipefs.c **** 
  80:./fs/pipefs/pipefs.c **** static int pipefs_read(struct file *file, char __user * data, size_t size, loff_t *offset)
  81:./fs/pipefs/pipefs.c **** {    
  82:./fs/pipefs/pipefs.c ****     for(int i = 0;i < size;i++)
  83:./fs/pipefs/pipefs.c ****     {
  84:./fs/pipefs/pipefs.c ****         while (pipe_buffer_read(((struct pipefs_inode*)(file->f_inode->i_private))->buf,&data[i]) <
  85:./fs/pipefs/pipefs.c ****             __delay(1);
  86:./fs/pipefs/pipefs.c ****         }
  87:./fs/pipefs/pipefs.c ****     }
  88:./fs/pipefs/pipefs.c ****     return 0;
  89:./fs/pipefs/pipefs.c **** }
  90:./fs/pipefs/pipefs.c **** 
  91:./fs/pipefs/pipefs.c **** static int pipefs_write(struct file *file, char __user * data, size_t size, loff_t *offset){
  92:./fs/pipefs/pipefs.c ****     int i;
  93:./fs/pipefs/pipefs.c ****     for(i = 0;i < size;i++)
  94:./fs/pipefs/pipefs.c ****     {
  95:./fs/pipefs/pipefs.c ****         while (pipe_buffer_write(((struct pipefs_inode*)(file->f_inode->i_private))->buf,data[i]) <
  96:./fs/pipefs/pipefs.c ****             __delay(1);
  97:./fs/pipefs/pipefs.c ****         }
ARM GAS  /tmp/ccZILEbd.s 			page 6


  98:./fs/pipefs/pipefs.c ****     }
  99:./fs/pipefs/pipefs.c ****     return 0;
 100:./fs/pipefs/pipefs.c **** }
 101:./fs/pipefs/pipefs.c **** 
 102:./fs/pipefs/pipefs.c **** 
 103:./fs/pipefs/pipefs.c **** 
 104:./fs/pipefs/pipefs.c **** 
 105:./fs/pipefs/pipefs.c **** 
 106:./fs/pipefs/pipefs.c **** static struct file_operations pipefs_file_fops = {
 107:./fs/pipefs/pipefs.c ****     .owner = THIS_MODULE,
 108:./fs/pipefs/pipefs.c ****     .open = pipefs_open,
 109:./fs/pipefs/pipefs.c ****     .release = pipefs_release,
 110:./fs/pipefs/pipefs.c ****     .read  = pipefs_read,
 111:./fs/pipefs/pipefs.c ****     .write = pipefs_write
 112:./fs/pipefs/pipefs.c **** };
 113:./fs/pipefs/pipefs.c **** 
 114:./fs/pipefs/pipefs.c **** static struct pipefs_inode *pipefs_create_empty_inode(struct pipefs_superblock *sb,struct file_oper
 115:./fs/pipefs/pipefs.c **** {
 116:./fs/pipefs/pipefs.c ****     if(fop == NULL) return NULL;
 117:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
 118:./fs/pipefs/pipefs.c ****     if(pipe_inode == NULL) return NULL;
 119:./fs/pipefs/pipefs.c ****     pipe_inode->magic = MAGIC;
 120:./fs/pipefs/pipefs.c ****     pipe_inode->major = major;
 121:./fs/pipefs/pipefs.c ****     pipe_inode->i_fop = fop;
 122:./fs/pipefs/pipefs.c ****     pipe_inode->sb    = sb;
 123:./fs/pipefs/pipefs.c ****     pipe_inode->i_mode = S_IFREG | 0755;
 124:./fs/pipefs/pipefs.c ****     atomic_set(&pipe_inode->dentry_count,0);
 125:./fs/pipefs/pipefs.c ****     spin_lock_init(&pipe_inode->lock);
 126:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->list_node);
 127:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->dentry_list_head);
 128:./fs/pipefs/pipefs.c ****     
 129:./fs/pipefs/pipefs.c ****     pipe_inode->buf = NULL;
 130:./fs/pipefs/pipefs.c **** 
 131:./fs/pipefs/pipefs.c ****     spin_lock(&sb->lock);
 132:./fs/pipefs/pipefs.c ****     list_add(&pipe_inode->list_node,&sb->inode_list_head);
 133:./fs/pipefs/pipefs.c ****     spin_unlock(&sb->lock);
 134:./fs/pipefs/pipefs.c ****     
 135:./fs/pipefs/pipefs.c ****     return pipe_inode;
 136:./fs/pipefs/pipefs.c **** }
 137:./fs/pipefs/pipefs.c **** static void pipefs_inode_put(struct pipefs_inode *node){
 138:./fs/pipefs/pipefs.c ****     if(node != NULL)
 139:./fs/pipefs/pipefs.c ****     {
 140:./fs/pipefs/pipefs.c ****         if(node->buf){
 141:./fs/pipefs/pipefs.c ****             kfree(node->buf);
 142:./fs/pipefs/pipefs.c ****         }
 143:./fs/pipefs/pipefs.c ****         kfree(node);
 144:./fs/pipefs/pipefs.c ****     }
 145:./fs/pipefs/pipefs.c **** }
 146:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dentry(struct pipefs_inode* parent_dentry_inode,struct p
 147:./fs/pipefs/pipefs.c **** {
 148:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 149:./fs/pipefs/pipefs.c **** 
 150:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* new_dentry =  kmalloc(sizeof(struct pipefs_dentry),GFP_KERNEL);
 151:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL)return NULL;
 152:./fs/pipefs/pipefs.c ****     new_dentry->magic = MAGIC;
 153:./fs/pipefs/pipefs.c ****     new_dentry->name = NULL;
 154:./fs/pipefs/pipefs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
ARM GAS  /tmp/ccZILEbd.s 			page 7


 155:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 156:./fs/pipefs/pipefs.c ****         kfree(new_dentry);
 157:./fs/pipefs/pipefs.c ****         return NULL;
 158:./fs/pipefs/pipefs.c ****     }
 159:./fs/pipefs/pipefs.c ****     strcpy(new_dentry->name,name);
 160:./fs/pipefs/pipefs.c ****     new_dentry->target_inode = target_inode;
 161:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 162:./fs/pipefs/pipefs.c ****     
 163:./fs/pipefs/pipefs.c **** 
 164:./fs/pipefs/pipefs.c ****     atomic_inc (&target_inode->dentry_count);      //Â¢ûÂä†ÂºïÁî®ËÆ°Êï∞
 165:./fs/pipefs/pipefs.c ****     
 166:./fs/pipefs/pipefs.c ****     
 167:./fs/pipefs/pipefs.c ****     spin_lock   (&parent_dentry_inode->lock);
 168:./fs/pipefs/pipefs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 169:./fs/pipefs/pipefs.c ****     spin_unlock(&parent_dentry_inode->lock);
 170:./fs/pipefs/pipefs.c ****     return new_dentry;
 171:./fs/pipefs/pipefs.c **** }
 172:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_inode( struct pipefs_superblock *sb,struct pipefs_inode*
 173:./fs/pipefs/pipefs.c **** {
 174:./fs/pipefs/pipefs.c ****     struct pipefs_inode * new_inode = pipefs_create_empty_inode(sb,fop,major);
 175:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 176:./fs/pipefs/pipefs.c ****         return NULL;
 177:./fs/pipefs/pipefs.c ****     }   
 178:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* new_dentry = pipefs_create_dentry(parent_dentry_inode,new_inode,name); //
 179:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
 180:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 181:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 182:./fs/pipefs/pipefs.c ****         spin_unlock(&sb->lock);
 183:./fs/pipefs/pipefs.c ****         pipefs_inode_put(new_inode);
 184:./fs/pipefs/pipefs.c ****         return NULL;
 185:./fs/pipefs/pipefs.c ****     }
 186:./fs/pipefs/pipefs.c ****     return new_dentry;
 187:./fs/pipefs/pipefs.c **** }
 188:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_file(struct pipefs_superblock *sb,struct pipefs_inode* p
 189:./fs/pipefs/pipefs.c **** {
 190:./fs/pipefs/pipefs.c ****     return pipefs_create_inode(sb,parent_dentry_inode,fop,major,name);
 191:./fs/pipefs/pipefs.c **** }
 192:./fs/pipefs/pipefs.c **** 
 193:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dir(struct pipefs_superblock *sb,struct pipefs_inode* pa
 194:./fs/pipefs/pipefs.c **** {
 195:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry =  pipefs_create_inode(sb,parent_dentry_inode,&pipefs_file_fops,0,
 196:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 197:./fs/pipefs/pipefs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 198:./fs/pipefs/pipefs.c ****     return dentry;
 199:./fs/pipefs/pipefs.c **** }
 200:./fs/pipefs/pipefs.c **** static void dentry_put(struct pipefs_superblock *sb,struct pipefs_dentry* dentry)
 201:./fs/pipefs/pipefs.c **** {
 202:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return;
 203:./fs/pipefs/pipefs.c ****     if(dentry->target_inode != NULL)
 204:./fs/pipefs/pipefs.c ****     {
 205:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 206:./fs/pipefs/pipefs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 207:./fs/pipefs/pipefs.c ****         {
 208:./fs/pipefs/pipefs.c ****             list_del(&dentry->target_inode->list_node);    
 209:./fs/pipefs/pipefs.c ****             pipefs_inode_put(dentry->target_inode);
 210:./fs/pipefs/pipefs.c ****         }
 211:./fs/pipefs/pipefs.c ****         spin_unlock(&sb->lock);
ARM GAS  /tmp/ccZILEbd.s 			page 8


 212:./fs/pipefs/pipefs.c ****     }
 213:./fs/pipefs/pipefs.c ****     kfree(dentry->name);
 214:./fs/pipefs/pipefs.c ****     kfree(dentry);
 215:./fs/pipefs/pipefs.c **** }
 216:./fs/pipefs/pipefs.c **** static void pipefs_delete_dentry(struct pipefs_superblock *sb,struct pipefs_inode* parent_dentry_in
 217:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
 218:./fs/pipefs/pipefs.c ****     
 219:./fs/pipefs/pipefs.c ****     if ((delete_dentry->target_inode->i_mode & S_IFMT) == S_IFDIR ){         //Â¶ÇÊûúÊòØÁõÆÂΩïÈ°πÈú
 220:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 221:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 222:./fs/pipefs/pipefs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 223:./fs/pipefs/pipefs.c ****             return;
 224:./fs/pipefs/pipefs.c ****         }
 225:./fs/pipefs/pipefs.c ****     }
 226:./fs/pipefs/pipefs.c ****     list_del(&delete_dentry->list_node);                                     //Â∞Üdentry‰ªéÁà∂ÁõÆÂΩ
 227:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_unlock(&parent_dentry_inode->lock);
 228:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 229:./fs/pipefs/pipefs.c **** }
 230:./fs/pipefs/pipefs.c **** static struct pipefs_superblock* pipefs_superblock_create(void) //ÂàõÂª∫superblock
 231:./fs/pipefs/pipefs.c **** {
 232:./fs/pipefs/pipefs.c ****     struct pipefs_superblock*d_sb = kmalloc(sizeof(struct pipefs_superblock),GFP_KERNEL);
 233:./fs/pipefs/pipefs.c ****     if(d_sb == NULL){
 234:./fs/pipefs/pipefs.c ****         return NULL;        
 235:./fs/pipefs/pipefs.c ****     }
 236:./fs/pipefs/pipefs.c ****     d_sb->magic = MAGIC;
 237:./fs/pipefs/pipefs.c ****     spin_lock_init(&d_sb->lock);
 238:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&d_sb->inode_list_head);
 239:./fs/pipefs/pipefs.c ****     struct pipefs_inode* root_inode = pipefs_create_empty_inode(d_sb ,&pipefs_file_fops,0);
 240:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 241:./fs/pipefs/pipefs.c ****         kfree(d_sb);
 242:./fs/pipefs/pipefs.c ****         return NULL;
 243:./fs/pipefs/pipefs.c ****     }
 244:./fs/pipefs/pipefs.c ****     root_inode->i_mode = S_IFDIR | 0755;
 245:./fs/pipefs/pipefs.c ****     d_sb->rootinode = root_inode;
 246:./fs/pipefs/pipefs.c ****     root_inode->i_fop = &pipefs_file_fops;
 247:./fs/pipefs/pipefs.c ****     atomic_inc (&root_inode->dentry_count); 
 248:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&root_inode->dentry_list_head);
 249:./fs/pipefs/pipefs.c ****     return d_sb;
 250:./fs/pipefs/pipefs.c **** } 
 251:./fs/pipefs/pipefs.c **** static void pipefs_superblock_destory(struct pipefs_superblock* sb){
 252:./fs/pipefs/pipefs.c ****     if(sb!= NULL) {
 253:./fs/pipefs/pipefs.c ****         struct pipefs_inode * root_inode = sb->rootinode;
 254:./fs/pipefs/pipefs.c ****         if(!root_inode){
 255:./fs/pipefs/pipefs.c ****             kfree(root_inode);
 256:./fs/pipefs/pipefs.c ****         }
 257:./fs/pipefs/pipefs.c ****         kfree(sb);
 258:./fs/pipefs/pipefs.c ****     }
 259:./fs/pipefs/pipefs.c **** }
 260:./fs/pipefs/pipefs.c **** 
 261:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_lookup(struct pipefs_inode* dentry_inode,char *name)
 262:./fs/pipefs/pipefs.c **** {
 263:./fs/pipefs/pipefs.c ****     if(dentry_inode == NULL) return NULL;
 264:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 265:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 266:./fs/pipefs/pipefs.c ****     spin_lock(&dentry_inode->lock);
 267:./fs/pipefs/pipefs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 268:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
ARM GAS  /tmp/ccZILEbd.s 			page 9


 269:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 270:./fs/pipefs/pipefs.c ****             return pos;
 271:./fs/pipefs/pipefs.c ****         }
 272:./fs/pipefs/pipefs.c ****     }
 273:./fs/pipefs/pipefs.c ****     spin_unlock(&dentry_inode->lock);
 274:./fs/pipefs/pipefs.c ****     return NULL;
 275:./fs/pipefs/pipefs.c **** }
 276:./fs/pipefs/pipefs.c **** 
 277:./fs/pipefs/pipefs.c **** 
 278:./fs/pipefs/pipefs.c **** 
 279:./fs/pipefs/pipefs.c **** 
 280:./fs/pipefs/pipefs.c **** 
 281:./fs/pipefs/pipefs.c **** 
 282:./fs/pipefs/pipefs.c **** 
 283:./fs/pipefs/pipefs.c **** 
 284:./fs/pipefs/pipefs.c **** 
 285:./fs/pipefs/pipefs.c **** static struct super_operations pipefs_super_operation;
 286:./fs/pipefs/pipefs.c **** static struct dentry_operations pipefs_dentry_operation;
 287:./fs/pipefs/pipefs.c **** static struct inode_operations pipefs_inode_operation;
 288:./fs/pipefs/pipefs.c **** 
 289:./fs/pipefs/pipefs.c **** static void pipefs_kill_sb (struct super_block * sb);
 290:./fs/pipefs/pipefs.c **** static struct inode *pipefs_alloc_inode(struct super_block *sb);
 291:./fs/pipefs/pipefs.c **** static void  pipefs_destroy_inode(struct inode * node); //Êí§ÈîÄpipefs_alloc_inodeÊâÄÂÅöÁöÑ‰∏ÄÂàá
 292:./fs/pipefs/pipefs.c **** static int pipefs_statfs (struct dentry * dentry, struct kstatfs *star);
 293:./fs/pipefs/pipefs.c **** static struct dentry * pipefs_get_dentry(struct dentry * vdentry, struct pipefs_dentry *dentry);
 294:./fs/pipefs/pipefs.c **** static struct super_block *pipefs_get_vfs_superblock(struct pipefs_superblock *sb);
 295:./fs/pipefs/pipefs.c **** static struct inode *  pipefs_get_inode(struct pipefs_inode *,struct super_block*);
 296:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_mount(struct file_system_type *fs_type,
 297:./fs/pipefs/pipefs.c ****     int flags,
 298:./fs/pipefs/pipefs.c ****     const char *pipe_name,
 299:./fs/pipefs/pipefs.c ****     void *data);
 300:./fs/pipefs/pipefs.c **** 
 301:./fs/pipefs/pipefs.c **** static struct file_system_type fs_type = {
 302:./fs/pipefs/pipefs.c ****     .name     = "pipefs",
 303:./fs/pipefs/pipefs.c ****     .fs_flags = 0,
 304:./fs/pipefs/pipefs.c ****     .init_fs_context = NULL,
 305:./fs/pipefs/pipefs.c ****     .kill_sb  = pipefs_kill_sb,
 306:./fs/pipefs/pipefs.c ****     .mount    = pipefs_mount,
 307:./fs/pipefs/pipefs.c ****     .owner    = THIS_MODULE,
 308:./fs/pipefs/pipefs.c **** };
 309:./fs/pipefs/pipefs.c **** 
 310:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_mount(struct file_system_type *fs_type,
 311:./fs/pipefs/pipefs.c ****     int flags,
 312:./fs/pipefs/pipefs.c ****     const char *pipe_name,
 313:./fs/pipefs/pipefs.c ****     void *data)
 314:./fs/pipefs/pipefs.c **** {
 315:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *fs_superblock= pipefs_superblock_create();
 316:./fs/pipefs/pipefs.c ****     if (fs_superblock == NULL){
 317:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 318:./fs/pipefs/pipefs.c ****     }
 319:./fs/pipefs/pipefs.c ****     struct dentry * root = __d_alloc(NULL,"root");
 320:./fs/pipefs/pipefs.c ****     if(root == NULL){
 321:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 322:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);   
 323:./fs/pipefs/pipefs.c ****     }
 324:./fs/pipefs/pipefs.c **** 
 325:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZILEbd.s 			page 10


 326:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry = kmalloc(sizeof(struct pipefs_dentry),GFP_KERNEL);
 327:./fs/pipefs/pipefs.c ****     if(dentry == NULL){
 328:./fs/pipefs/pipefs.c ****        
 329:./fs/pipefs/pipefs.c ****         kfree(root);
 330:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 331:./fs/pipefs/pipefs.c ****     }
 332:./fs/pipefs/pipefs.c ****     dentry->name = NULL;
 333:./fs/pipefs/pipefs.c ****     dentry->target_inode = fs_superblock->rootinode;
 334:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 335:./fs/pipefs/pipefs.c ****     root->d_fsdata = dentry;
 336:./fs/pipefs/pipefs.c ****     struct inode * root_inode = pipefs_get_inode(dentry->target_inode,NULL);
 337:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 338:./fs/pipefs/pipefs.c ****         kfree(dentry);
 339:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 340:./fs/pipefs/pipefs.c ****         kfree(root);
 341:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 342:./fs/pipefs/pipefs.c ****     } 
 343:./fs/pipefs/pipefs.c ****     root->d_inode = root_inode;
 344:./fs/pipefs/pipefs.c **** 
 345:./fs/pipefs/pipefs.c ****     struct super_block *sb =pipefs_get_vfs_superblock(fs_superblock);
 346:./fs/pipefs/pipefs.c ****     if(sb == NULL){
 347:./fs/pipefs/pipefs.c ****         kfree(root);
 348:./fs/pipefs/pipefs.c ****         kfree(dentry);
 349:./fs/pipefs/pipefs.c ****         inode_put(root_inode);
 350:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 351:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);       
 352:./fs/pipefs/pipefs.c ****     }
 353:./fs/pipefs/pipefs.c ****     sb->s_root = root;
 354:./fs/pipefs/pipefs.c ****     root->d_sb = sb;
 355:./fs/pipefs/pipefs.c ****     return root;
 356:./fs/pipefs/pipefs.c **** }
 357:./fs/pipefs/pipefs.c **** 
 358:./fs/pipefs/pipefs.c **** 
 359:./fs/pipefs/pipefs.c **** 
 360:./fs/pipefs/pipefs.c **** static struct super_operations pipefs_super_operation = {
 361:./fs/pipefs/pipefs.c ****     .alloc_inode   = pipefs_alloc_inode,
 362:./fs/pipefs/pipefs.c ****     .destroy_inode = pipefs_destroy_inode, 
 363:./fs/pipefs/pipefs.c ****     .free_inode    = NULL,         
 364:./fs/pipefs/pipefs.c ****     .dirty_inode   = NULL,
 365:./fs/pipefs/pipefs.c ****     .write_inode   = NULL,
 366:./fs/pipefs/pipefs.c ****     .drop_inode    = NULL,
 367:./fs/pipefs/pipefs.c ****     .put_super     = pipefs_kill_sb,
 368:./fs/pipefs/pipefs.c ****     .sync_fs       = NULL,
 369:./fs/pipefs/pipefs.c ****     .statfs        = pipefs_statfs,
 370:./fs/pipefs/pipefs.c **** };
 371:./fs/pipefs/pipefs.c **** 
 372:./fs/pipefs/pipefs.c **** static struct super_block *pipefs_get_vfs_superblock(struct pipefs_superblock *sb) //Â∞ÜÊñá‰ª∂Á≥ªÁª
 373:./fs/pipefs/pipefs.c **** {
 374:./fs/pipefs/pipefs.c ****     if(sb == NULL) return NULL;
 375:./fs/pipefs/pipefs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 376:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 377:./fs/pipefs/pipefs.c ****     vsb->s_fs_info =   sb;
 378:./fs/pipefs/pipefs.c ****     vsb->s_d_op    =  &pipefs_dentry_operation;
 379:./fs/pipefs/pipefs.c ****     vsb->s_op      =  &pipefs_super_operation;    
 380:./fs/pipefs/pipefs.c ****     return vsb;
 381:./fs/pipefs/pipefs.c **** }
 382:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZILEbd.s 			page 11


 383:./fs/pipefs/pipefs.c **** 
 384:./fs/pipefs/pipefs.c **** static void pipefs_kill_sb (struct super_block * sb){                          //ÈáäÊîæÊñá‰ª∂Á≥ªÁªü
 385:./fs/pipefs/pipefs.c ****     put_super(sb);
 386:./fs/pipefs/pipefs.c **** }
 387:./fs/pipefs/pipefs.c **** 
 388:./fs/pipefs/pipefs.c **** static struct inode *  pipefs_get_inode(struct pipefs_inode * pipe_node,struct super_block* sb )  /
 389:./fs/pipefs/pipefs.c **** {
 390:./fs/pipefs/pipefs.c ****     if(pipe_node == NULL) return NULL;
 391:./fs/pipefs/pipefs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 392:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 393:./fs/pipefs/pipefs.c ****     inode->i_mode    = pipe_node->i_mode;
 394:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 395:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 396:./fs/pipefs/pipefs.c ****     inode->i_private = pipe_node;
 397:./fs/pipefs/pipefs.c ****     return inode;
 398:./fs/pipefs/pipefs.c **** }
 399:./fs/pipefs/pipefs.c **** 
 400:./fs/pipefs/pipefs.c **** static struct inode *pipefs_alloc_inode(struct super_block *sb) //ÂàõÂª∫‰∏Ä‰∏™inodeÔºåÂêåÊó∂ÂàõÂª∫i
 401:./fs/pipefs/pipefs.c **** {
 402:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *supb = sb->s_fs_info;
 403:./fs/pipefs/pipefs.c ****     if(supb->magic != MAGIC) return NULL;
 404:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 405:./fs/pipefs/pipefs.c ****      if(inode == NULL) return NULL;
 406:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 407:./fs/pipefs/pipefs.c ****      if(out_inode == NULL){
 408:./fs/pipefs/pipefs.c ****         kfree(inode);
 409:./fs/pipefs/pipefs.c ****         return NULL;
 410:./fs/pipefs/pipefs.c ****      }
 411:./fs/pipefs/pipefs.c ****      return out_inode;
 412:./fs/pipefs/pipefs.c **** }
 413:./fs/pipefs/pipefs.c **** 
 414:./fs/pipefs/pipefs.c **** 
 415:./fs/pipefs/pipefs.c **** 
 416:./fs/pipefs/pipefs.c **** static void  pipefs_destroy_inode(struct inode * node) //Êí§ÈîÄpipefs_alloc_inodeÊâÄÂÅöÁöÑ‰∏ÄÂàá
 417:./fs/pipefs/pipefs.c **** {
 418:./fs/pipefs/pipefs.c ****     if(node == NULL) return;
 419:./fs/pipefs/pipefs.c ****     if(node->i_private != NULL) {
 420:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 421:./fs/pipefs/pipefs.c ****         list_del(&pipe_node->list_node);
 422:./fs/pipefs/pipefs.c ****         kfree(pipe_node);        
 423:./fs/pipefs/pipefs.c ****     }
 424:./fs/pipefs/pipefs.c **** }
 425:./fs/pipefs/pipefs.c **** 
 426:./fs/pipefs/pipefs.c **** static int pipefs_statfs (struct dentry * dentry, struct kstatfs *star){
 132              		.loc 1 426 72 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 427:./fs/pipefs/pipefs.c ****     struct pipefs_dentry * pipefs_dentry = dentry->d_fsdata;
 137              		.loc 1 427 5 view .LVU17
 428:./fs/pipefs/pipefs.c ****     struct pipefs_inode * pipefs_node = pipefs_dentry->target_inode;
 138              		.loc 1 428 5 view .LVU18
 429:./fs/pipefs/pipefs.c ****     star->f_type = MAGIC;
 139              		.loc 1 429 5 view .LVU19
 140              		.loc 1 429 18 is_stmt 0 view .LVU20
 141 0000 064B     		ldr	r3, .L8
ARM GAS  /tmp/ccZILEbd.s 			page 12


 142 0002 0B60     		str	r3, [r1]
 143              	.LVL8:
 430:./fs/pipefs/pipefs.c ****     star->f_bsize  = 0;
 144              		.loc 1 430 5 is_stmt 1 view .LVU21
 145              		.loc 1 430 20 is_stmt 0 view .LVU22
 146 0004 0020     		movs	r0, #0
 147              	.LVL9:
 148              		.loc 1 430 20 view .LVU23
 149 0006 4860     		str	r0, [r1, #4]
 431:./fs/pipefs/pipefs.c ****     star->f_blocks = 1;
 150              		.loc 1 431 5 is_stmt 1 view .LVU24
 151              		.loc 1 431 20 is_stmt 0 view .LVU25
 152 0008 0123     		movs	r3, #1
 153 000a 8B60     		str	r3, [r1, #8]
 432:./fs/pipefs/pipefs.c ****     star->f_bfree  = 0;
 154              		.loc 1 432 5 is_stmt 1 view .LVU26
 155              		.loc 1 432 20 is_stmt 0 view .LVU27
 156 000c C860     		str	r0, [r1, #12]
 433:./fs/pipefs/pipefs.c ****     star->f_bavail = 0;
 157              		.loc 1 433 5 is_stmt 1 view .LVU28
 158              		.loc 1 433 20 is_stmt 0 view .LVU29
 159 000e 0861     		str	r0, [r1, #16]
 434:./fs/pipefs/pipefs.c ****     star->f_files  = 128;
 160              		.loc 1 434 5 is_stmt 1 view .LVU30
 161              		.loc 1 434 20 is_stmt 0 view .LVU31
 162 0010 8023     		movs	r3, #128
 163 0012 4B61     		str	r3, [r1, #20]
 435:./fs/pipefs/pipefs.c ****     star->f_ffree  = 127;
 164              		.loc 1 435 5 is_stmt 1 view .LVU32
 165              		.loc 1 435 20 is_stmt 0 view .LVU33
 166 0014 7F23     		movs	r3, #127
 167 0016 8B61     		str	r3, [r1, #24]
 436:./fs/pipefs/pipefs.c ****     return 0;
 168              		.loc 1 436 5 is_stmt 1 view .LVU34
 437:./fs/pipefs/pipefs.c **** }
 169              		.loc 1 437 1 is_stmt 0 view .LVU35
 170 0018 7047     		bx	lr
 171              	.L9:
 172 001a 00BF     		.align	2
 173              	.L8:
 174 001c 4E61BC00 		.word	12345678
 175              		.cfi_endproc
 176              	.LFE1058:
 178              		.section	.text.pipefs_get_dentry,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	pipefs_get_dentry:
 185              	.LVL10:
 186              	.LFB1059:
 438:./fs/pipefs/pipefs.c **** 
 439:./fs/pipefs/pipefs.c **** 
 440:./fs/pipefs/pipefs.c **** 
 441:./fs/pipefs/pipefs.c **** static int pipefs_create(struct mnt_idmap * map, struct inode * dir,struct dentry * dentry,umode_t 
 442:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_vfs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flag
 443:./fs/pipefs/pipefs.c **** static int pipefs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry);
ARM GAS  /tmp/ccZILEbd.s 			page 13


 444:./fs/pipefs/pipefs.c **** static int pipefs_unlink(struct inode *dir, struct dentry *dentry);
 445:./fs/pipefs/pipefs.c **** static int pipefs_mkdir(struct mnt_idmap *mnt, struct inode *dir, struct dentry *dentry, umode_t mo
 446:./fs/pipefs/pipefs.c **** static int pipefs_setattr(struct mnt_idmap *map, struct dentry *dentry, struct iattr *iattr);
 447:./fs/pipefs/pipefs.c **** static int  pipefs_getattr (struct mnt_idmap *dmp, const struct path * path,struct kstat *stat, u32
 448:./fs/pipefs/pipefs.c **** static int pipefs_rmdir(struct inode *	inode  ,struct dentry *dentry);
 449:./fs/pipefs/pipefs.c **** 
 450:./fs/pipefs/pipefs.c **** static struct inode_operations pipefs_inode_operation = {
 451:./fs/pipefs/pipefs.c ****     .create = pipefs_create,
 452:./fs/pipefs/pipefs.c ****     .lookup = pipefs_vfs_lookup,
 453:./fs/pipefs/pipefs.c ****     .link   = pipefs_link,
 454:./fs/pipefs/pipefs.c ****     .unlink = pipefs_unlink,
 455:./fs/pipefs/pipefs.c ****     .mkdir  = pipefs_mkdir,
 456:./fs/pipefs/pipefs.c ****     .rmdir  = pipefs_rmdir,
 457:./fs/pipefs/pipefs.c ****     .setattr = pipefs_setattr,
 458:./fs/pipefs/pipefs.c ****     .getattr = pipefs_getattr
 459:./fs/pipefs/pipefs.c **** };
 460:./fs/pipefs/pipefs.c **** 
 461:./fs/pipefs/pipefs.c **** static struct dentry * pipefs_get_dentry(struct dentry * vdentry, struct pipefs_dentry *dentry) //È
 462:./fs/pipefs/pipefs.c **** {
 187              		.loc 1 462 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 463:./fs/pipefs/pipefs.c ****     if(dentry == NULL || vdentry == NULL) return NULL;
 192              		.loc 1 463 5 view .LVU37
 193              		.loc 1 463 7 is_stmt 0 view .LVU38
 194 0000 11B1     		cbz	r1, .L12
 195              		.loc 1 463 23 discriminator 2 view .LVU39
 196 0002 10B1     		cbz	r0, .L10
 464:./fs/pipefs/pipefs.c ****     vdentry->d_fsdata = dentry;
 197              		.loc 1 464 5 is_stmt 1 view .LVU40
 198              		.loc 1 464 23 is_stmt 0 view .LVU41
 199 0004 4165     		str	r1, [r0, #84]
 465:./fs/pipefs/pipefs.c ****     return vdentry;
 200              		.loc 1 465 5 is_stmt 1 view .LVU42
 201              		.loc 1 465 12 is_stmt 0 view .LVU43
 202 0006 7047     		bx	lr
 203              	.L12:
 463:./fs/pipefs/pipefs.c ****     if(dentry == NULL || vdentry == NULL) return NULL;
 204              		.loc 1 463 50 discriminator 3 view .LVU44
 205 0008 0846     		mov	r0, r1
 206              	.LVL11:
 207              	.L10:
 466:./fs/pipefs/pipefs.c **** }
 208              		.loc 1 466 1 view .LVU45
 209 000a 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE1059:
 213              		.section	.text.pipefs_setattr,"ax",%progbits
 214              		.align	1
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 219              	pipefs_setattr:
 220              	.LVL12:
 221              	.LFB1067:
ARM GAS  /tmp/ccZILEbd.s 			page 14


 467:./fs/pipefs/pipefs.c **** 
 468:./fs/pipefs/pipefs.c **** static int pipefs_create(struct mnt_idmap * map, struct inode * dir,struct dentry * dentry,umode_t 
 469:./fs/pipefs/pipefs.c **** {
 470:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 471:./fs/pipefs/pipefs.c **** 
 472:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dinode = dir->i_private;
 473:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 474:./fs/pipefs/pipefs.c ****     if(file == NULL){
 475:./fs/pipefs/pipefs.c ****         file =  pipefs_create_file(dinode->sb,dinode,&pipefs_file_fops,10,file_name);
 476:./fs/pipefs/pipefs.c ****     }
 477:./fs/pipefs/pipefs.c ****     if (file == NULL){                               //Á°ÆÂÆöÊñá‰ª∂ÊòØÂê¶Ë¢´ÂàõÂª∫
 478:./fs/pipefs/pipefs.c ****         return -1;
 479:./fs/pipefs/pipefs.c ****     }
 480:./fs/pipefs/pipefs.c ****     file->target_inode->i_mode = S_IFREG | (mode & 0777);
 481:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 482:./fs/pipefs/pipefs.c ****      return -1;
 483:./fs/pipefs/pipefs.c ****     }  
 484:./fs/pipefs/pipefs.c **** 
 485:./fs/pipefs/pipefs.c ****     struct inode * new_file_inode = pipefs_get_inode(file->target_inode,dir->i_sb);
 486:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 487:./fs/pipefs/pipefs.c ****         return -1;
 488:./fs/pipefs/pipefs.c **** 
 489:./fs/pipefs/pipefs.c ****     d_add(dentry,new_file_inode); //ÈÄöÁü•Êñá‰ª∂Á≥ªÁªüÂä†ÂÖ•ÁºìÂ≠òÔºåÂπ∂ËøõË°åËµÑÊ∫êÁªëÂÆö
 490:./fs/pipefs/pipefs.c ****    return 0;
 491:./fs/pipefs/pipefs.c **** } 
 492:./fs/pipefs/pipefs.c **** 
 493:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_vfs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flag
 494:./fs/pipefs/pipefs.c ****     
 495:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private; //Ëé∑ÂèñÊñá‰ª∂Á≥ªÁªüÊú¨
 496:./fs/pipefs/pipefs.c ****     char *name = dentry->d_name.name;                           
 497:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *pos;    
 498:./fs/pipefs/pipefs.c ****     pos = pipefs_lookup(dir_inode,name);       //Êü•ËØ¢Ëé∑Âæódentry
 499:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 500:./fs/pipefs/pipefs.c **** 
 501:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,pos) == NULL)
 502:./fs/pipefs/pipefs.c ****         return NULL;
 503:./fs/pipefs/pipefs.c **** 
 504:./fs/pipefs/pipefs.c ****     struct inode * find_inode = pipefs_get_inode(pos->target_inode,dir->i_sb);
 505:./fs/pipefs/pipefs.c ****     if(find_inode == NULL)
 506:./fs/pipefs/pipefs.c ****         return NULL;
 507:./fs/pipefs/pipefs.c ****     
 508:./fs/pipefs/pipefs.c ****     return d_add(dentry,find_inode);
 509:./fs/pipefs/pipefs.c ****     return NULL;
 510:./fs/pipefs/pipefs.c **** }
 511:./fs/pipefs/pipefs.c **** 
 512:./fs/pipefs/pipefs.c **** 
 513:./fs/pipefs/pipefs.c **** static int pipefs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)
 514:./fs/pipefs/pipefs.c **** {
 515:./fs/pipefs/pipefs.c ****     struct pipefs_inode *old_inode = (struct pipefs_inode *)old_dentry->d_inode->i_private;
 516:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private;
 517:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *new_dentry = pipefs_create_dentry(dir_inode, old_inode, dentry->d_name.na
 518:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 519:./fs/pipefs/pipefs.c ****         return -ENOMEM;
 520:./fs/pipefs/pipefs.c ****     }
 521:./fs/pipefs/pipefs.c ****     pipefs_get_dentry(dentry,new_dentry);
 522:./fs/pipefs/pipefs.c ****     dentry->d_sb = dir->i_sb;
 523:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
ARM GAS  /tmp/ccZILEbd.s 			page 15


 524:./fs/pipefs/pipefs.c ****     return 0;
 525:./fs/pipefs/pipefs.c **** }
 526:./fs/pipefs/pipefs.c **** 
 527:./fs/pipefs/pipefs.c **** static int pipefs_unlink(struct inode *dir, struct dentry *dentry)
 528:./fs/pipefs/pipefs.c **** {
 529:./fs/pipefs/pipefs.c ****     struct pipefs_inode *parent_inode = (struct pipefs_inode *)dir->i_private;
 530:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *delete_dentry = (struct pipefs_dentry *)dentry->d_fsdata;
 531:./fs/pipefs/pipefs.c ****     pipefs_delete_dentry(parent_inode->sb, parent_inode, delete_dentry);
 532:./fs/pipefs/pipefs.c ****     return 0;
 533:./fs/pipefs/pipefs.c **** }
 534:./fs/pipefs/pipefs.c **** 
 535:./fs/pipefs/pipefs.c **** 
 536:./fs/pipefs/pipefs.c **** static int pipefs_mkdir(struct mnt_idmap *mnt, struct inode *dir, struct dentry *dentry, umode_t mo
 537:./fs/pipefs/pipefs.c **** {
 538:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 539:./fs/pipefs/pipefs.c **** 
 540:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dinode = dir->i_private;
 541:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 542:./fs/pipefs/pipefs.c ****     if(file == NULL){
 543:./fs/pipefs/pipefs.c ****         file =  pipefs_create_dir(dinode->sb,dinode,file_name);
 544:./fs/pipefs/pipefs.c ****     }
 545:./fs/pipefs/pipefs.c ****     if (file == NULL){                               //Á°ÆÂÆöÊñá‰ª∂ÊòØÂê¶Ë¢´ÂàõÂª∫
 546:./fs/pipefs/pipefs.c ****         return -1;
 547:./fs/pipefs/pipefs.c ****     }
 548:./fs/pipefs/pipefs.c ****     file->target_inode->i_mode = S_IFREG | (mode & 0777);
 549:./fs/pipefs/pipefs.c ****     
 550:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 551:./fs/pipefs/pipefs.c ****      return -1;
 552:./fs/pipefs/pipefs.c ****     }  
 553:./fs/pipefs/pipefs.c ****     struct inode * new_file_inode = pipefs_get_inode(dinode,dir->i_sb);
 554:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 555:./fs/pipefs/pipefs.c ****         return -1;
 556:./fs/pipefs/pipefs.c **** 
 557:./fs/pipefs/pipefs.c ****     d_add(dentry,new_file_inode); //ÈÄöÁü•Êñá‰ª∂Á≥ªÁªüÂä†ÂÖ•ÁºìÂ≠òÔºåÂπ∂ËøõË°åËµÑÊ∫êÁªëÂÆö
 558:./fs/pipefs/pipefs.c ****    return 0;
 559:./fs/pipefs/pipefs.c **** }
 560:./fs/pipefs/pipefs.c **** 
 561:./fs/pipefs/pipefs.c **** 
 562:./fs/pipefs/pipefs.c **** static int pipefs_release_dentry(struct dentry *dentry){
 563:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *fs_dentry = dentry->d_fsdata;
 564:./fs/pipefs/pipefs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 565:./fs/pipefs/pipefs.c **** }
 566:./fs/pipefs/pipefs.c **** static int pipefs_rmdir(struct inode *	dir  ,struct dentry *dentry){
 567:./fs/pipefs/pipefs.c ****     pipefs_release_dentry(dentry);
 568:./fs/pipefs/pipefs.c ****     return simple_unlink(dir,dentry);
 569:./fs/pipefs/pipefs.c **** }
 570:./fs/pipefs/pipefs.c **** 
 571:./fs/pipefs/pipefs.c **** static int pipefs_setattr(struct mnt_idmap *map, struct dentry *dentry, struct iattr *iattr)
 572:./fs/pipefs/pipefs.c **** {
 222              		.loc 1 572 1 is_stmt 1 view -0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 573:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = dentry->d_fsdata;
 227              		.loc 1 573 5 view .LVU47
 228              		.loc 1 573 27 is_stmt 0 view .LVU48
ARM GAS  /tmp/ccZILEbd.s 			page 16


 229 0000 4B6D     		ldr	r3, [r1, #84]
 230              	.LVL13:
 574:./fs/pipefs/pipefs.c ****     file->target_inode->i_mode = (iattr->ia_mode & S_IFMT) | iattr->ia_mode;
 231              		.loc 1 574 5 is_stmt 1 view .LVU49
 232              		.loc 1 574 40 is_stmt 0 view .LVU50
 233 0002 9288     		ldrh	r2, [r2, #4]
 234              	.LVL14:
 235              		.loc 1 574 9 view .LVU51
 236 0004 9B68     		ldr	r3, [r3, #8]
 237              	.LVL15:
 238              		.loc 1 574 32 view .LVU52
 239 0006 5A60     		str	r2, [r3, #4]
 240              	.LVL16:
 575:./fs/pipefs/pipefs.c ****     return 0;
 241              		.loc 1 575 5 is_stmt 1 view .LVU53
 576:./fs/pipefs/pipefs.c **** }
 242              		.loc 1 576 1 is_stmt 0 view .LVU54
 243 0008 0020     		movs	r0, #0
 244              	.LVL17:
 245              		.loc 1 576 1 view .LVU55
 246 000a 7047     		bx	lr
 247              		.cfi_endproc
 248              	.LFE1067:
 250              		.section	.text.__spin_lock,"ax",%progbits
 251              		.align	1
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	__spin_lock:
 257              	.LVL18:
 258              	.LFB851:
  15:./arch/arm_m/include/asm/spinlock.h **** 
 259              		.loc 2 15 47 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
  15:./arch/arm_m/include/asm/spinlock.h **** 
 263              		.loc 2 15 47 is_stmt 0 view .LVU57
 264 0000 38B5     		push	{r3, r4, r5, lr}
 265              	.LCFI2:
 266              		.cfi_def_cfa_offset 16
 267              		.cfi_offset 3, -16
 268              		.cfi_offset 4, -12
 269              		.cfi_offset 5, -8
 270              		.cfi_offset 14, -4
 271 0002 0446     		mov	r4, r0
  17:./arch/arm_m/include/asm/spinlock.h ****     if(lock->flag == 0){
 272              		.loc 2 17 5 is_stmt 1 view .LVU58
 273 0004 FFF7FEFF 		bl	stop_all_scheduler
 274              	.LVL19:
  18:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 275              		.loc 2 18 5 view .LVU59
  18:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 276              		.loc 2 18 12 is_stmt 0 view .LVU60
 277 0008 2368     		ldr	r3, [r4]
  18:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 278              		.loc 2 18 7 view .LVU61
ARM GAS  /tmp/ccZILEbd.s 			page 17


 279 000a 2BB9     		cbnz	r3, .L16
  19:./arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
 280              		.loc 2 19 11 is_stmt 1 view .LVU62
  19:./arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
 281              		.loc 2 19 22 is_stmt 0 view .LVU63
 282 000c 0125     		movs	r5, #1
 283 000e 2560     		str	r5, [r4]
  20:./arch/arm_m/include/asm/spinlock.h ****         return 1;
 284              		.loc 2 20 11 is_stmt 1 view .LVU64
 285 0010 FFF7FEFF 		bl	start_all_scheduler
 286              	.LVL20:
  21:./arch/arm_m/include/asm/spinlock.h ****     }
 287              		.loc 2 21 9 view .LVU65
  21:./arch/arm_m/include/asm/spinlock.h ****     }
 288              		.loc 2 21 16 is_stmt 0 view .LVU66
 289 0014 2846     		mov	r0, r5
 290              	.L15:
  28:./arch/arm_m/include/asm/spinlock.h **** 
 291              		.loc 2 28 1 view .LVU67
 292 0016 38BD     		pop	{r3, r4, r5, pc}
 293              	.LVL21:
 294              	.L16:
  25:./arch/arm_m/include/asm/spinlock.h ****         return 0;
 295              		.loc 2 25 9 is_stmt 1 view .LVU68
 296 0018 FFF7FEFF 		bl	start_all_scheduler
 297              	.LVL22:
  26:./arch/arm_m/include/asm/spinlock.h ****     }
 298              		.loc 2 26 9 view .LVU69
  26:./arch/arm_m/include/asm/spinlock.h ****     }
 299              		.loc 2 26 16 is_stmt 0 view .LVU70
 300 001c 0020     		movs	r0, #0
 301 001e FAE7     		b	.L15
 302              		.cfi_endproc
 303              	.LFE851:
 305              		.section	.text.spin_lock,"ax",%progbits
 306              		.align	1
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 311              	spin_lock:
 312              	.LVL23:
 313              	.LFB854:
  15:./include/linux/spinlock.h ****     while (1)
 314              		.loc 3 15 1 is_stmt 1 view -0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
  15:./include/linux/spinlock.h ****     while (1)
 318              		.loc 3 15 1 is_stmt 0 view .LVU72
 319 0000 38B5     		push	{r3, r4, r5, lr}
 320              	.LCFI3:
 321              		.cfi_def_cfa_offset 16
 322              		.cfi_offset 3, -16
 323              		.cfi_offset 4, -12
 324              		.cfi_offset 5, -8
 325              		.cfi_offset 14, -4
 326 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccZILEbd.s 			page 18


 327 0004 06E0     		b	.L22
 328              	.LVL24:
 329              	.L24:
  19:./include/linux/spinlock.h ****             break;
 330              		.loc 3 19 13 is_stmt 1 view .LVU73
  19:./include/linux/spinlock.h ****             break;
 331              		.loc 3 19 27 is_stmt 0 view .LVU74
 332 0006 FFF7FEFF 		bl	get_current_task
 333              	.LVL25:
  19:./include/linux/spinlock.h ****             break;
 334              		.loc 3 19 25 discriminator 1 view .LVU75
 335 000a 2060     		str	r0, [r4]
  20:./include/linux/spinlock.h ****         }
 336              		.loc 3 20 13 is_stmt 1 view .LVU76
 337              	.L19:
  29:./include/linux/spinlock.h **** 
 338              		.loc 3 29 1 is_stmt 0 view .LVU77
 339 000c 38BD     		pop	{r3, r4, r5, pc}
 340              	.LVL26:
 341              	.L25:
  26:./include/linux/spinlock.h ****         }
 342              		.loc 3 26 13 is_stmt 1 view .LVU78
 343 000e 0520     		movs	r0, #5
 344 0010 FFF7FEFF 		bl	__delay
 345              	.LVL27:
  16:./include/linux/spinlock.h ****     {
 346              		.loc 3 16 11 view .LVU79
 347              	.L22:
  16:./include/linux/spinlock.h ****     {
 348              		.loc 3 16 5 view .LVU80
  18:./include/linux/spinlock.h ****             lock->owner = get_current_task();
 349              		.loc 3 18 9 view .LVU81
  18:./include/linux/spinlock.h ****             lock->owner = get_current_task();
 350              		.loc 3 18 12 is_stmt 0 view .LVU82
 351 0014 2046     		mov	r0, r4
 352 0016 FFF7FEFF 		bl	__spin_lock
 353              	.LVL28:
  18:./include/linux/spinlock.h ****             lock->owner = get_current_task();
 354              		.loc 3 18 11 discriminator 1 view .LVU83
 355 001a 0128     		cmp	r0, #1
 356 001c F3D0     		beq	.L24
  22:./include/linux/spinlock.h ****             return;   
 357              		.loc 3 22 15 is_stmt 1 view .LVU84
  22:./include/linux/spinlock.h ****             return;   
 358              		.loc 3 22 22 is_stmt 0 view .LVU85
 359 001e 2568     		ldr	r5, [r4]
  22:./include/linux/spinlock.h ****             return;   
 360              		.loc 3 22 33 view .LVU86
 361 0020 FFF7FEFF 		bl	get_current_task
 362              	.LVL29:
  22:./include/linux/spinlock.h ****             return;   
 363              		.loc 3 22 17 discriminator 1 view .LVU87
 364 0024 8542     		cmp	r5, r0
 365 0026 F2D1     		bne	.L25
 366 0028 F0E7     		b	.L19
 367              		.cfi_endproc
 368              	.LFE854:
ARM GAS  /tmp/ccZILEbd.s 			page 19


 370              		.section	.init.text,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 376              	pipefs_ops_init:
 377              	.LFB1069:
 577:./fs/pipefs/pipefs.c **** static int  pipefs_getattr (struct mnt_idmap *dmp, const struct path * path,struct kstat *stat, u32
 578:./fs/pipefs/pipefs.c **** {
 579:./fs/pipefs/pipefs.c ****     struct dentry *d = path->dentry;
 580:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = d->d_fsdata;
 581:./fs/pipefs/pipefs.c ****     struct pipefs_inode *inode;
 582:./fs/pipefs/pipefs.c **** 
 583:./fs/pipefs/pipefs.c ****     if (!file || !(inode = file->target_inode))
 584:./fs/pipefs/pipefs.c ****     return -ENOENT;
 585:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 586:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 587:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 588:./fs/pipefs/pipefs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 589:./fs/pipefs/pipefs.c ****     stat->size  = 0; 
 590:./fs/pipefs/pipefs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 591:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 592:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 593:./fs/pipefs/pipefs.c ****     stat->ctime = stat->atime;
 594:./fs/pipefs/pipefs.c ****     stat->blksize = PAGE_SIZE;
 595:./fs/pipefs/pipefs.c ****     stat->blocks  = 0;
 596:./fs/pipefs/pipefs.c ****     return 0;
 597:./fs/pipefs/pipefs.c **** }
 598:./fs/pipefs/pipefs.c **** 
 599:./fs/pipefs/pipefs.c **** static struct dentry_operations pipefs_dentry_operation = {
 600:./fs/pipefs/pipefs.c ****     .d_release = pipefs_release_dentry,
 601:./fs/pipefs/pipefs.c **** };
 602:./fs/pipefs/pipefs.c **** 
 603:./fs/pipefs/pipefs.c **** static int __init pipefs_ops_init(void){
 378              		.loc 1 603 40 is_stmt 1 view -0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382 0000 08B5     		push	{r3, lr}
 383              	.LCFI4:
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 3, -8
 386              		.cfi_offset 14, -4
 604:./fs/pipefs/pipefs.c ****     register_filesystem(&fs_type);
 387              		.loc 1 604 5 view .LVU89
 388 0002 0248     		ldr	r0, .L28
 389 0004 FFF7FEFF 		bl	register_filesystem
 390              	.LVL30:
 605:./fs/pipefs/pipefs.c ****     return 0;
 391              		.loc 1 605 5 view .LVU90
 606:./fs/pipefs/pipefs.c **** }
 392              		.loc 1 606 1 is_stmt 0 view .LVU91
 393 0008 0020     		movs	r0, #0
 394 000a 08BD     		pop	{r3, pc}
 395              	.L29:
 396              		.align	2
 397              	.L28:
ARM GAS  /tmp/ccZILEbd.s 			page 20


 398 000c 00000000 		.word	fs_type
 399              		.cfi_endproc
 400              	.LFE1069:
 402              		.section	.text.pipefs_kill_sb,"ax",%progbits
 403              		.align	1
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 408              	pipefs_kill_sb:
 409              	.LVL31:
 410              	.LFB1054:
 384:./fs/pipefs/pipefs.c ****     put_super(sb);
 411              		.loc 1 384 53 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 384:./fs/pipefs/pipefs.c ****     put_super(sb);
 415              		.loc 1 384 53 is_stmt 0 view .LVU93
 416 0000 08B5     		push	{r3, lr}
 417              	.LCFI5:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 3, -8
 420              		.cfi_offset 14, -4
 385:./fs/pipefs/pipefs.c **** }
 421              		.loc 1 385 5 is_stmt 1 view .LVU94
 422 0002 FFF7FEFF 		bl	put_super
 423              	.LVL32:
 386:./fs/pipefs/pipefs.c **** 
 424              		.loc 1 386 1 is_stmt 0 view .LVU95
 425 0006 08BD     		pop	{r3, pc}
 426              		.cfi_endproc
 427              	.LFE1054:
 429              		.section	.rodata.pipefs_release.str1.4,"aMS",%progbits,1
 430              		.align	2
 431              	.LC0:
 432 0000 70697065 		.ascii	"pipefs test close\012\000"
 432      66732074 
 432      65737420 
 432      636C6F73 
 432      650A00
 433              		.section	.text.pipefs_release,"ax",%progbits
 434              		.align	1
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	pipefs_release:
 440              	.LVL33:
 441              	.LFB1038:
  75:./fs/pipefs/pipefs.c ****     pr_info("pipefs test close\n");
 442              		.loc 1 75 66 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
  75:./fs/pipefs/pipefs.c ****     pr_info("pipefs test close\n");
 446              		.loc 1 75 66 is_stmt 0 view .LVU97
 447 0000 08B5     		push	{r3, lr}
 448              	.LCFI6:
ARM GAS  /tmp/ccZILEbd.s 			page 21


 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 3, -8
 451              		.cfi_offset 14, -4
  76:./fs/pipefs/pipefs.c ****     return 0;
 452              		.loc 1 76 5 is_stmt 1 view .LVU98
 453 0002 0248     		ldr	r0, .L34
 454              	.LVL34:
  76:./fs/pipefs/pipefs.c ****     return 0;
 455              		.loc 1 76 5 is_stmt 0 view .LVU99
 456 0004 FFF7FEFF 		bl	printk
 457              	.LVL35:
  77:./fs/pipefs/pipefs.c **** }
 458              		.loc 1 77 5 is_stmt 1 view .LVU100
  78:./fs/pipefs/pipefs.c **** 
 459              		.loc 1 78 1 is_stmt 0 view .LVU101
 460 0008 0020     		movs	r0, #0
 461 000a 08BD     		pop	{r3, pc}
 462              	.L35:
 463              		.align	2
 464              	.L34:
 465 000c 00000000 		.word	.LC0
 466              		.cfi_endproc
 467              	.LFE1038:
 469              		.section	.text.pipefs_open,"ax",%progbits
 470              		.align	1
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 475              	pipefs_open:
 476              	.LVL36:
 477              	.LFB1037:
  64:./fs/pipefs/pipefs.c ****     struct pipefs_inode *p_inode = inode->i_private;
 478              		.loc 1 64 1 is_stmt 1 view -0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
  64:./fs/pipefs/pipefs.c ****     struct pipefs_inode *p_inode = inode->i_private;
 482              		.loc 1 64 1 is_stmt 0 view .LVU103
 483 0000 10B5     		push	{r4, lr}
 484              	.LCFI7:
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 4, -8
 487              		.cfi_offset 14, -4
  65:./fs/pipefs/pipefs.c ****     if(p_inode->buf == NULL)
 488              		.loc 1 65 5 is_stmt 1 view .LVU104
  65:./fs/pipefs/pipefs.c ****     if(p_inode->buf == NULL)
 489              		.loc 1 65 26 is_stmt 0 view .LVU105
 490 0002 D0F88440 		ldr	r4, [r0, #132]
 491              	.LVL37:
  66:./fs/pipefs/pipefs.c ****     {
 492              		.loc 1 66 5 is_stmt 1 view .LVU106
  66:./fs/pipefs/pipefs.c ****     {
 493              		.loc 1 66 15 is_stmt 0 view .LVU107
 494 0006 A36B     		ldr	r3, [r4, #56]
  66:./fs/pipefs/pipefs.c ****     {
 495              		.loc 1 66 7 view .LVU108
 496 0008 0BB1     		cbz	r3, .L41
ARM GAS  /tmp/ccZILEbd.s 			page 22


  72:./fs/pipefs/pipefs.c **** }
 497              		.loc 1 72 12 view .LVU109
 498 000a 0020     		movs	r0, #0
 499              	.LVL38:
 500              	.L36:
  73:./fs/pipefs/pipefs.c **** 
 501              		.loc 1 73 1 view .LVU110
 502 000c 10BD     		pop	{r4, pc}
 503              	.LVL39:
 504              	.L41:
  68:./fs/pipefs/pipefs.c ****         if(!p_inode->buf)
 505              		.loc 1 68 9 is_stmt 1 view .LVU111
 506              	.LBB229:
 507              	.LBI229:
 508              		.file 4 "./include/linux/slab.h"
   1:./include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/slab.h **** /*
   3:./include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:./include/linux/slab.h ****  *
   5:./include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:./include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:./include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:./include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:./include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:./include/linux/slab.h ****  */
  11:./include/linux/slab.h **** 
  12:./include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:./include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:./include/linux/slab.h **** 
  15:./include/linux/slab.h **** #include <linux/cache.h>
  16:./include/linux/slab.h **** #include <linux/overflow.h>
  17:./include/linux/slab.h **** #include <linux/types.h>
  18:./include/linux/slab.h **** #include <linux/raid/pq.h>
  19:./include/linux/slab.h **** #include <linux/gfp_types.h>
  20:./include/linux/slab.h **** #include <linux/numa.h>
  21:./include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:./include/linux/slab.h **** #include <linux/spinlock.h>
  23:./include/linux/slab.h **** 
  24:./include/linux/slab.h **** enum _slab_flag_bits {
  25:./include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:./include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:./include/linux/slab.h **** 	_SLAB_POISON,
  28:./include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:./include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:./include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:./include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:./include/linux/slab.h **** 	_SLAB_STORE_USER,
  33:./include/linux/slab.h **** 	_SLAB_PANIC,
  34:./include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:./include/linux/slab.h **** 	_SLAB_TRACE,
  36:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:./include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:./include/linux/slab.h **** #endif
  39:./include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:./include/linux/slab.h **** 	_SLAB_NO_MERGE,
  41:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
  42:./include/linux/slab.h **** 	_SLAB_FAILSLAB,
ARM GAS  /tmp/ccZILEbd.s 			page 23


  43:./include/linux/slab.h **** #endif
  44:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:./include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:./include/linux/slab.h **** #endif
  47:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
  48:./include/linux/slab.h **** 	_SLAB_KASAN,
  49:./include/linux/slab.h **** #endif
  50:./include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:./include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:./include/linux/slab.h **** #endif
  54:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:./include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:./include/linux/slab.h **** #endif
  57:./include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:./include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:./include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:./include/linux/slab.h **** #endif
  62:./include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:./include/linux/slab.h **** };
  64:./include/linux/slab.h **** 
  65:./include/linux/slab.h **** 
  66:./include/linux/slab.h **** 
  67:./include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:./include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:./include/linux/slab.h **** 
  70:./include/linux/slab.h **** /*
  71:./include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:./include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:./include/linux/slab.h ****  */
  74:./include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:./include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:./include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:./include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:./include/linux/slab.h **** /* DEBUG: Poison objects */
  79:./include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:./include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:./include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:./include/linux/slab.h **** /**
  83:./include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:./include/linux/slab.h ****  *
  85:./include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:./include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:./include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:./include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:./include/linux/slab.h ****  *
  90:./include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:./include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:./include/linux/slab.h ****  */
  93:./include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:./include/linux/slab.h **** /* Use GFP_DMA memory */
  95:./include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:./include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:./include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
  98:./include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
  99:./include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
ARM GAS  /tmp/ccZILEbd.s 			page 24


 100:./include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:./include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:./include/linux/slab.h **** /**
 103:./include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
 104:./include/linux/slab.h ****  *
 105:./include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:./include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
 107:./include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:./include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:./include/linux/slab.h ****  *
 110:./include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:./include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:./include/linux/slab.h ****  * object validation pass. Something like:
 113:./include/linux/slab.h ****  *
 114:./include/linux/slab.h ****  * ::
 115:./include/linux/slab.h ****  *
 116:./include/linux/slab.h ****  *  begin:
 117:./include/linux/slab.h ****  *   rcu_read_lock();
 118:./include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:./include/linux/slab.h ****  *   if (obj) {
 120:./include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:./include/linux/slab.h ****  *       rcu_read_unlock();
 122:./include/linux/slab.h ****  *       goto begin;
 123:./include/linux/slab.h ****  *
 124:./include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:./include/linux/slab.h ****  *       put_ref(obj);
 126:./include/linux/slab.h ****  *       rcu_read_unlock();
 127:./include/linux/slab.h ****  *       goto begin;
 128:./include/linux/slab.h ****  *     }
 129:./include/linux/slab.h ****  *   }
 130:./include/linux/slab.h ****  *  rcu_read_unlock();
 131:./include/linux/slab.h ****  *
 132:./include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:./include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:./include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:./include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:./include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:./include/linux/slab.h ****  *
 138:./include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:./include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:./include/linux/slab.h ****  *
 141:./include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:./include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:./include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:./include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:./include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:./include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
 147:./include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:./include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:./include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:./include/linux/slab.h ****  * protection.
 151:./include/linux/slab.h ****  *
 152:./include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:./include/linux/slab.h ****  */
 154:./include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
 155:./include/linux/slab.h **** /* Trace allocations and frees */
 156:./include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
ARM GAS  /tmp/ccZILEbd.s 			page 25


 157:./include/linux/slab.h **** 
 158:./include/linux/slab.h **** /* Flag to prevent checks on free */
 159:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
 161:./include/linux/slab.h **** #else
 162:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:./include/linux/slab.h **** #endif
 164:./include/linux/slab.h **** 
 165:./include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:./include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:./include/linux/slab.h **** 
 168:./include/linux/slab.h **** /*
 169:./include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:./include/linux/slab.h ****  * cautiously. Valid use cases:
 171:./include/linux/slab.h ****  *
 172:./include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:./include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:./include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:./include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:./include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:./include/linux/slab.h ****  */
 178:./include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:./include/linux/slab.h **** 
 180:./include/linux/slab.h **** /* Fault injection mark */
 181:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:./include/linux/slab.h **** #else
 184:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:./include/linux/slab.h **** #endif
 186:./include/linux/slab.h **** /**
 187:./include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:./include/linux/slab.h ****  *
 189:./include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:./include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:./include/linux/slab.h ****  */
 192:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:./include/linux/slab.h **** #else
 195:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:./include/linux/slab.h **** #endif
 197:./include/linux/slab.h **** 
 198:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:./include/linux/slab.h **** #else
 201:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:./include/linux/slab.h **** #endif
 203:./include/linux/slab.h **** 
 204:./include/linux/slab.h **** /*
 205:./include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:./include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:./include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:./include/linux/slab.h ****  */
 209:./include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:./include/linux/slab.h **** 
 211:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
 212:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
 213:./include/linux/slab.h **** #else
ARM GAS  /tmp/ccZILEbd.s 			page 26


 214:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:./include/linux/slab.h **** #endif
 216:./include/linux/slab.h **** 
 217:./include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
 218:./include/linux/slab.h **** /**
 219:./include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:./include/linux/slab.h ****  *
 221:./include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:./include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:./include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:./include/linux/slab.h ****  */
 225:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:./include/linux/slab.h **** #else
 228:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:./include/linux/slab.h **** #endif
 230:./include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:./include/linux/slab.h **** 
 232:./include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:./include/linux/slab.h **** #else
 236:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:./include/linux/slab.h **** #endif
 238:./include/linux/slab.h **** 
 239:./include/linux/slab.h **** /*
 240:./include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:./include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:./include/linux/slab.h ****  */
 243:./include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:./include/linux/slab.h **** 
 245:./include/linux/slab.h **** /*
 246:./include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:./include/linux/slab.h ****  *
 248:./include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:./include/linux/slab.h ****  *
 250:./include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:./include/linux/slab.h ****  * Both make kfree a no-op.
 252:./include/linux/slab.h ****  */
 253:./include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:./include/linux/slab.h **** 
 255:./include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:./include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:./include/linux/slab.h **** 
 258:./include/linux/slab.h **** 
 259:./include/linux/slab.h **** 
 260:./include/linux/slab.h **** 
 261:./include/linux/slab.h **** 
 262:./include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:./include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:./include/linux/slab.h **** 
 265:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:./include/linux/slab.h **** ({						\
 267:./include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:./include/linux/slab.h **** })
 269:./include/linux/slab.h **** 
 270:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
ARM GAS  /tmp/ccZILEbd.s 			page 27


 271:./include/linux/slab.h **** #else
 272:./include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:./include/linux/slab.h **** 
 274:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
 275:./include/linux/slab.h **** 
 276:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:./include/linux/slab.h **** 
 278:./include/linux/slab.h **** 
 279:./include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:./include/linux/slab.h **** 
 281:./include/linux/slab.h **** /*
 282:./include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:./include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:./include/linux/slab.h **** 	* given order would contain.
 285:./include/linux/slab.h **** 	*/				
 286:./include/linux/slab.h **** struct kmem_cache_order_objects {
 287:./include/linux/slab.h **** 	unsigned int x;
 288:./include/linux/slab.h **** };
 289:./include/linux/slab.h **** 
 290:./include/linux/slab.h **** struct kmem_cache_node {
 291:./include/linux/slab.h **** 	spinlock_t list_lock;
 292:./include/linux/slab.h **** 	unsigned long nr_partial;
 293:./include/linux/slab.h **** 	struct list_head partial;
 294:./include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:./include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:./include/linux/slab.h **** 	atomic_long_t total_objects;
 297:./include/linux/slab.h **** 	struct list_head full;
 298:./include/linux/slab.h **** #endif
 299:./include/linux/slab.h **** };
 300:./include/linux/slab.h **** 
 301:./include/linux/slab.h **** struct kmem_cache {
 302:./include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:./include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:./include/linux/slab.h **** 	#endif
 305:./include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:./include/linux/slab.h **** 		slab_flags_t flags;
 307:./include/linux/slab.h **** 		unsigned long min_partial;
 308:./include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:./include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:./include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:./include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:./include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:./include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:./include/linux/slab.h **** 		unsigned int cpu_partial;
 315:./include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:./include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:./include/linux/slab.h **** 	#endif
 318:./include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:./include/linux/slab.h **** 	
 320:./include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:./include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:./include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:./include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:./include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:./include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
 326:./include/linux/slab.h **** 		unsigned int align;		/* Alignment */
 327:./include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
ARM GAS  /tmp/ccZILEbd.s 			page 28


 328:./include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:./include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:./include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:./include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
 332:./include/linux/slab.h **** 	#endif
 333:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:./include/linux/slab.h **** 		unsigned long random;
 335:./include/linux/slab.h **** 	#endif
 336:./include/linux/slab.h **** 	
 337:./include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:./include/linux/slab.h **** 		/*
 339:./include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:./include/linux/slab.h **** 			*/
 341:./include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:./include/linux/slab.h **** 	#endif
 343:./include/linux/slab.h **** 	
 344:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:./include/linux/slab.h **** 		unsigned int *random_seq;
 346:./include/linux/slab.h **** 	#endif
 347:./include/linux/slab.h **** 	
 348:./include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:./include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:./include/linux/slab.h **** 	#endif
 351:./include/linux/slab.h **** 	
 352:./include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:./include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:./include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:./include/linux/slab.h **** 	#endif
 356:./include/linux/slab.h **** 	
 357:./include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:./include/linux/slab.h **** 	};
 359:./include/linux/slab.h **** 					
 360:./include/linux/slab.h **** 
 361:./include/linux/slab.h **** 
 362:./include/linux/slab.h **** 
 363:./include/linux/slab.h **** 
 364:./include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:./include/linux/slab.h **** 
 366:./include/linux/slab.h **** 
 367:./include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:./include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:./include/linux/slab.h **** 
 370:./include/linux/slab.h **** 
 371:./include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:./include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:./include/linux/slab.h **** }
 374:./include/linux/slab.h **** 
 375:./include/linux/slab.h **** static void inline vfree(void *addr){
 376:./include/linux/slab.h **** 	__sfree__(addr);
 377:./include/linux/slab.h **** }
 378:./include/linux/slab.h **** 
 379:./include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
 509              		.loc 4 379 21 view .LVU112
 510              	.LBB230:
 380:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 511              		.loc 4 380 2 view .LVU113
 512              		.loc 4 380 9 is_stmt 0 view .LVU114
ARM GAS  /tmp/ccZILEbd.s 			page 29


 513 000e 4FF44C61 		mov	r1, #3264
 514              	.LVL40:
 515              		.loc 4 380 9 view .LVU115
 516 0012 40F21C40 		movw	r0, #1052
 517              	.LVL41:
 518              		.loc 4 380 9 view .LVU116
 519 0016 FFF7FEFF 		bl	__smalloc__
 520              	.LVL42:
 521              		.loc 4 380 9 view .LVU117
 522              	.LBE230:
 523              	.LBE229:
  68:./fs/pipefs/pipefs.c ****         if(!p_inode->buf)
 524              		.loc 1 68 22 discriminator 1 view .LVU118
 525 001a A063     		str	r0, [r4, #56]
  69:./fs/pipefs/pipefs.c ****            return -1;
 526              		.loc 1 69 9 is_stmt 1 view .LVU119
  69:./fs/pipefs/pipefs.c ****            return -1;
 527              		.loc 1 69 11 is_stmt 0 view .LVU120
 528 001c 08B1     		cbz	r0, .L39
  72:./fs/pipefs/pipefs.c **** }
 529              		.loc 1 72 12 view .LVU121
 530 001e 0020     		movs	r0, #0
 531 0020 F4E7     		b	.L36
 532              	.L39:
  70:./fs/pipefs/pipefs.c ****     }
 533              		.loc 1 70 19 view .LVU122
 534 0022 4FF0FF30 		mov	r0, #-1
 535 0026 F1E7     		b	.L36
 536              		.cfi_endproc
 537              	.LFE1037:
 539              		.section	.text.pipefs_create_empty_inode,"ax",%progbits
 540              		.align	1
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 545              	pipefs_create_empty_inode:
 546              	.LVL43:
 547              	.LFB1041:
 115:./fs/pipefs/pipefs.c ****     if(fop == NULL) return NULL;
 548              		.loc 1 115 1 is_stmt 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 115:./fs/pipefs/pipefs.c ****     if(fop == NULL) return NULL;
 552              		.loc 1 115 1 is_stmt 0 view .LVU124
 553 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 554              	.LCFI8:
 555              		.cfi_def_cfa_offset 24
 556              		.cfi_offset 3, -24
 557              		.cfi_offset 4, -20
 558              		.cfi_offset 5, -16
 559              		.cfi_offset 6, -12
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 116:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
 562              		.loc 1 116 5 is_stmt 1 view .LVU125
 116:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
ARM GAS  /tmp/ccZILEbd.s 			page 30


 563              		.loc 1 116 7 is_stmt 0 view .LVU126
 564 0002 0F46     		mov	r7, r1
 565 0004 71B3     		cbz	r1, .L44
 566 0006 0546     		mov	r5, r0
 567 0008 1646     		mov	r6, r2
 117:./fs/pipefs/pipefs.c ****     if(pipe_inode == NULL) return NULL;
 568              		.loc 1 117 5 is_stmt 1 view .LVU127
 569              	.LVL44:
 570              	.LBB231:
 571              	.LBI231:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 572              		.loc 4 379 21 view .LVU128
 573              	.LBB232:
 574              		.loc 4 380 2 view .LVU129
 575              		.loc 4 380 9 is_stmt 0 view .LVU130
 576 000a 4FF44C61 		mov	r1, #3264
 577              	.LVL45:
 578              		.loc 4 380 9 view .LVU131
 579 000e 3C20     		movs	r0, #60
 580              	.LVL46:
 581              		.loc 4 380 9 view .LVU132
 582 0010 FFF7FEFF 		bl	__smalloc__
 583              	.LVL47:
 584              		.loc 4 380 9 view .LVU133
 585              	.LBE232:
 586              	.LBE231:
 118:./fs/pipefs/pipefs.c ****     pipe_inode->magic = MAGIC;
 587              		.loc 1 118 5 is_stmt 1 view .LVU134
 118:./fs/pipefs/pipefs.c ****     pipe_inode->magic = MAGIC;
 588              		.loc 1 118 7 is_stmt 0 view .LVU135
 589 0014 0446     		mov	r4, r0
 590 0016 18B3     		cbz	r0, .L42
 119:./fs/pipefs/pipefs.c ****     pipe_inode->major = major;
 591              		.loc 1 119 5 is_stmt 1 view .LVU136
 119:./fs/pipefs/pipefs.c ****     pipe_inode->major = major;
 592              		.loc 1 119 23 is_stmt 0 view .LVU137
 593 0018 134B     		ldr	r3, .L46
 594 001a 0360     		str	r3, [r0]
 120:./fs/pipefs/pipefs.c ****     pipe_inode->i_fop = fop;
 595              		.loc 1 120 5 is_stmt 1 view .LVU138
 120:./fs/pipefs/pipefs.c ****     pipe_inode->i_fop = fop;
 596              		.loc 1 120 23 is_stmt 0 view .LVU139
 597 001c 8660     		str	r6, [r0, #8]
 121:./fs/pipefs/pipefs.c ****     pipe_inode->sb    = sb;
 598              		.loc 1 121 5 is_stmt 1 view .LVU140
 121:./fs/pipefs/pipefs.c ****     pipe_inode->sb    = sb;
 599              		.loc 1 121 23 is_stmt 0 view .LVU141
 600 001e 0761     		str	r7, [r0, #16]
 122:./fs/pipefs/pipefs.c ****     pipe_inode->i_mode = S_IFREG | 0755;
 601              		.loc 1 122 5 is_stmt 1 view .LVU142
 122:./fs/pipefs/pipefs.c ****     pipe_inode->i_mode = S_IFREG | 0755;
 602              		.loc 1 122 23 is_stmt 0 view .LVU143
 603 0020 4563     		str	r5, [r0, #52]
 123:./fs/pipefs/pipefs.c ****     atomic_set(&pipe_inode->dentry_count,0);
 604              		.loc 1 123 5 is_stmt 1 view .LVU144
 123:./fs/pipefs/pipefs.c ****     atomic_set(&pipe_inode->dentry_count,0);
 605              		.loc 1 123 24 is_stmt 0 view .LVU145
ARM GAS  /tmp/ccZILEbd.s 			page 31


 606 0022 48F2ED13 		movw	r3, #33261
 607 0026 4360     		str	r3, [r0, #4]
 124:./fs/pipefs/pipefs.c ****     spin_lock_init(&pipe_inode->lock);
 608              		.loc 1 124 5 is_stmt 1 view .LVU146
 609              	.LVL48:
 610              	.LBB233:
 611              	.LBI233:
 612              		.file 5 "./include/linux/atomic/atomic-instrumented.h"
   1:./include/linux/atomic/atomic-instrumented.h **** // SPDX-License-Identifier: GPL-2.0
   2:./include/linux/atomic/atomic-instrumented.h **** 
   3:./include/linux/atomic/atomic-instrumented.h **** // Generated by scripts/atomic/gen-atomic-instrumented.sh 
   4:./include/linux/atomic/atomic-instrumented.h **** // DO NOT MODIFY THIS FILE DIRECTLY
   5:./include/linux/atomic/atomic-instrumented.h **** 
   6:./include/linux/atomic/atomic-instrumented.h **** /*
   7:./include/linux/atomic/atomic-instrumented.h ****  * This file provoides atomic operations with explicit instrumentation (e.g.
   8:./include/linux/atomic/atomic-instrumented.h ****  * KASAN, KCSAN), which should be used unless it is necessary to avoid
   9:./include/linux/atomic/atomic-instrumented.h ****  * instrumentation. Where it is necessary to aovid instrumenation, the
  10:./include/linux/atomic/atomic-instrumented.h ****  * raw_atomic*() operations should be used.
  11:./include/linux/atomic/atomic-instrumented.h ****  */
  12:./include/linux/atomic/atomic-instrumented.h **** #ifndef _LINUX_ATOMIC_INSTRUMENTED_H
  13:./include/linux/atomic/atomic-instrumented.h **** #define _LINUX_ATOMIC_INSTRUMENTED_H
  14:./include/linux/atomic/atomic-instrumented.h **** 
  15:./include/linux/atomic/atomic-instrumented.h **** #include <linux/build_bug.h>
  16:./include/linux/atomic/atomic-instrumented.h **** #include <linux/compiler.h>
  17:./include/linux/atomic/atomic-instrumented.h **** #include <linux/instrumented.h>
  18:./include/linux/atomic/atomic-instrumented.h **** 
  19:./include/linux/atomic/atomic-instrumented.h **** /**
  20:./include/linux/atomic/atomic-instrumented.h ****  * atomic_read() - atomic load with relaxed ordering
  21:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  22:./include/linux/atomic/atomic-instrumented.h ****  *
  23:./include/linux/atomic/atomic-instrumented.h ****  * Atomically loads the value of @v with relaxed ordering.
  24:./include/linux/atomic/atomic-instrumented.h ****  *
  25:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_read() there.
  26:./include/linux/atomic/atomic-instrumented.h ****  *
  27:./include/linux/atomic/atomic-instrumented.h ****  * Return: The value loaded from @v.
  28:./include/linux/atomic/atomic-instrumented.h ****  */
  29:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
  30:./include/linux/atomic/atomic-instrumented.h **** atomic_read(const atomic_t *v)
  31:./include/linux/atomic/atomic-instrumented.h **** {
  32:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read(v, sizeof(*v));
  33:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read(v);
  34:./include/linux/atomic/atomic-instrumented.h **** }
  35:./include/linux/atomic/atomic-instrumented.h **** 
  36:./include/linux/atomic/atomic-instrumented.h **** /**
  37:./include/linux/atomic/atomic-instrumented.h ****  * atomic_read_acquire() - atomic load with acquire ordering
  38:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  39:./include/linux/atomic/atomic-instrumented.h ****  *
  40:./include/linux/atomic/atomic-instrumented.h ****  * Atomically loads the value of @v with acquire ordering.
  41:./include/linux/atomic/atomic-instrumented.h ****  *
  42:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_read_acquire() there.
  43:./include/linux/atomic/atomic-instrumented.h ****  *
  44:./include/linux/atomic/atomic-instrumented.h ****  * Return: The value loaded from @v.
  45:./include/linux/atomic/atomic-instrumented.h ****  */
  46:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
  47:./include/linux/atomic/atomic-instrumented.h **** atomic_read_acquire(const atomic_t *v)
  48:./include/linux/atomic/atomic-instrumented.h **** {
  49:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read(v, sizeof(*v));
ARM GAS  /tmp/ccZILEbd.s 			page 32


  50:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read_acquire(v);
  51:./include/linux/atomic/atomic-instrumented.h **** }
  52:./include/linux/atomic/atomic-instrumented.h **** 
  53:./include/linux/atomic/atomic-instrumented.h **** /**
  54:./include/linux/atomic/atomic-instrumented.h ****  * atomic_set() - atomic set with relaxed ordering
  55:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  56:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to assign
  57:./include/linux/atomic/atomic-instrumented.h ****  *
  58:./include/linux/atomic/atomic-instrumented.h ****  * Atomically sets @v to @i with relaxed ordering.
  59:./include/linux/atomic/atomic-instrumented.h ****  *
  60:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_set() there.
  61:./include/linux/atomic/atomic-instrumented.h ****  *
  62:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
  63:./include/linux/atomic/atomic-instrumented.h ****  */
  64:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
  65:./include/linux/atomic/atomic-instrumented.h **** atomic_set(atomic_t *v, int i)
 613              		.loc 5 65 1 view .LVU147
  66:./include/linux/atomic/atomic-instrumented.h **** {
  67:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_write(v, sizeof(*v));
 614              		.loc 5 67 2 view .LVU148
  68:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_set(v, i);
 615              		.loc 5 68 2 view .LVU149
 616              	.LBB234:
 617              	.LBI234:
 618              		.file 6 "./include/linux/atomic/atomic-arch-fallback.h"
   1:./include/linux/atomic/atomic-arch-fallback.h **** // SPDX-License-Identifier: GPL-2.0
   2:./include/linux/atomic/atomic-arch-fallback.h **** 
   3:./include/linux/atomic/atomic-arch-fallback.h **** // Generated by scripts/atomic/gen-atomic-fallback.sh
   4:./include/linux/atomic/atomic-arch-fallback.h **** // DO NOT MODIFY THIS FILE DIRECTLY
   5:./include/linux/atomic/atomic-arch-fallback.h **** 
   6:./include/linux/atomic/atomic-arch-fallback.h **** #ifndef _LINUX_ATOMIC_FALLBACK_H
   7:./include/linux/atomic/atomic-arch-fallback.h **** #define _LINUX_ATOMIC_FALLBACK_H
   8:./include/linux/atomic/atomic-arch-fallback.h **** 
   9:./include/linux/atomic/atomic-arch-fallback.h **** #include <linux/compiler.h>
  10:./include/linux/atomic/atomic-arch-fallback.h **** 
  11:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg)
  12:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg arch_xchg
  13:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  14:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg(...) \
  15:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_xchg, __VA_ARGS__)
  16:./include/linux/atomic/atomic-arch-fallback.h **** #else
  17:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_not_implemented(void);
  18:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg(...) raw_xchg_not_implemented()
  19:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  20:./include/linux/atomic/atomic-arch-fallback.h **** 
  21:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_acquire)
  22:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire arch_xchg_acquire
  23:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  24:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire(...) \
  25:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_xchg, __VA_ARGS__)
  26:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  27:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire arch_xchg
  28:./include/linux/atomic/atomic-arch-fallback.h **** #else
  29:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_acquire_not_implemented(void);
  30:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire(...) raw_xchg_acquire_not_implemented()
  31:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  32:./include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccZILEbd.s 			page 33


  33:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_release)
  34:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release arch_xchg_release
  35:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  36:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release(...) \
  37:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_xchg, __VA_ARGS__)
  38:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  39:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release arch_xchg
  40:./include/linux/atomic/atomic-arch-fallback.h **** #else
  41:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_release_not_implemented(void);
  42:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release(...) raw_xchg_release_not_implemented()
  43:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  44:./include/linux/atomic/atomic-arch-fallback.h **** 
  45:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_relaxed)
  46:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed arch_xchg_relaxed
  47:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  48:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed arch_xchg
  49:./include/linux/atomic/atomic-arch-fallback.h **** #else
  50:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_relaxed_not_implemented(void);
  51:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed(...) raw_xchg_relaxed_not_implemented()
  52:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  53:./include/linux/atomic/atomic-arch-fallback.h **** 
  54:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg)
  55:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg arch_cmpxchg
  56:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  57:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg(...) \
  58:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg, __VA_ARGS__)
  59:./include/linux/atomic/atomic-arch-fallback.h **** #else
  60:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_not_implemented(void);
  61:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg(...) raw_cmpxchg_not_implemented()
  62:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  63:./include/linux/atomic/atomic-arch-fallback.h **** 
  64:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_acquire)
  65:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire arch_cmpxchg_acquire
  66:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  67:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire(...) \
  68:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg, __VA_ARGS__)
  69:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  70:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire arch_cmpxchg
  71:./include/linux/atomic/atomic-arch-fallback.h **** #else
  72:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_acquire_not_implemented(void);
  73:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire(...) raw_cmpxchg_acquire_not_implemented()
  74:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  75:./include/linux/atomic/atomic-arch-fallback.h **** 
  76:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_release)
  77:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release arch_cmpxchg_release
  78:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  79:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release(...) \
  80:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg, __VA_ARGS__)
  81:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  82:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release arch_cmpxchg
  83:./include/linux/atomic/atomic-arch-fallback.h **** #else
  84:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_release_not_implemented(void);
  85:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release(...) raw_cmpxchg_release_not_implemented()
  86:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  87:./include/linux/atomic/atomic-arch-fallback.h **** 
  88:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_relaxed)
  89:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed arch_cmpxchg_relaxed
ARM GAS  /tmp/ccZILEbd.s 			page 34


  90:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  91:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed arch_cmpxchg
  92:./include/linux/atomic/atomic-arch-fallback.h **** #else
  93:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_relaxed_not_implemented(void);
  94:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed(...) raw_cmpxchg_relaxed_not_implemented()
  95:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  96:./include/linux/atomic/atomic-arch-fallback.h **** 
  97:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64)
  98:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64 arch_cmpxchg64
  99:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 100:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64(...) \
 101:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg64, __VA_ARGS__)
 102:./include/linux/atomic/atomic-arch-fallback.h **** #else
 103:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_not_implemented(void);
 104:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64(...) raw_cmpxchg64_not_implemented()
 105:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 106:./include/linux/atomic/atomic-arch-fallback.h **** 
 107:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_acquire)
 108:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire arch_cmpxchg64_acquire
 109:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 110:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire(...) \
 111:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg64, __VA_ARGS__)
 112:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 113:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire arch_cmpxchg64
 114:./include/linux/atomic/atomic-arch-fallback.h **** #else
 115:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_acquire_not_implemented(void);
 116:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire(...) raw_cmpxchg64_acquire_not_implemented()
 117:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 118:./include/linux/atomic/atomic-arch-fallback.h **** 
 119:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_release)
 120:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release arch_cmpxchg64_release
 121:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 122:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release(...) \
 123:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg64, __VA_ARGS__)
 124:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 125:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release arch_cmpxchg64
 126:./include/linux/atomic/atomic-arch-fallback.h **** #else
 127:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_release_not_implemented(void);
 128:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release(...) raw_cmpxchg64_release_not_implemented()
 129:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 130:./include/linux/atomic/atomic-arch-fallback.h **** 
 131:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_relaxed)
 132:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed arch_cmpxchg64_relaxed
 133:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 134:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed arch_cmpxchg64
 135:./include/linux/atomic/atomic-arch-fallback.h **** #else
 136:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_relaxed_not_implemented(void);
 137:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed(...) raw_cmpxchg64_relaxed_not_implemented()
 138:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 139:./include/linux/atomic/atomic-arch-fallback.h **** 
 140:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128)
 141:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128 arch_cmpxchg128
 142:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 143:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128(...) \
 144:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg128, __VA_ARGS__)
 145:./include/linux/atomic/atomic-arch-fallback.h **** #else
 146:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_not_implemented(void);
ARM GAS  /tmp/ccZILEbd.s 			page 35


 147:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128(...) raw_cmpxchg128_not_implemented()
 148:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 149:./include/linux/atomic/atomic-arch-fallback.h **** 
 150:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_acquire)
 151:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire arch_cmpxchg128_acquire
 152:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 153:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire(...) \
 154:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg128, __VA_ARGS__)
 155:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 156:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire arch_cmpxchg128
 157:./include/linux/atomic/atomic-arch-fallback.h **** #else
 158:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_acquire_not_implemented(void);
 159:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire(...) raw_cmpxchg128_acquire_not_implemented()
 160:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 161:./include/linux/atomic/atomic-arch-fallback.h **** 
 162:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_release)
 163:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release arch_cmpxchg128_release
 164:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 165:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release(...) \
 166:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg128, __VA_ARGS__)
 167:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 168:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release arch_cmpxchg128
 169:./include/linux/atomic/atomic-arch-fallback.h **** #else
 170:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_release_not_implemented(void);
 171:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release(...) raw_cmpxchg128_release_not_implemented()
 172:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 173:./include/linux/atomic/atomic-arch-fallback.h **** 
 174:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_relaxed)
 175:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed arch_cmpxchg128_relaxed
 176:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 177:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed arch_cmpxchg128
 178:./include/linux/atomic/atomic-arch-fallback.h **** #else
 179:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_relaxed_not_implemented(void);
 180:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed(...) raw_cmpxchg128_relaxed_not_implemented()
 181:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 182:./include/linux/atomic/atomic-arch-fallback.h **** 
 183:./include/linux/atomic/atomic-arch-fallback.h **** 
 184:./include/linux/atomic/atomic-arch-fallback.h **** 
 185:./include/linux/atomic/atomic-arch-fallback.h **** 
 186:./include/linux/atomic/atomic-arch-fallback.h **** 
 187:./include/linux/atomic/atomic-arch-fallback.h **** 
 188:./include/linux/atomic/atomic-arch-fallback.h **** 
 189:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg)
 190:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg arch_try_cmpxchg
 191:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 192:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg(...) \
 193:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg, __VA_ARGS__)
 194:./include/linux/atomic/atomic-arch-fallback.h **** #else
 195:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg(_ptr, _oldp, _new) \
 196:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 197:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 198:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg((_ptr), ___o, (_new)); \
 199:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 200:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 201:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 202:./include/linux/atomic/atomic-arch-fallback.h **** })
 203:./include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccZILEbd.s 			page 36


 204:./include/linux/atomic/atomic-arch-fallback.h **** 
 205:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_acquire)
 206:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire arch_try_cmpxchg_acquire
 207:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 208:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire(...) \
 209:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg, __VA_ARGS__)
 210:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 211:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire arch_try_cmpxchg
 212:./include/linux/atomic/atomic-arch-fallback.h **** #else
 213:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire(_ptr, _oldp, _new) \
 214:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 215:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 216:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_acquire((_ptr), ___o, (_new)); \
 217:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 218:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 219:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 220:./include/linux/atomic/atomic-arch-fallback.h **** })
 221:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 222:./include/linux/atomic/atomic-arch-fallback.h **** 
 223:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_release)
 224:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release arch_try_cmpxchg_release
 225:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 226:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release(...) \
 227:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg, __VA_ARGS__)
 228:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 229:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release arch_try_cmpxchg
 230:./include/linux/atomic/atomic-arch-fallback.h **** #else
 231:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release(_ptr, _oldp, _new) \
 232:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 233:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 234:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_release((_ptr), ___o, (_new)); \
 235:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 236:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 237:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 238:./include/linux/atomic/atomic-arch-fallback.h **** })
 239:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 240:./include/linux/atomic/atomic-arch-fallback.h **** 
 241:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_relaxed)
 242:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed arch_try_cmpxchg_relaxed
 243:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 244:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed arch_try_cmpxchg
 245:./include/linux/atomic/atomic-arch-fallback.h **** #else
 246:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed(_ptr, _oldp, _new) \
 247:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 248:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 249:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_relaxed((_ptr), ___o, (_new)); \
 250:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 251:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 252:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 253:./include/linux/atomic/atomic-arch-fallback.h **** })
 254:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 255:./include/linux/atomic/atomic-arch-fallback.h **** 
 256:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64)
 257:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64 arch_try_cmpxchg64
 258:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 259:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64(...) \
 260:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg64, __VA_ARGS__)
ARM GAS  /tmp/ccZILEbd.s 			page 37


 261:./include/linux/atomic/atomic-arch-fallback.h **** #else
 262:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64(_ptr, _oldp, _new) \
 263:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 264:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 265:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64((_ptr), ___o, (_new)); \
 266:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 267:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 268:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 269:./include/linux/atomic/atomic-arch-fallback.h **** })
 270:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 271:./include/linux/atomic/atomic-arch-fallback.h **** 
 272:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_acquire)
 273:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire arch_try_cmpxchg64_acquire
 274:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 275:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire(...) \
 276:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg64, __VA_ARGS__)
 277:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 278:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire arch_try_cmpxchg64
 279:./include/linux/atomic/atomic-arch-fallback.h **** #else
 280:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire(_ptr, _oldp, _new) \
 281:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 282:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 283:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_acquire((_ptr), ___o, (_new)); \
 284:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 285:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 286:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 287:./include/linux/atomic/atomic-arch-fallback.h **** })
 288:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 289:./include/linux/atomic/atomic-arch-fallback.h **** 
 290:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_release)
 291:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release arch_try_cmpxchg64_release
 292:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 293:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release(...) \
 294:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg64, __VA_ARGS__)
 295:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 296:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release arch_try_cmpxchg64
 297:./include/linux/atomic/atomic-arch-fallback.h **** #else
 298:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release(_ptr, _oldp, _new) \
 299:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 300:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 301:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_release((_ptr), ___o, (_new)); \
 302:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 303:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 304:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 305:./include/linux/atomic/atomic-arch-fallback.h **** })
 306:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 307:./include/linux/atomic/atomic-arch-fallback.h **** 
 308:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_relaxed)
 309:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed arch_try_cmpxchg64_relaxed
 310:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 311:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed arch_try_cmpxchg64
 312:./include/linux/atomic/atomic-arch-fallback.h **** #else
 313:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed(_ptr, _oldp, _new) \
 314:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 315:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 316:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_relaxed((_ptr), ___o, (_new)); \
 317:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
ARM GAS  /tmp/ccZILEbd.s 			page 38


 318:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 319:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 320:./include/linux/atomic/atomic-arch-fallback.h **** })
 321:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 322:./include/linux/atomic/atomic-arch-fallback.h **** 
 323:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128)
 324:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128 arch_try_cmpxchg128
 325:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 326:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128(...) \
 327:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg128, __VA_ARGS__)
 328:./include/linux/atomic/atomic-arch-fallback.h **** #else
 329:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128(_ptr, _oldp, _new) \
 330:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 331:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 332:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128((_ptr), ___o, (_new)); \
 333:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 334:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 335:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 336:./include/linux/atomic/atomic-arch-fallback.h **** })
 337:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 338:./include/linux/atomic/atomic-arch-fallback.h **** 
 339:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_acquire)
 340:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire arch_try_cmpxchg128_acquire
 341:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 342:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire(...) \
 343:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg128, __VA_ARGS__)
 344:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 345:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire arch_try_cmpxchg128
 346:./include/linux/atomic/atomic-arch-fallback.h **** #else
 347:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire(_ptr, _oldp, _new) \
 348:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 349:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 350:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_acquire((_ptr), ___o, (_new)); \
 351:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 352:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 353:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 354:./include/linux/atomic/atomic-arch-fallback.h **** })
 355:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 356:./include/linux/atomic/atomic-arch-fallback.h **** 
 357:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_release)
 358:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release arch_try_cmpxchg128_release
 359:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 360:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release(...) \
 361:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg128, __VA_ARGS__)
 362:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 363:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release arch_try_cmpxchg128
 364:./include/linux/atomic/atomic-arch-fallback.h **** #else
 365:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release(_ptr, _oldp, _new) \
 366:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 367:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 368:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_release((_ptr), ___o, (_new)); \
 369:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 370:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 371:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 372:./include/linux/atomic/atomic-arch-fallback.h **** })
 373:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 374:./include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccZILEbd.s 			page 39


 375:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_relaxed)
 376:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed arch_try_cmpxchg128_relaxed
 377:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 378:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed arch_try_cmpxchg128
 379:./include/linux/atomic/atomic-arch-fallback.h **** #else
 380:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed(_ptr, _oldp, _new) \
 381:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 382:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 383:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_relaxed((_ptr), ___o, (_new)); \
 384:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 385:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 386:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 387:./include/linux/atomic/atomic-arch-fallback.h **** })
 388:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 389:./include/linux/atomic/atomic-arch-fallback.h **** 
 390:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_local arch_cmpxchg_local
 391:./include/linux/atomic/atomic-arch-fallback.h **** 
 392:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg_local
 393:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_local arch_try_cmpxchg_local
 394:./include/linux/atomic/atomic-arch-fallback.h **** #else
 395:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_local(_ptr, _oldp, _new) \
 396:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 397:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 398:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_local((_ptr), ___o, (_new)); \
 399:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 400:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 401:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 402:./include/linux/atomic/atomic-arch-fallback.h **** })
 403:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 404:./include/linux/atomic/atomic-arch-fallback.h **** 
 405:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_local arch_cmpxchg64_local
 406:./include/linux/atomic/atomic-arch-fallback.h **** 
 407:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg64_local
 408:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_local arch_try_cmpxchg64_local
 409:./include/linux/atomic/atomic-arch-fallback.h **** #else
 410:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_local(_ptr, _oldp, _new) \
 411:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 412:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 413:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_local((_ptr), ___o, (_new)); \
 414:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 415:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 416:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 417:./include/linux/atomic/atomic-arch-fallback.h **** })
 418:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 419:./include/linux/atomic/atomic-arch-fallback.h **** 
 420:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_local arch_cmpxchg128_local
 421:./include/linux/atomic/atomic-arch-fallback.h **** 
 422:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg128_local
 423:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_local arch_try_cmpxchg128_local
 424:./include/linux/atomic/atomic-arch-fallback.h **** #else
 425:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_local(_ptr, _oldp, _new) \
 426:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 427:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 428:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_local((_ptr), ___o, (_new)); \
 429:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 430:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 431:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
ARM GAS  /tmp/ccZILEbd.s 			page 40


 432:./include/linux/atomic/atomic-arch-fallback.h **** })
 433:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 434:./include/linux/atomic/atomic-arch-fallback.h **** 
 435:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_cmpxchg arch_sync_cmpxchg
 436:./include/linux/atomic/atomic-arch-fallback.h **** 
 437:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_sync_try_cmpxchg
 438:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_try_cmpxchg arch_sync_try_cmpxchg
 439:./include/linux/atomic/atomic-arch-fallback.h **** #else
 440:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_try_cmpxchg(_ptr, _oldp, _new) \
 441:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 442:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 443:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_sync_cmpxchg((_ptr), ___o, (_new)); \
 444:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 445:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 446:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 447:./include/linux/atomic/atomic-arch-fallback.h **** })
 448:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 449:./include/linux/atomic/atomic-arch-fallback.h **** 
 450:./include/linux/atomic/atomic-arch-fallback.h **** /**
 451:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_read() - atomic load with relaxed ordering
 452:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 453:./include/linux/atomic/atomic-arch-fallback.h ****  *
 454:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically loads the value of @v with relaxed ordering.
 455:./include/linux/atomic/atomic-arch-fallback.h ****  *
 456:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_read() elsewhere.
 457:./include/linux/atomic/atomic-arch-fallback.h ****  *
 458:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The value loaded from @v.
 459:./include/linux/atomic/atomic-arch-fallback.h ****  */
 460:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 461:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_read(const atomic_t *v)
 462:./include/linux/atomic/atomic-arch-fallback.h **** {
 463:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_read(v);
 464:./include/linux/atomic/atomic-arch-fallback.h **** }
 465:./include/linux/atomic/atomic-arch-fallback.h **** 
 466:./include/linux/atomic/atomic-arch-fallback.h **** /**
 467:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_read_acquire() - atomic load with acquire ordering
 468:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 469:./include/linux/atomic/atomic-arch-fallback.h ****  *
 470:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically loads the value of @v with acquire ordering.
 471:./include/linux/atomic/atomic-arch-fallback.h ****  *
 472:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_read_acquire() elsewhere.
 473:./include/linux/atomic/atomic-arch-fallback.h ****  *
 474:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The value loaded from @v.
 475:./include/linux/atomic/atomic-arch-fallback.h ****  */
 476:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 477:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_read_acquire(const atomic_t *v)
 478:./include/linux/atomic/atomic-arch-fallback.h **** {
 479:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_read_acquire)
 480:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_read_acquire(v);
 481:./include/linux/atomic/atomic-arch-fallback.h **** #else
 482:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 483:./include/linux/atomic/atomic-arch-fallback.h **** 
 484:./include/linux/atomic/atomic-arch-fallback.h **** 	if (__native_word(atomic_t)) {
 485:./include/linux/atomic/atomic-arch-fallback.h **** 		ret = smp_load_acquire(&(v)->counter);
 486:./include/linux/atomic/atomic-arch-fallback.h **** 	} else {
 487:./include/linux/atomic/atomic-arch-fallback.h **** 		ret = raw_atomic_read(v);
 488:./include/linux/atomic/atomic-arch-fallback.h **** 		__atomic_acquire_fence();
ARM GAS  /tmp/ccZILEbd.s 			page 41


 489:./include/linux/atomic/atomic-arch-fallback.h **** 	}
 490:./include/linux/atomic/atomic-arch-fallback.h **** 
 491:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 492:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 493:./include/linux/atomic/atomic-arch-fallback.h **** }
 494:./include/linux/atomic/atomic-arch-fallback.h **** 
 495:./include/linux/atomic/atomic-arch-fallback.h **** /**
 496:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_set() - atomic set with relaxed ordering
 497:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 498:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to assign
 499:./include/linux/atomic/atomic-arch-fallback.h ****  *
 500:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically sets @v to @i with relaxed ordering.
 501:./include/linux/atomic/atomic-arch-fallback.h ****  *
 502:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_set() elsewhere.
 503:./include/linux/atomic/atomic-arch-fallback.h ****  *
 504:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 505:./include/linux/atomic/atomic-arch-fallback.h ****  */
 506:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 507:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_set(atomic_t *v, int i)
 619              		.loc 6 507 1 view .LVU150
 620              	.LBB235:
 508:./include/linux/atomic/atomic-arch-fallback.h **** {
 509:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_set(v, i);
 621              		.loc 6 509 2 view .LVU151
 622              		.loc 6 509 2 view .LVU152
 623              	.LBB236:
 624              		.loc 6 509 2 view .LVU153
 625              		.loc 6 509 2 view .LVU154
 626              	.LBE236:
 627              		.loc 6 509 2 discriminator 2 view .LVU155
 628              		.loc 6 509 2 discriminator 2 view .LVU156
 629              		.loc 6 509 2 discriminator 2 view .LVU157
 630 0028 0027     		movs	r7, #0
 631              	.LVL49:
 632              		.loc 6 509 2 is_stmt 0 discriminator 2 view .LVU158
 633 002a C760     		str	r7, [r0, #12]
 634              		.loc 6 509 2 is_stmt 1 discriminator 2 view .LVU159
 635              		.loc 6 509 2 discriminator 2 view .LVU160
 636              	.LVL50:
 637              		.loc 6 509 2 is_stmt 0 discriminator 2 view .LVU161
 638              	.LBE235:
 639              	.LBE234:
 640              	.LBE233:
 125:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->list_node);
 641              		.loc 1 125 5 is_stmt 1 view .LVU162
 642 002c 2430     		adds	r0, r0, #36
 643              	.LVL51:
 125:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->list_node);
 644              		.loc 1 125 5 is_stmt 0 view .LVU163
 645 002e FFF7FEFF 		bl	spin_lock_init
 646              	.LVL52:
 126:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->dentry_list_head);
 647              		.loc 1 126 5 is_stmt 1 view .LVU164
 648 0032 04F11406 		add	r6, r4, #20
 649              	.LVL53:
 650              	.LBB237:
 651              	.LBI237:
ARM GAS  /tmp/ccZILEbd.s 			page 42


 652              		.file 7 "./include/linux/list.h"
   1:./include/linux/list.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/list.h **** #ifndef _LINUX_LIST_H
   3:./include/linux/list.h **** #define _LINUX_LIST_H
   4:./include/linux/list.h **** 
   5:./include/linux/list.h **** #include <linux/container_of.h>
   6:./include/linux/list.h **** #include <linux/types.h>
   7:./include/linux/list.h **** #include <linux/stddef.h>
   8:./include/linux/list.h **** #include <linux/poison.h>
   9:./include/linux/list.h **** #include <linux/const.h>
  10:./include/linux/list.h **** 
  11:./include/linux/list.h **** #include <asm/barrier.h>
  12:./include/linux/list.h **** #include <linux/rwonce.h>
  13:./include/linux/list.h **** /*
  14:./include/linux/list.h ****  * Circular doubly linked list implementation.
  15:./include/linux/list.h ****  *
  16:./include/linux/list.h ****  * Some of the internal functions ("__xxx") are useful when
  17:./include/linux/list.h ****  * manipulating whole lists rather than single entries, as
  18:./include/linux/list.h ****  * sometimes we already know the next/prev entries and we can
  19:./include/linux/list.h ****  * generate better code by using them directly rather than
  20:./include/linux/list.h ****  * using the generic single-entry routines.
  21:./include/linux/list.h ****  */
  22:./include/linux/list.h **** 
  23:./include/linux/list.h **** #define LIST_HEAD_INIT(name) { &(name), &(name) }
  24:./include/linux/list.h **** 
  25:./include/linux/list.h **** #define LIST_HEAD(name) \
  26:./include/linux/list.h **** 	struct list_head name = LIST_HEAD_INIT(name)
  27:./include/linux/list.h **** 
  28:./include/linux/list.h **** /**
  29:./include/linux/list.h ****  * INIT_LIST_HEAD - Initialize a list_head structure
  30:./include/linux/list.h ****  * @list: list_head structure to be initialized.
  31:./include/linux/list.h ****  *
  32:./include/linux/list.h ****  * Initializes the list_head to point to itself.  If it is a list header,
  33:./include/linux/list.h ****  * the result is an empty list.
  34:./include/linux/list.h ****  */
  35:./include/linux/list.h **** static inline void INIT_LIST_HEAD(struct list_head *list)
 653              		.loc 7 35 20 view .LVU165
 654              	.LBB238:
  36:./include/linux/list.h **** {
  37:./include/linux/list.h **** 	WRITE_ONCE(list->next, list);
 655              		.loc 7 37 2 view .LVU166
 656              		.loc 7 37 2 view .LVU167
 657              	.LBB239:
 658              		.loc 7 37 2 view .LVU168
 659              		.loc 7 37 2 view .LVU169
 660              	.LBE239:
 661              		.loc 7 37 2 discriminator 2 view .LVU170
 662              		.loc 7 37 2 discriminator 2 view .LVU171
 663              		.loc 7 37 2 discriminator 2 view .LVU172
 664 0036 6661     		str	r6, [r4, #20]
 665              		.loc 7 37 2 discriminator 2 view .LVU173
 666              		.loc 7 37 2 discriminator 2 view .LVU174
  38:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 667              		.loc 7 38 2 view .LVU175
 668              		.loc 7 38 2 view .LVU176
 669              	.LBB240:
 670              		.loc 7 38 2 view .LVU177
ARM GAS  /tmp/ccZILEbd.s 			page 43


 671              		.loc 7 38 2 view .LVU178
 672              	.LBE240:
 673              		.loc 7 38 2 discriminator 2 view .LVU179
 674              		.loc 7 38 2 discriminator 2 view .LVU180
 675              		.loc 7 38 2 discriminator 2 view .LVU181
 676 0038 A661     		str	r6, [r4, #24]
 677              		.loc 7 38 2 discriminator 2 view .LVU182
 678              		.loc 7 38 2 discriminator 2 view .LVU183
 679              	.LVL54:
 680              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU184
 681              	.LBE238:
 682              	.LBE237:
 127:./fs/pipefs/pipefs.c ****     
 683              		.loc 1 127 5 is_stmt 1 view .LVU185
 684 003a 04F11C03 		add	r3, r4, #28
 685              	.LVL55:
 686              	.LBB241:
 687              	.LBI241:
  35:./include/linux/list.h **** {
 688              		.loc 7 35 20 view .LVU186
 689              	.LBB242:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 690              		.loc 7 37 2 view .LVU187
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 691              		.loc 7 37 2 view .LVU188
 692              	.LBB243:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 693              		.loc 7 37 2 view .LVU189
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 694              		.loc 7 37 2 view .LVU190
 695              	.LBE243:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 696              		.loc 7 37 2 discriminator 2 view .LVU191
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 697              		.loc 7 37 2 discriminator 2 view .LVU192
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 698              		.loc 7 37 2 discriminator 2 view .LVU193
 699 003e E361     		str	r3, [r4, #28]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 700              		.loc 7 37 2 discriminator 2 view .LVU194
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 701              		.loc 7 37 2 discriminator 2 view .LVU195
 702              		.loc 7 38 2 view .LVU196
 703              		.loc 7 38 2 view .LVU197
 704              	.LBB244:
 705              		.loc 7 38 2 view .LVU198
 706              		.loc 7 38 2 view .LVU199
 707              	.LBE244:
 708              		.loc 7 38 2 discriminator 2 view .LVU200
 709              		.loc 7 38 2 discriminator 2 view .LVU201
 710              		.loc 7 38 2 discriminator 2 view .LVU202
 711 0040 2362     		str	r3, [r4, #32]
 712              		.loc 7 38 2 discriminator 2 view .LVU203
 713              		.loc 7 38 2 discriminator 2 view .LVU204
 714              	.LVL56:
 715              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU205
 716              	.LBE242:
ARM GAS  /tmp/ccZILEbd.s 			page 44


 717              	.LBE241:
 129:./fs/pipefs/pipefs.c **** 
 718              		.loc 1 129 5 is_stmt 1 view .LVU206
 129:./fs/pipefs/pipefs.c **** 
 719              		.loc 1 129 21 is_stmt 0 view .LVU207
 720 0042 A763     		str	r7, [r4, #56]
 131:./fs/pipefs/pipefs.c ****     list_add(&pipe_inode->list_node,&sb->inode_list_head);
 721              		.loc 1 131 5 is_stmt 1 view .LVU208
 722 0044 2F1D     		adds	r7, r5, #4
 723 0046 3846     		mov	r0, r7
 724 0048 FFF7FEFF 		bl	spin_lock
 725              	.LVL57:
 132:./fs/pipefs/pipefs.c ****     spin_unlock(&sb->lock);
 726              		.loc 1 132 5 view .LVU209
 727 004c 05F11802 		add	r2, r5, #24
 728              	.LVL58:
 729              	.LBB245:
 730              	.LBI245:
  39:./include/linux/list.h **** }
  40:./include/linux/list.h **** 
  41:./include/linux/list.h **** #ifdef CONFIG_LIST_HARDENED
  42:./include/linux/list.h **** 
  43:./include/linux/list.h **** #ifdef CONFIG_DEBUG_LIST
  44:./include/linux/list.h **** # define __list_valid_slowpath
  45:./include/linux/list.h **** #else
  46:./include/linux/list.h **** # define __list_valid_slowpath __cold __preserve_most
  47:./include/linux/list.h **** #endif
  48:./include/linux/list.h **** 
  49:./include/linux/list.h **** /*
  50:./include/linux/list.h ****  * Performs the full set of list corruption checks before __list_add().
  51:./include/linux/list.h ****  * On list corruption reports a warning, and returns false.
  52:./include/linux/list.h ****  */
  53:./include/linux/list.h **** extern bool __list_valid_slowpath __list_add_valid_or_report(struct list_head *new,
  54:./include/linux/list.h **** 							     struct list_head *prev,
  55:./include/linux/list.h **** 							     struct list_head *next);
  56:./include/linux/list.h **** 
  57:./include/linux/list.h **** /*
  58:./include/linux/list.h ****  * Performs list corruption checks before __list_add(). Returns false if a
  59:./include/linux/list.h ****  * corruption is detected, true otherwise.
  60:./include/linux/list.h ****  *
  61:./include/linux/list.h ****  * With CONFIG_LIST_HARDENED only, performs minimal list integrity checking
  62:./include/linux/list.h ****  * inline to catch non-faulting corruptions, and only if a corruption is
  63:./include/linux/list.h ****  * detected calls the reporting function __list_add_valid_or_report().
  64:./include/linux/list.h ****  */
  65:./include/linux/list.h **** static __always_inline bool __list_add_valid(struct list_head *new,
  66:./include/linux/list.h **** 					     struct list_head *prev,
  67:./include/linux/list.h **** 					     struct list_head *next)
  68:./include/linux/list.h **** {
  69:./include/linux/list.h **** 	bool ret = true;
  70:./include/linux/list.h **** 
  71:./include/linux/list.h **** 	if (!IS_ENABLED(CONFIG_DEBUG_LIST)) {
  72:./include/linux/list.h **** 		/*
  73:./include/linux/list.h **** 		 * With the hardening version, elide checking if next and prev
  74:./include/linux/list.h **** 		 * are NULL, since the immediate dereference of them below would
  75:./include/linux/list.h **** 		 * result in a fault if NULL.
  76:./include/linux/list.h **** 		 *
  77:./include/linux/list.h **** 		 * With the reduced set of checks, we can afford to inline the
ARM GAS  /tmp/ccZILEbd.s 			page 45


  78:./include/linux/list.h **** 		 * checks, which also gives the compiler a chance to elide some
  79:./include/linux/list.h **** 		 * of them completely if they can be proven at compile-time. If
  80:./include/linux/list.h **** 		 * one of the pre-conditions does not hold, the slow-path will
  81:./include/linux/list.h **** 		 * show a report which pre-condition failed.
  82:./include/linux/list.h **** 		 */
  83:./include/linux/list.h **** 		if (likely(next->prev == prev && prev->next == next && new != prev && new != next))
  84:./include/linux/list.h **** 			return true;
  85:./include/linux/list.h **** 		ret = false;
  86:./include/linux/list.h **** 	}
  87:./include/linux/list.h **** 
  88:./include/linux/list.h **** 	ret &= __list_add_valid_or_report(new, prev, next);
  89:./include/linux/list.h **** 	return ret;
  90:./include/linux/list.h **** }
  91:./include/linux/list.h **** 
  92:./include/linux/list.h **** /*
  93:./include/linux/list.h ****  * Performs the full set of list corruption checks before __list_del_entry().
  94:./include/linux/list.h ****  * On list corruption reports a warning, and returns false.
  95:./include/linux/list.h ****  */
  96:./include/linux/list.h **** extern bool __list_valid_slowpath __list_del_entry_valid_or_report(struct list_head *entry);
  97:./include/linux/list.h **** 
  98:./include/linux/list.h **** /*
  99:./include/linux/list.h ****  * Performs list corruption checks before __list_del_entry(). Returns false if a
 100:./include/linux/list.h ****  * corruption is detected, true otherwise.
 101:./include/linux/list.h ****  *
 102:./include/linux/list.h ****  * With CONFIG_LIST_HARDENED only, performs minimal list integrity checking
 103:./include/linux/list.h ****  * inline to catch non-faulting corruptions, and only if a corruption is
 104:./include/linux/list.h ****  * detected calls the reporting function __list_del_entry_valid_or_report().
 105:./include/linux/list.h ****  */
 106:./include/linux/list.h **** static __always_inline bool __list_del_entry_valid(struct list_head *entry)
 107:./include/linux/list.h **** {
 108:./include/linux/list.h **** 	bool ret = true;
 109:./include/linux/list.h **** 
 110:./include/linux/list.h **** 	if (!IS_ENABLED(CONFIG_DEBUG_LIST)) {
 111:./include/linux/list.h **** 		struct list_head *prev = entry->prev;
 112:./include/linux/list.h **** 		struct list_head *next = entry->next;
 113:./include/linux/list.h **** 
 114:./include/linux/list.h **** 		/*
 115:./include/linux/list.h **** 		 * With the hardening version, elide checking if next and prev
 116:./include/linux/list.h **** 		 * are NULL, LIST_POISON1 or LIST_POISON2, since the immediate
 117:./include/linux/list.h **** 		 * dereference of them below would result in a fault.
 118:./include/linux/list.h **** 		 */
 119:./include/linux/list.h **** 		if (likely(prev->next == entry && next->prev == entry))
 120:./include/linux/list.h **** 			return true;
 121:./include/linux/list.h **** 		ret = false;
 122:./include/linux/list.h **** 	}
 123:./include/linux/list.h **** 
 124:./include/linux/list.h **** 	ret &= __list_del_entry_valid_or_report(entry);
 125:./include/linux/list.h **** 	return ret;
 126:./include/linux/list.h **** }
 127:./include/linux/list.h **** #else
 128:./include/linux/list.h **** static inline bool __list_add_valid(struct list_head *new,
 129:./include/linux/list.h **** 				struct list_head *prev,
 130:./include/linux/list.h **** 				struct list_head *next)
 131:./include/linux/list.h **** {
 132:./include/linux/list.h **** 	return true;
 133:./include/linux/list.h **** }
 134:./include/linux/list.h **** static inline bool __list_del_entry_valid(struct list_head *entry)
ARM GAS  /tmp/ccZILEbd.s 			page 46


 135:./include/linux/list.h **** {
 136:./include/linux/list.h **** 	return true;
 137:./include/linux/list.h **** }
 138:./include/linux/list.h **** #endif
 139:./include/linux/list.h **** 
 140:./include/linux/list.h **** /*
 141:./include/linux/list.h ****  * Insert a new entry between two known consecutive entries.
 142:./include/linux/list.h ****  *
 143:./include/linux/list.h ****  * This is only for internal list manipulation where we know
 144:./include/linux/list.h ****  * the prev/next entries already!
 145:./include/linux/list.h ****  */
 146:./include/linux/list.h **** static inline void __list_add(struct list_head *new,
 147:./include/linux/list.h **** 			      struct list_head *prev,
 148:./include/linux/list.h **** 			      struct list_head *next)
 149:./include/linux/list.h **** {
 150:./include/linux/list.h **** 	if (!__list_add_valid(new, prev, next))
 151:./include/linux/list.h **** 		return;
 152:./include/linux/list.h **** 
 153:./include/linux/list.h **** 	next->prev = new;
 154:./include/linux/list.h **** 	new->next = next;
 155:./include/linux/list.h **** 	new->prev = prev;
 156:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 157:./include/linux/list.h **** }
 158:./include/linux/list.h **** 
 159:./include/linux/list.h **** /**
 160:./include/linux/list.h ****  * list_add - add a new entry
 161:./include/linux/list.h ****  * @new: new entry to be added
 162:./include/linux/list.h ****  * @head: list head to add it after
 163:./include/linux/list.h ****  *
 164:./include/linux/list.h ****  * Insert a new entry after the specified head.
 165:./include/linux/list.h ****  * This is good for implementing stacks.
 166:./include/linux/list.h ****  */
 167:./include/linux/list.h **** static inline void list_add(struct list_head *new, struct list_head *head)
 731              		.loc 7 167 20 view .LVU210
 732              	.LBB246:
 168:./include/linux/list.h **** {
 169:./include/linux/list.h **** 	__list_add(new, head, head->next);
 733              		.loc 7 169 2 view .LVU211
 734 0050 AB69     		ldr	r3, [r5, #24]
 735              	.LVL59:
 736              	.LBB247:
 737              	.LBI247:
 146:./include/linux/list.h **** 			      struct list_head *prev,
 738              		.loc 7 146 20 view .LVU212
 739              	.LBB248:
 150:./include/linux/list.h **** 		return;
 740              		.loc 7 150 2 view .LVU213
 153:./include/linux/list.h **** 	new->next = next;
 741              		.loc 7 153 2 view .LVU214
 153:./include/linux/list.h **** 	new->next = next;
 742              		.loc 7 153 13 is_stmt 0 view .LVU215
 743 0052 5E60     		str	r6, [r3, #4]
 154:./include/linux/list.h **** 	new->prev = prev;
 744              		.loc 7 154 2 is_stmt 1 view .LVU216
 154:./include/linux/list.h **** 	new->prev = prev;
 745              		.loc 7 154 12 is_stmt 0 view .LVU217
 746 0054 6361     		str	r3, [r4, #20]
ARM GAS  /tmp/ccZILEbd.s 			page 47


 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 747              		.loc 7 155 2 is_stmt 1 view .LVU218
 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 748              		.loc 7 155 12 is_stmt 0 view .LVU219
 749 0056 A261     		str	r2, [r4, #24]
 156:./include/linux/list.h **** }
 750              		.loc 7 156 2 is_stmt 1 view .LVU220
 156:./include/linux/list.h **** }
 751              		.loc 7 156 2 view .LVU221
 752              	.LBB249:
 156:./include/linux/list.h **** }
 753              		.loc 7 156 2 view .LVU222
 156:./include/linux/list.h **** }
 754              		.loc 7 156 2 view .LVU223
 755              	.LBE249:
 156:./include/linux/list.h **** }
 756              		.loc 7 156 2 discriminator 2 view .LVU224
 156:./include/linux/list.h **** }
 757              		.loc 7 156 2 discriminator 2 view .LVU225
 156:./include/linux/list.h **** }
 758              		.loc 7 156 2 discriminator 2 view .LVU226
 759 0058 AE61     		str	r6, [r5, #24]
 156:./include/linux/list.h **** }
 760              		.loc 7 156 2 discriminator 3 view .LVU227
 156:./include/linux/list.h **** }
 761              		.loc 7 156 2 discriminator 3 view .LVU228
 762              	.LVL60:
 156:./include/linux/list.h **** }
 763              		.loc 7 156 2 is_stmt 0 discriminator 3 view .LVU229
 764              	.LBE248:
 765              	.LBE247:
 766              	.LBE246:
 767              	.LBE245:
 133:./fs/pipefs/pipefs.c ****     
 768              		.loc 1 133 5 is_stmt 1 view .LVU230
 769 005a 3846     		mov	r0, r7
 770 005c FFF7FEFF 		bl	spin_unlock
 771              	.LVL61:
 135:./fs/pipefs/pipefs.c **** }
 772              		.loc 1 135 5 view .LVU231
 773              	.L42:
 136:./fs/pipefs/pipefs.c **** static void pipefs_inode_put(struct pipefs_inode *node){
 774              		.loc 1 136 1 is_stmt 0 view .LVU232
 775 0060 2046     		mov	r0, r4
 776 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 777              	.LVL62:
 778              	.L44:
 116:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
 779              		.loc 1 116 28 discriminator 1 view .LVU233
 780 0064 0C46     		mov	r4, r1
 781 0066 FBE7     		b	.L42
 782              	.L47:
 783              		.align	2
 784              	.L46:
 785 0068 4E61BC00 		.word	12345678
 786              		.cfi_endproc
 787              	.LFE1041:
ARM GAS  /tmp/ccZILEbd.s 			page 48


 789              		.section	.text.pipefs_get_inode,"ax",%progbits
 790              		.align	1
 791              		.syntax unified
 792              		.thumb
 793              		.thumb_func
 795              	pipefs_get_inode:
 796              	.LVL63:
 797              	.LFB1055:
 389:./fs/pipefs/pipefs.c ****     if(pipe_node == NULL) return NULL;
 798              		.loc 1 389 1 is_stmt 1 view -0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 389:./fs/pipefs/pipefs.c ****     if(pipe_node == NULL) return NULL;
 802              		.loc 1 389 1 is_stmt 0 view .LVU235
 803 0000 10B5     		push	{r4, lr}
 804              	.LCFI9:
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 4, -8
 807              		.cfi_offset 14, -4
 390:./fs/pipefs/pipefs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 808              		.loc 1 390 5 is_stmt 1 view .LVU236
 390:./fs/pipefs/pipefs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 809              		.loc 1 390 7 is_stmt 0 view .LVU237
 810 0002 0446     		mov	r4, r0
 811 0004 58B1     		cbz	r0, .L48
 391:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 812              		.loc 1 391 5 is_stmt 1 view .LVU238
 391:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 813              		.loc 1 391 28 is_stmt 0 view .LVU239
 814 0006 0846     		mov	r0, r1
 815              	.LVL64:
 391:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 816              		.loc 1 391 28 view .LVU240
 817 0008 FFF7FEFF 		bl	new_inode
 818              	.LVL65:
 392:./fs/pipefs/pipefs.c ****     inode->i_mode    = pipe_node->i_mode;
 819              		.loc 1 392 5 is_stmt 1 view .LVU241
 392:./fs/pipefs/pipefs.c ****     inode->i_mode    = pipe_node->i_mode;
 820              		.loc 1 392 7 is_stmt 0 view .LVU242
 821 000c 38B1     		cbz	r0, .L48
 393:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 822              		.loc 1 393 5 is_stmt 1 view .LVU243
 393:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 823              		.loc 1 393 33 is_stmt 0 view .LVU244
 824 000e 6368     		ldr	r3, [r4, #4]
 393:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 825              		.loc 1 393 22 view .LVU245
 826 0010 0380     		strh	r3, [r0]	@ movhi
 394:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 827              		.loc 1 394 5 is_stmt 1 view .LVU246
 394:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 828              		.loc 1 394 33 is_stmt 0 view .LVU247
 829 0012 2369     		ldr	r3, [r4, #16]
 394:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 830              		.loc 1 394 22 view .LVU248
 831 0014 C367     		str	r3, [r0, #124]
ARM GAS  /tmp/ccZILEbd.s 			page 49


 395:./fs/pipefs/pipefs.c ****     inode->i_private = pipe_node;
 832              		.loc 1 395 5 is_stmt 1 view .LVU249
 395:./fs/pipefs/pipefs.c ****     inode->i_private = pipe_node;
 833              		.loc 1 395 22 is_stmt 0 view .LVU250
 834 0016 024B     		ldr	r3, .L52
 835 0018 0361     		str	r3, [r0, #16]
 396:./fs/pipefs/pipefs.c ****     return inode;
 836              		.loc 1 396 5 is_stmt 1 view .LVU251
 396:./fs/pipefs/pipefs.c ****     return inode;
 837              		.loc 1 396 22 is_stmt 0 view .LVU252
 838 001a C0F88440 		str	r4, [r0, #132]
 397:./fs/pipefs/pipefs.c **** }
 839              		.loc 1 397 5 is_stmt 1 view .LVU253
 840              	.LVL66:
 841              	.L48:
 398:./fs/pipefs/pipefs.c **** 
 842              		.loc 1 398 1 is_stmt 0 view .LVU254
 843 001e 10BD     		pop	{r4, pc}
 844              	.LVL67:
 845              	.L53:
 398:./fs/pipefs/pipefs.c **** 
 846              		.loc 1 398 1 view .LVU255
 847              		.align	2
 848              	.L52:
 849 0020 00000000 		.word	pipefs_inode_operation
 850              		.cfi_endproc
 851              	.LFE1055:
 853              		.section	.text.pipefs_getattr,"ax",%progbits
 854              		.align	1
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 859              	pipefs_getattr:
 860              	.LVL68:
 861              	.LFB1068:
 578:./fs/pipefs/pipefs.c ****     struct dentry *d = path->dentry;
 862              		.loc 1 578 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 4, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 578:./fs/pipefs/pipefs.c ****     struct dentry *d = path->dentry;
 866              		.loc 1 578 1 is_stmt 0 view .LVU257
 867 0000 38B5     		push	{r3, r4, r5, lr}
 868              	.LCFI10:
 869              		.cfi_def_cfa_offset 16
 870              		.cfi_offset 3, -16
 871              		.cfi_offset 4, -12
 872              		.cfi_offset 5, -8
 873              		.cfi_offset 14, -4
 579:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = d->d_fsdata;
 874              		.loc 1 579 5 is_stmt 1 view .LVU258
 579:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = d->d_fsdata;
 875              		.loc 1 579 20 is_stmt 0 view .LVU259
 876 0002 4B68     		ldr	r3, [r1, #4]
 877              	.LVL69:
 580:./fs/pipefs/pipefs.c ****     struct pipefs_inode *inode;
 878              		.loc 1 580 5 is_stmt 1 view .LVU260
ARM GAS  /tmp/ccZILEbd.s 			page 50


 580:./fs/pipefs/pipefs.c ****     struct pipefs_inode *inode;
 879              		.loc 1 580 27 is_stmt 0 view .LVU261
 880 0004 5B6D     		ldr	r3, [r3, #84]
 881              	.LVL70:
 581:./fs/pipefs/pipefs.c **** 
 882              		.loc 1 581 5 is_stmt 1 view .LVU262
 583:./fs/pipefs/pipefs.c ****     return -ENOENT;
 883              		.loc 1 583 5 view .LVU263
 583:./fs/pipefs/pipefs.c ****     return -ENOENT;
 884              		.loc 1 583 8 is_stmt 0 view .LVU264
 885 0006 002B     		cmp	r3, #0
 886 0008 31D0     		beq	.L56
 887 000a 1446     		mov	r4, r2
 583:./fs/pipefs/pipefs.c ****     return -ENOENT;
 888              		.loc 1 583 26 discriminator 1 view .LVU265
 889 000c 9B68     		ldr	r3, [r3, #8]
 890              	.LVL71:
 583:./fs/pipefs/pipefs.c ****     return -ENOENT;
 891              		.loc 1 583 15 discriminator 1 view .LVU266
 892 000e 8BB3     		cbz	r3, .L57
 585:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 893              		.loc 1 585 5 is_stmt 1 view .LVU267
 585:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 894              		.loc 1 585 23 is_stmt 0 view .LVU268
 895 0010 5A68     		ldr	r2, [r3, #4]
 896              	.LVL72:
 585:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 897              		.loc 1 585 16 view .LVU269
 898 0012 A280     		strh	r2, [r4, #4]	@ movhi
 899              	.LVL73:
 586:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 900              		.loc 1 586 5 is_stmt 1 view .LVU270
 586:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 901              		.loc 1 586 18 is_stmt 0 view .LVU271
 902 0014 9A68     		ldr	r2, [r3, #8]
 903 0016 1205     		lsls	r2, r2, #20
 586:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 904              		.loc 1 586 16 view .LVU272
 905 0018 E261     		str	r2, [r4, #28]
 587:./fs/pipefs/pipefs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 906              		.loc 1 587 5 is_stmt 1 view .LVU273
 587:./fs/pipefs/pipefs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 907              		.loc 1 587 16 is_stmt 0 view .LVU274
 908 001a A361     		str	r3, [r4, #24]
 588:./fs/pipefs/pipefs.c ****     stat->size  = 0; 
 909              		.loc 1 588 5 is_stmt 1 view .LVU275
 910              	.LVL74:
 911              	.LBB250:
 912              	.LBI250:
  30:./include/linux/atomic/atomic-instrumented.h **** {
 913              		.loc 5 30 1 view .LVU276
  32:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read(v);
 914              		.loc 5 32 2 view .LVU277
  33:./include/linux/atomic/atomic-instrumented.h **** }
 915              		.loc 5 33 2 view .LVU278
 916              	.LBB251:
 917              	.LBI251:
ARM GAS  /tmp/ccZILEbd.s 			page 51


 461:./include/linux/atomic/atomic-arch-fallback.h **** {
 918              		.loc 6 461 1 view .LVU279
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 919              		.loc 6 463 2 view .LVU280
 920              	.LBB252:
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 921              		.loc 6 463 9 view .LVU281
 922              	.LBB253:
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 923              		.loc 6 463 9 view .LVU282
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 924              		.loc 6 463 9 view .LVU283
 925              	.LBE253:
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 926              		.loc 6 463 9 discriminator 2 view .LVU284
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 927              		.loc 6 463 9 discriminator 2 view .LVU285
 928 001c DB68     		ldr	r3, [r3, #12]
 929              	.LVL75:
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 930              		.loc 6 463 9 is_stmt 0 discriminator 2 view .LVU286
 931              	.LBE252:
 932              	.LBE251:
 933              	.LBE250:
 588:./fs/pipefs/pipefs.c ****     stat->size  = 0; 
 934              		.loc 1 588 17 discriminator 1 view .LVU287
 935 001e A360     		str	r3, [r4, #8]
 589:./fs/pipefs/pipefs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 936              		.loc 1 589 5 is_stmt 1 view .LVU288
 589:./fs/pipefs/pipefs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 937              		.loc 1 589 17 is_stmt 0 view .LVU289
 938 0020 0022     		movs	r2, #0
 939 0022 0023     		movs	r3, #0
 940 0024 C4E90C23 		strd	r2, [r4, #48]
 590:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 941              		.loc 1 590 5 is_stmt 1 view .LVU290
 590:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 942              		.loc 1 590 27 is_stmt 0 view .LVU291
 943 0028 FFF7FEFF 		bl	ktime_get
 944              	.LVL76:
 590:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 945              		.loc 1 590 34 discriminator 1 view .LVU292
 946 002c 134D     		ldr	r5, .L59
 947 002e 2B68     		ldr	r3, [r5]
 948 0030 B0FBF3F0 		udiv	r0, r0, r3
 590:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 949              		.loc 1 590 25 discriminator 1 view .LVU293
 950 0034 E063     		str	r0, [r4, #60]
 591:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 951              		.loc 1 591 5 is_stmt 1 view .LVU294
 591:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 952              		.loc 1 591 27 is_stmt 0 view .LVU295
 953 0036 FFF7FEFF 		bl	ktime_get
 954              	.LVL77:
 591:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 955              		.loc 1 591 34 discriminator 1 view .LVU296
 956 003a 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccZILEbd.s 			page 52


 957 003c B0FBF3F2 		udiv	r2, r0, r3
 958 0040 03FB1200 		mls	r0, r3, r2, r0
 591:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 959              		.loc 1 591 25 discriminator 1 view .LVU297
 960 0044 A063     		str	r0, [r4, #56]
 592:./fs/pipefs/pipefs.c ****     stat->ctime = stat->atime;
 961              		.loc 1 592 5 is_stmt 1 view .LVU298
 592:./fs/pipefs/pipefs.c ****     stat->ctime = stat->atime;
 962              		.loc 1 592 17 is_stmt 0 view .LVU299
 963 0046 04F14002 		add	r2, r4, #64
 964 004a 04F13803 		add	r3, r4, #56
 965 004e 93E80300 		ldm	r3, {r0, r1}
 966 0052 82E80300 		stm	r2, {r0, r1}
 593:./fs/pipefs/pipefs.c ****     stat->blksize = PAGE_SIZE;
 967              		.loc 1 593 5 is_stmt 1 view .LVU300
 593:./fs/pipefs/pipefs.c ****     stat->blksize = PAGE_SIZE;
 968              		.loc 1 593 17 is_stmt 0 view .LVU301
 969 0056 04F14802 		add	r2, r4, #72
 970 005a 93E80300 		ldm	r3, {r0, r1}
 971 005e 82E80300 		stm	r2, {r0, r1}
 594:./fs/pipefs/pipefs.c ****     stat->blocks  = 0;
 972              		.loc 1 594 5 is_stmt 1 view .LVU302
 594:./fs/pipefs/pipefs.c ****     stat->blocks  = 0;
 973              		.loc 1 594 19 is_stmt 0 view .LVU303
 974 0062 4FF48053 		mov	r3, #4096
 975 0066 E360     		str	r3, [r4, #12]
 595:./fs/pipefs/pipefs.c ****     return 0;
 976              		.loc 1 595 5 is_stmt 1 view .LVU304
 595:./fs/pipefs/pipefs.c ****     return 0;
 977              		.loc 1 595 19 is_stmt 0 view .LVU305
 978 0068 0020     		movs	r0, #0
 979 006a A065     		str	r0, [r4, #88]
 596:./fs/pipefs/pipefs.c **** }
 980              		.loc 1 596 5 is_stmt 1 view .LVU306
 981              	.LVL78:
 982              	.L54:
 597:./fs/pipefs/pipefs.c **** 
 983              		.loc 1 597 1 is_stmt 0 view .LVU307
 984 006c 38BD     		pop	{r3, r4, r5, pc}
 985              	.LVL79:
 986              	.L56:
 584:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 987              		.loc 1 584 12 view .LVU308
 988 006e 6FF00100 		mvn	r0, #1
 989              	.LVL80:
 584:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 990              		.loc 1 584 12 view .LVU309
 991 0072 FBE7     		b	.L54
 992              	.LVL81:
 993              	.L57:
 584:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 994              		.loc 1 584 12 view .LVU310
 995 0074 6FF00100 		mvn	r0, #1
 996              	.LVL82:
 584:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 997              		.loc 1 584 12 view .LVU311
 998 0078 F8E7     		b	.L54
ARM GAS  /tmp/ccZILEbd.s 			page 53


 999              	.L60:
 1000 007a 00BF     		.align	2
 1001              	.L59:
 1002 007c 00000000 		.word	HZ
 1003              		.cfi_endproc
 1004              	.LFE1068:
 1006              		.section	.text.pipefs_lookup,"ax",%progbits
 1007              		.align	1
 1008              		.syntax unified
 1009              		.thumb
 1010              		.thumb_func
 1012              	pipefs_lookup:
 1013              	.LVL83:
 1014              	.LFB1051:
 262:./fs/pipefs/pipefs.c ****     if(dentry_inode == NULL) return NULL;
 1015              		.loc 1 262 1 is_stmt 1 view -0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 0
 1018              		@ frame_needed = 0, uses_anonymous_args = 0
 262:./fs/pipefs/pipefs.c ****     if(dentry_inode == NULL) return NULL;
 1019              		.loc 1 262 1 is_stmt 0 view .LVU313
 1020 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1021              	.LCFI11:
 1022              		.cfi_def_cfa_offset 24
 1023              		.cfi_offset 3, -24
 1024              		.cfi_offset 4, -20
 1025              		.cfi_offset 5, -16
 1026              		.cfi_offset 6, -12
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 263:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1029              		.loc 1 263 5 is_stmt 1 view .LVU314
 263:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1030              		.loc 1 263 7 is_stmt 0 view .LVU315
 1031 0002 0546     		mov	r5, r0
 1032 0004 20B3     		cbz	r0, .L66
 1033 0006 0E46     		mov	r6, r1
 264:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1034              		.loc 1 264 5 is_stmt 1 view .LVU316
 264:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1035              		.loc 1 264 23 is_stmt 0 view .LVU317
 1036 0008 4368     		ldr	r3, [r0, #4]
 264:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1037              		.loc 1 264 32 view .LVU318
 1038 000a 03F47043 		and	r3, r3, #61440
 264:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1039              		.loc 1 264 8 view .LVU319
 1040 000e B3F5804F 		cmp	r3, #16384
 1041 0012 1FD1     		bne	.L67
 265:./fs/pipefs/pipefs.c ****     spin_lock(&dentry_inode->lock);
 1042              		.loc 1 265 5 is_stmt 1 view .LVU320
 266:./fs/pipefs/pipefs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 1043              		.loc 1 266 5 view .LVU321
 1044 0014 00F12407 		add	r7, r0, #36
 1045 0018 3846     		mov	r0, r7
 1046              	.LVL84:
 266:./fs/pipefs/pipefs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
ARM GAS  /tmp/ccZILEbd.s 			page 54


 1047              		.loc 1 266 5 is_stmt 0 view .LVU322
 1048 001a FFF7FEFF 		bl	spin_lock
 1049              	.LVL85:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1050              		.loc 1 267 5 is_stmt 1 view .LVU323
 1051              	.LBB254:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1052              		.loc 1 267 5 view .LVU324
 1053 001e EC69     		ldr	r4, [r5, #28]
 1054              	.LVL86:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1055              		.loc 1 267 5 view .LVU325
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1056              		.loc 1 267 5 view .LVU326
 1057 0020 0C3C     		subs	r4, r4, #12
 1058              	.LVL87:
 1059              	.L63:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1060              		.loc 1 267 5 is_stmt 0 view .LVU327
 1061              	.LBE254:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1062              		.loc 1 267 5 is_stmt 1 discriminator 1 view .LVU328
 1063 0022 04F10C03 		add	r3, r4, #12
 1064 0026 05F11C02 		add	r2, r5, #28
 1065 002a 9342     		cmp	r3, r2
 1066 002c 0BD0     		beq	.L69
 268:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 1067              		.loc 1 268 9 view .LVU329
 268:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 1068              		.loc 1 268 13 is_stmt 0 view .LVU330
 1069 002e 3146     		mov	r1, r6
 1070 0030 6068     		ldr	r0, [r4, #4]
 1071 0032 FFF7FEFF 		bl	strcmp
 1072              	.LVL88:
 268:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 1073              		.loc 1 268 12 discriminator 1 view .LVU331
 1074 0036 10B1     		cbz	r0, .L70
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1075              		.loc 1 267 5 is_stmt 1 discriminator 2 view .LVU332
 1076              	.LBB255:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1077              		.loc 1 267 5 discriminator 2 view .LVU333
 1078 0038 E468     		ldr	r4, [r4, #12]
 1079              	.LVL89:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1080              		.loc 1 267 5 discriminator 2 view .LVU334
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1081              		.loc 1 267 5 discriminator 2 view .LVU335
 1082 003a 0C3C     		subs	r4, r4, #12
 1083              	.LVL90:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1084              		.loc 1 267 5 is_stmt 0 discriminator 2 view .LVU336
 1085 003c F1E7     		b	.L63
 1086              	.LVL91:
 1087              	.L70:
 267:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1088              		.loc 1 267 5 discriminator 2 view .LVU337
ARM GAS  /tmp/ccZILEbd.s 			page 55


 1089              	.LBE255:
 269:./fs/pipefs/pipefs.c ****             return pos;
 1090              		.loc 1 269 13 is_stmt 1 view .LVU338
 1091 003e 3846     		mov	r0, r7
 1092 0040 FFF7FEFF 		bl	spin_unlock
 1093              	.LVL92:
 270:./fs/pipefs/pipefs.c ****         }
 1094              		.loc 1 270 13 view .LVU339
 270:./fs/pipefs/pipefs.c ****         }
 1095              		.loc 1 270 20 is_stmt 0 view .LVU340
 1096 0044 07E0     		b	.L61
 1097              	.L69:
 273:./fs/pipefs/pipefs.c ****     return NULL;
 1098              		.loc 1 273 5 is_stmt 1 view .LVU341
 1099 0046 3846     		mov	r0, r7
 1100 0048 FFF7FEFF 		bl	spin_unlock
 1101              	.LVL93:
 274:./fs/pipefs/pipefs.c **** }
 1102              		.loc 1 274 5 view .LVU342
 274:./fs/pipefs/pipefs.c **** }
 1103              		.loc 1 274 12 is_stmt 0 view .LVU343
 1104 004c 0024     		movs	r4, #0
 1105              	.LVL94:
 274:./fs/pipefs/pipefs.c **** }
 1106              		.loc 1 274 12 view .LVU344
 1107 004e 02E0     		b	.L61
 1108              	.LVL95:
 1109              	.L66:
 263:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1110              		.loc 1 263 37 discriminator 1 view .LVU345
 1111 0050 0446     		mov	r4, r0
 1112 0052 00E0     		b	.L61
 1113              	.L67:
 264:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1114              		.loc 1 264 62 discriminator 1 view .LVU346
 1115 0054 0024     		movs	r4, #0
 1116              	.LVL96:
 1117              	.L61:
 275:./fs/pipefs/pipefs.c **** 
 1118              		.loc 1 275 1 view .LVU347
 1119 0056 2046     		mov	r0, r4
 1120 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 275:./fs/pipefs/pipefs.c **** 
 1121              		.loc 1 275 1 view .LVU348
 1122              		.cfi_endproc
 1123              	.LFE1051:
 1125              		.section	.text.pipefs_vfs_lookup,"ax",%progbits
 1126              		.align	1
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1131              	pipefs_vfs_lookup:
 1132              	.LVL97:
 1133              	.LFB1061:
 493:./fs/pipefs/pipefs.c ****     
 1134              		.loc 1 493 102 is_stmt 1 view -0
 1135              		.cfi_startproc
ARM GAS  /tmp/ccZILEbd.s 			page 56


 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 493:./fs/pipefs/pipefs.c ****     
 1138              		.loc 1 493 102 is_stmt 0 view .LVU350
 1139 0000 70B5     		push	{r4, r5, r6, lr}
 1140              	.LCFI12:
 1141              		.cfi_def_cfa_offset 16
 1142              		.cfi_offset 4, -16
 1143              		.cfi_offset 5, -12
 1144              		.cfi_offset 6, -8
 1145              		.cfi_offset 14, -4
 1146 0002 0646     		mov	r6, r0
 1147 0004 0D46     		mov	r5, r1
 495:./fs/pipefs/pipefs.c ****     char *name = dentry->d_name.name;                           
 1148              		.loc 1 495 5 is_stmt 1 view .LVU351
 1149              	.LVL98:
 496:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *pos;    
 1150              		.loc 1 496 5 view .LVU352
 497:./fs/pipefs/pipefs.c ****     pos = pipefs_lookup(dir_inode,name);       //Êü•ËØ¢Ëé∑Âæódentry
 1151              		.loc 1 497 5 view .LVU353
 498:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1152              		.loc 1 498 5 view .LVU354
 498:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1153              		.loc 1 498 11 is_stmt 0 view .LVU355
 1154 0006 8969     		ldr	r1, [r1, #24]
 1155              	.LVL99:
 498:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1156              		.loc 1 498 11 view .LVU356
 1157 0008 D0F88400 		ldr	r0, [r0, #132]
 1158              	.LVL100:
 498:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1159              		.loc 1 498 11 view .LVU357
 1160 000c FFF7FEFF 		bl	pipefs_lookup
 1161              	.LVL101:
 499:./fs/pipefs/pipefs.c **** 
 1162              		.loc 1 499 5 is_stmt 1 view .LVU358
 499:./fs/pipefs/pipefs.c **** 
 1163              		.loc 1 499 7 is_stmt 0 view .LVU359
 1164 0010 0446     		mov	r4, r0
 1165 0012 78B1     		cbz	r0, .L71
 501:./fs/pipefs/pipefs.c ****         return NULL;
 1166              		.loc 1 501 5 is_stmt 1 view .LVU360
 501:./fs/pipefs/pipefs.c ****         return NULL;
 1167              		.loc 1 501 9 is_stmt 0 view .LVU361
 1168 0014 0146     		mov	r1, r0
 1169 0016 2846     		mov	r0, r5
 1170              	.LVL102:
 501:./fs/pipefs/pipefs.c ****         return NULL;
 1171              		.loc 1 501 9 view .LVU362
 1172 0018 FFF7FEFF 		bl	pipefs_get_dentry
 1173              	.LVL103:
 501:./fs/pipefs/pipefs.c ****         return NULL;
 1174              		.loc 1 501 7 discriminator 1 view .LVU363
 1175 001c 60B1     		cbz	r0, .L73
 504:./fs/pipefs/pipefs.c ****     if(find_inode == NULL)
 1176              		.loc 1 504 5 is_stmt 1 view .LVU364
 504:./fs/pipefs/pipefs.c ****     if(find_inode == NULL)
ARM GAS  /tmp/ccZILEbd.s 			page 57


 1177              		.loc 1 504 33 is_stmt 0 view .LVU365
 1178 001e 7169     		ldr	r1, [r6, #20]
 1179 0020 A068     		ldr	r0, [r4, #8]
 1180 0022 FFF7FEFF 		bl	pipefs_get_inode
 1181              	.LVL104:
 505:./fs/pipefs/pipefs.c ****         return NULL;
 1182              		.loc 1 505 5 is_stmt 1 view .LVU366
 505:./fs/pipefs/pipefs.c ****         return NULL;
 1183              		.loc 1 505 7 is_stmt 0 view .LVU367
 1184 0026 0446     		mov	r4, r0
 1185              	.LVL105:
 505:./fs/pipefs/pipefs.c ****         return NULL;
 1186              		.loc 1 505 7 view .LVU368
 1187 0028 20B1     		cbz	r0, .L71
 508:./fs/pipefs/pipefs.c ****     return NULL;
 1188              		.loc 1 508 5 is_stmt 1 view .LVU369
 508:./fs/pipefs/pipefs.c ****     return NULL;
 1189              		.loc 1 508 12 is_stmt 0 view .LVU370
 1190 002a 0146     		mov	r1, r0
 1191 002c 2846     		mov	r0, r5
 1192              	.LVL106:
 508:./fs/pipefs/pipefs.c ****     return NULL;
 1193              		.loc 1 508 12 view .LVU371
 1194 002e FFF7FEFF 		bl	d_add
 1195              	.LVL107:
 508:./fs/pipefs/pipefs.c ****     return NULL;
 1196              		.loc 1 508 12 view .LVU372
 1197 0032 0446     		mov	r4, r0
 1198              	.LVL108:
 1199              	.L71:
 510:./fs/pipefs/pipefs.c **** 
 1200              		.loc 1 510 1 view .LVU373
 1201 0034 2046     		mov	r0, r4
 1202 0036 70BD     		pop	{r4, r5, r6, pc}
 1203              	.LVL109:
 1204              	.L73:
 502:./fs/pipefs/pipefs.c **** 
 1205              		.loc 1 502 16 view .LVU374
 1206 0038 0446     		mov	r4, r0
 1207              	.LVL110:
 502:./fs/pipefs/pipefs.c **** 
 1208              		.loc 1 502 16 view .LVU375
 1209 003a FBE7     		b	.L71
 1210              		.cfi_endproc
 1211              	.LFE1061:
 1213              		.section	.text.pipefs_get_vfs_superblock,"ax",%progbits
 1214              		.align	1
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1219              	pipefs_get_vfs_superblock:
 1220              	.LVL111:
 1221              	.LFB1053:
 373:./fs/pipefs/pipefs.c ****     if(sb == NULL) return NULL;
 1222              		.loc 1 373 1 is_stmt 1 view -0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccZILEbd.s 			page 58


 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 373:./fs/pipefs/pipefs.c ****     if(sb == NULL) return NULL;
 1226              		.loc 1 373 1 is_stmt 0 view .LVU377
 1227 0000 10B5     		push	{r4, lr}
 1228              	.LCFI13:
 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 4, -8
 1231              		.cfi_offset 14, -4
 374:./fs/pipefs/pipefs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 1232              		.loc 1 374 5 is_stmt 1 view .LVU378
 374:./fs/pipefs/pipefs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 1233              		.loc 1 374 7 is_stmt 0 view .LVU379
 1234 0002 0446     		mov	r4, r0
 1235 0004 40B1     		cbz	r0, .L75
 375:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 1236              		.loc 1 375 5 is_stmt 1 view .LVU380
 375:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 1237              		.loc 1 375 33 is_stmt 0 view .LVU381
 1238 0006 0020     		movs	r0, #0
 1239              	.LVL112:
 375:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 1240              		.loc 1 375 33 view .LVU382
 1241 0008 FFF7FEFF 		bl	alloc_super
 1242              	.LVL113:
 376:./fs/pipefs/pipefs.c ****     vsb->s_fs_info =   sb;
 1243              		.loc 1 376 5 is_stmt 1 view .LVU383
 376:./fs/pipefs/pipefs.c ****     vsb->s_fs_info =   sb;
 1244              		.loc 1 376 7 is_stmt 0 view .LVU384
 1245 000c 20B1     		cbz	r0, .L75
 377:./fs/pipefs/pipefs.c ****     vsb->s_d_op    =  &pipefs_dentry_operation;
 1246              		.loc 1 377 5 is_stmt 1 view .LVU385
 377:./fs/pipefs/pipefs.c ****     vsb->s_d_op    =  &pipefs_dentry_operation;
 1247              		.loc 1 377 20 is_stmt 0 view .LVU386
 1248 000e 0463     		str	r4, [r0, #48]
 378:./fs/pipefs/pipefs.c ****     vsb->s_op      =  &pipefs_super_operation;    
 1249              		.loc 1 378 5 is_stmt 1 view .LVU387
 378:./fs/pipefs/pipefs.c ****     vsb->s_op      =  &pipefs_super_operation;    
 1250              		.loc 1 378 20 is_stmt 0 view .LVU388
 1251 0010 024B     		ldr	r3, .L79
 1252 0012 0367     		str	r3, [r0, #112]
 379:./fs/pipefs/pipefs.c ****     return vsb;
 1253              		.loc 1 379 5 is_stmt 1 view .LVU389
 379:./fs/pipefs/pipefs.c ****     return vsb;
 1254              		.loc 1 379 20 is_stmt 0 view .LVU390
 1255 0014 024B     		ldr	r3, .L79+4
 1256 0016 0361     		str	r3, [r0, #16]
 380:./fs/pipefs/pipefs.c **** }
 1257              		.loc 1 380 5 is_stmt 1 view .LVU391
 1258              	.LVL114:
 1259              	.L75:
 381:./fs/pipefs/pipefs.c **** 
 1260              		.loc 1 381 1 is_stmt 0 view .LVU392
 1261 0018 10BD     		pop	{r4, pc}
 1262              	.LVL115:
 1263              	.L80:
 381:./fs/pipefs/pipefs.c **** 
 1264              		.loc 1 381 1 view .LVU393
ARM GAS  /tmp/ccZILEbd.s 			page 59


 1265 001a 00BF     		.align	2
 1266              	.L79:
 1267 001c 00000000 		.word	pipefs_dentry_operation
 1268 0020 00000000 		.word	pipefs_super_operation
 1269              		.cfi_endproc
 1270              	.LFE1053:
 1272              		.section	.text.pipefs_superblock_create,"ax",%progbits
 1273              		.align	1
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1278              	pipefs_superblock_create:
 1279              	.LFB1049:
 231:./fs/pipefs/pipefs.c ****     struct pipefs_superblock*d_sb = kmalloc(sizeof(struct pipefs_superblock),GFP_KERNEL);
 1280              		.loc 1 231 1 is_stmt 1 view -0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 1284 0000 38B5     		push	{r3, r4, r5, lr}
 1285              	.LCFI14:
 1286              		.cfi_def_cfa_offset 16
 1287              		.cfi_offset 3, -16
 1288              		.cfi_offset 4, -12
 1289              		.cfi_offset 5, -8
 1290              		.cfi_offset 14, -4
 232:./fs/pipefs/pipefs.c ****     if(d_sb == NULL){
 1291              		.loc 1 232 5 view .LVU395
 1292              	.LVL116:
 1293              	.LBB256:
 1294              	.LBI256:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 1295              		.loc 4 379 21 view .LVU396
 1296              	.LBB257:
 1297              		.loc 4 380 2 view .LVU397
 1298              		.loc 4 380 9 is_stmt 0 view .LVU398
 1299 0002 4FF44C61 		mov	r1, #3264
 1300 0006 2020     		movs	r0, #32
 1301 0008 FFF7FEFF 		bl	__smalloc__
 1302              	.LVL117:
 1303              		.loc 4 380 9 view .LVU399
 1304              	.LBE257:
 1305              	.LBE256:
 233:./fs/pipefs/pipefs.c ****         return NULL;        
 1306              		.loc 1 233 5 is_stmt 1 view .LVU400
 233:./fs/pipefs/pipefs.c ****         return NULL;        
 1307              		.loc 1 233 7 is_stmt 0 view .LVU401
 1308 000c 0446     		mov	r4, r0
 1309 000e 20B3     		cbz	r0, .L81
 236:./fs/pipefs/pipefs.c ****     spin_lock_init(&d_sb->lock);
 1310              		.loc 1 236 5 is_stmt 1 view .LVU402
 236:./fs/pipefs/pipefs.c ****     spin_lock_init(&d_sb->lock);
 1311              		.loc 1 236 17 is_stmt 0 view .LVU403
 1312 0010 154B     		ldr	r3, .L86
 1313 0012 40F8043B 		str	r3, [r0], #4
 1314              	.LVL118:
 237:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&d_sb->inode_list_head);
 1315              		.loc 1 237 5 is_stmt 1 view .LVU404
ARM GAS  /tmp/ccZILEbd.s 			page 60


 1316 0016 FFF7FEFF 		bl	spin_lock_init
 1317              	.LVL119:
 238:./fs/pipefs/pipefs.c ****     struct pipefs_inode* root_inode = pipefs_create_empty_inode(d_sb ,&pipefs_file_fops,0);
 1318              		.loc 1 238 5 view .LVU405
 1319 001a 04F11803 		add	r3, r4, #24
 1320              	.LVL120:
 1321              	.LBB258:
 1322              	.LBI258:
  35:./include/linux/list.h **** {
 1323              		.loc 7 35 20 view .LVU406
 1324              	.LBB259:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1325              		.loc 7 37 2 view .LVU407
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1326              		.loc 7 37 2 view .LVU408
 1327              	.LBB260:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1328              		.loc 7 37 2 view .LVU409
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1329              		.loc 7 37 2 view .LVU410
 1330              	.LBE260:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1331              		.loc 7 37 2 discriminator 2 view .LVU411
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1332              		.loc 7 37 2 discriminator 2 view .LVU412
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1333              		.loc 7 37 2 discriminator 2 view .LVU413
 1334 001e A361     		str	r3, [r4, #24]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1335              		.loc 7 37 2 discriminator 2 view .LVU414
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1336              		.loc 7 37 2 discriminator 2 view .LVU415
  38:./include/linux/list.h **** }
 1337              		.loc 7 38 2 view .LVU416
  38:./include/linux/list.h **** }
 1338              		.loc 7 38 2 view .LVU417
 1339              	.LBB261:
  38:./include/linux/list.h **** }
 1340              		.loc 7 38 2 view .LVU418
  38:./include/linux/list.h **** }
 1341              		.loc 7 38 2 view .LVU419
 1342              	.LBE261:
  38:./include/linux/list.h **** }
 1343              		.loc 7 38 2 discriminator 2 view .LVU420
  38:./include/linux/list.h **** }
 1344              		.loc 7 38 2 discriminator 2 view .LVU421
  38:./include/linux/list.h **** }
 1345              		.loc 7 38 2 discriminator 2 view .LVU422
 1346 0020 E361     		str	r3, [r4, #28]
  38:./include/linux/list.h **** }
 1347              		.loc 7 38 2 discriminator 2 view .LVU423
  38:./include/linux/list.h **** }
 1348              		.loc 7 38 2 discriminator 2 view .LVU424
 1349              	.LVL121:
  38:./include/linux/list.h **** }
 1350              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU425
 1351              	.LBE259:
ARM GAS  /tmp/ccZILEbd.s 			page 61


 1352              	.LBE258:
 239:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 1353              		.loc 1 239 5 is_stmt 1 view .LVU426
 239:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 1354              		.loc 1 239 39 is_stmt 0 view .LVU427
 1355 0022 0022     		movs	r2, #0
 1356 0024 1149     		ldr	r1, .L86+4
 1357 0026 2046     		mov	r0, r4
 1358 0028 FFF7FEFF 		bl	pipefs_create_empty_inode
 1359              	.LVL122:
 240:./fs/pipefs/pipefs.c ****         kfree(d_sb);
 1360              		.loc 1 240 5 is_stmt 1 view .LVU428
 240:./fs/pipefs/pipefs.c ****         kfree(d_sb);
 1361              		.loc 1 240 7 is_stmt 0 view .LVU429
 1362 002c 0546     		mov	r5, r0
 1363 002e B0B1     		cbz	r0, .L85
 244:./fs/pipefs/pipefs.c ****     d_sb->rootinode = root_inode;
 1364              		.loc 1 244 5 is_stmt 1 view .LVU430
 244:./fs/pipefs/pipefs.c ****     d_sb->rootinode = root_inode;
 1365              		.loc 1 244 24 is_stmt 0 view .LVU431
 1366 0030 44F2ED13 		movw	r3, #16877
 1367 0034 4360     		str	r3, [r0, #4]
 245:./fs/pipefs/pipefs.c ****     root_inode->i_fop = &pipefs_file_fops;
 1368              		.loc 1 245 5 is_stmt 1 view .LVU432
 245:./fs/pipefs/pipefs.c ****     root_inode->i_fop = &pipefs_file_fops;
 1369              		.loc 1 245 21 is_stmt 0 view .LVU433
 1370 0036 6061     		str	r0, [r4, #20]
 246:./fs/pipefs/pipefs.c ****     atomic_inc (&root_inode->dentry_count); 
 1371              		.loc 1 246 5 is_stmt 1 view .LVU434
 246:./fs/pipefs/pipefs.c ****     atomic_inc (&root_inode->dentry_count); 
 1372              		.loc 1 246 23 is_stmt 0 view .LVU435
 1373 0038 0C4B     		ldr	r3, .L86+4
 1374 003a 0361     		str	r3, [r0, #16]
 247:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&root_inode->dentry_list_head);
 1375              		.loc 1 247 5 is_stmt 1 view .LVU436
 1376 003c 00F10C03 		add	r3, r0, #12
 1377              	.LVL123:
 1378              	.LBB262:
 1379              	.LBI262:
  69:./include/linux/atomic/atomic-instrumented.h **** }
  70:./include/linux/atomic/atomic-instrumented.h **** 
  71:./include/linux/atomic/atomic-instrumented.h **** /**
  72:./include/linux/atomic/atomic-instrumented.h ****  * atomic_set_release() - atomic set with release ordering
  73:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  74:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to assign
  75:./include/linux/atomic/atomic-instrumented.h ****  *
  76:./include/linux/atomic/atomic-instrumented.h ****  * Atomically sets @v to @i with release ordering.
  77:./include/linux/atomic/atomic-instrumented.h ****  *
  78:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_set_release() there.
  79:./include/linux/atomic/atomic-instrumented.h ****  *
  80:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
  81:./include/linux/atomic/atomic-instrumented.h ****  */
  82:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
  83:./include/linux/atomic/atomic-instrumented.h **** atomic_set_release(atomic_t *v, int i)
  84:./include/linux/atomic/atomic-instrumented.h **** {
  85:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
  86:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_write(v, sizeof(*v));
ARM GAS  /tmp/ccZILEbd.s 			page 62


  87:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_set_release(v, i);
  88:./include/linux/atomic/atomic-instrumented.h **** }
  89:./include/linux/atomic/atomic-instrumented.h **** 
  90:./include/linux/atomic/atomic-instrumented.h **** /**
  91:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add() - atomic add with relaxed ordering
  92:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
  93:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  94:./include/linux/atomic/atomic-instrumented.h ****  *
  95:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
  96:./include/linux/atomic/atomic-instrumented.h ****  *
  97:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add() there.
  98:./include/linux/atomic/atomic-instrumented.h ****  *
  99:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 100:./include/linux/atomic/atomic-instrumented.h ****  */
 101:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 102:./include/linux/atomic/atomic-instrumented.h **** atomic_add(int i, atomic_t *v)
 103:./include/linux/atomic/atomic-instrumented.h **** {
 104:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 105:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_add(i, v);
 106:./include/linux/atomic/atomic-instrumented.h **** }
 107:./include/linux/atomic/atomic-instrumented.h **** 
 108:./include/linux/atomic/atomic-instrumented.h **** /**
 109:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return() - atomic add with full ordering
 110:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 111:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 112:./include/linux/atomic/atomic-instrumented.h ****  *
 113:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 114:./include/linux/atomic/atomic-instrumented.h ****  *
 115:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return() there.
 116:./include/linux/atomic/atomic-instrumented.h ****  *
 117:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 118:./include/linux/atomic/atomic-instrumented.h ****  */
 119:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 120:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return(int i, atomic_t *v)
 121:./include/linux/atomic/atomic-instrumented.h **** {
 122:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 123:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 124:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return(i, v);
 125:./include/linux/atomic/atomic-instrumented.h **** }
 126:./include/linux/atomic/atomic-instrumented.h **** 
 127:./include/linux/atomic/atomic-instrumented.h **** /**
 128:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_acquire() - atomic add with acquire ordering
 129:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 130:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 131:./include/linux/atomic/atomic-instrumented.h ****  *
 132:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 133:./include/linux/atomic/atomic-instrumented.h ****  *
 134:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_acquire() there.
 135:./include/linux/atomic/atomic-instrumented.h ****  *
 136:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 137:./include/linux/atomic/atomic-instrumented.h ****  */
 138:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 139:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return_acquire(int i, atomic_t *v)
 140:./include/linux/atomic/atomic-instrumented.h **** {
 141:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 142:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_acquire(i, v);
 143:./include/linux/atomic/atomic-instrumented.h **** }
ARM GAS  /tmp/ccZILEbd.s 			page 63


 144:./include/linux/atomic/atomic-instrumented.h **** 
 145:./include/linux/atomic/atomic-instrumented.h **** /**
 146:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_release() - atomic add with release ordering
 147:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 148:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 149:./include/linux/atomic/atomic-instrumented.h ****  *
 150:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 151:./include/linux/atomic/atomic-instrumented.h ****  *
 152:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_release() there.
 153:./include/linux/atomic/atomic-instrumented.h ****  *
 154:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 155:./include/linux/atomic/atomic-instrumented.h ****  */
 156:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 157:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return_release(int i, atomic_t *v)
 158:./include/linux/atomic/atomic-instrumented.h **** {
 159:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 160:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 161:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_release(i, v);
 162:./include/linux/atomic/atomic-instrumented.h **** }
 163:./include/linux/atomic/atomic-instrumented.h **** 
 164:./include/linux/atomic/atomic-instrumented.h **** /**
 165:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_relaxed() - atomic add with relaxed ordering
 166:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 167:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 168:./include/linux/atomic/atomic-instrumented.h ****  *
 169:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 170:./include/linux/atomic/atomic-instrumented.h ****  *
 171:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_relaxed() there.
 172:./include/linux/atomic/atomic-instrumented.h ****  *
 173:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 174:./include/linux/atomic/atomic-instrumented.h ****  */
 175:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 176:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return_relaxed(int i, atomic_t *v)
 177:./include/linux/atomic/atomic-instrumented.h **** {
 178:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 179:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_relaxed(i, v);
 180:./include/linux/atomic/atomic-instrumented.h **** }
 181:./include/linux/atomic/atomic-instrumented.h **** 
 182:./include/linux/atomic/atomic-instrumented.h **** /**
 183:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add() - atomic add with full ordering
 184:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 185:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 186:./include/linux/atomic/atomic-instrumented.h ****  *
 187:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 188:./include/linux/atomic/atomic-instrumented.h ****  *
 189:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add() there.
 190:./include/linux/atomic/atomic-instrumented.h ****  *
 191:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 192:./include/linux/atomic/atomic-instrumented.h ****  */
 193:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 194:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add(int i, atomic_t *v)
 195:./include/linux/atomic/atomic-instrumented.h **** {
 196:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 197:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 198:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add(i, v);
 199:./include/linux/atomic/atomic-instrumented.h **** }
 200:./include/linux/atomic/atomic-instrumented.h **** 
ARM GAS  /tmp/ccZILEbd.s 			page 64


 201:./include/linux/atomic/atomic-instrumented.h **** /**
 202:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_acquire() - atomic add with acquire ordering
 203:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 204:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 205:./include/linux/atomic/atomic-instrumented.h ****  *
 206:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 207:./include/linux/atomic/atomic-instrumented.h ****  *
 208:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_acquire() there.
 209:./include/linux/atomic/atomic-instrumented.h ****  *
 210:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 211:./include/linux/atomic/atomic-instrumented.h ****  */
 212:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 213:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_acquire(int i, atomic_t *v)
 214:./include/linux/atomic/atomic-instrumented.h **** {
 215:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 216:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_acquire(i, v);
 217:./include/linux/atomic/atomic-instrumented.h **** }
 218:./include/linux/atomic/atomic-instrumented.h **** 
 219:./include/linux/atomic/atomic-instrumented.h **** /**
 220:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_release() - atomic add with release ordering
 221:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 222:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 223:./include/linux/atomic/atomic-instrumented.h ****  *
 224:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 225:./include/linux/atomic/atomic-instrumented.h ****  *
 226:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_release() there.
 227:./include/linux/atomic/atomic-instrumented.h ****  *
 228:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 229:./include/linux/atomic/atomic-instrumented.h ****  */
 230:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 231:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_release(int i, atomic_t *v)
 232:./include/linux/atomic/atomic-instrumented.h **** {
 233:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 234:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 235:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_release(i, v);
 236:./include/linux/atomic/atomic-instrumented.h **** }
 237:./include/linux/atomic/atomic-instrumented.h **** 
 238:./include/linux/atomic/atomic-instrumented.h **** /**
 239:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_relaxed() - atomic add with relaxed ordering
 240:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 241:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 242:./include/linux/atomic/atomic-instrumented.h ****  *
 243:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 244:./include/linux/atomic/atomic-instrumented.h ****  *
 245:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_relaxed() there.
 246:./include/linux/atomic/atomic-instrumented.h ****  *
 247:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 248:./include/linux/atomic/atomic-instrumented.h ****  */
 249:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 250:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_relaxed(int i, atomic_t *v)
 251:./include/linux/atomic/atomic-instrumented.h **** {
 252:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 253:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_relaxed(i, v);
 254:./include/linux/atomic/atomic-instrumented.h **** }
 255:./include/linux/atomic/atomic-instrumented.h **** 
 256:./include/linux/atomic/atomic-instrumented.h **** /**
 257:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub() - atomic subtract with relaxed ordering
ARM GAS  /tmp/ccZILEbd.s 			page 65


 258:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 259:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 260:./include/linux/atomic/atomic-instrumented.h ****  *
 261:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 262:./include/linux/atomic/atomic-instrumented.h ****  *
 263:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub() there.
 264:./include/linux/atomic/atomic-instrumented.h ****  *
 265:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 266:./include/linux/atomic/atomic-instrumented.h ****  */
 267:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 268:./include/linux/atomic/atomic-instrumented.h **** atomic_sub(int i, atomic_t *v)
 269:./include/linux/atomic/atomic-instrumented.h **** {
 270:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 271:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_sub(i, v);
 272:./include/linux/atomic/atomic-instrumented.h **** }
 273:./include/linux/atomic/atomic-instrumented.h **** 
 274:./include/linux/atomic/atomic-instrumented.h **** /**
 275:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return() - atomic subtract with full ordering
 276:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 277:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 278:./include/linux/atomic/atomic-instrumented.h ****  *
 279:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 280:./include/linux/atomic/atomic-instrumented.h ****  *
 281:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return() there.
 282:./include/linux/atomic/atomic-instrumented.h ****  *
 283:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 284:./include/linux/atomic/atomic-instrumented.h ****  */
 285:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 286:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return(int i, atomic_t *v)
 287:./include/linux/atomic/atomic-instrumented.h **** {
 288:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 289:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 290:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return(i, v);
 291:./include/linux/atomic/atomic-instrumented.h **** }
 292:./include/linux/atomic/atomic-instrumented.h **** 
 293:./include/linux/atomic/atomic-instrumented.h **** /**
 294:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_acquire() - atomic subtract with acquire ordering
 295:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 296:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 297:./include/linux/atomic/atomic-instrumented.h ****  *
 298:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 299:./include/linux/atomic/atomic-instrumented.h ****  *
 300:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_acquire() there.
 301:./include/linux/atomic/atomic-instrumented.h ****  *
 302:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 303:./include/linux/atomic/atomic-instrumented.h ****  */
 304:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 305:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_acquire(int i, atomic_t *v)
 306:./include/linux/atomic/atomic-instrumented.h **** {
 307:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 308:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_acquire(i, v);
 309:./include/linux/atomic/atomic-instrumented.h **** }
 310:./include/linux/atomic/atomic-instrumented.h **** 
 311:./include/linux/atomic/atomic-instrumented.h **** /**
 312:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_release() - atomic subtract with release ordering
 313:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 314:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZILEbd.s 			page 66


 315:./include/linux/atomic/atomic-instrumented.h ****  *
 316:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 317:./include/linux/atomic/atomic-instrumented.h ****  *
 318:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_release() there.
 319:./include/linux/atomic/atomic-instrumented.h ****  *
 320:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 321:./include/linux/atomic/atomic-instrumented.h ****  */
 322:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 323:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_release(int i, atomic_t *v)
 324:./include/linux/atomic/atomic-instrumented.h **** {
 325:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 326:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 327:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_release(i, v);
 328:./include/linux/atomic/atomic-instrumented.h **** }
 329:./include/linux/atomic/atomic-instrumented.h **** 
 330:./include/linux/atomic/atomic-instrumented.h **** /**
 331:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_relaxed() - atomic subtract with relaxed ordering
 332:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 333:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 334:./include/linux/atomic/atomic-instrumented.h ****  *
 335:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 336:./include/linux/atomic/atomic-instrumented.h ****  *
 337:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_relaxed() there.
 338:./include/linux/atomic/atomic-instrumented.h ****  *
 339:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 340:./include/linux/atomic/atomic-instrumented.h ****  */
 341:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 342:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_relaxed(int i, atomic_t *v)
 343:./include/linux/atomic/atomic-instrumented.h **** {
 344:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 345:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_relaxed(i, v);
 346:./include/linux/atomic/atomic-instrumented.h **** }
 347:./include/linux/atomic/atomic-instrumented.h **** 
 348:./include/linux/atomic/atomic-instrumented.h **** /**
 349:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub() - atomic subtract with full ordering
 350:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 351:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 352:./include/linux/atomic/atomic-instrumented.h ****  *
 353:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 354:./include/linux/atomic/atomic-instrumented.h ****  *
 355:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub() there.
 356:./include/linux/atomic/atomic-instrumented.h ****  *
 357:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 358:./include/linux/atomic/atomic-instrumented.h ****  */
 359:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 360:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub(int i, atomic_t *v)
 361:./include/linux/atomic/atomic-instrumented.h **** {
 362:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 363:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 364:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub(i, v);
 365:./include/linux/atomic/atomic-instrumented.h **** }
 366:./include/linux/atomic/atomic-instrumented.h **** 
 367:./include/linux/atomic/atomic-instrumented.h **** /**
 368:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_acquire() - atomic subtract with acquire ordering
 369:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 370:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 371:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 67


 372:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 373:./include/linux/atomic/atomic-instrumented.h ****  *
 374:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_acquire() there.
 375:./include/linux/atomic/atomic-instrumented.h ****  *
 376:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 377:./include/linux/atomic/atomic-instrumented.h ****  */
 378:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 379:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_acquire(int i, atomic_t *v)
 380:./include/linux/atomic/atomic-instrumented.h **** {
 381:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 382:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_acquire(i, v);
 383:./include/linux/atomic/atomic-instrumented.h **** }
 384:./include/linux/atomic/atomic-instrumented.h **** 
 385:./include/linux/atomic/atomic-instrumented.h **** /**
 386:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_release() - atomic subtract with release ordering
 387:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 388:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 389:./include/linux/atomic/atomic-instrumented.h ****  *
 390:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 391:./include/linux/atomic/atomic-instrumented.h ****  *
 392:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_release() there.
 393:./include/linux/atomic/atomic-instrumented.h ****  *
 394:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 395:./include/linux/atomic/atomic-instrumented.h ****  */
 396:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 397:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_release(int i, atomic_t *v)
 398:./include/linux/atomic/atomic-instrumented.h **** {
 399:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 400:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 401:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_release(i, v);
 402:./include/linux/atomic/atomic-instrumented.h **** }
 403:./include/linux/atomic/atomic-instrumented.h **** 
 404:./include/linux/atomic/atomic-instrumented.h **** /**
 405:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_relaxed() - atomic subtract with relaxed ordering
 406:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 407:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 408:./include/linux/atomic/atomic-instrumented.h ****  *
 409:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 410:./include/linux/atomic/atomic-instrumented.h ****  *
 411:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_relaxed() there.
 412:./include/linux/atomic/atomic-instrumented.h ****  *
 413:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 414:./include/linux/atomic/atomic-instrumented.h ****  */
 415:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 416:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_relaxed(int i, atomic_t *v)
 417:./include/linux/atomic/atomic-instrumented.h **** {
 418:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 419:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_relaxed(i, v);
 420:./include/linux/atomic/atomic-instrumented.h **** }
 421:./include/linux/atomic/atomic-instrumented.h **** 
 422:./include/linux/atomic/atomic-instrumented.h **** /**
 423:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc() - atomic increment with relaxed ordering
 424:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 425:./include/linux/atomic/atomic-instrumented.h ****  *
 426:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 427:./include/linux/atomic/atomic-instrumented.h ****  *
 428:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc() there.
ARM GAS  /tmp/ccZILEbd.s 			page 68


 429:./include/linux/atomic/atomic-instrumented.h ****  *
 430:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 431:./include/linux/atomic/atomic-instrumented.h ****  */
 432:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 433:./include/linux/atomic/atomic-instrumented.h **** atomic_inc(atomic_t *v)
 1380              		.loc 5 433 1 view .LVU437
 434:./include/linux/atomic/atomic-instrumented.h **** {
 435:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 1381              		.loc 5 435 2 view .LVU438
 436:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_inc(v);
 1382              		.loc 5 436 2 view .LVU439
 1383              	.LBB263:
 1384              	.LBI263:
 510:./include/linux/atomic/atomic-arch-fallback.h **** }
 511:./include/linux/atomic/atomic-arch-fallback.h **** 
 512:./include/linux/atomic/atomic-arch-fallback.h **** /**
 513:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_set_release() - atomic set with release ordering
 514:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 515:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to assign
 516:./include/linux/atomic/atomic-arch-fallback.h ****  *
 517:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically sets @v to @i with release ordering.
 518:./include/linux/atomic/atomic-arch-fallback.h ****  *
 519:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_set_release() elsewhere.
 520:./include/linux/atomic/atomic-arch-fallback.h ****  *
 521:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 522:./include/linux/atomic/atomic-arch-fallback.h ****  */
 523:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 524:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_set_release(atomic_t *v, int i)
 525:./include/linux/atomic/atomic-arch-fallback.h **** {
 526:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_set_release)
 527:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_set_release(v, i);
 528:./include/linux/atomic/atomic-arch-fallback.h **** #else
 529:./include/linux/atomic/atomic-arch-fallback.h **** 	if (__native_word(atomic_t)) {
 530:./include/linux/atomic/atomic-arch-fallback.h **** 		smp_store_release(&(v)->counter, i);
 531:./include/linux/atomic/atomic-arch-fallback.h **** 	} else {
 532:./include/linux/atomic/atomic-arch-fallback.h **** 		__atomic_release_fence();
 533:./include/linux/atomic/atomic-arch-fallback.h **** 		raw_atomic_set(v, i);
 534:./include/linux/atomic/atomic-arch-fallback.h **** 	}
 535:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 536:./include/linux/atomic/atomic-arch-fallback.h **** }
 537:./include/linux/atomic/atomic-arch-fallback.h **** 
 538:./include/linux/atomic/atomic-arch-fallback.h **** /**
 539:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add() - atomic add with relaxed ordering
 540:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 541:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 542:./include/linux/atomic/atomic-arch-fallback.h ****  *
 543:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 544:./include/linux/atomic/atomic-arch-fallback.h ****  *
 545:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add() elsewhere.
 546:./include/linux/atomic/atomic-arch-fallback.h ****  *
 547:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 548:./include/linux/atomic/atomic-arch-fallback.h ****  */
 549:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 550:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add(int i, atomic_t *v)
 551:./include/linux/atomic/atomic-arch-fallback.h **** {
 552:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_add(i, v);
 553:./include/linux/atomic/atomic-arch-fallback.h **** }
ARM GAS  /tmp/ccZILEbd.s 			page 69


 554:./include/linux/atomic/atomic-arch-fallback.h **** 
 555:./include/linux/atomic/atomic-arch-fallback.h **** /**
 556:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return() - atomic add with full ordering
 557:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 558:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 559:./include/linux/atomic/atomic-arch-fallback.h ****  *
 560:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 561:./include/linux/atomic/atomic-arch-fallback.h ****  *
 562:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return() elsewhere.
 563:./include/linux/atomic/atomic-arch-fallback.h ****  *
 564:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 565:./include/linux/atomic/atomic-arch-fallback.h ****  */
 566:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 567:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return(int i, atomic_t *v)
 568:./include/linux/atomic/atomic-arch-fallback.h **** {
 569:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return)
 570:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 571:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 572:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 573:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 574:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_add_return_relaxed(i, v);
 575:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 576:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 577:./include/linux/atomic/atomic-arch-fallback.h **** #else
 578:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return"
 579:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 580:./include/linux/atomic/atomic-arch-fallback.h **** }
 581:./include/linux/atomic/atomic-arch-fallback.h **** 
 582:./include/linux/atomic/atomic-arch-fallback.h **** /**
 583:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_acquire() - atomic add with acquire ordering
 584:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 585:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 586:./include/linux/atomic/atomic-arch-fallback.h ****  *
 587:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 588:./include/linux/atomic/atomic-arch-fallback.h ****  *
 589:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_acquire() elsewhere.
 590:./include/linux/atomic/atomic-arch-fallback.h ****  *
 591:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 592:./include/linux/atomic/atomic-arch-fallback.h ****  */
 593:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 594:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_acquire(int i, atomic_t *v)
 595:./include/linux/atomic/atomic-arch-fallback.h **** {
 596:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_acquire)
 597:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_acquire(i, v);
 598:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 599:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_add_return_relaxed(i, v);
 600:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 601:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 602:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 603:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 604:./include/linux/atomic/atomic-arch-fallback.h **** #else
 605:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_acquire"
 606:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 607:./include/linux/atomic/atomic-arch-fallback.h **** }
 608:./include/linux/atomic/atomic-arch-fallback.h **** 
 609:./include/linux/atomic/atomic-arch-fallback.h **** /**
 610:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_release() - atomic add with release ordering
ARM GAS  /tmp/ccZILEbd.s 			page 70


 611:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 612:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 613:./include/linux/atomic/atomic-arch-fallback.h ****  *
 614:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 615:./include/linux/atomic/atomic-arch-fallback.h ****  *
 616:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_release() elsewhere.
 617:./include/linux/atomic/atomic-arch-fallback.h ****  *
 618:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 619:./include/linux/atomic/atomic-arch-fallback.h ****  */
 620:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 621:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_release(int i, atomic_t *v)
 622:./include/linux/atomic/atomic-arch-fallback.h **** {
 623:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_release)
 624:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_release(i, v);
 625:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 626:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 627:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_relaxed(i, v);
 628:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 629:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 630:./include/linux/atomic/atomic-arch-fallback.h **** #else
 631:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_release"
 632:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 633:./include/linux/atomic/atomic-arch-fallback.h **** }
 634:./include/linux/atomic/atomic-arch-fallback.h **** 
 635:./include/linux/atomic/atomic-arch-fallback.h **** /**
 636:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_relaxed() - atomic add with relaxed ordering
 637:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 638:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 639:./include/linux/atomic/atomic-arch-fallback.h ****  *
 640:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 641:./include/linux/atomic/atomic-arch-fallback.h ****  *
 642:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_relaxed() elsewhere.
 643:./include/linux/atomic/atomic-arch-fallback.h ****  *
 644:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 645:./include/linux/atomic/atomic-arch-fallback.h ****  */
 646:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 647:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_relaxed(int i, atomic_t *v)
 648:./include/linux/atomic/atomic-arch-fallback.h **** {
 649:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_relaxed)
 650:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_relaxed(i, v);
 651:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 652:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 653:./include/linux/atomic/atomic-arch-fallback.h **** #else
 654:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_relaxed"
 655:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 656:./include/linux/atomic/atomic-arch-fallback.h **** }
 657:./include/linux/atomic/atomic-arch-fallback.h **** 
 658:./include/linux/atomic/atomic-arch-fallback.h **** /**
 659:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add() - atomic add with full ordering
 660:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 661:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 662:./include/linux/atomic/atomic-arch-fallback.h ****  *
 663:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 664:./include/linux/atomic/atomic-arch-fallback.h ****  *
 665:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add() elsewhere.
 666:./include/linux/atomic/atomic-arch-fallback.h ****  *
 667:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
ARM GAS  /tmp/ccZILEbd.s 			page 71


 668:./include/linux/atomic/atomic-arch-fallback.h ****  */
 669:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 670:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add(int i, atomic_t *v)
 671:./include/linux/atomic/atomic-arch-fallback.h **** {
 672:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add)
 673:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 674:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 675:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 676:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 677:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_add_relaxed(i, v);
 678:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 679:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 680:./include/linux/atomic/atomic-arch-fallback.h **** #else
 681:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add"
 682:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 683:./include/linux/atomic/atomic-arch-fallback.h **** }
 684:./include/linux/atomic/atomic-arch-fallback.h **** 
 685:./include/linux/atomic/atomic-arch-fallback.h **** /**
 686:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_acquire() - atomic add with acquire ordering
 687:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 688:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 689:./include/linux/atomic/atomic-arch-fallback.h ****  *
 690:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 691:./include/linux/atomic/atomic-arch-fallback.h ****  *
 692:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_acquire() elsewhere.
 693:./include/linux/atomic/atomic-arch-fallback.h ****  *
 694:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 695:./include/linux/atomic/atomic-arch-fallback.h ****  */
 696:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 697:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_acquire(int i, atomic_t *v)
 698:./include/linux/atomic/atomic-arch-fallback.h **** {
 699:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_acquire)
 700:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_acquire(i, v);
 701:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 702:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_add_relaxed(i, v);
 703:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 704:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 705:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 706:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 707:./include/linux/atomic/atomic-arch-fallback.h **** #else
 708:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_acquire"
 709:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 710:./include/linux/atomic/atomic-arch-fallback.h **** }
 711:./include/linux/atomic/atomic-arch-fallback.h **** 
 712:./include/linux/atomic/atomic-arch-fallback.h **** /**
 713:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_release() - atomic add with release ordering
 714:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 715:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 716:./include/linux/atomic/atomic-arch-fallback.h ****  *
 717:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 718:./include/linux/atomic/atomic-arch-fallback.h ****  *
 719:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_release() elsewhere.
 720:./include/linux/atomic/atomic-arch-fallback.h ****  *
 721:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 722:./include/linux/atomic/atomic-arch-fallback.h ****  */
 723:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 724:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_release(int i, atomic_t *v)
ARM GAS  /tmp/ccZILEbd.s 			page 72


 725:./include/linux/atomic/atomic-arch-fallback.h **** {
 726:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_release)
 727:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_release(i, v);
 728:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 729:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 730:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_relaxed(i, v);
 731:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 732:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 733:./include/linux/atomic/atomic-arch-fallback.h **** #else
 734:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_release"
 735:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 736:./include/linux/atomic/atomic-arch-fallback.h **** }
 737:./include/linux/atomic/atomic-arch-fallback.h **** 
 738:./include/linux/atomic/atomic-arch-fallback.h **** /**
 739:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_relaxed() - atomic add with relaxed ordering
 740:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 741:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 742:./include/linux/atomic/atomic-arch-fallback.h ****  *
 743:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 744:./include/linux/atomic/atomic-arch-fallback.h ****  *
 745:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_relaxed() elsewhere.
 746:./include/linux/atomic/atomic-arch-fallback.h ****  *
 747:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 748:./include/linux/atomic/atomic-arch-fallback.h ****  */
 749:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 750:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_relaxed(int i, atomic_t *v)
 751:./include/linux/atomic/atomic-arch-fallback.h **** {
 752:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_relaxed)
 753:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_relaxed(i, v);
 754:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 755:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 756:./include/linux/atomic/atomic-arch-fallback.h **** #else
 757:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_relaxed"
 758:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 759:./include/linux/atomic/atomic-arch-fallback.h **** }
 760:./include/linux/atomic/atomic-arch-fallback.h **** 
 761:./include/linux/atomic/atomic-arch-fallback.h **** /**
 762:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub() - atomic subtract with relaxed ordering
 763:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 764:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 765:./include/linux/atomic/atomic-arch-fallback.h ****  *
 766:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 767:./include/linux/atomic/atomic-arch-fallback.h ****  *
 768:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub() elsewhere.
 769:./include/linux/atomic/atomic-arch-fallback.h ****  *
 770:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 771:./include/linux/atomic/atomic-arch-fallback.h ****  */
 772:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 773:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub(int i, atomic_t *v)
 774:./include/linux/atomic/atomic-arch-fallback.h **** {
 775:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_sub(i, v);
 776:./include/linux/atomic/atomic-arch-fallback.h **** }
 777:./include/linux/atomic/atomic-arch-fallback.h **** 
 778:./include/linux/atomic/atomic-arch-fallback.h **** /**
 779:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return() - atomic subtract with full ordering
 780:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 781:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZILEbd.s 			page 73


 782:./include/linux/atomic/atomic-arch-fallback.h ****  *
 783:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 784:./include/linux/atomic/atomic-arch-fallback.h ****  *
 785:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return() elsewhere.
 786:./include/linux/atomic/atomic-arch-fallback.h ****  *
 787:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 788:./include/linux/atomic/atomic-arch-fallback.h ****  */
 789:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 790:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return(int i, atomic_t *v)
 791:./include/linux/atomic/atomic-arch-fallback.h **** {
 792:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return)
 793:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 794:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 795:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 796:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 797:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_sub_return_relaxed(i, v);
 798:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 799:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 800:./include/linux/atomic/atomic-arch-fallback.h **** #else
 801:./include/linux/atomic/atomic-arch-fallback.h **** 	volatile int *p = (volatile int *)&v->counter;
 802:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = *p;
 803:./include/linux/atomic/atomic-arch-fallback.h **** 	*p -= i;
 804:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 805:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 806:./include/linux/atomic/atomic-arch-fallback.h **** }
 807:./include/linux/atomic/atomic-arch-fallback.h **** 
 808:./include/linux/atomic/atomic-arch-fallback.h **** 
 809:./include/linux/atomic/atomic-arch-fallback.h **** /**
 810:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_acquire() - atomic subtract with acquire ordering
 811:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 812:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 813:./include/linux/atomic/atomic-arch-fallback.h ****  *
 814:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 815:./include/linux/atomic/atomic-arch-fallback.h ****  *
 816:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_acquire() elsewhere.
 817:./include/linux/atomic/atomic-arch-fallback.h ****  *
 818:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 819:./include/linux/atomic/atomic-arch-fallback.h ****  */
 820:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 821:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_acquire(int i, atomic_t *v)
 822:./include/linux/atomic/atomic-arch-fallback.h **** {
 823:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_acquire)
 824:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_acquire(i, v);
 825:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 826:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_sub_return_relaxed(i, v);
 827:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 828:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 829:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 830:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 831:./include/linux/atomic/atomic-arch-fallback.h **** #else
 832:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_acquire"
 833:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 834:./include/linux/atomic/atomic-arch-fallback.h **** }
 835:./include/linux/atomic/atomic-arch-fallback.h **** 
 836:./include/linux/atomic/atomic-arch-fallback.h **** /**
 837:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_release() - atomic subtract with release ordering
 838:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
ARM GAS  /tmp/ccZILEbd.s 			page 74


 839:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 840:./include/linux/atomic/atomic-arch-fallback.h ****  *
 841:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 842:./include/linux/atomic/atomic-arch-fallback.h ****  *
 843:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_release() elsewhere.
 844:./include/linux/atomic/atomic-arch-fallback.h ****  *
 845:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 846:./include/linux/atomic/atomic-arch-fallback.h ****  */
 847:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 848:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_release(int i, atomic_t *v)
 849:./include/linux/atomic/atomic-arch-fallback.h **** {
 850:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_release)
 851:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_release(i, v);
 852:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 853:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 854:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_relaxed(i, v);
 855:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 856:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 857:./include/linux/atomic/atomic-arch-fallback.h **** #else
 858:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_release"
 859:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 860:./include/linux/atomic/atomic-arch-fallback.h **** }
 861:./include/linux/atomic/atomic-arch-fallback.h **** 
 862:./include/linux/atomic/atomic-arch-fallback.h **** /**
 863:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_relaxed() - atomic subtract with relaxed ordering
 864:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 865:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 866:./include/linux/atomic/atomic-arch-fallback.h ****  *
 867:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 868:./include/linux/atomic/atomic-arch-fallback.h ****  *
 869:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_relaxed() elsewhere.
 870:./include/linux/atomic/atomic-arch-fallback.h ****  *
 871:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 872:./include/linux/atomic/atomic-arch-fallback.h ****  */
 873:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 874:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_relaxed(int i, atomic_t *v)
 875:./include/linux/atomic/atomic-arch-fallback.h **** {
 876:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_relaxed)
 877:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_relaxed(i, v);
 878:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 879:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 880:./include/linux/atomic/atomic-arch-fallback.h **** #else
 881:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_relaxed"
 882:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 883:./include/linux/atomic/atomic-arch-fallback.h **** }
 884:./include/linux/atomic/atomic-arch-fallback.h **** 
 885:./include/linux/atomic/atomic-arch-fallback.h **** /**
 886:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub() - atomic subtract with full ordering
 887:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 888:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 889:./include/linux/atomic/atomic-arch-fallback.h ****  *
 890:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 891:./include/linux/atomic/atomic-arch-fallback.h ****  *
 892:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub() elsewhere.
 893:./include/linux/atomic/atomic-arch-fallback.h ****  *
 894:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 895:./include/linux/atomic/atomic-arch-fallback.h ****  */
ARM GAS  /tmp/ccZILEbd.s 			page 75


 896:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 897:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub(int i, atomic_t *v)
 898:./include/linux/atomic/atomic-arch-fallback.h **** {
 899:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub)
 900:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 901:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 902:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 903:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 904:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_sub_relaxed(i, v);
 905:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 906:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 907:./include/linux/atomic/atomic-arch-fallback.h **** #else
 908:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub"
 909:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 910:./include/linux/atomic/atomic-arch-fallback.h **** }
 911:./include/linux/atomic/atomic-arch-fallback.h **** 
 912:./include/linux/atomic/atomic-arch-fallback.h **** /**
 913:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_acquire() - atomic subtract with acquire ordering
 914:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 915:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 916:./include/linux/atomic/atomic-arch-fallback.h ****  *
 917:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 918:./include/linux/atomic/atomic-arch-fallback.h ****  *
 919:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_acquire() elsewhere.
 920:./include/linux/atomic/atomic-arch-fallback.h ****  *
 921:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 922:./include/linux/atomic/atomic-arch-fallback.h ****  */
 923:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 924:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_acquire(int i, atomic_t *v)
 925:./include/linux/atomic/atomic-arch-fallback.h **** {
 926:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_acquire)
 927:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_acquire(i, v);
 928:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 929:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_sub_relaxed(i, v);
 930:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 931:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 932:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 933:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 934:./include/linux/atomic/atomic-arch-fallback.h **** #else
 935:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_acquire"
 936:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 937:./include/linux/atomic/atomic-arch-fallback.h **** }
 938:./include/linux/atomic/atomic-arch-fallback.h **** 
 939:./include/linux/atomic/atomic-arch-fallback.h **** /**
 940:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_release() - atomic subtract with release ordering
 941:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 942:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 943:./include/linux/atomic/atomic-arch-fallback.h ****  *
 944:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 945:./include/linux/atomic/atomic-arch-fallback.h ****  *
 946:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_release() elsewhere.
 947:./include/linux/atomic/atomic-arch-fallback.h ****  *
 948:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 949:./include/linux/atomic/atomic-arch-fallback.h ****  */
 950:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 951:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_release(int i, atomic_t *v)
 952:./include/linux/atomic/atomic-arch-fallback.h **** {
ARM GAS  /tmp/ccZILEbd.s 			page 76


 953:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_release)
 954:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_release(i, v);
 955:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 956:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 957:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_relaxed(i, v);
 958:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 959:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 960:./include/linux/atomic/atomic-arch-fallback.h **** #else
 961:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_release"
 962:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 963:./include/linux/atomic/atomic-arch-fallback.h **** }
 964:./include/linux/atomic/atomic-arch-fallback.h **** 
 965:./include/linux/atomic/atomic-arch-fallback.h **** /**
 966:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_relaxed() - atomic subtract with relaxed ordering
 967:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 968:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 969:./include/linux/atomic/atomic-arch-fallback.h ****  *
 970:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 971:./include/linux/atomic/atomic-arch-fallback.h ****  *
 972:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_relaxed() elsewhere.
 973:./include/linux/atomic/atomic-arch-fallback.h ****  *
 974:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 975:./include/linux/atomic/atomic-arch-fallback.h ****  */
 976:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 977:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_relaxed(int i, atomic_t *v)
 978:./include/linux/atomic/atomic-arch-fallback.h **** {
 979:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_relaxed)
 980:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_relaxed(i, v);
 981:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 982:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 983:./include/linux/atomic/atomic-arch-fallback.h **** #else
 984:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_relaxed"
 985:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 986:./include/linux/atomic/atomic-arch-fallback.h **** }
 987:./include/linux/atomic/atomic-arch-fallback.h **** 
 988:./include/linux/atomic/atomic-arch-fallback.h **** /**
 989:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc() - atomic increment with relaxed ordering
 990:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 991:./include/linux/atomic/atomic-arch-fallback.h ****  *
 992:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 993:./include/linux/atomic/atomic-arch-fallback.h ****  *
 994:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc() elsewhere.
 995:./include/linux/atomic/atomic-arch-fallback.h ****  *
 996:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 997:./include/linux/atomic/atomic-arch-fallback.h ****  */
 998:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 999:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc(atomic_t *v)
 1385              		.loc 6 999 1 view .LVU440
1000:./include/linux/atomic/atomic-arch-fallback.h **** {
1001:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc)
1002:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_inc(v);
1003:./include/linux/atomic/atomic-arch-fallback.h **** #else
1004:./include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_add(1, v);
 1386              		.loc 6 1004 2 view .LVU441
 1387              	.LBB264:
 1388              	.LBI264:
 550:./include/linux/atomic/atomic-arch-fallback.h **** {
ARM GAS  /tmp/ccZILEbd.s 			page 77


 1389              		.loc 6 550 1 view .LVU442
 552:./include/linux/atomic/atomic-arch-fallback.h **** }
 1390              		.loc 6 552 2 view .LVU443
 1391              	.LBB265:
 1392              	.LBI265:
 1393              		.file 8 "./arch/arm_m/include/asm/atomic.h"
   1:./arch/arm_m/include/asm/atomic.h **** /* SPDX-License-Identifier: GPL-2.0-only */
   2:./arch/arm_m/include/asm/atomic.h **** /*
   3:./arch/arm_m/include/asm/atomic.h ****  * arch/arm/include/asm/atomic.h
   4:./arch/arm_m/include/asm/atomic.h ****  *
   5:./arch/arm_m/include/asm/atomic.h ****  * Copyright (C) 1996 Russell King.
   6:./arch/arm_m/include/asm/atomic.h ****  * Copyright (C) 2002 Deep Blue Solutions Ltd.
   7:./arch/arm_m/include/asm/atomic.h ****  * Modified for uClinux on STM32F407
   8:./arch/arm_m/include/asm/atomic.h ****  */
   9:./arch/arm_m/include/asm/atomic.h **** #ifndef __ASM_ARM_ATOMIC_H
  10:./arch/arm_m/include/asm/atomic.h **** #define __ASM_ARM_ATOMIC_H
  11:./arch/arm_m/include/asm/atomic.h **** 
  12:./arch/arm_m/include/asm/atomic.h **** #include <linux/compiler.h> /* Available */
  13:./arch/arm_m/include/asm/atomic.h **** #include <linux/types.h>    /* Available */
  14:./arch/arm_m/include/asm/atomic.h **** #include <asm/barrier.h>    /* Available */
  15:./arch/arm_m/include/asm/atomic.h **** 
  16:./arch/arm_m/include/asm/atomic.h **** /* Include architecture-specific configuration */
  17:./arch/arm_m/include/asm/atomic.h **** 
  18:./arch/arm_m/include/asm/atomic.h **** 
  19:./arch/arm_m/include/asm/atomic.h **** #ifdef __KERNEL__
  20:./arch/arm_m/include/asm/atomic.h **** 
  21:./arch/arm_m/include/asm/atomic.h **** 
  22:./arch/arm_m/include/asm/atomic.h **** 
  23:./arch/arm_m/include/asm/atomic.h **** 
  24:./arch/arm_m/include/asm/atomic.h **** 
  25:./arch/arm_m/include/asm/atomic.h **** // typedef struct {
  26:./arch/arm_m/include/asm/atomic.h **** //     volatile int counter;
  27:./arch/arm_m/include/asm/atomic.h **** // } atomic_t;
  28:./arch/arm_m/include/asm/atomic.h **** 
  29:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_INIT(i) { (i) }
  30:./arch/arm_m/include/asm/atomic.h **** 
  31:./arch/arm_m/include/asm/atomic.h **** /*
  32:./arch/arm_m/include/asm/atomic.h ****  * On ARMv7-M, ordinary assignment (str instruction) doesn't clear the local
  33:./arch/arm_m/include/asm/atomic.h ****  * strex/ldrex monitor on some implementations. The reason we can use it for
  34:./arch/arm_m/include/asm/atomic.h ****  * atomic_set() is the clrex or dummy strex done on every exception return.
  35:./arch/arm_m/include/asm/atomic.h ****  */
  36:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_read(v) READ_ONCE((v)->counter)
  37:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_set(v,i)    WRITE_ONCE(((v)->counter), (i))
  38:./arch/arm_m/include/asm/atomic.h **** 
  39:./arch/arm_m/include/asm/atomic.h **** /*
  40:./arch/arm_m/include/asm/atomic.h ****  * ARMv6 UP and SMP safe atomic ops.  We use load exclusive and
  41:./arch/arm_m/include/asm/atomic.h ****  * store exclusive to ensure that these are atomic.  We may loop
  42:./arch/arm_m/include/asm/atomic.h ****  * to ensure that the update happens.
  43:./arch/arm_m/include/asm/atomic.h ****  *
  44:./arch/arm_m/include/asm/atomic.h ****  * For STM32F407 (Cortex-M4, ARMv7-M), these instructions are available.
  45:./arch/arm_m/include/asm/atomic.h ****  */
  46:./arch/arm_m/include/asm/atomic.h **** 
  47:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OP(op, c_op, asm_op)                     \
  48:./arch/arm_m/include/asm/atomic.h **** static inline void arch_atomic_##op(int i, atomic_t *v)         \
  49:./arch/arm_m/include/asm/atomic.h **** {                                       \
  50:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  51:./arch/arm_m/include/asm/atomic.h ****     int result;                                 \
ARM GAS  /tmp/ccZILEbd.s 			page 78


  52:./arch/arm_m/include/asm/atomic.h ****                                         \
  53:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  54:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_" #op "\n"           \
  55:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%3]\n"                      \
  56:./arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %0, %0, %4\n"                \
  57:./arch/arm_m/include/asm/atomic.h **** "   strex   %1, %0, [%3]\n"                      \
  58:./arch/arm_m/include/asm/atomic.h **** "   teq %1, #0\n"                         \
  59:./arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  60:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)     \
  61:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
  62:./arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
  63:./arch/arm_m/include/asm/atomic.h **** }
  64:./arch/arm_m/include/asm/atomic.h **** 
  65:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OP_RETURN(op, c_op, asm_op)                  \
  66:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_##op##_return_relaxed(int i, atomic_t *v) \
  67:./arch/arm_m/include/asm/atomic.h **** {                                       \
  68:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  69:./arch/arm_m/include/asm/atomic.h ****     int result;                                 \
  70:./arch/arm_m/include/asm/atomic.h ****                                         \
  71:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  72:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_" #op "_return\n"        \
  73:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%3]\n"                      \
  74:./arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %0, %0, %4\n"                \
  75:./arch/arm_m/include/asm/atomic.h **** "   strex   %1, %0, [%3]\n"                      \
  76:./arch/arm_m/include/asm/atomic.h **** "   teq %1, #0\n"                         \
  77:./arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  78:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)     \
  79:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
  80:./arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
  81:./arch/arm_m/include/asm/atomic.h ****                                         \
  82:./arch/arm_m/include/asm/atomic.h ****     return result;                              \
  83:./arch/arm_m/include/asm/atomic.h **** }
  84:./arch/arm_m/include/asm/atomic.h **** 
  85:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_FETCH_OP(op, c_op, asm_op)                   \
  86:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_fetch_##op##_relaxed(int i, atomic_t *v)  \
  87:./arch/arm_m/include/asm/atomic.h **** {                                       \
  88:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  89:./arch/arm_m/include/asm/atomic.h ****     int result, val;                             \
  90:./arch/arm_m/include/asm/atomic.h ****                                         \
  91:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  92:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_fetch_" #op "\n"       \
  93:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%4]\n"                      \
  94:./arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %1, %0, %5\n"                \
  95:./arch/arm_m/include/asm/atomic.h **** "   strex   %2, %1, [%4]\n"                      \
  96:./arch/arm_m/include/asm/atomic.h **** "   teq %2, #0\n"                         \
  97:./arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  98:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) \
  99:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
 100:./arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
 101:./arch/arm_m/include/asm/atomic.h ****                                         \
 102:./arch/arm_m/include/asm/atomic.h ****     return result;                              \
 103:./arch/arm_m/include/asm/atomic.h **** }
 104:./arch/arm_m/include/asm/atomic.h **** 
 105:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_add_return_relaxed       arch_atomic_add_return_relaxed
 106:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_sub_return_relaxed       arch_atomic_sub_return_relaxed
 107:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_add_relaxed        arch_atomic_fetch_add_relaxed
 108:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_sub_relaxed        arch_atomic_fetch_sub_relaxed
ARM GAS  /tmp/ccZILEbd.s 			page 79


 109:./arch/arm_m/include/asm/atomic.h **** 
 110:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_and_relaxed        arch_atomic_fetch_and_relaxed
 111:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_andnot_relaxed     arch_atomic_fetch_andnot_relaxed
 112:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_or_relaxed         arch_atomic_fetch_or_relaxed
 113:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_xor_relaxed        arch_atomic_fetch_xor_relaxed
 114:./arch/arm_m/include/asm/atomic.h **** 
 115:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_cmpxchg_relaxed(atomic_t *ptr, int old, int new)
 116:./arch/arm_m/include/asm/atomic.h **** {
 117:./arch/arm_m/include/asm/atomic.h ****     int oldval;
 118:./arch/arm_m/include/asm/atomic.h ****     unsigned long res;
 119:./arch/arm_m/include/asm/atomic.h **** 
 120:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&ptr->counter); - prefetch not available */
 121:./arch/arm_m/include/asm/atomic.h **** 
 122:./arch/arm_m/include/asm/atomic.h ****     do {
 123:./arch/arm_m/include/asm/atomic.h ****         __asm__ __volatile__("@ atomic_cmpxchg\n"
 124:./arch/arm_m/include/asm/atomic.h **** "   ldrex   %1, [%3]\n"
 125:./arch/arm_m/include/asm/atomic.h **** "   mov     %0, #0\n"
 126:./arch/arm_m/include/asm/atomic.h **** "   teq     %1, %4\n"
 127:./arch/arm_m/include/asm/atomic.h **** "   strexeq %0, %5, [%3]\n"
 128:./arch/arm_m/include/asm/atomic.h ****         : "=&r" (res), "=&r" (oldval), "+Qo" (ptr->counter)
 129:./arch/arm_m/include/asm/atomic.h ****         : "r" (&ptr->counter), "Ir" (old), "r" (new)
 130:./arch/arm_m/include/asm/atomic.h ****         : "cc");
 131:./arch/arm_m/include/asm/atomic.h ****     } while (res);
 132:./arch/arm_m/include/asm/atomic.h **** 
 133:./arch/arm_m/include/asm/atomic.h ****     return oldval;
 134:./arch/arm_m/include/asm/atomic.h **** }
 135:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_cmpxchg_relaxed        arch_atomic_cmpxchg_relaxed
 136:./arch/arm_m/include/asm/atomic.h **** 
 137:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
 138:./arch/arm_m/include/asm/atomic.h **** {
 139:./arch/arm_m/include/asm/atomic.h ****     int oldval, newval;
 140:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;
 141:./arch/arm_m/include/asm/atomic.h **** 
 142:./arch/arm_m/include/asm/atomic.h ****     /* smp_mb(); - Memory barriers might need specific implementation */
 143:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */
 144:./arch/arm_m/include/asm/atomic.h **** 
 145:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__ ("@ atomic_add_unless\n"
 146:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%4]\n"
 147:./arch/arm_m/include/asm/atomic.h **** "   teq %0, %5\n"
 148:./arch/arm_m/include/asm/atomic.h **** "   beq 2f\n"
 149:./arch/arm_m/include/asm/atomic.h **** "   add %1, %0, %6\n"
 150:./arch/arm_m/include/asm/atomic.h **** "   strex   %2, %1, [%4]\n"
 151:./arch/arm_m/include/asm/atomic.h **** "   teq %2, #0\n"
 152:./arch/arm_m/include/asm/atomic.h **** "   bne 1b\n"
 153:./arch/arm_m/include/asm/atomic.h **** "2:"
 154:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (oldval), "=&r" (newval), "=&r" (tmp), "+Qo" (v->counter)
 155:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "r" (u), "r" (a)
 156:./arch/arm_m/include/asm/atomic.h ****     : "cc");
 157:./arch/arm_m/include/asm/atomic.h **** 
 158:./arch/arm_m/include/asm/atomic.h ****     if (oldval != u)
 159:./arch/arm_m/include/asm/atomic.h ****         ; /* smp_mb(); - Memory barriers might need specific implementation */
 160:./arch/arm_m/include/asm/atomic.h **** 
 161:./arch/arm_m/include/asm/atomic.h ****     return oldval;
 162:./arch/arm_m/include/asm/atomic.h **** }
 163:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_add_unless         arch_atomic_fetch_add_unless
 164:./arch/arm_m/include/asm/atomic.h **** 
 165:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OPS(op, c_op, asm_op)                    \
ARM GAS  /tmp/ccZILEbd.s 			page 80


 166:./arch/arm_m/include/asm/atomic.h ****     ATOMIC_OP(op, c_op, asm_op)                     \
 167:./arch/arm_m/include/asm/atomic.h ****     ATOMIC_OP_RETURN(op, c_op, asm_op)                  \
 168:./arch/arm_m/include/asm/atomic.h ****     ATOMIC_FETCH_OP(op, c_op, asm_op)
 169:./arch/arm_m/include/asm/atomic.h **** 
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(add, +=, add)
 1394              		.loc 8 170 1 view .LVU444
 1395              	.LBB266:
 1396              		.loc 8 170 1 view .LVU445
 1397              		.loc 8 170 1 view .LVU446
 1398              		.loc 8 170 1 view .LVU447
 1399              		.syntax unified
 1400              	@ 170 "./arch/arm_m/include/asm/atomic.h" 1
 1401              		@ atomic_add
 1402 0040 53E8002F 	1: ldrex   r2, [r3]
 1403 0044 02F10102 	   add r2, r2, #1
 1404 0048 43E80021 	   strex   r1, r2, [r3]
 1405 004c 91F0000F 	   teq r1, #0
 1406 0050 F6D1     	   bne 1b
 1407              	@ 0 "" 2
 1408              	.LVL124:
 1409              		.loc 8 170 1 is_stmt 0 view .LVU448
 1410              		.thumb
 1411              		.syntax unified
 1412              	.LBE266:
 1413              	.LBE265:
 1414              	.LBE264:
 1415              	.LBE263:
 1416              	.LBE262:
 248:./fs/pipefs/pipefs.c ****     return d_sb;
 1417              		.loc 1 248 5 is_stmt 1 view .LVU449
 1418 0052 00F11C03 		add	r3, r0, #28
 1419              	.LVL125:
 1420              	.LBB267:
 1421              	.LBI267:
  35:./include/linux/list.h **** {
 1422              		.loc 7 35 20 view .LVU450
 1423              	.LBB268:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1424              		.loc 7 37 2 view .LVU451
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1425              		.loc 7 37 2 view .LVU452
 1426              	.LBB269:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1427              		.loc 7 37 2 view .LVU453
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1428              		.loc 7 37 2 view .LVU454
 1429              	.LBE269:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1430              		.loc 7 37 2 discriminator 2 view .LVU455
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1431              		.loc 7 37 2 discriminator 2 view .LVU456
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1432              		.loc 7 37 2 discriminator 2 view .LVU457
 1433 0056 C361     		str	r3, [r0, #28]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1434              		.loc 7 37 2 discriminator 2 view .LVU458
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
ARM GAS  /tmp/ccZILEbd.s 			page 81


 1435              		.loc 7 37 2 discriminator 2 view .LVU459
  38:./include/linux/list.h **** }
 1436              		.loc 7 38 2 view .LVU460
  38:./include/linux/list.h **** }
 1437              		.loc 7 38 2 view .LVU461
 1438              	.LBB270:
  38:./include/linux/list.h **** }
 1439              		.loc 7 38 2 view .LVU462
  38:./include/linux/list.h **** }
 1440              		.loc 7 38 2 view .LVU463
 1441              	.LBE270:
  38:./include/linux/list.h **** }
 1442              		.loc 7 38 2 discriminator 2 view .LVU464
  38:./include/linux/list.h **** }
 1443              		.loc 7 38 2 discriminator 2 view .LVU465
  38:./include/linux/list.h **** }
 1444              		.loc 7 38 2 discriminator 2 view .LVU466
 1445 0058 0362     		str	r3, [r0, #32]
  38:./include/linux/list.h **** }
 1446              		.loc 7 38 2 discriminator 2 view .LVU467
  38:./include/linux/list.h **** }
 1447              		.loc 7 38 2 discriminator 2 view .LVU468
 1448              	.LVL126:
  38:./include/linux/list.h **** }
 1449              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU469
 1450              	.LBE268:
 1451              	.LBE267:
 249:./fs/pipefs/pipefs.c **** } 
 1452              		.loc 1 249 5 is_stmt 1 view .LVU470
 1453              	.L81:
 250:./fs/pipefs/pipefs.c **** static void pipefs_superblock_destory(struct pipefs_superblock* sb){
 1454              		.loc 1 250 1 is_stmt 0 view .LVU471
 1455 005a 2046     		mov	r0, r4
 1456 005c 38BD     		pop	{r3, r4, r5, pc}
 1457              	.LVL127:
 1458              	.L85:
 241:./fs/pipefs/pipefs.c ****         return NULL;
 1459              		.loc 1 241 9 is_stmt 1 view .LVU472
 1460              	.LBB271:
 1461              	.LBI271:
 381:./include/linux/slab.h **** }
 382:./include/linux/slab.h **** 
 383:./include/linux/slab.h **** static void inline kfree(const void *ptr){
 1462              		.loc 4 383 20 view .LVU473
 1463              	.LBB272:
 384:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1464              		.loc 4 384 2 view .LVU474
 1465 005e 2046     		mov	r0, r4
 1466              	.LVL128:
 1467              		.loc 4 384 2 is_stmt 0 view .LVU475
 1468 0060 FFF7FEFF 		bl	__sfree__
 1469              	.LVL129:
 1470              		.loc 4 384 2 view .LVU476
 1471              	.LBE272:
 1472              	.LBE271:
 242:./fs/pipefs/pipefs.c ****     }
 1473              		.loc 1 242 9 is_stmt 1 view .LVU477
ARM GAS  /tmp/ccZILEbd.s 			page 82


 242:./fs/pipefs/pipefs.c ****     }
 1474              		.loc 1 242 16 is_stmt 0 view .LVU478
 1475 0064 2C46     		mov	r4, r5
 1476              	.LVL130:
 242:./fs/pipefs/pipefs.c ****     }
 1477              		.loc 1 242 16 view .LVU479
 1478 0066 F8E7     		b	.L81
 1479              	.L87:
 1480              		.align	2
 1481              	.L86:
 1482 0068 4E61BC00 		.word	12345678
 1483 006c 00000000 		.word	pipefs_file_fops
 1484              		.cfi_endproc
 1485              	.LFE1049:
 1487              		.section	.text.pipefs_inode_put,"ax",%progbits
 1488              		.align	1
 1489              		.syntax unified
 1490              		.thumb
 1491              		.thumb_func
 1493              	pipefs_inode_put:
 1494              	.LVL131:
 1495              	.LFB1042:
 137:./fs/pipefs/pipefs.c ****     if(node != NULL)
 1496              		.loc 1 137 56 is_stmt 1 view -0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 138:./fs/pipefs/pipefs.c ****     {
 1500              		.loc 1 138 5 view .LVU481
 138:./fs/pipefs/pipefs.c ****     {
 1501              		.loc 1 138 7 is_stmt 0 view .LVU482
 1502 0000 48B1     		cbz	r0, .L92
 137:./fs/pipefs/pipefs.c ****     if(node != NULL)
 1503              		.loc 1 137 56 view .LVU483
 1504 0002 10B5     		push	{r4, lr}
 1505              	.LCFI15:
 1506              		.cfi_def_cfa_offset 8
 1507              		.cfi_offset 4, -8
 1508              		.cfi_offset 14, -4
 1509 0004 0446     		mov	r4, r0
 140:./fs/pipefs/pipefs.c ****             kfree(node->buf);
 1510              		.loc 1 140 9 is_stmt 1 view .LVU484
 140:./fs/pipefs/pipefs.c ****             kfree(node->buf);
 1511              		.loc 1 140 16 is_stmt 0 view .LVU485
 1512 0006 806B     		ldr	r0, [r0, #56]
 1513              	.LVL132:
 140:./fs/pipefs/pipefs.c ****             kfree(node->buf);
 1514              		.loc 1 140 11 view .LVU486
 1515 0008 08B1     		cbz	r0, .L90
 141:./fs/pipefs/pipefs.c ****         }
 1516              		.loc 1 141 13 is_stmt 1 view .LVU487
 1517              	.LVL133:
 1518              	.LBB273:
 1519              	.LBI273:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1520              		.loc 4 383 20 view .LVU488
 1521              	.LBB274:
ARM GAS  /tmp/ccZILEbd.s 			page 83


 1522              		.loc 4 384 2 view .LVU489
 1523 000a FFF7FEFF 		bl	__sfree__
 1524              	.LVL134:
 1525              	.L90:
 1526              		.loc 4 384 2 is_stmt 0 view .LVU490
 1527              	.LBE274:
 1528              	.LBE273:
 143:./fs/pipefs/pipefs.c ****     }
 1529              		.loc 1 143 9 is_stmt 1 view .LVU491
 1530              	.LBB275:
 1531              	.LBI275:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1532              		.loc 4 383 20 view .LVU492
 1533              	.LBB276:
 1534              		.loc 4 384 2 view .LVU493
 1535 000e 2046     		mov	r0, r4
 1536 0010 FFF7FEFF 		bl	__sfree__
 1537              	.LVL135:
 1538              		.loc 4 384 2 is_stmt 0 view .LVU494
 1539              	.LBE276:
 1540              	.LBE275:
 145:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dentry(struct pipefs_inode* parent_dentry_inode,struct p
 1541              		.loc 1 145 1 view .LVU495
 1542 0014 10BD     		pop	{r4, pc}
 1543              	.LVL136:
 1544              	.L92:
 1545              	.LCFI16:
 1546              		.cfi_def_cfa_offset 0
 1547              		.cfi_restore 4
 1548              		.cfi_restore 14
 145:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dentry(struct pipefs_inode* parent_dentry_inode,struct p
 1549              		.loc 1 145 1 view .LVU496
 1550 0016 7047     		bx	lr
 1551              		.cfi_endproc
 1552              	.LFE1042:
 1554              		.section	.text.dentry_put,"ax",%progbits
 1555              		.align	1
 1556              		.syntax unified
 1557              		.thumb
 1558              		.thumb_func
 1560              	dentry_put:
 1561              	.LVL137:
 1562              	.LFB1047:
 201:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return;
 1563              		.loc 1 201 1 is_stmt 1 view -0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 0
 1566              		@ frame_needed = 0, uses_anonymous_args = 0
 202:./fs/pipefs/pipefs.c ****     if(dentry->target_inode != NULL)
 1567              		.loc 1 202 5 view .LVU498
 202:./fs/pipefs/pipefs.c ****     if(dentry->target_inode != NULL)
 1568              		.loc 1 202 7 is_stmt 0 view .LVU499
 1569 0000 61B3     		cbz	r1, .L100
 201:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return;
 1570              		.loc 1 201 1 view .LVU500
 1571 0002 38B5     		push	{r3, r4, r5, lr}
 1572              	.LCFI17:
ARM GAS  /tmp/ccZILEbd.s 			page 84


 1573              		.cfi_def_cfa_offset 16
 1574              		.cfi_offset 3, -16
 1575              		.cfi_offset 4, -12
 1576              		.cfi_offset 5, -8
 1577              		.cfi_offset 14, -4
 1578 0004 0D46     		mov	r5, r1
 203:./fs/pipefs/pipefs.c ****     {
 1579              		.loc 1 203 5 is_stmt 1 view .LVU501
 203:./fs/pipefs/pipefs.c ****     {
 1580              		.loc 1 203 14 is_stmt 0 view .LVU502
 1581 0006 8B68     		ldr	r3, [r1, #8]
 203:./fs/pipefs/pipefs.c ****     {
 1582              		.loc 1 203 7 view .LVU503
 1583 0008 93B1     		cbz	r3, .L97
 205:./fs/pipefs/pipefs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 1584              		.loc 1 205 9 is_stmt 1 view .LVU504
 1585 000a 041D     		adds	r4, r0, #4
 1586 000c 2046     		mov	r0, r4
 1587              	.LVL138:
 205:./fs/pipefs/pipefs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 1588              		.loc 1 205 9 is_stmt 0 view .LVU505
 1589 000e FFF7FEFF 		bl	spin_lock
 1590              	.LVL139:
 206:./fs/pipefs/pipefs.c ****         {
 1591              		.loc 1 206 9 is_stmt 1 view .LVU506
 206:./fs/pipefs/pipefs.c ****         {
 1592              		.loc 1 206 40 is_stmt 0 view .LVU507
 1593 0012 AB68     		ldr	r3, [r5, #8]
 206:./fs/pipefs/pipefs.c ****         {
 1594              		.loc 1 206 13 view .LVU508
 1595 0014 0C33     		adds	r3, r3, #12
 1596              	.LVL140:
 1597              	.LBB277:
 1598              	.LBI277:
 437:./include/linux/atomic/atomic-instrumented.h **** }
 438:./include/linux/atomic/atomic-instrumented.h **** 
 439:./include/linux/atomic/atomic-instrumented.h **** /**
 440:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return() - atomic increment with full ordering
 441:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 442:./include/linux/atomic/atomic-instrumented.h ****  *
 443:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with full ordering.
 444:./include/linux/atomic/atomic-instrumented.h ****  *
 445:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return() there.
 446:./include/linux/atomic/atomic-instrumented.h ****  *
 447:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 448:./include/linux/atomic/atomic-instrumented.h ****  */
 449:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 450:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return(atomic_t *v)
 451:./include/linux/atomic/atomic-instrumented.h **** {
 452:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 453:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 454:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return(v);
 455:./include/linux/atomic/atomic-instrumented.h **** }
 456:./include/linux/atomic/atomic-instrumented.h **** 
 457:./include/linux/atomic/atomic-instrumented.h **** /**
 458:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_acquire() - atomic increment with acquire ordering
 459:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZILEbd.s 			page 85


 460:./include/linux/atomic/atomic-instrumented.h ****  *
 461:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
 462:./include/linux/atomic/atomic-instrumented.h ****  *
 463:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_acquire() there.
 464:./include/linux/atomic/atomic-instrumented.h ****  *
 465:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 466:./include/linux/atomic/atomic-instrumented.h ****  */
 467:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 468:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_acquire(atomic_t *v)
 469:./include/linux/atomic/atomic-instrumented.h **** {
 470:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 471:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_acquire(v);
 472:./include/linux/atomic/atomic-instrumented.h **** }
 473:./include/linux/atomic/atomic-instrumented.h **** 
 474:./include/linux/atomic/atomic-instrumented.h **** /**
 475:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_release() - atomic increment with release ordering
 476:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 477:./include/linux/atomic/atomic-instrumented.h ****  *
 478:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with release ordering.
 479:./include/linux/atomic/atomic-instrumented.h ****  *
 480:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_release() there.
 481:./include/linux/atomic/atomic-instrumented.h ****  *
 482:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 483:./include/linux/atomic/atomic-instrumented.h ****  */
 484:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 485:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_release(atomic_t *v)
 486:./include/linux/atomic/atomic-instrumented.h **** {
 487:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 488:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 489:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_release(v);
 490:./include/linux/atomic/atomic-instrumented.h **** }
 491:./include/linux/atomic/atomic-instrumented.h **** 
 492:./include/linux/atomic/atomic-instrumented.h **** /**
 493:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_relaxed() - atomic increment with relaxed ordering
 494:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 495:./include/linux/atomic/atomic-instrumented.h ****  *
 496:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 497:./include/linux/atomic/atomic-instrumented.h ****  *
 498:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_relaxed() there.
 499:./include/linux/atomic/atomic-instrumented.h ****  *
 500:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 501:./include/linux/atomic/atomic-instrumented.h ****  */
 502:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 503:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_relaxed(atomic_t *v)
 504:./include/linux/atomic/atomic-instrumented.h **** {
 505:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 506:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_relaxed(v);
 507:./include/linux/atomic/atomic-instrumented.h **** }
 508:./include/linux/atomic/atomic-instrumented.h **** 
 509:./include/linux/atomic/atomic-instrumented.h **** /**
 510:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc() - atomic increment with full ordering
 511:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 512:./include/linux/atomic/atomic-instrumented.h ****  *
 513:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with full ordering.
 514:./include/linux/atomic/atomic-instrumented.h ****  *
 515:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc() there.
 516:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 86


 517:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 518:./include/linux/atomic/atomic-instrumented.h ****  */
 519:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 520:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc(atomic_t *v)
 521:./include/linux/atomic/atomic-instrumented.h **** {
 522:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 523:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 524:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc(v);
 525:./include/linux/atomic/atomic-instrumented.h **** }
 526:./include/linux/atomic/atomic-instrumented.h **** 
 527:./include/linux/atomic/atomic-instrumented.h **** /**
 528:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_acquire() - atomic increment with acquire ordering
 529:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 530:./include/linux/atomic/atomic-instrumented.h ****  *
 531:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
 532:./include/linux/atomic/atomic-instrumented.h ****  *
 533:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_acquire() there.
 534:./include/linux/atomic/atomic-instrumented.h ****  *
 535:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 536:./include/linux/atomic/atomic-instrumented.h ****  */
 537:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 538:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_acquire(atomic_t *v)
 539:./include/linux/atomic/atomic-instrumented.h **** {
 540:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 541:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_acquire(v);
 542:./include/linux/atomic/atomic-instrumented.h **** }
 543:./include/linux/atomic/atomic-instrumented.h **** 
 544:./include/linux/atomic/atomic-instrumented.h **** /**
 545:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_release() - atomic increment with release ordering
 546:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 547:./include/linux/atomic/atomic-instrumented.h ****  *
 548:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with release ordering.
 549:./include/linux/atomic/atomic-instrumented.h ****  *
 550:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_release() there.
 551:./include/linux/atomic/atomic-instrumented.h ****  *
 552:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 553:./include/linux/atomic/atomic-instrumented.h ****  */
 554:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 555:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_release(atomic_t *v)
 556:./include/linux/atomic/atomic-instrumented.h **** {
 557:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 558:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 559:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_release(v);
 560:./include/linux/atomic/atomic-instrumented.h **** }
 561:./include/linux/atomic/atomic-instrumented.h **** 
 562:./include/linux/atomic/atomic-instrumented.h **** /**
 563:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_relaxed() - atomic increment with relaxed ordering
 564:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 565:./include/linux/atomic/atomic-instrumented.h ****  *
 566:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 567:./include/linux/atomic/atomic-instrumented.h ****  *
 568:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_relaxed() there.
 569:./include/linux/atomic/atomic-instrumented.h ****  *
 570:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 571:./include/linux/atomic/atomic-instrumented.h ****  */
 572:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 573:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_relaxed(atomic_t *v)
ARM GAS  /tmp/ccZILEbd.s 			page 87


 574:./include/linux/atomic/atomic-instrumented.h **** {
 575:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 576:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_relaxed(v);
 577:./include/linux/atomic/atomic-instrumented.h **** }
 578:./include/linux/atomic/atomic-instrumented.h **** 
 579:./include/linux/atomic/atomic-instrumented.h **** /**
 580:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec() - atomic decrement with relaxed ordering
 581:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 582:./include/linux/atomic/atomic-instrumented.h ****  *
 583:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 584:./include/linux/atomic/atomic-instrumented.h ****  *
 585:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec() there.
 586:./include/linux/atomic/atomic-instrumented.h ****  *
 587:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 588:./include/linux/atomic/atomic-instrumented.h ****  */
 589:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 590:./include/linux/atomic/atomic-instrumented.h **** atomic_dec(atomic_t *v)
 591:./include/linux/atomic/atomic-instrumented.h **** {
 592:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 593:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_dec(v);
 594:./include/linux/atomic/atomic-instrumented.h **** }
 595:./include/linux/atomic/atomic-instrumented.h **** 
 596:./include/linux/atomic/atomic-instrumented.h **** /**
 597:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return() - atomic decrement with full ordering
 598:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 599:./include/linux/atomic/atomic-instrumented.h ****  *
 600:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
 601:./include/linux/atomic/atomic-instrumented.h ****  *
 602:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return() there.
 603:./include/linux/atomic/atomic-instrumented.h ****  *
 604:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 605:./include/linux/atomic/atomic-instrumented.h ****  */
 606:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 607:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return(atomic_t *v)
 608:./include/linux/atomic/atomic-instrumented.h **** {
 609:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 610:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 611:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return(v);
 612:./include/linux/atomic/atomic-instrumented.h **** }
 613:./include/linux/atomic/atomic-instrumented.h **** 
 614:./include/linux/atomic/atomic-instrumented.h **** /**
 615:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_acquire() - atomic decrement with acquire ordering
 616:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 617:./include/linux/atomic/atomic-instrumented.h ****  *
 618:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
 619:./include/linux/atomic/atomic-instrumented.h ****  *
 620:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_acquire() there.
 621:./include/linux/atomic/atomic-instrumented.h ****  *
 622:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 623:./include/linux/atomic/atomic-instrumented.h ****  */
 624:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 625:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_acquire(atomic_t *v)
 626:./include/linux/atomic/atomic-instrumented.h **** {
 627:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 628:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_acquire(v);
 629:./include/linux/atomic/atomic-instrumented.h **** }
 630:./include/linux/atomic/atomic-instrumented.h **** 
ARM GAS  /tmp/ccZILEbd.s 			page 88


 631:./include/linux/atomic/atomic-instrumented.h **** /**
 632:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_release() - atomic decrement with release ordering
 633:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 634:./include/linux/atomic/atomic-instrumented.h ****  *
 635:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with release ordering.
 636:./include/linux/atomic/atomic-instrumented.h ****  *
 637:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_release() there.
 638:./include/linux/atomic/atomic-instrumented.h ****  *
 639:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 640:./include/linux/atomic/atomic-instrumented.h ****  */
 641:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 642:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_release(atomic_t *v)
 643:./include/linux/atomic/atomic-instrumented.h **** {
 644:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 645:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 646:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_release(v);
 647:./include/linux/atomic/atomic-instrumented.h **** }
 648:./include/linux/atomic/atomic-instrumented.h **** 
 649:./include/linux/atomic/atomic-instrumented.h **** /**
 650:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_relaxed() - atomic decrement with relaxed ordering
 651:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 652:./include/linux/atomic/atomic-instrumented.h ****  *
 653:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 654:./include/linux/atomic/atomic-instrumented.h ****  *
 655:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_relaxed() there.
 656:./include/linux/atomic/atomic-instrumented.h ****  *
 657:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 658:./include/linux/atomic/atomic-instrumented.h ****  */
 659:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 660:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_relaxed(atomic_t *v)
 661:./include/linux/atomic/atomic-instrumented.h **** {
 662:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 663:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_relaxed(v);
 664:./include/linux/atomic/atomic-instrumented.h **** }
 665:./include/linux/atomic/atomic-instrumented.h **** 
 666:./include/linux/atomic/atomic-instrumented.h **** /**
 667:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec() - atomic decrement with full ordering
 668:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 669:./include/linux/atomic/atomic-instrumented.h ****  *
 670:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
 671:./include/linux/atomic/atomic-instrumented.h ****  *
 672:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec() there.
 673:./include/linux/atomic/atomic-instrumented.h ****  *
 674:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 675:./include/linux/atomic/atomic-instrumented.h ****  */
 676:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 677:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec(atomic_t *v)
 678:./include/linux/atomic/atomic-instrumented.h **** {
 679:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 680:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 681:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec(v);
 682:./include/linux/atomic/atomic-instrumented.h **** }
 683:./include/linux/atomic/atomic-instrumented.h **** 
 684:./include/linux/atomic/atomic-instrumented.h **** /**
 685:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_acquire() - atomic decrement with acquire ordering
 686:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 687:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 89


 688:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
 689:./include/linux/atomic/atomic-instrumented.h ****  *
 690:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_acquire() there.
 691:./include/linux/atomic/atomic-instrumented.h ****  *
 692:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 693:./include/linux/atomic/atomic-instrumented.h ****  */
 694:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 695:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_acquire(atomic_t *v)
 696:./include/linux/atomic/atomic-instrumented.h **** {
 697:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 698:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_acquire(v);
 699:./include/linux/atomic/atomic-instrumented.h **** }
 700:./include/linux/atomic/atomic-instrumented.h **** 
 701:./include/linux/atomic/atomic-instrumented.h **** /**
 702:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_release() - atomic decrement with release ordering
 703:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 704:./include/linux/atomic/atomic-instrumented.h ****  *
 705:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with release ordering.
 706:./include/linux/atomic/atomic-instrumented.h ****  *
 707:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_release() there.
 708:./include/linux/atomic/atomic-instrumented.h ****  *
 709:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 710:./include/linux/atomic/atomic-instrumented.h ****  */
 711:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 712:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_release(atomic_t *v)
 713:./include/linux/atomic/atomic-instrumented.h **** {
 714:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 715:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 716:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_release(v);
 717:./include/linux/atomic/atomic-instrumented.h **** }
 718:./include/linux/atomic/atomic-instrumented.h **** 
 719:./include/linux/atomic/atomic-instrumented.h **** /**
 720:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_relaxed() - atomic decrement with relaxed ordering
 721:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 722:./include/linux/atomic/atomic-instrumented.h ****  *
 723:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 724:./include/linux/atomic/atomic-instrumented.h ****  *
 725:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_relaxed() there.
 726:./include/linux/atomic/atomic-instrumented.h ****  *
 727:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 728:./include/linux/atomic/atomic-instrumented.h ****  */
 729:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 730:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_relaxed(atomic_t *v)
 731:./include/linux/atomic/atomic-instrumented.h **** {
 732:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 733:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_relaxed(v);
 734:./include/linux/atomic/atomic-instrumented.h **** }
 735:./include/linux/atomic/atomic-instrumented.h **** 
 736:./include/linux/atomic/atomic-instrumented.h **** /**
 737:./include/linux/atomic/atomic-instrumented.h ****  * atomic_and() - atomic bitwise AND with relaxed ordering
 738:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 739:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 740:./include/linux/atomic/atomic-instrumented.h ****  *
 741:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
 742:./include/linux/atomic/atomic-instrumented.h ****  *
 743:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_and() there.
 744:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 90


 745:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 746:./include/linux/atomic/atomic-instrumented.h ****  */
 747:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 748:./include/linux/atomic/atomic-instrumented.h **** atomic_and(int i, atomic_t *v)
 749:./include/linux/atomic/atomic-instrumented.h **** {
 750:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 751:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_and(i, v);
 752:./include/linux/atomic/atomic-instrumented.h **** }
 753:./include/linux/atomic/atomic-instrumented.h **** 
 754:./include/linux/atomic/atomic-instrumented.h **** /**
 755:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and() - atomic bitwise AND with full ordering
 756:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 757:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 758:./include/linux/atomic/atomic-instrumented.h ****  *
 759:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with full ordering.
 760:./include/linux/atomic/atomic-instrumented.h ****  *
 761:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and() there.
 762:./include/linux/atomic/atomic-instrumented.h ****  *
 763:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 764:./include/linux/atomic/atomic-instrumented.h ****  */
 765:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 766:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and(int i, atomic_t *v)
 767:./include/linux/atomic/atomic-instrumented.h **** {
 768:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 769:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 770:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and(i, v);
 771:./include/linux/atomic/atomic-instrumented.h **** }
 772:./include/linux/atomic/atomic-instrumented.h **** 
 773:./include/linux/atomic/atomic-instrumented.h **** /**
 774:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_acquire() - atomic bitwise AND with acquire ordering
 775:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 776:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 777:./include/linux/atomic/atomic-instrumented.h ****  *
 778:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with acquire ordering.
 779:./include/linux/atomic/atomic-instrumented.h ****  *
 780:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_acquire() there.
 781:./include/linux/atomic/atomic-instrumented.h ****  *
 782:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 783:./include/linux/atomic/atomic-instrumented.h ****  */
 784:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 785:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_acquire(int i, atomic_t *v)
 786:./include/linux/atomic/atomic-instrumented.h **** {
 787:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 788:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_acquire(i, v);
 789:./include/linux/atomic/atomic-instrumented.h **** }
 790:./include/linux/atomic/atomic-instrumented.h **** 
 791:./include/linux/atomic/atomic-instrumented.h **** /**
 792:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_release() - atomic bitwise AND with release ordering
 793:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 794:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 795:./include/linux/atomic/atomic-instrumented.h ****  *
 796:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with release ordering.
 797:./include/linux/atomic/atomic-instrumented.h ****  *
 798:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_release() there.
 799:./include/linux/atomic/atomic-instrumented.h ****  *
 800:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 801:./include/linux/atomic/atomic-instrumented.h ****  */
ARM GAS  /tmp/ccZILEbd.s 			page 91


 802:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 803:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_release(int i, atomic_t *v)
 804:./include/linux/atomic/atomic-instrumented.h **** {
 805:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 806:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 807:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_release(i, v);
 808:./include/linux/atomic/atomic-instrumented.h **** }
 809:./include/linux/atomic/atomic-instrumented.h **** 
 810:./include/linux/atomic/atomic-instrumented.h **** /**
 811:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_relaxed() - atomic bitwise AND with relaxed ordering
 812:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 813:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 814:./include/linux/atomic/atomic-instrumented.h ****  *
 815:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
 816:./include/linux/atomic/atomic-instrumented.h ****  *
 817:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_relaxed() there.
 818:./include/linux/atomic/atomic-instrumented.h ****  *
 819:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 820:./include/linux/atomic/atomic-instrumented.h ****  */
 821:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 822:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_relaxed(int i, atomic_t *v)
 823:./include/linux/atomic/atomic-instrumented.h **** {
 824:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 825:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_relaxed(i, v);
 826:./include/linux/atomic/atomic-instrumented.h **** }
 827:./include/linux/atomic/atomic-instrumented.h **** 
 828:./include/linux/atomic/atomic-instrumented.h **** /**
 829:./include/linux/atomic/atomic-instrumented.h ****  * atomic_andnot() - atomic bitwise AND NOT with relaxed ordering
 830:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 831:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 832:./include/linux/atomic/atomic-instrumented.h ****  *
 833:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
 834:./include/linux/atomic/atomic-instrumented.h ****  *
 835:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_andnot() there.
 836:./include/linux/atomic/atomic-instrumented.h ****  *
 837:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 838:./include/linux/atomic/atomic-instrumented.h ****  */
 839:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 840:./include/linux/atomic/atomic-instrumented.h **** atomic_andnot(int i, atomic_t *v)
 841:./include/linux/atomic/atomic-instrumented.h **** {
 842:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 843:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_andnot(i, v);
 844:./include/linux/atomic/atomic-instrumented.h **** }
 845:./include/linux/atomic/atomic-instrumented.h **** 
 846:./include/linux/atomic/atomic-instrumented.h **** /**
 847:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot() - atomic bitwise AND NOT with full ordering
 848:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 849:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 850:./include/linux/atomic/atomic-instrumented.h ****  *
 851:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with full ordering.
 852:./include/linux/atomic/atomic-instrumented.h ****  *
 853:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot() there.
 854:./include/linux/atomic/atomic-instrumented.h ****  *
 855:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 856:./include/linux/atomic/atomic-instrumented.h ****  */
 857:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 858:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot(int i, atomic_t *v)
ARM GAS  /tmp/ccZILEbd.s 			page 92


 859:./include/linux/atomic/atomic-instrumented.h **** {
 860:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 861:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 862:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot(i, v);
 863:./include/linux/atomic/atomic-instrumented.h **** }
 864:./include/linux/atomic/atomic-instrumented.h **** 
 865:./include/linux/atomic/atomic-instrumented.h **** /**
 866:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_acquire() - atomic bitwise AND NOT with acquire ordering
 867:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 868:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 869:./include/linux/atomic/atomic-instrumented.h ****  *
 870:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with acquire ordering.
 871:./include/linux/atomic/atomic-instrumented.h ****  *
 872:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_acquire() there.
 873:./include/linux/atomic/atomic-instrumented.h ****  *
 874:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 875:./include/linux/atomic/atomic-instrumented.h ****  */
 876:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 877:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_acquire(int i, atomic_t *v)
 878:./include/linux/atomic/atomic-instrumented.h **** {
 879:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 880:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_acquire(i, v);
 881:./include/linux/atomic/atomic-instrumented.h **** }
 882:./include/linux/atomic/atomic-instrumented.h **** 
 883:./include/linux/atomic/atomic-instrumented.h **** /**
 884:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_release() - atomic bitwise AND NOT with release ordering
 885:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 886:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 887:./include/linux/atomic/atomic-instrumented.h ****  *
 888:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with release ordering.
 889:./include/linux/atomic/atomic-instrumented.h ****  *
 890:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_release() there.
 891:./include/linux/atomic/atomic-instrumented.h ****  *
 892:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 893:./include/linux/atomic/atomic-instrumented.h ****  */
 894:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 895:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_release(int i, atomic_t *v)
 896:./include/linux/atomic/atomic-instrumented.h **** {
 897:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 898:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 899:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_release(i, v);
 900:./include/linux/atomic/atomic-instrumented.h **** }
 901:./include/linux/atomic/atomic-instrumented.h **** 
 902:./include/linux/atomic/atomic-instrumented.h **** /**
 903:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_relaxed() - atomic bitwise AND NOT with relaxed ordering
 904:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 905:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 906:./include/linux/atomic/atomic-instrumented.h ****  *
 907:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
 908:./include/linux/atomic/atomic-instrumented.h ****  *
 909:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_relaxed() there.
 910:./include/linux/atomic/atomic-instrumented.h ****  *
 911:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 912:./include/linux/atomic/atomic-instrumented.h ****  */
 913:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 914:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_relaxed(int i, atomic_t *v)
 915:./include/linux/atomic/atomic-instrumented.h **** {
ARM GAS  /tmp/ccZILEbd.s 			page 93


 916:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 917:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_relaxed(i, v);
 918:./include/linux/atomic/atomic-instrumented.h **** }
 919:./include/linux/atomic/atomic-instrumented.h **** 
 920:./include/linux/atomic/atomic-instrumented.h **** /**
 921:./include/linux/atomic/atomic-instrumented.h ****  * atomic_or() - atomic bitwise OR with relaxed ordering
 922:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 923:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 924:./include/linux/atomic/atomic-instrumented.h ****  *
 925:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
 926:./include/linux/atomic/atomic-instrumented.h ****  *
 927:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_or() there.
 928:./include/linux/atomic/atomic-instrumented.h ****  *
 929:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 930:./include/linux/atomic/atomic-instrumented.h ****  */
 931:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 932:./include/linux/atomic/atomic-instrumented.h **** atomic_or(int i, atomic_t *v)
 933:./include/linux/atomic/atomic-instrumented.h **** {
 934:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 935:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_or(i, v);
 936:./include/linux/atomic/atomic-instrumented.h **** }
 937:./include/linux/atomic/atomic-instrumented.h **** 
 938:./include/linux/atomic/atomic-instrumented.h **** /**
 939:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or() - atomic bitwise OR with full ordering
 940:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 941:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 942:./include/linux/atomic/atomic-instrumented.h ****  *
 943:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with full ordering.
 944:./include/linux/atomic/atomic-instrumented.h ****  *
 945:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or() there.
 946:./include/linux/atomic/atomic-instrumented.h ****  *
 947:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 948:./include/linux/atomic/atomic-instrumented.h ****  */
 949:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 950:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or(int i, atomic_t *v)
 951:./include/linux/atomic/atomic-instrumented.h **** {
 952:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 953:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 954:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or(i, v);
 955:./include/linux/atomic/atomic-instrumented.h **** }
 956:./include/linux/atomic/atomic-instrumented.h **** 
 957:./include/linux/atomic/atomic-instrumented.h **** /**
 958:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_acquire() - atomic bitwise OR with acquire ordering
 959:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 960:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 961:./include/linux/atomic/atomic-instrumented.h ****  *
 962:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with acquire ordering.
 963:./include/linux/atomic/atomic-instrumented.h ****  *
 964:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_acquire() there.
 965:./include/linux/atomic/atomic-instrumented.h ****  *
 966:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 967:./include/linux/atomic/atomic-instrumented.h ****  */
 968:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 969:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_acquire(int i, atomic_t *v)
 970:./include/linux/atomic/atomic-instrumented.h **** {
 971:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 972:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_acquire(i, v);
ARM GAS  /tmp/ccZILEbd.s 			page 94


 973:./include/linux/atomic/atomic-instrumented.h **** }
 974:./include/linux/atomic/atomic-instrumented.h **** 
 975:./include/linux/atomic/atomic-instrumented.h **** /**
 976:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_release() - atomic bitwise OR with release ordering
 977:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 978:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 979:./include/linux/atomic/atomic-instrumented.h ****  *
 980:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with release ordering.
 981:./include/linux/atomic/atomic-instrumented.h ****  *
 982:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_release() there.
 983:./include/linux/atomic/atomic-instrumented.h ****  *
 984:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 985:./include/linux/atomic/atomic-instrumented.h ****  */
 986:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 987:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_release(int i, atomic_t *v)
 988:./include/linux/atomic/atomic-instrumented.h **** {
 989:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 990:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 991:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_release(i, v);
 992:./include/linux/atomic/atomic-instrumented.h **** }
 993:./include/linux/atomic/atomic-instrumented.h **** 
 994:./include/linux/atomic/atomic-instrumented.h **** /**
 995:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_relaxed() - atomic bitwise OR with relaxed ordering
 996:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 997:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 998:./include/linux/atomic/atomic-instrumented.h ****  *
 999:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1000:./include/linux/atomic/atomic-instrumented.h ****  *
1001:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_relaxed() there.
1002:./include/linux/atomic/atomic-instrumented.h ****  *
1003:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1004:./include/linux/atomic/atomic-instrumented.h ****  */
1005:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1006:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_relaxed(int i, atomic_t *v)
1007:./include/linux/atomic/atomic-instrumented.h **** {
1008:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1009:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_relaxed(i, v);
1010:./include/linux/atomic/atomic-instrumented.h **** }
1011:./include/linux/atomic/atomic-instrumented.h **** 
1012:./include/linux/atomic/atomic-instrumented.h **** /**
1013:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xor() - atomic bitwise XOR with relaxed ordering
1014:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1015:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1016:./include/linux/atomic/atomic-instrumented.h ****  *
1017:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1018:./include/linux/atomic/atomic-instrumented.h ****  *
1019:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xor() there.
1020:./include/linux/atomic/atomic-instrumented.h ****  *
1021:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
1022:./include/linux/atomic/atomic-instrumented.h ****  */
1023:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
1024:./include/linux/atomic/atomic-instrumented.h **** atomic_xor(int i, atomic_t *v)
1025:./include/linux/atomic/atomic-instrumented.h **** {
1026:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1027:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_xor(i, v);
1028:./include/linux/atomic/atomic-instrumented.h **** }
1029:./include/linux/atomic/atomic-instrumented.h **** 
ARM GAS  /tmp/ccZILEbd.s 			page 95


1030:./include/linux/atomic/atomic-instrumented.h **** /**
1031:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor() - atomic bitwise XOR with full ordering
1032:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1033:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1034:./include/linux/atomic/atomic-instrumented.h ****  *
1035:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with full ordering.
1036:./include/linux/atomic/atomic-instrumented.h ****  *
1037:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor() there.
1038:./include/linux/atomic/atomic-instrumented.h ****  *
1039:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1040:./include/linux/atomic/atomic-instrumented.h ****  */
1041:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1042:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor(int i, atomic_t *v)
1043:./include/linux/atomic/atomic-instrumented.h **** {
1044:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1045:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1046:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor(i, v);
1047:./include/linux/atomic/atomic-instrumented.h **** }
1048:./include/linux/atomic/atomic-instrumented.h **** 
1049:./include/linux/atomic/atomic-instrumented.h **** /**
1050:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_acquire() - atomic bitwise XOR with acquire ordering
1051:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1052:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1053:./include/linux/atomic/atomic-instrumented.h ****  *
1054:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with acquire ordering.
1055:./include/linux/atomic/atomic-instrumented.h ****  *
1056:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_acquire() there.
1057:./include/linux/atomic/atomic-instrumented.h ****  *
1058:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1059:./include/linux/atomic/atomic-instrumented.h ****  */
1060:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1061:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_acquire(int i, atomic_t *v)
1062:./include/linux/atomic/atomic-instrumented.h **** {
1063:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1064:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_acquire(i, v);
1065:./include/linux/atomic/atomic-instrumented.h **** }
1066:./include/linux/atomic/atomic-instrumented.h **** 
1067:./include/linux/atomic/atomic-instrumented.h **** /**
1068:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_release() - atomic bitwise XOR with release ordering
1069:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1070:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1071:./include/linux/atomic/atomic-instrumented.h ****  *
1072:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with release ordering.
1073:./include/linux/atomic/atomic-instrumented.h ****  *
1074:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_release() there.
1075:./include/linux/atomic/atomic-instrumented.h ****  *
1076:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1077:./include/linux/atomic/atomic-instrumented.h ****  */
1078:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1079:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_release(int i, atomic_t *v)
1080:./include/linux/atomic/atomic-instrumented.h **** {
1081:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1082:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1083:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_release(i, v);
1084:./include/linux/atomic/atomic-instrumented.h **** }
1085:./include/linux/atomic/atomic-instrumented.h **** 
1086:./include/linux/atomic/atomic-instrumented.h **** /**
ARM GAS  /tmp/ccZILEbd.s 			page 96


1087:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_relaxed() - atomic bitwise XOR with relaxed ordering
1088:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1089:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1090:./include/linux/atomic/atomic-instrumented.h ****  *
1091:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1092:./include/linux/atomic/atomic-instrumented.h ****  *
1093:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_relaxed() there.
1094:./include/linux/atomic/atomic-instrumented.h ****  *
1095:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1096:./include/linux/atomic/atomic-instrumented.h ****  */
1097:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1098:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_relaxed(int i, atomic_t *v)
1099:./include/linux/atomic/atomic-instrumented.h **** {
1100:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1101:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_relaxed(i, v);
1102:./include/linux/atomic/atomic-instrumented.h **** }
1103:./include/linux/atomic/atomic-instrumented.h **** 
1104:./include/linux/atomic/atomic-instrumented.h **** /**
1105:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg() - atomic exchange with full ordering
1106:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1107:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1108:./include/linux/atomic/atomic-instrumented.h ****  *
1109:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with full ordering.
1110:./include/linux/atomic/atomic-instrumented.h ****  *
1111:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg() there.
1112:./include/linux/atomic/atomic-instrumented.h ****  *
1113:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1114:./include/linux/atomic/atomic-instrumented.h ****  */
1115:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1116:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg(atomic_t *v, int new)
1117:./include/linux/atomic/atomic-instrumented.h **** {
1118:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1119:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1120:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg(v, new);
1121:./include/linux/atomic/atomic-instrumented.h **** }
1122:./include/linux/atomic/atomic-instrumented.h **** 
1123:./include/linux/atomic/atomic-instrumented.h **** /**
1124:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_acquire() - atomic exchange with acquire ordering
1125:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1126:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1127:./include/linux/atomic/atomic-instrumented.h ****  *
1128:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with acquire ordering.
1129:./include/linux/atomic/atomic-instrumented.h ****  *
1130:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_acquire() there.
1131:./include/linux/atomic/atomic-instrumented.h ****  *
1132:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1133:./include/linux/atomic/atomic-instrumented.h ****  */
1134:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1135:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg_acquire(atomic_t *v, int new)
1136:./include/linux/atomic/atomic-instrumented.h **** {
1137:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1138:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_acquire(v, new);
1139:./include/linux/atomic/atomic-instrumented.h **** }
1140:./include/linux/atomic/atomic-instrumented.h **** 
1141:./include/linux/atomic/atomic-instrumented.h **** /**
1142:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_release() - atomic exchange with release ordering
1143:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZILEbd.s 			page 97


1144:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1145:./include/linux/atomic/atomic-instrumented.h ****  *
1146:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with release ordering.
1147:./include/linux/atomic/atomic-instrumented.h ****  *
1148:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_release() there.
1149:./include/linux/atomic/atomic-instrumented.h ****  *
1150:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1151:./include/linux/atomic/atomic-instrumented.h ****  */
1152:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1153:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg_release(atomic_t *v, int new)
1154:./include/linux/atomic/atomic-instrumented.h **** {
1155:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1156:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1157:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_release(v, new);
1158:./include/linux/atomic/atomic-instrumented.h **** }
1159:./include/linux/atomic/atomic-instrumented.h **** 
1160:./include/linux/atomic/atomic-instrumented.h **** /**
1161:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_relaxed() - atomic exchange with relaxed ordering
1162:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1163:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1164:./include/linux/atomic/atomic-instrumented.h ****  *
1165:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with relaxed ordering.
1166:./include/linux/atomic/atomic-instrumented.h ****  *
1167:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_relaxed() there.
1168:./include/linux/atomic/atomic-instrumented.h ****  *
1169:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1170:./include/linux/atomic/atomic-instrumented.h ****  */
1171:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1172:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg_relaxed(atomic_t *v, int new)
1173:./include/linux/atomic/atomic-instrumented.h **** {
1174:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1175:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_relaxed(v, new);
1176:./include/linux/atomic/atomic-instrumented.h **** }
1177:./include/linux/atomic/atomic-instrumented.h **** 
1178:./include/linux/atomic/atomic-instrumented.h **** /**
1179:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg() - atomic compare and exchange with full ordering
1180:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1181:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1182:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1183:./include/linux/atomic/atomic-instrumented.h ****  *
1184:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
1185:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1186:./include/linux/atomic/atomic-instrumented.h ****  *
1187:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg() there.
1188:./include/linux/atomic/atomic-instrumented.h ****  *
1189:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1190:./include/linux/atomic/atomic-instrumented.h ****  */
1191:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1192:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg(atomic_t *v, int old, int new)
1193:./include/linux/atomic/atomic-instrumented.h **** {
1194:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1195:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1196:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg(v, old, new);
1197:./include/linux/atomic/atomic-instrumented.h **** }
1198:./include/linux/atomic/atomic-instrumented.h **** 
1199:./include/linux/atomic/atomic-instrumented.h **** /**
1200:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
ARM GAS  /tmp/ccZILEbd.s 			page 98


1201:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1202:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1203:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1204:./include/linux/atomic/atomic-instrumented.h ****  *
1205:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
1206:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1207:./include/linux/atomic/atomic-instrumented.h ****  *
1208:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_acquire() there.
1209:./include/linux/atomic/atomic-instrumented.h ****  *
1210:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1211:./include/linux/atomic/atomic-instrumented.h ****  */
1212:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1213:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
1214:./include/linux/atomic/atomic-instrumented.h **** {
1215:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1216:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_acquire(v, old, new);
1217:./include/linux/atomic/atomic-instrumented.h **** }
1218:./include/linux/atomic/atomic-instrumented.h **** 
1219:./include/linux/atomic/atomic-instrumented.h **** /**
1220:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_release() - atomic compare and exchange with release ordering
1221:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1222:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1223:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1224:./include/linux/atomic/atomic-instrumented.h ****  *
1225:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
1226:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1227:./include/linux/atomic/atomic-instrumented.h ****  *
1228:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_release() there.
1229:./include/linux/atomic/atomic-instrumented.h ****  *
1230:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1231:./include/linux/atomic/atomic-instrumented.h ****  */
1232:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1233:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_release(atomic_t *v, int old, int new)
1234:./include/linux/atomic/atomic-instrumented.h **** {
1235:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1236:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1237:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_release(v, old, new);
1238:./include/linux/atomic/atomic-instrumented.h **** }
1239:./include/linux/atomic/atomic-instrumented.h **** 
1240:./include/linux/atomic/atomic-instrumented.h **** /**
1241:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
1242:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1243:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1244:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1245:./include/linux/atomic/atomic-instrumented.h ****  *
1246:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
1247:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1248:./include/linux/atomic/atomic-instrumented.h ****  *
1249:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_relaxed() there.
1250:./include/linux/atomic/atomic-instrumented.h ****  *
1251:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1252:./include/linux/atomic/atomic-instrumented.h ****  */
1253:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1254:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
1255:./include/linux/atomic/atomic-instrumented.h **** {
1256:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1257:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_relaxed(v, old, new);
ARM GAS  /tmp/ccZILEbd.s 			page 99


1258:./include/linux/atomic/atomic-instrumented.h **** }
1259:./include/linux/atomic/atomic-instrumented.h **** 
1260:./include/linux/atomic/atomic-instrumented.h **** /**
1261:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg() - atomic compare and exchange with full ordering
1262:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1263:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1264:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1265:./include/linux/atomic/atomic-instrumented.h ****  *
1266:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
1267:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1268:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1269:./include/linux/atomic/atomic-instrumented.h ****  *
1270:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg() there.
1271:./include/linux/atomic/atomic-instrumented.h ****  *
1272:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1273:./include/linux/atomic/atomic-instrumented.h ****  */
1274:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1275:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg(atomic_t *v, int *old, int new)
1276:./include/linux/atomic/atomic-instrumented.h **** {
1277:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1278:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1279:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1280:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg(v, old, new);
1281:./include/linux/atomic/atomic-instrumented.h **** }
1282:./include/linux/atomic/atomic-instrumented.h **** 
1283:./include/linux/atomic/atomic-instrumented.h **** /**
1284:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
1285:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1286:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1287:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1288:./include/linux/atomic/atomic-instrumented.h ****  *
1289:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
1290:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1291:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1292:./include/linux/atomic/atomic-instrumented.h ****  *
1293:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_acquire() there.
1294:./include/linux/atomic/atomic-instrumented.h ****  *
1295:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1296:./include/linux/atomic/atomic-instrumented.h ****  */
1297:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1298:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
1299:./include/linux/atomic/atomic-instrumented.h **** {
1300:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1301:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1302:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_acquire(v, old, new);
1303:./include/linux/atomic/atomic-instrumented.h **** }
1304:./include/linux/atomic/atomic-instrumented.h **** 
1305:./include/linux/atomic/atomic-instrumented.h **** /**
1306:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_release() - atomic compare and exchange with release ordering
1307:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1308:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1309:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1310:./include/linux/atomic/atomic-instrumented.h ****  *
1311:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
1312:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1313:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1314:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 100


1315:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_release() there.
1316:./include/linux/atomic/atomic-instrumented.h ****  *
1317:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1318:./include/linux/atomic/atomic-instrumented.h ****  */
1319:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1320:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
1321:./include/linux/atomic/atomic-instrumented.h **** {
1322:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1323:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1324:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1325:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_release(v, old, new);
1326:./include/linux/atomic/atomic-instrumented.h **** }
1327:./include/linux/atomic/atomic-instrumented.h **** 
1328:./include/linux/atomic/atomic-instrumented.h **** /**
1329:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
1330:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1331:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1332:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1333:./include/linux/atomic/atomic-instrumented.h ****  *
1334:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
1335:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1336:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1337:./include/linux/atomic/atomic-instrumented.h ****  *
1338:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_relaxed() there.
1339:./include/linux/atomic/atomic-instrumented.h ****  *
1340:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1341:./include/linux/atomic/atomic-instrumented.h ****  */
1342:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1343:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
1344:./include/linux/atomic/atomic-instrumented.h **** {
1345:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1346:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1347:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_relaxed(v, old, new);
1348:./include/linux/atomic/atomic-instrumented.h **** }
1349:./include/linux/atomic/atomic-instrumented.h **** 
1350:./include/linux/atomic/atomic-instrumented.h **** /**
1351:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_and_test() - atomic subtract and test if zero with full ordering
1352:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
1353:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1354:./include/linux/atomic/atomic-instrumented.h ****  *
1355:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
1356:./include/linux/atomic/atomic-instrumented.h ****  *
1357:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_and_test() there.
1358:./include/linux/atomic/atomic-instrumented.h ****  *
1359:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
1360:./include/linux/atomic/atomic-instrumented.h ****  */
1361:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1362:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_and_test(int i, atomic_t *v)
1363:./include/linux/atomic/atomic-instrumented.h **** {
1364:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1365:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1366:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_and_test(i, v);
1367:./include/linux/atomic/atomic-instrumented.h **** }
1368:./include/linux/atomic/atomic-instrumented.h **** 
1369:./include/linux/atomic/atomic-instrumented.h **** /**
1370:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_and_test() - atomic decrement and test if zero with full ordering
1371:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZILEbd.s 			page 101


1372:./include/linux/atomic/atomic-instrumented.h ****  *
1373:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1374:./include/linux/atomic/atomic-instrumented.h ****  *
1375:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_and_test() there.
1376:./include/linux/atomic/atomic-instrumented.h ****  *
1377:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
1378:./include/linux/atomic/atomic-instrumented.h ****  */
1379:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1380:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_and_test(atomic_t *v)
 1599              		.loc 5 1380 1 is_stmt 1 view .LVU509
1381:./include/linux/atomic/atomic-instrumented.h **** {
1382:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 1600              		.loc 5 1382 2 view .LVU510
 1601              		.loc 5 1382 2 view .LVU511
 1602              		.loc 5 1382 2 view .LVU512
1383:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 1603              		.loc 5 1383 2 view .LVU513
1384:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_and_test(v);
 1604              		.loc 5 1384 2 view .LVU514
 1605              	.LBB278:
 1606              	.LBI278:
1005:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1006:./include/linux/atomic/atomic-arch-fallback.h **** }
1007:./include/linux/atomic/atomic-arch-fallback.h **** 
1008:./include/linux/atomic/atomic-arch-fallback.h **** /**
1009:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return() - atomic increment with full ordering
1010:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1011:./include/linux/atomic/atomic-arch-fallback.h ****  *
1012:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with full ordering.
1013:./include/linux/atomic/atomic-arch-fallback.h ****  *
1014:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return() elsewhere.
1015:./include/linux/atomic/atomic-arch-fallback.h ****  *
1016:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1017:./include/linux/atomic/atomic-arch-fallback.h ****  */
1018:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1019:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return(atomic_t *v)
1020:./include/linux/atomic/atomic-arch-fallback.h **** {
1021:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return)
1022:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1023:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1024:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1025:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1026:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_inc_return_relaxed(v);
1027:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1028:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1029:./include/linux/atomic/atomic-arch-fallback.h **** #else
1030:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return(1, v);
1031:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1032:./include/linux/atomic/atomic-arch-fallback.h **** }
1033:./include/linux/atomic/atomic-arch-fallback.h **** 
1034:./include/linux/atomic/atomic-arch-fallback.h **** /**
1035:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_acquire() - atomic increment with acquire ordering
1036:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1037:./include/linux/atomic/atomic-arch-fallback.h ****  *
1038:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
1039:./include/linux/atomic/atomic-arch-fallback.h ****  *
1040:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_acquire() elsewhere.
ARM GAS  /tmp/ccZILEbd.s 			page 102


1041:./include/linux/atomic/atomic-arch-fallback.h ****  *
1042:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1043:./include/linux/atomic/atomic-arch-fallback.h ****  */
1044:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1045:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_acquire(atomic_t *v)
1046:./include/linux/atomic/atomic-arch-fallback.h **** {
1047:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_acquire)
1048:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_acquire(v);
1049:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1050:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_inc_return_relaxed(v);
1051:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1052:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1053:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1054:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1055:./include/linux/atomic/atomic-arch-fallback.h **** #else
1056:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_acquire(1, v);
1057:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1058:./include/linux/atomic/atomic-arch-fallback.h **** }
1059:./include/linux/atomic/atomic-arch-fallback.h **** 
1060:./include/linux/atomic/atomic-arch-fallback.h **** /**
1061:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_release() - atomic increment with release ordering
1062:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1063:./include/linux/atomic/atomic-arch-fallback.h ****  *
1064:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with release ordering.
1065:./include/linux/atomic/atomic-arch-fallback.h ****  *
1066:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_release() elsewhere.
1067:./include/linux/atomic/atomic-arch-fallback.h ****  *
1068:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1069:./include/linux/atomic/atomic-arch-fallback.h ****  */
1070:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1071:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_release(atomic_t *v)
1072:./include/linux/atomic/atomic-arch-fallback.h **** {
1073:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_release)
1074:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_release(v);
1075:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1076:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1077:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_relaxed(v);
1078:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1079:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1080:./include/linux/atomic/atomic-arch-fallback.h **** #else
1081:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_release(1, v);
1082:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1083:./include/linux/atomic/atomic-arch-fallback.h **** }
1084:./include/linux/atomic/atomic-arch-fallback.h **** 
1085:./include/linux/atomic/atomic-arch-fallback.h **** /**
1086:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_relaxed() - atomic increment with relaxed ordering
1087:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1088:./include/linux/atomic/atomic-arch-fallback.h ****  *
1089:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
1090:./include/linux/atomic/atomic-arch-fallback.h ****  *
1091:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_relaxed() elsewhere.
1092:./include/linux/atomic/atomic-arch-fallback.h ****  *
1093:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1094:./include/linux/atomic/atomic-arch-fallback.h ****  */
1095:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1096:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_relaxed(atomic_t *v)
1097:./include/linux/atomic/atomic-arch-fallback.h **** {
ARM GAS  /tmp/ccZILEbd.s 			page 103


1098:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_relaxed)
1099:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_relaxed(v);
1100:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1101:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1102:./include/linux/atomic/atomic-arch-fallback.h **** #else
1103:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_relaxed(1, v);
1104:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1105:./include/linux/atomic/atomic-arch-fallback.h **** }
1106:./include/linux/atomic/atomic-arch-fallback.h **** 
1107:./include/linux/atomic/atomic-arch-fallback.h **** /**
1108:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc() - atomic increment with full ordering
1109:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1110:./include/linux/atomic/atomic-arch-fallback.h ****  *
1111:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with full ordering.
1112:./include/linux/atomic/atomic-arch-fallback.h ****  *
1113:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc() elsewhere.
1114:./include/linux/atomic/atomic-arch-fallback.h ****  *
1115:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1116:./include/linux/atomic/atomic-arch-fallback.h ****  */
1117:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1118:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc(atomic_t *v)
1119:./include/linux/atomic/atomic-arch-fallback.h **** {
1120:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc)
1121:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1122:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1123:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1124:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1125:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_inc_relaxed(v);
1126:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1127:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1128:./include/linux/atomic/atomic-arch-fallback.h **** #else
1129:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add(1, v);
1130:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1131:./include/linux/atomic/atomic-arch-fallback.h **** }
1132:./include/linux/atomic/atomic-arch-fallback.h **** 
1133:./include/linux/atomic/atomic-arch-fallback.h **** /**
1134:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_acquire() - atomic increment with acquire ordering
1135:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1136:./include/linux/atomic/atomic-arch-fallback.h ****  *
1137:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
1138:./include/linux/atomic/atomic-arch-fallback.h ****  *
1139:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_acquire() elsewhere.
1140:./include/linux/atomic/atomic-arch-fallback.h ****  *
1141:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1142:./include/linux/atomic/atomic-arch-fallback.h ****  */
1143:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1144:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_acquire(atomic_t *v)
1145:./include/linux/atomic/atomic-arch-fallback.h **** {
1146:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_acquire)
1147:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_acquire(v);
1148:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1149:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_inc_relaxed(v);
1150:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1151:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1152:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1153:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1154:./include/linux/atomic/atomic-arch-fallback.h **** #else
ARM GAS  /tmp/ccZILEbd.s 			page 104


1155:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_acquire(1, v);
1156:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1157:./include/linux/atomic/atomic-arch-fallback.h **** }
1158:./include/linux/atomic/atomic-arch-fallback.h **** 
1159:./include/linux/atomic/atomic-arch-fallback.h **** /**
1160:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_release() - atomic increment with release ordering
1161:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1162:./include/linux/atomic/atomic-arch-fallback.h ****  *
1163:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with release ordering.
1164:./include/linux/atomic/atomic-arch-fallback.h ****  *
1165:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_release() elsewhere.
1166:./include/linux/atomic/atomic-arch-fallback.h ****  *
1167:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1168:./include/linux/atomic/atomic-arch-fallback.h ****  */
1169:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1170:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_release(atomic_t *v)
1171:./include/linux/atomic/atomic-arch-fallback.h **** {
1172:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_release)
1173:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_release(v);
1174:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1175:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1176:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_relaxed(v);
1177:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1178:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1179:./include/linux/atomic/atomic-arch-fallback.h **** #else
1180:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_release(1, v);
1181:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1182:./include/linux/atomic/atomic-arch-fallback.h **** }
1183:./include/linux/atomic/atomic-arch-fallback.h **** 
1184:./include/linux/atomic/atomic-arch-fallback.h **** /**
1185:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_relaxed() - atomic increment with relaxed ordering
1186:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1187:./include/linux/atomic/atomic-arch-fallback.h ****  *
1188:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
1189:./include/linux/atomic/atomic-arch-fallback.h ****  *
1190:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_relaxed() elsewhere.
1191:./include/linux/atomic/atomic-arch-fallback.h ****  *
1192:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1193:./include/linux/atomic/atomic-arch-fallback.h ****  */
1194:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1195:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_relaxed(atomic_t *v)
1196:./include/linux/atomic/atomic-arch-fallback.h **** {
1197:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_relaxed)
1198:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_relaxed(v);
1199:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1200:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1201:./include/linux/atomic/atomic-arch-fallback.h **** #else
1202:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_relaxed(1, v);
1203:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1204:./include/linux/atomic/atomic-arch-fallback.h **** }
1205:./include/linux/atomic/atomic-arch-fallback.h **** 
1206:./include/linux/atomic/atomic-arch-fallback.h **** /**
1207:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec() - atomic decrement with relaxed ordering
1208:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1209:./include/linux/atomic/atomic-arch-fallback.h ****  *
1210:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1211:./include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 105


1212:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec() elsewhere.
1213:./include/linux/atomic/atomic-arch-fallback.h ****  *
1214:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1215:./include/linux/atomic/atomic-arch-fallback.h ****  */
1216:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1217:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec(atomic_t *v)
1218:./include/linux/atomic/atomic-arch-fallback.h **** {
1219:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec)
1220:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_dec(v);
1221:./include/linux/atomic/atomic-arch-fallback.h **** #else
1222:./include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_sub(1, v);
1223:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1224:./include/linux/atomic/atomic-arch-fallback.h **** }
1225:./include/linux/atomic/atomic-arch-fallback.h **** 
1226:./include/linux/atomic/atomic-arch-fallback.h **** /**
1227:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return() - atomic decrement with full ordering
1228:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1229:./include/linux/atomic/atomic-arch-fallback.h ****  *
1230:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1231:./include/linux/atomic/atomic-arch-fallback.h ****  *
1232:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return() elsewhere.
1233:./include/linux/atomic/atomic-arch-fallback.h ****  *
1234:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1235:./include/linux/atomic/atomic-arch-fallback.h ****  */
1236:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1237:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return(atomic_t *v)
1238:./include/linux/atomic/atomic-arch-fallback.h **** {
1239:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return)
1240:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1241:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1242:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1243:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1244:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_dec_return_relaxed(v);
1245:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1246:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1247:./include/linux/atomic/atomic-arch-fallback.h **** #else
1248:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return(1, v);
1249:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1250:./include/linux/atomic/atomic-arch-fallback.h **** }
1251:./include/linux/atomic/atomic-arch-fallback.h **** 
1252:./include/linux/atomic/atomic-arch-fallback.h **** /**
1253:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_acquire() - atomic decrement with acquire ordering
1254:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1255:./include/linux/atomic/atomic-arch-fallback.h ****  *
1256:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
1257:./include/linux/atomic/atomic-arch-fallback.h ****  *
1258:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_acquire() elsewhere.
1259:./include/linux/atomic/atomic-arch-fallback.h ****  *
1260:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1261:./include/linux/atomic/atomic-arch-fallback.h ****  */
1262:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1263:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_acquire(atomic_t *v)
1264:./include/linux/atomic/atomic-arch-fallback.h **** {
1265:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_acquire)
1266:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_acquire(v);
1267:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1268:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_dec_return_relaxed(v);
ARM GAS  /tmp/ccZILEbd.s 			page 106


1269:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1270:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1271:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1272:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1273:./include/linux/atomic/atomic-arch-fallback.h **** #else
1274:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_acquire(1, v);
1275:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1276:./include/linux/atomic/atomic-arch-fallback.h **** }
1277:./include/linux/atomic/atomic-arch-fallback.h **** 
1278:./include/linux/atomic/atomic-arch-fallback.h **** /**
1279:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_release() - atomic decrement with release ordering
1280:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1281:./include/linux/atomic/atomic-arch-fallback.h ****  *
1282:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with release ordering.
1283:./include/linux/atomic/atomic-arch-fallback.h ****  *
1284:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_release() elsewhere.
1285:./include/linux/atomic/atomic-arch-fallback.h ****  *
1286:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1287:./include/linux/atomic/atomic-arch-fallback.h ****  */
1288:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1289:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_release(atomic_t *v)
1290:./include/linux/atomic/atomic-arch-fallback.h **** {
1291:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_release)
1292:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_release(v);
1293:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1294:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1295:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_relaxed(v);
1296:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1297:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1298:./include/linux/atomic/atomic-arch-fallback.h **** #else
1299:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_release(1, v);
1300:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1301:./include/linux/atomic/atomic-arch-fallback.h **** }
1302:./include/linux/atomic/atomic-arch-fallback.h **** 
1303:./include/linux/atomic/atomic-arch-fallback.h **** /**
1304:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_relaxed() - atomic decrement with relaxed ordering
1305:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1306:./include/linux/atomic/atomic-arch-fallback.h ****  *
1307:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1308:./include/linux/atomic/atomic-arch-fallback.h ****  *
1309:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_relaxed() elsewhere.
1310:./include/linux/atomic/atomic-arch-fallback.h ****  *
1311:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1312:./include/linux/atomic/atomic-arch-fallback.h ****  */
1313:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1314:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_relaxed(atomic_t *v)
1315:./include/linux/atomic/atomic-arch-fallback.h **** {
1316:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_relaxed)
1317:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_relaxed(v);
1318:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1319:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1320:./include/linux/atomic/atomic-arch-fallback.h **** #else
1321:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_relaxed(1, v);
1322:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1323:./include/linux/atomic/atomic-arch-fallback.h **** }
1324:./include/linux/atomic/atomic-arch-fallback.h **** 
1325:./include/linux/atomic/atomic-arch-fallback.h **** /**
ARM GAS  /tmp/ccZILEbd.s 			page 107


1326:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec() - atomic decrement with full ordering
1327:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1328:./include/linux/atomic/atomic-arch-fallback.h ****  *
1329:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1330:./include/linux/atomic/atomic-arch-fallback.h ****  *
1331:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec() elsewhere.
1332:./include/linux/atomic/atomic-arch-fallback.h ****  *
1333:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1334:./include/linux/atomic/atomic-arch-fallback.h ****  */
1335:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1336:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec(atomic_t *v)
1337:./include/linux/atomic/atomic-arch-fallback.h **** {
1338:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec)
1339:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1340:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1341:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1342:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1343:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_dec_relaxed(v);
1344:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1345:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1346:./include/linux/atomic/atomic-arch-fallback.h **** #else
1347:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub(1, v);
1348:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1349:./include/linux/atomic/atomic-arch-fallback.h **** }
1350:./include/linux/atomic/atomic-arch-fallback.h **** 
1351:./include/linux/atomic/atomic-arch-fallback.h **** /**
1352:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_acquire() - atomic decrement with acquire ordering
1353:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1354:./include/linux/atomic/atomic-arch-fallback.h ****  *
1355:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
1356:./include/linux/atomic/atomic-arch-fallback.h ****  *
1357:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_acquire() elsewhere.
1358:./include/linux/atomic/atomic-arch-fallback.h ****  *
1359:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1360:./include/linux/atomic/atomic-arch-fallback.h ****  */
1361:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1362:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_acquire(atomic_t *v)
1363:./include/linux/atomic/atomic-arch-fallback.h **** {
1364:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_acquire)
1365:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_acquire(v);
1366:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1367:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_dec_relaxed(v);
1368:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1369:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1370:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1371:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1372:./include/linux/atomic/atomic-arch-fallback.h **** #else
1373:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_acquire(1, v);
1374:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1375:./include/linux/atomic/atomic-arch-fallback.h **** }
1376:./include/linux/atomic/atomic-arch-fallback.h **** 
1377:./include/linux/atomic/atomic-arch-fallback.h **** /**
1378:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_release() - atomic decrement with release ordering
1379:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1380:./include/linux/atomic/atomic-arch-fallback.h ****  *
1381:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with release ordering.
1382:./include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 108


1383:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_release() elsewhere.
1384:./include/linux/atomic/atomic-arch-fallback.h ****  *
1385:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1386:./include/linux/atomic/atomic-arch-fallback.h ****  */
1387:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1388:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_release(atomic_t *v)
1389:./include/linux/atomic/atomic-arch-fallback.h **** {
1390:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_release)
1391:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_release(v);
1392:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1393:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1394:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_relaxed(v);
1395:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1396:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1397:./include/linux/atomic/atomic-arch-fallback.h **** #else
1398:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_release(1, v);
1399:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1400:./include/linux/atomic/atomic-arch-fallback.h **** }
1401:./include/linux/atomic/atomic-arch-fallback.h **** 
1402:./include/linux/atomic/atomic-arch-fallback.h **** /**
1403:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_relaxed() - atomic decrement with relaxed ordering
1404:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1405:./include/linux/atomic/atomic-arch-fallback.h ****  *
1406:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1407:./include/linux/atomic/atomic-arch-fallback.h ****  *
1408:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_relaxed() elsewhere.
1409:./include/linux/atomic/atomic-arch-fallback.h ****  *
1410:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1411:./include/linux/atomic/atomic-arch-fallback.h ****  */
1412:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1413:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_relaxed(atomic_t *v)
1414:./include/linux/atomic/atomic-arch-fallback.h **** {
1415:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_relaxed)
1416:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_relaxed(v);
1417:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1418:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1419:./include/linux/atomic/atomic-arch-fallback.h **** #else
1420:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_relaxed(1, v);
1421:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1422:./include/linux/atomic/atomic-arch-fallback.h **** }
1423:./include/linux/atomic/atomic-arch-fallback.h **** 
1424:./include/linux/atomic/atomic-arch-fallback.h **** /**
1425:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_and() - atomic bitwise AND with relaxed ordering
1426:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1427:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1428:./include/linux/atomic/atomic-arch-fallback.h ****  *
1429:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
1430:./include/linux/atomic/atomic-arch-fallback.h ****  *
1431:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_and() elsewhere.
1432:./include/linux/atomic/atomic-arch-fallback.h ****  *
1433:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1434:./include/linux/atomic/atomic-arch-fallback.h ****  */
1435:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1436:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_and(int i, atomic_t *v)
1437:./include/linux/atomic/atomic-arch-fallback.h **** {
1438:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_and(i, v);
1439:./include/linux/atomic/atomic-arch-fallback.h **** }
ARM GAS  /tmp/ccZILEbd.s 			page 109


1440:./include/linux/atomic/atomic-arch-fallback.h **** 
1441:./include/linux/atomic/atomic-arch-fallback.h **** /**
1442:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and() - atomic bitwise AND with full ordering
1443:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1444:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1445:./include/linux/atomic/atomic-arch-fallback.h ****  *
1446:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with full ordering.
1447:./include/linux/atomic/atomic-arch-fallback.h ****  *
1448:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and() elsewhere.
1449:./include/linux/atomic/atomic-arch-fallback.h ****  *
1450:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1451:./include/linux/atomic/atomic-arch-fallback.h ****  */
1452:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1453:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and(int i, atomic_t *v)
1454:./include/linux/atomic/atomic-arch-fallback.h **** {
1455:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and)
1456:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1457:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1458:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1459:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1460:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_and_relaxed(i, v);
1461:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1462:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1463:./include/linux/atomic/atomic-arch-fallback.h **** #else
1464:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and"
1465:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1466:./include/linux/atomic/atomic-arch-fallback.h **** }
1467:./include/linux/atomic/atomic-arch-fallback.h **** 
1468:./include/linux/atomic/atomic-arch-fallback.h **** /**
1469:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_acquire() - atomic bitwise AND with acquire ordering
1470:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1471:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1472:./include/linux/atomic/atomic-arch-fallback.h ****  *
1473:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with acquire ordering.
1474:./include/linux/atomic/atomic-arch-fallback.h ****  *
1475:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_acquire() elsewhere.
1476:./include/linux/atomic/atomic-arch-fallback.h ****  *
1477:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1478:./include/linux/atomic/atomic-arch-fallback.h ****  */
1479:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1480:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_acquire(int i, atomic_t *v)
1481:./include/linux/atomic/atomic-arch-fallback.h **** {
1482:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_acquire)
1483:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_acquire(i, v);
1484:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1485:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_and_relaxed(i, v);
1486:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1487:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1488:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1489:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1490:./include/linux/atomic/atomic-arch-fallback.h **** #else
1491:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_acquire"
1492:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1493:./include/linux/atomic/atomic-arch-fallback.h **** }
1494:./include/linux/atomic/atomic-arch-fallback.h **** 
1495:./include/linux/atomic/atomic-arch-fallback.h **** /**
1496:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_release() - atomic bitwise AND with release ordering
ARM GAS  /tmp/ccZILEbd.s 			page 110


1497:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1498:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1499:./include/linux/atomic/atomic-arch-fallback.h ****  *
1500:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with release ordering.
1501:./include/linux/atomic/atomic-arch-fallback.h ****  *
1502:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_release() elsewhere.
1503:./include/linux/atomic/atomic-arch-fallback.h ****  *
1504:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1505:./include/linux/atomic/atomic-arch-fallback.h ****  */
1506:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1507:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_release(int i, atomic_t *v)
1508:./include/linux/atomic/atomic-arch-fallback.h **** {
1509:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_release)
1510:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_release(i, v);
1511:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1512:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1513:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_relaxed(i, v);
1514:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1515:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1516:./include/linux/atomic/atomic-arch-fallback.h **** #else
1517:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_release"
1518:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1519:./include/linux/atomic/atomic-arch-fallback.h **** }
1520:./include/linux/atomic/atomic-arch-fallback.h **** 
1521:./include/linux/atomic/atomic-arch-fallback.h **** /**
1522:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_relaxed() - atomic bitwise AND with relaxed ordering
1523:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1524:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1525:./include/linux/atomic/atomic-arch-fallback.h ****  *
1526:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
1527:./include/linux/atomic/atomic-arch-fallback.h ****  *
1528:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_relaxed() elsewhere.
1529:./include/linux/atomic/atomic-arch-fallback.h ****  *
1530:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1531:./include/linux/atomic/atomic-arch-fallback.h ****  */
1532:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1533:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_relaxed(int i, atomic_t *v)
1534:./include/linux/atomic/atomic-arch-fallback.h **** {
1535:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_relaxed)
1536:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_relaxed(i, v);
1537:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1538:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1539:./include/linux/atomic/atomic-arch-fallback.h **** #else
1540:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_relaxed"
1541:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1542:./include/linux/atomic/atomic-arch-fallback.h **** }
1543:./include/linux/atomic/atomic-arch-fallback.h **** 
1544:./include/linux/atomic/atomic-arch-fallback.h **** /**
1545:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_andnot() - atomic bitwise AND NOT with relaxed ordering
1546:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1547:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1548:./include/linux/atomic/atomic-arch-fallback.h ****  *
1549:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
1550:./include/linux/atomic/atomic-arch-fallback.h ****  *
1551:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_andnot() elsewhere.
1552:./include/linux/atomic/atomic-arch-fallback.h ****  *
1553:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
ARM GAS  /tmp/ccZILEbd.s 			page 111


1554:./include/linux/atomic/atomic-arch-fallback.h ****  */
1555:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1556:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_andnot(int i, atomic_t *v)
1557:./include/linux/atomic/atomic-arch-fallback.h **** {
1558:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_andnot)
1559:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_andnot(i, v);
1560:./include/linux/atomic/atomic-arch-fallback.h **** #else
1561:./include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_and(~i, v);
1562:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1563:./include/linux/atomic/atomic-arch-fallback.h **** }
1564:./include/linux/atomic/atomic-arch-fallback.h **** 
1565:./include/linux/atomic/atomic-arch-fallback.h **** /**
1566:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot() - atomic bitwise AND NOT with full ordering
1567:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1568:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1569:./include/linux/atomic/atomic-arch-fallback.h ****  *
1570:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with full ordering.
1571:./include/linux/atomic/atomic-arch-fallback.h ****  *
1572:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot() elsewhere.
1573:./include/linux/atomic/atomic-arch-fallback.h ****  *
1574:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1575:./include/linux/atomic/atomic-arch-fallback.h ****  */
1576:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1577:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot(int i, atomic_t *v)
1578:./include/linux/atomic/atomic-arch-fallback.h **** {
1579:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot)
1580:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1581:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1582:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1583:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1584:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_andnot_relaxed(i, v);
1585:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1586:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1587:./include/linux/atomic/atomic-arch-fallback.h **** #else
1588:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and(~i, v);
1589:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1590:./include/linux/atomic/atomic-arch-fallback.h **** }
1591:./include/linux/atomic/atomic-arch-fallback.h **** 
1592:./include/linux/atomic/atomic-arch-fallback.h **** /**
1593:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_acquire() - atomic bitwise AND NOT with acquire ordering
1594:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1595:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1596:./include/linux/atomic/atomic-arch-fallback.h ****  *
1597:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with acquire ordering.
1598:./include/linux/atomic/atomic-arch-fallback.h ****  *
1599:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_acquire() elsewhere.
1600:./include/linux/atomic/atomic-arch-fallback.h ****  *
1601:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1602:./include/linux/atomic/atomic-arch-fallback.h ****  */
1603:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1604:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_acquire(int i, atomic_t *v)
1605:./include/linux/atomic/atomic-arch-fallback.h **** {
1606:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_acquire)
1607:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_acquire(i, v);
1608:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1609:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_andnot_relaxed(i, v);
1610:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
ARM GAS  /tmp/ccZILEbd.s 			page 112


1611:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1612:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1613:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1614:./include/linux/atomic/atomic-arch-fallback.h **** #else
1615:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_acquire(~i, v);
1616:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1617:./include/linux/atomic/atomic-arch-fallback.h **** }
1618:./include/linux/atomic/atomic-arch-fallback.h **** 
1619:./include/linux/atomic/atomic-arch-fallback.h **** /**
1620:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_release() - atomic bitwise AND NOT with release ordering
1621:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1622:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1623:./include/linux/atomic/atomic-arch-fallback.h ****  *
1624:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with release ordering.
1625:./include/linux/atomic/atomic-arch-fallback.h ****  *
1626:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_release() elsewhere.
1627:./include/linux/atomic/atomic-arch-fallback.h ****  *
1628:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1629:./include/linux/atomic/atomic-arch-fallback.h ****  */
1630:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1631:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_release(int i, atomic_t *v)
1632:./include/linux/atomic/atomic-arch-fallback.h **** {
1633:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_release)
1634:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_release(i, v);
1635:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1636:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1637:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_relaxed(i, v);
1638:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1639:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1640:./include/linux/atomic/atomic-arch-fallback.h **** #else
1641:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_release(~i, v);
1642:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1643:./include/linux/atomic/atomic-arch-fallback.h **** }
1644:./include/linux/atomic/atomic-arch-fallback.h **** 
1645:./include/linux/atomic/atomic-arch-fallback.h **** /**
1646:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_relaxed() - atomic bitwise AND NOT with relaxed ordering
1647:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1648:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1649:./include/linux/atomic/atomic-arch-fallback.h ****  *
1650:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
1651:./include/linux/atomic/atomic-arch-fallback.h ****  *
1652:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_relaxed() elsewhere.
1653:./include/linux/atomic/atomic-arch-fallback.h ****  *
1654:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1655:./include/linux/atomic/atomic-arch-fallback.h ****  */
1656:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1657:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
1658:./include/linux/atomic/atomic-arch-fallback.h **** {
1659:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_relaxed)
1660:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_relaxed(i, v);
1661:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1662:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1663:./include/linux/atomic/atomic-arch-fallback.h **** #else
1664:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_relaxed(~i, v);
1665:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1666:./include/linux/atomic/atomic-arch-fallback.h **** }
1667:./include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccZILEbd.s 			page 113


1668:./include/linux/atomic/atomic-arch-fallback.h **** /**
1669:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_or() - atomic bitwise OR with relaxed ordering
1670:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1671:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1672:./include/linux/atomic/atomic-arch-fallback.h ****  *
1673:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1674:./include/linux/atomic/atomic-arch-fallback.h ****  *
1675:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_or() elsewhere.
1676:./include/linux/atomic/atomic-arch-fallback.h ****  *
1677:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1678:./include/linux/atomic/atomic-arch-fallback.h ****  */
1679:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1680:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_or(int i, atomic_t *v)
1681:./include/linux/atomic/atomic-arch-fallback.h **** {
1682:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_or(i, v);
1683:./include/linux/atomic/atomic-arch-fallback.h **** }
1684:./include/linux/atomic/atomic-arch-fallback.h **** 
1685:./include/linux/atomic/atomic-arch-fallback.h **** /**
1686:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or() - atomic bitwise OR with full ordering
1687:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1688:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1689:./include/linux/atomic/atomic-arch-fallback.h ****  *
1690:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with full ordering.
1691:./include/linux/atomic/atomic-arch-fallback.h ****  *
1692:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or() elsewhere.
1693:./include/linux/atomic/atomic-arch-fallback.h ****  *
1694:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1695:./include/linux/atomic/atomic-arch-fallback.h ****  */
1696:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1697:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or(int i, atomic_t *v)
1698:./include/linux/atomic/atomic-arch-fallback.h **** {
1699:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or)
1700:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1701:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1702:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1703:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1704:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_or_relaxed(i, v);
1705:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1706:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1707:./include/linux/atomic/atomic-arch-fallback.h **** #else
1708:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or"
1709:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1710:./include/linux/atomic/atomic-arch-fallback.h **** }
1711:./include/linux/atomic/atomic-arch-fallback.h **** 
1712:./include/linux/atomic/atomic-arch-fallback.h **** /**
1713:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_acquire() - atomic bitwise OR with acquire ordering
1714:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1715:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1716:./include/linux/atomic/atomic-arch-fallback.h ****  *
1717:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with acquire ordering.
1718:./include/linux/atomic/atomic-arch-fallback.h ****  *
1719:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_acquire() elsewhere.
1720:./include/linux/atomic/atomic-arch-fallback.h ****  *
1721:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1722:./include/linux/atomic/atomic-arch-fallback.h ****  */
1723:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1724:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_acquire(int i, atomic_t *v)
ARM GAS  /tmp/ccZILEbd.s 			page 114


1725:./include/linux/atomic/atomic-arch-fallback.h **** {
1726:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_acquire)
1727:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_acquire(i, v);
1728:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1729:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_or_relaxed(i, v);
1730:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1731:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1732:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1733:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1734:./include/linux/atomic/atomic-arch-fallback.h **** #else
1735:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_acquire"
1736:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1737:./include/linux/atomic/atomic-arch-fallback.h **** }
1738:./include/linux/atomic/atomic-arch-fallback.h **** 
1739:./include/linux/atomic/atomic-arch-fallback.h **** /**
1740:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_release() - atomic bitwise OR with release ordering
1741:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1742:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1743:./include/linux/atomic/atomic-arch-fallback.h ****  *
1744:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with release ordering.
1745:./include/linux/atomic/atomic-arch-fallback.h ****  *
1746:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_release() elsewhere.
1747:./include/linux/atomic/atomic-arch-fallback.h ****  *
1748:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1749:./include/linux/atomic/atomic-arch-fallback.h ****  */
1750:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1751:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_release(int i, atomic_t *v)
1752:./include/linux/atomic/atomic-arch-fallback.h **** {
1753:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_release)
1754:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_release(i, v);
1755:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1756:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1757:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_relaxed(i, v);
1758:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1759:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1760:./include/linux/atomic/atomic-arch-fallback.h **** #else
1761:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_release"
1762:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1763:./include/linux/atomic/atomic-arch-fallback.h **** }
1764:./include/linux/atomic/atomic-arch-fallback.h **** 
1765:./include/linux/atomic/atomic-arch-fallback.h **** /**
1766:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_relaxed() - atomic bitwise OR with relaxed ordering
1767:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1768:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1769:./include/linux/atomic/atomic-arch-fallback.h ****  *
1770:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1771:./include/linux/atomic/atomic-arch-fallback.h ****  *
1772:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_relaxed() elsewhere.
1773:./include/linux/atomic/atomic-arch-fallback.h ****  *
1774:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1775:./include/linux/atomic/atomic-arch-fallback.h ****  */
1776:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1777:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_relaxed(int i, atomic_t *v)
1778:./include/linux/atomic/atomic-arch-fallback.h **** {
1779:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_relaxed)
1780:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_relaxed(i, v);
1781:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
ARM GAS  /tmp/ccZILEbd.s 			page 115


1782:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1783:./include/linux/atomic/atomic-arch-fallback.h **** #else
1784:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_relaxed"
1785:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1786:./include/linux/atomic/atomic-arch-fallback.h **** }
1787:./include/linux/atomic/atomic-arch-fallback.h **** 
1788:./include/linux/atomic/atomic-arch-fallback.h **** /**
1789:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xor() - atomic bitwise XOR with relaxed ordering
1790:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1791:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1792:./include/linux/atomic/atomic-arch-fallback.h ****  *
1793:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1794:./include/linux/atomic/atomic-arch-fallback.h ****  *
1795:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xor() elsewhere.
1796:./include/linux/atomic/atomic-arch-fallback.h ****  *
1797:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1798:./include/linux/atomic/atomic-arch-fallback.h ****  */
1799:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1800:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xor(int i, atomic_t *v)
1801:./include/linux/atomic/atomic-arch-fallback.h **** {
1802:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_xor(i, v);
1803:./include/linux/atomic/atomic-arch-fallback.h **** }
1804:./include/linux/atomic/atomic-arch-fallback.h **** 
1805:./include/linux/atomic/atomic-arch-fallback.h **** /**
1806:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor() - atomic bitwise XOR with full ordering
1807:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1808:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1809:./include/linux/atomic/atomic-arch-fallback.h ****  *
1810:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with full ordering.
1811:./include/linux/atomic/atomic-arch-fallback.h ****  *
1812:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor() elsewhere.
1813:./include/linux/atomic/atomic-arch-fallback.h ****  *
1814:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1815:./include/linux/atomic/atomic-arch-fallback.h ****  */
1816:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1817:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor(int i, atomic_t *v)
1818:./include/linux/atomic/atomic-arch-fallback.h **** {
1819:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor)
1820:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1821:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1822:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1823:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1824:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_xor_relaxed(i, v);
1825:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1826:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1827:./include/linux/atomic/atomic-arch-fallback.h **** #else
1828:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor"
1829:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1830:./include/linux/atomic/atomic-arch-fallback.h **** }
1831:./include/linux/atomic/atomic-arch-fallback.h **** 
1832:./include/linux/atomic/atomic-arch-fallback.h **** /**
1833:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_acquire() - atomic bitwise XOR with acquire ordering
1834:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1835:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1836:./include/linux/atomic/atomic-arch-fallback.h ****  *
1837:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with acquire ordering.
1838:./include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccZILEbd.s 			page 116


1839:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_acquire() elsewhere.
1840:./include/linux/atomic/atomic-arch-fallback.h ****  *
1841:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1842:./include/linux/atomic/atomic-arch-fallback.h ****  */
1843:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1844:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_acquire(int i, atomic_t *v)
1845:./include/linux/atomic/atomic-arch-fallback.h **** {
1846:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_acquire)
1847:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_acquire(i, v);
1848:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1849:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_xor_relaxed(i, v);
1850:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1851:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1852:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1853:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1854:./include/linux/atomic/atomic-arch-fallback.h **** #else
1855:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_acquire"
1856:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1857:./include/linux/atomic/atomic-arch-fallback.h **** }
1858:./include/linux/atomic/atomic-arch-fallback.h **** 
1859:./include/linux/atomic/atomic-arch-fallback.h **** /**
1860:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_release() - atomic bitwise XOR with release ordering
1861:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1862:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1863:./include/linux/atomic/atomic-arch-fallback.h ****  *
1864:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with release ordering.
1865:./include/linux/atomic/atomic-arch-fallback.h ****  *
1866:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_release() elsewhere.
1867:./include/linux/atomic/atomic-arch-fallback.h ****  *
1868:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1869:./include/linux/atomic/atomic-arch-fallback.h ****  */
1870:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1871:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_release(int i, atomic_t *v)
1872:./include/linux/atomic/atomic-arch-fallback.h **** {
1873:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_release)
1874:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_release(i, v);
1875:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1876:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1877:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_relaxed(i, v);
1878:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1879:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1880:./include/linux/atomic/atomic-arch-fallback.h **** #else
1881:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_release"
1882:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1883:./include/linux/atomic/atomic-arch-fallback.h **** }
1884:./include/linux/atomic/atomic-arch-fallback.h **** 
1885:./include/linux/atomic/atomic-arch-fallback.h **** /**
1886:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_relaxed() - atomic bitwise XOR with relaxed ordering
1887:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1888:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1889:./include/linux/atomic/atomic-arch-fallback.h ****  *
1890:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1891:./include/linux/atomic/atomic-arch-fallback.h ****  *
1892:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_relaxed() elsewhere.
1893:./include/linux/atomic/atomic-arch-fallback.h ****  *
1894:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1895:./include/linux/atomic/atomic-arch-fallback.h ****  */
ARM GAS  /tmp/ccZILEbd.s 			page 117


1896:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1897:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_relaxed(int i, atomic_t *v)
1898:./include/linux/atomic/atomic-arch-fallback.h **** {
1899:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_relaxed)
1900:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_relaxed(i, v);
1901:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1902:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1903:./include/linux/atomic/atomic-arch-fallback.h **** #else
1904:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_relaxed"
1905:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1906:./include/linux/atomic/atomic-arch-fallback.h **** }
1907:./include/linux/atomic/atomic-arch-fallback.h **** 
1908:./include/linux/atomic/atomic-arch-fallback.h **** /**
1909:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg() - atomic exchange with full ordering
1910:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1911:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1912:./include/linux/atomic/atomic-arch-fallback.h ****  *
1913:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with full ordering.
1914:./include/linux/atomic/atomic-arch-fallback.h ****  *
1915:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg() elsewhere.
1916:./include/linux/atomic/atomic-arch-fallback.h ****  *
1917:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1918:./include/linux/atomic/atomic-arch-fallback.h ****  */
1919:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1920:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg(atomic_t *v, int new)
1921:./include/linux/atomic/atomic-arch-fallback.h **** {
1922:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg)
1923:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1924:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1925:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1926:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1927:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_xchg_relaxed(v, new);
1928:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1929:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1930:./include/linux/atomic/atomic-arch-fallback.h **** #else
1931:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg(&v->counter, new);
1932:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1933:./include/linux/atomic/atomic-arch-fallback.h **** }
1934:./include/linux/atomic/atomic-arch-fallback.h **** 
1935:./include/linux/atomic/atomic-arch-fallback.h **** /**
1936:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_acquire() - atomic exchange with acquire ordering
1937:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1938:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1939:./include/linux/atomic/atomic-arch-fallback.h ****  *
1940:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with acquire ordering.
1941:./include/linux/atomic/atomic-arch-fallback.h ****  *
1942:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_acquire() elsewhere.
1943:./include/linux/atomic/atomic-arch-fallback.h ****  *
1944:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1945:./include/linux/atomic/atomic-arch-fallback.h ****  */
1946:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1947:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_acquire(atomic_t *v, int new)
1948:./include/linux/atomic/atomic-arch-fallback.h **** {
1949:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_acquire)
1950:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_acquire(v, new);
1951:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1952:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_xchg_relaxed(v, new);
ARM GAS  /tmp/ccZILEbd.s 			page 118


1953:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1954:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1955:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
1956:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1957:./include/linux/atomic/atomic-arch-fallback.h **** #else
1958:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_acquire(&v->counter, new);
1959:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1960:./include/linux/atomic/atomic-arch-fallback.h **** }
1961:./include/linux/atomic/atomic-arch-fallback.h **** 
1962:./include/linux/atomic/atomic-arch-fallback.h **** /**
1963:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_release() - atomic exchange with release ordering
1964:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1965:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1966:./include/linux/atomic/atomic-arch-fallback.h ****  *
1967:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with release ordering.
1968:./include/linux/atomic/atomic-arch-fallback.h ****  *
1969:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_release() elsewhere.
1970:./include/linux/atomic/atomic-arch-fallback.h ****  *
1971:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1972:./include/linux/atomic/atomic-arch-fallback.h ****  */
1973:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1974:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_release(atomic_t *v, int new)
1975:./include/linux/atomic/atomic-arch-fallback.h **** {
1976:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_release)
1977:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_release(v, new);
1978:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1979:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1980:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_relaxed(v, new);
1981:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
1982:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1983:./include/linux/atomic/atomic-arch-fallback.h **** #else
1984:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_release(&v->counter, new);
1985:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1986:./include/linux/atomic/atomic-arch-fallback.h **** }
1987:./include/linux/atomic/atomic-arch-fallback.h **** 
1988:./include/linux/atomic/atomic-arch-fallback.h **** /**
1989:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_relaxed() - atomic exchange with relaxed ordering
1990:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1991:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1992:./include/linux/atomic/atomic-arch-fallback.h ****  *
1993:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with relaxed ordering.
1994:./include/linux/atomic/atomic-arch-fallback.h ****  *
1995:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_relaxed() elsewhere.
1996:./include/linux/atomic/atomic-arch-fallback.h ****  *
1997:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1998:./include/linux/atomic/atomic-arch-fallback.h ****  */
1999:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2000:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_relaxed(atomic_t *v, int new)
2001:./include/linux/atomic/atomic-arch-fallback.h **** {
2002:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_relaxed)
2003:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_relaxed(v, new);
2004:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
2005:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
2006:./include/linux/atomic/atomic-arch-fallback.h **** #else
2007:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_relaxed(&v->counter, new);
2008:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2009:./include/linux/atomic/atomic-arch-fallback.h **** }
ARM GAS  /tmp/ccZILEbd.s 			page 119


2010:./include/linux/atomic/atomic-arch-fallback.h **** 
2011:./include/linux/atomic/atomic-arch-fallback.h **** /**
2012:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg() - atomic compare and exchange with full ordering
2013:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2014:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2015:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2016:./include/linux/atomic/atomic-arch-fallback.h ****  *
2017:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
2018:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2019:./include/linux/atomic/atomic-arch-fallback.h ****  *
2020:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg() elsewhere.
2021:./include/linux/atomic/atomic-arch-fallback.h ****  *
2022:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2023:./include/linux/atomic/atomic-arch-fallback.h ****  */
2024:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2025:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg(atomic_t *v, int old, int new)
2026:./include/linux/atomic/atomic-arch-fallback.h **** {
2027:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg)
2028:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2029:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2030:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
2031:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
2032:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_cmpxchg_relaxed(v, old, new);
2033:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
2034:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2035:./include/linux/atomic/atomic-arch-fallback.h **** #else
2036:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg(&v->counter, old, new);
2037:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2038:./include/linux/atomic/atomic-arch-fallback.h **** }
2039:./include/linux/atomic/atomic-arch-fallback.h **** 
2040:./include/linux/atomic/atomic-arch-fallback.h **** /**
2041:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
2042:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2043:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2044:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2045:./include/linux/atomic/atomic-arch-fallback.h ****  *
2046:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
2047:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2048:./include/linux/atomic/atomic-arch-fallback.h ****  *
2049:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_acquire() elsewhere.
2050:./include/linux/atomic/atomic-arch-fallback.h ****  *
2051:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2052:./include/linux/atomic/atomic-arch-fallback.h ****  */
2053:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2054:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
2055:./include/linux/atomic/atomic-arch-fallback.h **** {
2056:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_acquire)
2057:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_acquire(v, old, new);
2058:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2059:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_cmpxchg_relaxed(v, old, new);
2060:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
2061:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2062:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2063:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2064:./include/linux/atomic/atomic-arch-fallback.h **** #else
2065:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_acquire(&v->counter, old, new);
2066:./include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccZILEbd.s 			page 120


2067:./include/linux/atomic/atomic-arch-fallback.h **** }
2068:./include/linux/atomic/atomic-arch-fallback.h **** 
2069:./include/linux/atomic/atomic-arch-fallback.h **** /**
2070:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_release() - atomic compare and exchange with release ordering
2071:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2072:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2073:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2074:./include/linux/atomic/atomic-arch-fallback.h ****  *
2075:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
2076:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2077:./include/linux/atomic/atomic-arch-fallback.h ****  *
2078:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_release() elsewhere.
2079:./include/linux/atomic/atomic-arch-fallback.h ****  *
2080:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2081:./include/linux/atomic/atomic-arch-fallback.h ****  */
2082:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2083:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_release(atomic_t *v, int old, int new)
2084:./include/linux/atomic/atomic-arch-fallback.h **** {
2085:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_release)
2086:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_release(v, old, new);
2087:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2088:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
2089:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_relaxed(v, old, new);
2090:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2091:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2092:./include/linux/atomic/atomic-arch-fallback.h **** #else
2093:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_release(&v->counter, old, new);
2094:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2095:./include/linux/atomic/atomic-arch-fallback.h **** }
2096:./include/linux/atomic/atomic-arch-fallback.h **** 
2097:./include/linux/atomic/atomic-arch-fallback.h **** /**
2098:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
2099:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2100:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2101:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2102:./include/linux/atomic/atomic-arch-fallback.h ****  *
2103:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
2104:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2105:./include/linux/atomic/atomic-arch-fallback.h ****  *
2106:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_relaxed() elsewhere.
2107:./include/linux/atomic/atomic-arch-fallback.h ****  *
2108:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2109:./include/linux/atomic/atomic-arch-fallback.h ****  */
2110:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2111:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
2112:./include/linux/atomic/atomic-arch-fallback.h **** {
2113:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_relaxed)
2114:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_relaxed(v, old, new);
2115:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2116:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2117:./include/linux/atomic/atomic-arch-fallback.h **** #else
2118:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_relaxed(&v->counter, old, new);
2119:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2120:./include/linux/atomic/atomic-arch-fallback.h **** }
2121:./include/linux/atomic/atomic-arch-fallback.h **** 
2122:./include/linux/atomic/atomic-arch-fallback.h **** /**
2123:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg() - atomic compare and exchange with full ordering
ARM GAS  /tmp/ccZILEbd.s 			page 121


2124:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2125:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2126:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2127:./include/linux/atomic/atomic-arch-fallback.h ****  *
2128:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
2129:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2130:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2131:./include/linux/atomic/atomic-arch-fallback.h ****  *
2132:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg() elsewhere.
2133:./include/linux/atomic/atomic-arch-fallback.h ****  *
2134:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2135:./include/linux/atomic/atomic-arch-fallback.h ****  */
2136:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2137:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
2138:./include/linux/atomic/atomic-arch-fallback.h **** {
2139:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg)
2140:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2141:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2142:./include/linux/atomic/atomic-arch-fallback.h **** 	bool ret;
2143:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
2144:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_try_cmpxchg_relaxed(v, old, new);
2145:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
2146:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2147:./include/linux/atomic/atomic-arch-fallback.h **** #else
2148:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2149:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg(v, o, new);
2150:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2151:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2152:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2153:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2154:./include/linux/atomic/atomic-arch-fallback.h **** }
2155:./include/linux/atomic/atomic-arch-fallback.h **** 
2156:./include/linux/atomic/atomic-arch-fallback.h **** /**
2157:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
2158:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2159:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2160:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2161:./include/linux/atomic/atomic-arch-fallback.h ****  *
2162:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
2163:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2164:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2165:./include/linux/atomic/atomic-arch-fallback.h ****  *
2166:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_acquire() elsewhere.
2167:./include/linux/atomic/atomic-arch-fallback.h ****  *
2168:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2169:./include/linux/atomic/atomic-arch-fallback.h ****  */
2170:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2171:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
2172:./include/linux/atomic/atomic-arch-fallback.h **** {
2173:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_acquire)
2174:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_acquire(v, old, new);
2175:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2176:./include/linux/atomic/atomic-arch-fallback.h **** 	bool ret = arch_atomic_try_cmpxchg_relaxed(v, old, new);
2177:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
2178:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2179:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2180:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
ARM GAS  /tmp/ccZILEbd.s 			page 122


2181:./include/linux/atomic/atomic-arch-fallback.h **** #else
2182:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2183:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_acquire(v, o, new);
2184:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2185:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2186:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2187:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2188:./include/linux/atomic/atomic-arch-fallback.h **** }
2189:./include/linux/atomic/atomic-arch-fallback.h **** 
2190:./include/linux/atomic/atomic-arch-fallback.h **** /**
2191:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_release() - atomic compare and exchange with release ordering
2192:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2193:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2194:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2195:./include/linux/atomic/atomic-arch-fallback.h ****  *
2196:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
2197:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2198:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2199:./include/linux/atomic/atomic-arch-fallback.h ****  *
2200:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_release() elsewhere.
2201:./include/linux/atomic/atomic-arch-fallback.h ****  *
2202:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2203:./include/linux/atomic/atomic-arch-fallback.h ****  */
2204:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2205:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
2206:./include/linux/atomic/atomic-arch-fallback.h **** {
2207:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_release)
2208:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_release(v, old, new);
2209:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2210:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
2211:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_relaxed(v, old, new);
2212:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2213:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2214:./include/linux/atomic/atomic-arch-fallback.h **** #else
2215:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2216:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_release(v, o, new);
2217:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2218:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2219:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2220:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2221:./include/linux/atomic/atomic-arch-fallback.h **** }
2222:./include/linux/atomic/atomic-arch-fallback.h **** 
2223:./include/linux/atomic/atomic-arch-fallback.h **** /**
2224:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
2225:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2226:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2227:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2228:./include/linux/atomic/atomic-arch-fallback.h ****  *
2229:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
2230:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2231:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2232:./include/linux/atomic/atomic-arch-fallback.h ****  *
2233:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_relaxed() elsewhere.
2234:./include/linux/atomic/atomic-arch-fallback.h ****  *
2235:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2236:./include/linux/atomic/atomic-arch-fallback.h ****  */
2237:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
ARM GAS  /tmp/ccZILEbd.s 			page 123


2238:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
2239:./include/linux/atomic/atomic-arch-fallback.h **** {
2240:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_relaxed)
2241:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_relaxed(v, old, new);
2242:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2243:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2244:./include/linux/atomic/atomic-arch-fallback.h **** #else
2245:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2246:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_relaxed(v, o, new);
2247:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2248:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2249:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2250:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2251:./include/linux/atomic/atomic-arch-fallback.h **** }
2252:./include/linux/atomic/atomic-arch-fallback.h **** 
2253:./include/linux/atomic/atomic-arch-fallback.h **** /**
2254:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_and_test() - atomic subtract and test if zero with full ordering
2255:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
2256:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2257:./include/linux/atomic/atomic-arch-fallback.h ****  *
2258:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
2259:./include/linux/atomic/atomic-arch-fallback.h ****  *
2260:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_and_test() elsewhere.
2261:./include/linux/atomic/atomic-arch-fallback.h ****  *
2262:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
2263:./include/linux/atomic/atomic-arch-fallback.h ****  */
2264:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2265:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_and_test(int i, atomic_t *v)
2266:./include/linux/atomic/atomic-arch-fallback.h **** {
2267:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_and_test)
2268:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_and_test(i, v);
2269:./include/linux/atomic/atomic-arch-fallback.h **** #else
2270:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return(i, v) == 0;
2271:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2272:./include/linux/atomic/atomic-arch-fallback.h **** }
2273:./include/linux/atomic/atomic-arch-fallback.h **** 
2274:./include/linux/atomic/atomic-arch-fallback.h **** /**
2275:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_and_test() - atomic decrement and test if zero with full ordering
2276:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2277:./include/linux/atomic/atomic-arch-fallback.h ****  *
2278:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
2279:./include/linux/atomic/atomic-arch-fallback.h ****  *
2280:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_and_test() elsewhere.
2281:./include/linux/atomic/atomic-arch-fallback.h ****  *
2282:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
2283:./include/linux/atomic/atomic-arch-fallback.h ****  */
2284:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2285:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_and_test(atomic_t *v)
 1607              		.loc 6 2285 1 view .LVU515
2286:./include/linux/atomic/atomic-arch-fallback.h **** {
2287:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_and_test)
2288:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_and_test(v);
2289:./include/linux/atomic/atomic-arch-fallback.h **** #else
2290:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_dec_return(v) == 0;
 1608              		.loc 6 2290 2 view .LVU516
 1609              	.LBB279:
 1610              	.LBI279:
ARM GAS  /tmp/ccZILEbd.s 			page 124


1237:./include/linux/atomic/atomic-arch-fallback.h **** {
 1611              		.loc 6 1237 1 view .LVU517
1248:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 1612              		.loc 6 1248 2 view .LVU518
 1613              	.LBB280:
 1614              	.LBI280:
 790:./include/linux/atomic/atomic-arch-fallback.h **** {
 1615              		.loc 6 790 1 view .LVU519
 1616              	.LBB281:
 795:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 1617              		.loc 6 795 2 view .LVU520
 796:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_sub_return_relaxed(i, v);
 1618              		.loc 6 796 2 view .LVU521
 1619              	.LBB282:
 1620              	.LBI282:
 1621              		.file 9 "./include/asm-generic/barrier.h"
   1:./include/asm-generic/barrier.h **** /* SPDX-License-Identifier: GPL-2.0-or-later */
   2:./include/asm-generic/barrier.h **** /*
   3:./include/asm-generic/barrier.h ****  * Generic barrier definitions.
   4:./include/asm-generic/barrier.h ****  *
   5:./include/asm-generic/barrier.h ****  * It should be possible to use these on really simple architectures,
   6:./include/asm-generic/barrier.h ****  * but it serves more as a starting point for new ports.
   7:./include/asm-generic/barrier.h ****  *
   8:./include/asm-generic/barrier.h ****  * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.
   9:./include/asm-generic/barrier.h ****  * Written by David Howells (dhowells@redhat.com)
  10:./include/asm-generic/barrier.h ****  */
  11:./include/asm-generic/barrier.h **** 
  12:./include/asm-generic/barrier.h **** #include <linux/rwonce.h>
  13:./include/asm-generic/barrier.h **** 
  14:./include/asm-generic/barrier.h **** static inline void sync(void)
  15:./include/asm-generic/barrier.h **** {
  16:./include/asm-generic/barrier.h **** 	asm volatile("sync" : : : "memory");
  17:./include/asm-generic/barrier.h **** }
  18:./include/asm-generic/barrier.h **** 
  19:./include/asm-generic/barrier.h **** static inline void eieio(void)
  20:./include/asm-generic/barrier.h **** {
  21:./include/asm-generic/barrier.h **** 	asm volatile("eieio" : : : "memory");
  22:./include/asm-generic/barrier.h **** }
  23:./include/asm-generic/barrier.h **** 
  24:./include/asm-generic/barrier.h **** static inline void barrier(void)
 1622              		.loc 9 24 20 view .LVU522
 1623              	.LBB283:
  25:./include/asm-generic/barrier.h **** {
  26:./include/asm-generic/barrier.h **** 	asm volatile("" : : : "memory");
 1624              		.loc 9 26 2 view .LVU523
 1625              	.LBE283:
 1626              	.LBE282:
 797:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 1627              		.loc 6 797 2 view .LVU524
 1628              	.LVL141:
 1629              	.LBB284:
 1630              	.LBI284:
 171:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 1631              		.loc 8 171 1 view .LVU525
 1632              	.LBB285:
 1633              		.loc 8 171 1 view .LVU526
 1634              		.loc 8 171 1 view .LVU527
ARM GAS  /tmp/ccZILEbd.s 			page 125


 1635              		.loc 8 171 1 view .LVU528
 1636              		.syntax unified
 1637              	@ 171 "./arch/arm_m/include/asm/atomic.h" 1
 1638              		@ atomic_sub_return
 1639 0016 53E8002F 	1: ldrex   r2, [r3]
 1640 001a A2F10102 	   sub r2, r2, #1
 1641 001e 43E80021 	   strex   r1, r2, [r3]
 1642 0022 91F0000F 	   teq r1, #0
 1643 0026 F6D1     	   bne 1b
 1644              	@ 0 "" 2
 1645              	.LVL142:
 1646              		.loc 8 171 1 view .LVU529
 1647              		.loc 8 171 1 is_stmt 0 view .LVU530
 1648              		.thumb
 1649              		.syntax unified
 1650              	.LBE285:
 1651              	.LBE284:
 798:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 1652              		.loc 6 798 2 is_stmt 1 view .LVU531
 1653              	.LBB286:
 1654              	.LBI286:
  24:./include/asm-generic/barrier.h **** {
 1655              		.loc 9 24 20 view .LVU532
 1656              	.LBB287:
 1657              		.loc 9 26 2 view .LVU533
 1658              	.LBE287:
 1659              	.LBE286:
 799:./include/linux/atomic/atomic-arch-fallback.h **** #else
 1660              		.loc 6 799 2 view .LVU534
 1661              	.LVL143:
 799:./include/linux/atomic/atomic-arch-fallback.h **** #else
 1662              		.loc 6 799 2 is_stmt 0 view .LVU535
 1663              	.LBE281:
 1664              	.LBE280:
 1665              	.LBE279:
 1666              	.LBE278:
 1667              	.LBE277:
 206:./fs/pipefs/pipefs.c ****         {
 1668              		.loc 1 206 12 discriminator 1 view .LVU536
 1669 0028 4AB1     		cbz	r2, .L103
 1670              	.L98:
 211:./fs/pipefs/pipefs.c ****     }
 1671              		.loc 1 211 9 is_stmt 1 view .LVU537
 1672 002a 2046     		mov	r0, r4
 1673 002c FFF7FEFF 		bl	spin_unlock
 1674              	.LVL144:
 1675              	.L97:
 213:./fs/pipefs/pipefs.c ****     kfree(dentry);
 1676              		.loc 1 213 5 view .LVU538
 1677              	.LBB288:
 1678              	.LBI288:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1679              		.loc 4 383 20 view .LVU539
 1680              	.LBB289:
 1681              		.loc 4 384 2 view .LVU540
 1682 0030 6868     		ldr	r0, [r5, #4]
 1683 0032 FFF7FEFF 		bl	__sfree__
ARM GAS  /tmp/ccZILEbd.s 			page 126


 1684              	.LVL145:
 1685              		.loc 4 384 2 is_stmt 0 view .LVU541
 1686              	.LBE289:
 1687              	.LBE288:
 214:./fs/pipefs/pipefs.c **** }
 1688              		.loc 1 214 5 is_stmt 1 view .LVU542
 1689              	.LBB290:
 1690              	.LBI290:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1691              		.loc 4 383 20 view .LVU543
 1692              	.LBB291:
 1693              		.loc 4 384 2 view .LVU544
 1694 0036 2846     		mov	r0, r5
 1695 0038 FFF7FEFF 		bl	__sfree__
 1696              	.LVL146:
 1697              		.loc 4 384 2 is_stmt 0 view .LVU545
 1698              	.LBE291:
 1699              	.LBE290:
 215:./fs/pipefs/pipefs.c **** static void pipefs_delete_dentry(struct pipefs_superblock *sb,struct pipefs_inode* parent_dentry_in
 1700              		.loc 1 215 1 view .LVU546
 1701 003c 38BD     		pop	{r3, r4, r5, pc}
 1702              	.LVL147:
 1703              	.L103:
 208:./fs/pipefs/pipefs.c ****             pipefs_inode_put(dentry->target_inode);
 1704              		.loc 1 208 13 is_stmt 1 view .LVU547
 208:./fs/pipefs/pipefs.c ****             pipefs_inode_put(dentry->target_inode);
 1705              		.loc 1 208 29 is_stmt 0 view .LVU548
 1706 003e AB68     		ldr	r3, [r5, #8]
 1707              	.LVL148:
 1708              	.LBB292:
 1709              	.LBI292:
 170:./include/linux/list.h **** }
 171:./include/linux/list.h **** 
 172:./include/linux/list.h **** 
 173:./include/linux/list.h **** /**
 174:./include/linux/list.h ****  * list_add_tail - add a new entry
 175:./include/linux/list.h ****  * @new: new entry to be added
 176:./include/linux/list.h ****  * @head: list head to add it before
 177:./include/linux/list.h ****  *
 178:./include/linux/list.h ****  * Insert a new entry before the specified head.
 179:./include/linux/list.h ****  * This is useful for implementing queues.
 180:./include/linux/list.h ****  */
 181:./include/linux/list.h **** static inline void list_add_tail(struct list_head *new, struct list_head *head)
 182:./include/linux/list.h **** {
 183:./include/linux/list.h **** 	__list_add(new, head->prev, head);
 184:./include/linux/list.h **** }
 185:./include/linux/list.h **** 
 186:./include/linux/list.h **** /*
 187:./include/linux/list.h ****  * Delete a list entry by making the prev/next entries
 188:./include/linux/list.h ****  * point to each other.
 189:./include/linux/list.h ****  *
 190:./include/linux/list.h ****  * This is only for internal list manipulation where we know
 191:./include/linux/list.h ****  * the prev/next entries already!
 192:./include/linux/list.h ****  */
 193:./include/linux/list.h **** static inline void __list_del(struct list_head * prev, struct list_head * next)
 194:./include/linux/list.h **** {
 195:./include/linux/list.h **** 	next->prev = prev;
ARM GAS  /tmp/ccZILEbd.s 			page 127


 196:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 197:./include/linux/list.h **** }
 198:./include/linux/list.h **** 
 199:./include/linux/list.h **** /*
 200:./include/linux/list.h ****  * Delete a list entry and clear the 'prev' pointer.
 201:./include/linux/list.h ****  *
 202:./include/linux/list.h ****  * This is a special-purpose list clearing method used in the networking code
 203:./include/linux/list.h ****  * for lists allocated as per-cpu, where we don't want to incur the extra
 204:./include/linux/list.h ****  * WRITE_ONCE() overhead of a regular list_del_init(). The code that uses this
 205:./include/linux/list.h ****  * needs to check the node 'prev' pointer instead of calling list_empty().
 206:./include/linux/list.h ****  */
 207:./include/linux/list.h **** static inline void __list_del_clearprev(struct list_head *entry)
 208:./include/linux/list.h **** {
 209:./include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 210:./include/linux/list.h **** 	entry->prev = NULL;
 211:./include/linux/list.h **** }
 212:./include/linux/list.h **** 
 213:./include/linux/list.h **** static inline void __list_del_entry(struct list_head *entry)
 214:./include/linux/list.h **** {
 215:./include/linux/list.h **** 	if (!__list_del_entry_valid(entry))
 216:./include/linux/list.h **** 		return;
 217:./include/linux/list.h **** 
 218:./include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 219:./include/linux/list.h **** }
 220:./include/linux/list.h **** 
 221:./include/linux/list.h **** /**
 222:./include/linux/list.h ****  * list_del - deletes entry from list.
 223:./include/linux/list.h ****  * @entry: the element to delete from the list.
 224:./include/linux/list.h ****  * Note: list_empty() on entry does not return true after this, the entry is
 225:./include/linux/list.h ****  * in an undefined state.
 226:./include/linux/list.h ****  */
 227:./include/linux/list.h **** static inline void list_del(struct list_head *entry)
 1710              		.loc 7 227 20 is_stmt 1 view .LVU549
 1711              	.LBB293:
 228:./include/linux/list.h **** {
 229:./include/linux/list.h **** 	__list_del_entry(entry);
 1712              		.loc 7 229 2 view .LVU550
 1713              	.LBB294:
 1714              	.LBI294:
 213:./include/linux/list.h **** {
 1715              		.loc 7 213 20 view .LVU551
 1716              	.LBB295:
 215:./include/linux/list.h **** 		return;
 1717              		.loc 7 215 2 view .LVU552
 218:./include/linux/list.h **** }
 1718              		.loc 7 218 2 view .LVU553
 1719 0040 9A69     		ldr	r2, [r3, #24]
 1720 0042 5969     		ldr	r1, [r3, #20]
 1721              	.LVL149:
 1722              	.LBB296:
 1723              	.LBI296:
 193:./include/linux/list.h **** {
 1724              		.loc 7 193 20 view .LVU554
 1725              	.LBB297:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1726              		.loc 7 195 2 view .LVU555
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
ARM GAS  /tmp/ccZILEbd.s 			page 128


 1727              		.loc 7 195 13 is_stmt 0 view .LVU556
 1728 0044 4A60     		str	r2, [r1, #4]
 196:./include/linux/list.h **** }
 1729              		.loc 7 196 2 is_stmt 1 view .LVU557
 196:./include/linux/list.h **** }
 1730              		.loc 7 196 2 view .LVU558
 1731              	.LBB298:
 196:./include/linux/list.h **** }
 1732              		.loc 7 196 2 view .LVU559
 196:./include/linux/list.h **** }
 1733              		.loc 7 196 2 view .LVU560
 1734              	.LBE298:
 196:./include/linux/list.h **** }
 1735              		.loc 7 196 2 discriminator 2 view .LVU561
 196:./include/linux/list.h **** }
 1736              		.loc 7 196 2 discriminator 2 view .LVU562
 196:./include/linux/list.h **** }
 1737              		.loc 7 196 2 discriminator 2 view .LVU563
 1738 0046 1160     		str	r1, [r2]
 196:./include/linux/list.h **** }
 1739              		.loc 7 196 2 discriminator 2 view .LVU564
 196:./include/linux/list.h **** }
 1740              		.loc 7 196 2 discriminator 2 view .LVU565
 1741              	.LVL150:
 196:./include/linux/list.h **** }
 1742              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU566
 1743              	.LBE297:
 1744              	.LBE296:
 1745              	.LBE295:
 1746              	.LBE294:
 230:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 1747              		.loc 7 230 2 is_stmt 1 view .LVU567
 1748              		.loc 7 230 14 is_stmt 0 view .LVU568
 1749 0048 4FF48072 		mov	r2, #256
 1750 004c 5A61     		str	r2, [r3, #20]
 231:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1751              		.loc 7 231 2 is_stmt 1 view .LVU569
 1752              		.loc 7 231 14 is_stmt 0 view .LVU570
 1753 004e 4FF49172 		mov	r2, #290
 1754 0052 9A61     		str	r2, [r3, #24]
 1755              	.LVL151:
 1756              		.loc 7 231 14 view .LVU571
 1757              	.LBE293:
 1758              	.LBE292:
 209:./fs/pipefs/pipefs.c ****         }
 1759              		.loc 1 209 13 is_stmt 1 view .LVU572
 1760 0054 A868     		ldr	r0, [r5, #8]
 1761 0056 FFF7FEFF 		bl	pipefs_inode_put
 1762              	.LVL152:
 1763 005a E6E7     		b	.L98
 1764              	.LVL153:
 1765              	.L100:
 1766              	.LCFI18:
 1767              		.cfi_def_cfa_offset 0
 1768              		.cfi_restore 3
 1769              		.cfi_restore 4
 1770              		.cfi_restore 5
ARM GAS  /tmp/ccZILEbd.s 			page 129


 1771              		.cfi_restore 14
 209:./fs/pipefs/pipefs.c ****         }
 1772              		.loc 1 209 13 is_stmt 0 view .LVU573
 1773 005c 7047     		bx	lr
 1774              		.cfi_endproc
 1775              	.LFE1047:
 1777              		.section	.text.pipefs_release_dentry,"ax",%progbits
 1778              		.align	1
 1779              		.syntax unified
 1780              		.thumb
 1781              		.thumb_func
 1783              	pipefs_release_dentry:
 1784              	.LVL154:
 1785              	.LFB1065:
 562:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *fs_dentry = dentry->d_fsdata;
 1786              		.loc 1 562 56 is_stmt 1 view -0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 0
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 562:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *fs_dentry = dentry->d_fsdata;
 1790              		.loc 1 562 56 is_stmt 0 view .LVU575
 1791 0000 08B5     		push	{r3, lr}
 1792              	.LCFI19:
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 3, -8
 1795              		.cfi_offset 14, -4
 563:./fs/pipefs/pipefs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 1796              		.loc 1 563 5 is_stmt 1 view .LVU576
 563:./fs/pipefs/pipefs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 1797              		.loc 1 563 27 is_stmt 0 view .LVU577
 1798 0002 416D     		ldr	r1, [r0, #84]
 1799              	.LVL155:
 564:./fs/pipefs/pipefs.c **** }
 1800              		.loc 1 564 5 is_stmt 1 view .LVU578
 564:./fs/pipefs/pipefs.c **** }
 1801              		.loc 1 564 25 is_stmt 0 view .LVU579
 1802 0004 8B68     		ldr	r3, [r1, #8]
 564:./fs/pipefs/pipefs.c **** }
 1803              		.loc 1 564 5 view .LVU580
 1804 0006 586B     		ldr	r0, [r3, #52]
 1805              	.LVL156:
 564:./fs/pipefs/pipefs.c **** }
 1806              		.loc 1 564 5 view .LVU581
 1807 0008 FFF7FEFF 		bl	dentry_put
 1808              	.LVL157:
 565:./fs/pipefs/pipefs.c **** static int pipefs_rmdir(struct inode *	dir  ,struct dentry *dentry){
 1809              		.loc 1 565 1 view .LVU582
 1810 000c 08BD     		pop	{r3, pc}
 1811              		.cfi_endproc
 1812              	.LFE1065:
 1814              		.section	.text.pipefs_rmdir,"ax",%progbits
 1815              		.align	1
 1816              		.syntax unified
 1817              		.thumb
 1818              		.thumb_func
 1820              	pipefs_rmdir:
 1821              	.LVL158:
ARM GAS  /tmp/ccZILEbd.s 			page 130


 1822              	.LFB1066:
 566:./fs/pipefs/pipefs.c ****     pipefs_release_dentry(dentry);
 1823              		.loc 1 566 68 is_stmt 1 view -0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 566:./fs/pipefs/pipefs.c ****     pipefs_release_dentry(dentry);
 1827              		.loc 1 566 68 is_stmt 0 view .LVU584
 1828 0000 38B5     		push	{r3, r4, r5, lr}
 1829              	.LCFI20:
 1830              		.cfi_def_cfa_offset 16
 1831              		.cfi_offset 3, -16
 1832              		.cfi_offset 4, -12
 1833              		.cfi_offset 5, -8
 1834              		.cfi_offset 14, -4
 1835 0002 0546     		mov	r5, r0
 1836 0004 0C46     		mov	r4, r1
 567:./fs/pipefs/pipefs.c ****     return simple_unlink(dir,dentry);
 1837              		.loc 1 567 5 is_stmt 1 view .LVU585
 1838 0006 0846     		mov	r0, r1
 1839              	.LVL159:
 567:./fs/pipefs/pipefs.c ****     return simple_unlink(dir,dentry);
 1840              		.loc 1 567 5 is_stmt 0 view .LVU586
 1841 0008 FFF7FEFF 		bl	pipefs_release_dentry
 1842              	.LVL160:
 568:./fs/pipefs/pipefs.c **** }
 1843              		.loc 1 568 5 is_stmt 1 view .LVU587
 568:./fs/pipefs/pipefs.c **** }
 1844              		.loc 1 568 12 is_stmt 0 view .LVU588
 1845 000c 2146     		mov	r1, r4
 1846 000e 2846     		mov	r0, r5
 1847 0010 FFF7FEFF 		bl	simple_unlink
 1848              	.LVL161:
 569:./fs/pipefs/pipefs.c **** 
 1849              		.loc 1 569 1 view .LVU589
 1850 0014 38BD     		pop	{r3, r4, r5, pc}
 569:./fs/pipefs/pipefs.c **** 
 1851              		.loc 1 569 1 view .LVU590
 1852              		.cfi_endproc
 1853              	.LFE1066:
 1855              		.section	.text.pipefs_delete_dentry,"ax",%progbits
 1856              		.align	1
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1861              	pipefs_delete_dentry:
 1862              	.LVL162:
 1863              	.LFB1048:
 216:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
 1864              		.loc 1 216 140 is_stmt 1 view -0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 0
 1867              		@ frame_needed = 0, uses_anonymous_args = 0
 216:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
 1868              		.loc 1 216 140 is_stmt 0 view .LVU592
 1869 0000 70B5     		push	{r4, r5, r6, lr}
 1870              	.LCFI21:
ARM GAS  /tmp/ccZILEbd.s 			page 131


 1871              		.cfi_def_cfa_offset 16
 1872              		.cfi_offset 4, -16
 1873              		.cfi_offset 5, -12
 1874              		.cfi_offset 6, -8
 1875              		.cfi_offset 14, -4
 1876 0002 0546     		mov	r5, r0
 1877 0004 1446     		mov	r4, r2
 217:./fs/pipefs/pipefs.c ****     
 1878              		.loc 1 217 5 is_stmt 1 view .LVU593
 217:./fs/pipefs/pipefs.c ****     
 1879              		.loc 1 217 7 is_stmt 0 view .LVU594
 1880 0006 0E46     		mov	r6, r1
 1881 0008 19B1     		cbz	r1, .L109
 217:./fs/pipefs/pipefs.c ****     
 1882              		.loc 1 217 37 is_stmt 1 discriminator 1 view .LVU595
 1883 000a 01F12400 		add	r0, r1, #36
 1884              	.LVL163:
 217:./fs/pipefs/pipefs.c ****     
 1885              		.loc 1 217 37 is_stmt 0 discriminator 1 view .LVU596
 1886 000e FFF7FEFF 		bl	spin_lock
 1887              	.LVL164:
 1888              	.L109:
 219:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1889              		.loc 1 219 5 is_stmt 1 view .LVU597
 219:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1890              		.loc 1 219 23 is_stmt 0 view .LVU598
 1891 0012 A268     		ldr	r2, [r4, #8]
 219:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1892              		.loc 1 219 37 view .LVU599
 1893 0014 5368     		ldr	r3, [r2, #4]
 219:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1894              		.loc 1 219 46 view .LVU600
 1895 0016 03F47043 		and	r3, r3, #61440
 219:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1896              		.loc 1 219 8 view .LVU601
 1897 001a B3F5804F 		cmp	r3, #16384
 1898 001e 13D0     		beq	.L115
 1899              	.L110:
 226:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_unlock(&parent_dentry_inode->lock);
 1900              		.loc 1 226 5 is_stmt 1 view .LVU602
 1901              	.LVL165:
 1902              	.LBB299:
 1903              	.LBI299:
 227:./include/linux/list.h **** {
 1904              		.loc 7 227 20 view .LVU603
 1905              	.LBB300:
 229:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 1906              		.loc 7 229 2 view .LVU604
 1907              	.LBB301:
 1908              	.LBI301:
 213:./include/linux/list.h **** {
 1909              		.loc 7 213 20 view .LVU605
 1910              	.LBB302:
 215:./include/linux/list.h **** 		return;
 1911              		.loc 7 215 2 view .LVU606
 218:./include/linux/list.h **** }
 1912              		.loc 7 218 2 view .LVU607
ARM GAS  /tmp/ccZILEbd.s 			page 132


 1913 0020 2369     		ldr	r3, [r4, #16]
 1914 0022 E268     		ldr	r2, [r4, #12]
 1915              	.LVL166:
 1916              	.LBB303:
 1917              	.LBI303:
 193:./include/linux/list.h **** {
 1918              		.loc 7 193 20 view .LVU608
 1919              	.LBB304:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1920              		.loc 7 195 2 view .LVU609
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1921              		.loc 7 195 13 is_stmt 0 view .LVU610
 1922 0024 5360     		str	r3, [r2, #4]
 196:./include/linux/list.h **** }
 1923              		.loc 7 196 2 is_stmt 1 view .LVU611
 196:./include/linux/list.h **** }
 1924              		.loc 7 196 2 view .LVU612
 1925              	.LBB305:
 196:./include/linux/list.h **** }
 1926              		.loc 7 196 2 view .LVU613
 196:./include/linux/list.h **** }
 1927              		.loc 7 196 2 view .LVU614
 1928              	.LBE305:
 196:./include/linux/list.h **** }
 1929              		.loc 7 196 2 discriminator 2 view .LVU615
 196:./include/linux/list.h **** }
 1930              		.loc 7 196 2 discriminator 2 view .LVU616
 196:./include/linux/list.h **** }
 1931              		.loc 7 196 2 discriminator 2 view .LVU617
 1932 0026 1A60     		str	r2, [r3]
 196:./include/linux/list.h **** }
 1933              		.loc 7 196 2 discriminator 2 view .LVU618
 196:./include/linux/list.h **** }
 1934              		.loc 7 196 2 discriminator 2 view .LVU619
 1935              	.LVL167:
 196:./include/linux/list.h **** }
 1936              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU620
 1937              	.LBE304:
 1938              	.LBE303:
 1939              	.LBE302:
 1940              	.LBE301:
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1941              		.loc 7 230 2 is_stmt 1 view .LVU621
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1942              		.loc 7 230 14 is_stmt 0 view .LVU622
 1943 0028 4FF48073 		mov	r3, #256
 1944 002c E360     		str	r3, [r4, #12]
 1945              		.loc 7 231 2 is_stmt 1 view .LVU623
 1946              		.loc 7 231 14 is_stmt 0 view .LVU624
 1947 002e 4FF49173 		mov	r3, #290
 1948 0032 2361     		str	r3, [r4, #16]
 1949              	.LVL168:
 1950              		.loc 7 231 14 view .LVU625
 1951              	.LBE300:
 1952              	.LBE299:
 227:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 1953              		.loc 1 227 5 is_stmt 1 view .LVU626
ARM GAS  /tmp/ccZILEbd.s 			page 133


 227:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 1954              		.loc 1 227 7 is_stmt 0 view .LVU627
 1955 0034 1EB1     		cbz	r6, .L113
 227:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 1956              		.loc 1 227 37 is_stmt 1 discriminator 1 view .LVU628
 1957 0036 06F12400 		add	r0, r6, #36
 1958 003a FFF7FEFF 		bl	spin_unlock
 1959              	.LVL169:
 1960              	.L113:
 228:./fs/pipefs/pipefs.c **** }
 1961              		.loc 1 228 5 view .LVU629
 1962 003e 2146     		mov	r1, r4
 1963 0040 2846     		mov	r0, r5
 1964 0042 FFF7FEFF 		bl	dentry_put
 1965              	.LVL170:
 1966              	.L108:
 229:./fs/pipefs/pipefs.c **** static struct pipefs_superblock* pipefs_superblock_create(void) //ÂàõÂª∫superblock
 1967              		.loc 1 229 1 is_stmt 0 view .LVU630
 1968 0046 70BD     		pop	{r4, r5, r6, pc}
 1969              	.LVL171:
 1970              	.L115:
 220:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 1971              		.loc 1 220 9 is_stmt 1 view .LVU631
 220:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 1972              		.loc 1 220 24 is_stmt 0 view .LVU632
 1973 0048 02F11C01 		add	r1, r2, #28
 1974              	.LVL172:
 1975              	.LBB306:
 1976              	.LBI306:
 232:./include/linux/list.h **** }
 233:./include/linux/list.h **** 
 234:./include/linux/list.h **** /**
 235:./include/linux/list.h ****  * list_replace - replace old entry by new one
 236:./include/linux/list.h ****  * @old : the element to be replaced
 237:./include/linux/list.h ****  * @new : the new element to insert
 238:./include/linux/list.h ****  *
 239:./include/linux/list.h ****  * If @old was empty, it will be overwritten.
 240:./include/linux/list.h ****  */
 241:./include/linux/list.h **** static inline void list_replace(struct list_head *old,
 242:./include/linux/list.h **** 				struct list_head *new)
 243:./include/linux/list.h **** {
 244:./include/linux/list.h **** 	new->next = old->next;
 245:./include/linux/list.h **** 	new->next->prev = new;
 246:./include/linux/list.h **** 	new->prev = old->prev;
 247:./include/linux/list.h **** 	new->prev->next = new;
 248:./include/linux/list.h **** }
 249:./include/linux/list.h **** 
 250:./include/linux/list.h **** /**
 251:./include/linux/list.h ****  * list_replace_init - replace old entry by new one and initialize the old one
 252:./include/linux/list.h ****  * @old : the element to be replaced
 253:./include/linux/list.h ****  * @new : the new element to insert
 254:./include/linux/list.h ****  *
 255:./include/linux/list.h ****  * If @old was empty, it will be overwritten.
 256:./include/linux/list.h ****  */
 257:./include/linux/list.h **** static inline void list_replace_init(struct list_head *old,
 258:./include/linux/list.h **** 				     struct list_head *new)
 259:./include/linux/list.h **** {
ARM GAS  /tmp/ccZILEbd.s 			page 134


 260:./include/linux/list.h **** 	list_replace(old, new);
 261:./include/linux/list.h **** 	INIT_LIST_HEAD(old);
 262:./include/linux/list.h **** }
 263:./include/linux/list.h **** 
 264:./include/linux/list.h **** /**
 265:./include/linux/list.h ****  * list_swap - replace entry1 with entry2 and re-add entry1 at entry2's position
 266:./include/linux/list.h ****  * @entry1: the location to place entry2
 267:./include/linux/list.h ****  * @entry2: the location to place entry1
 268:./include/linux/list.h ****  */
 269:./include/linux/list.h **** static inline void list_swap(struct list_head *entry1,
 270:./include/linux/list.h **** 			     struct list_head *entry2)
 271:./include/linux/list.h **** {
 272:./include/linux/list.h **** 	struct list_head *pos = entry2->prev;
 273:./include/linux/list.h **** 
 274:./include/linux/list.h **** 	list_del(entry2);
 275:./include/linux/list.h **** 	list_replace(entry1, entry2);
 276:./include/linux/list.h **** 	if (pos == entry1)
 277:./include/linux/list.h **** 		pos = entry2;
 278:./include/linux/list.h **** 	list_add(entry1, pos);
 279:./include/linux/list.h **** }
 280:./include/linux/list.h **** 
 281:./include/linux/list.h **** /**
 282:./include/linux/list.h ****  * list_del_init - deletes entry from list and reinitialize it.
 283:./include/linux/list.h ****  * @entry: the element to delete from the list.
 284:./include/linux/list.h ****  */
 285:./include/linux/list.h **** static inline void list_del_init(struct list_head *entry)
 286:./include/linux/list.h **** {
 287:./include/linux/list.h **** 	__list_del_entry(entry);
 288:./include/linux/list.h **** 	INIT_LIST_HEAD(entry);
 289:./include/linux/list.h **** }
 290:./include/linux/list.h **** 
 291:./include/linux/list.h **** /**
 292:./include/linux/list.h ****  * list_move - delete from one list and add as another's head
 293:./include/linux/list.h ****  * @list: the entry to move
 294:./include/linux/list.h ****  * @head: the head that will precede our entry
 295:./include/linux/list.h ****  */
 296:./include/linux/list.h **** static inline void list_move(struct list_head *list, struct list_head *head)
 297:./include/linux/list.h **** {
 298:./include/linux/list.h **** 	__list_del_entry(list);
 299:./include/linux/list.h **** 	list_add(list, head);
 300:./include/linux/list.h **** }
 301:./include/linux/list.h **** 
 302:./include/linux/list.h **** /**
 303:./include/linux/list.h ****  * list_move_tail - delete from one list and add as another's tail
 304:./include/linux/list.h ****  * @list: the entry to move
 305:./include/linux/list.h ****  * @head: the head that will follow our entry
 306:./include/linux/list.h ****  */
 307:./include/linux/list.h **** static inline void list_move_tail(struct list_head *list,
 308:./include/linux/list.h **** 				  struct list_head *head)
 309:./include/linux/list.h **** {
 310:./include/linux/list.h **** 	__list_del_entry(list);
 311:./include/linux/list.h **** 	list_add_tail(list, head);
 312:./include/linux/list.h **** }
 313:./include/linux/list.h **** 
 314:./include/linux/list.h **** /**
 315:./include/linux/list.h ****  * list_bulk_move_tail - move a subsection of a list to its tail
 316:./include/linux/list.h ****  * @head: the head that will follow our entry
ARM GAS  /tmp/ccZILEbd.s 			page 135


 317:./include/linux/list.h ****  * @first: first entry to move
 318:./include/linux/list.h ****  * @last: last entry to move, can be the same as first
 319:./include/linux/list.h ****  *
 320:./include/linux/list.h ****  * Move all entries between @first and including @last before @head.
 321:./include/linux/list.h ****  * All three entries must belong to the same linked list.
 322:./include/linux/list.h ****  */
 323:./include/linux/list.h **** static inline void list_bulk_move_tail(struct list_head *head,
 324:./include/linux/list.h **** 				       struct list_head *first,
 325:./include/linux/list.h **** 				       struct list_head *last)
 326:./include/linux/list.h **** {
 327:./include/linux/list.h **** 	first->prev->next = last->next;
 328:./include/linux/list.h **** 	last->next->prev = first->prev;
 329:./include/linux/list.h **** 
 330:./include/linux/list.h **** 	head->prev->next = first;
 331:./include/linux/list.h **** 	first->prev = head->prev;
 332:./include/linux/list.h **** 
 333:./include/linux/list.h **** 	last->next = head;
 334:./include/linux/list.h **** 	head->prev = last;
 335:./include/linux/list.h **** }
 336:./include/linux/list.h **** 
 337:./include/linux/list.h **** /**
 338:./include/linux/list.h ****  * list_is_first -- tests whether @list is the first entry in list @head
 339:./include/linux/list.h ****  * @list: the entry to test
 340:./include/linux/list.h ****  * @head: the head of the list
 341:./include/linux/list.h ****  */
 342:./include/linux/list.h **** static inline int list_is_first(const struct list_head *list, const struct list_head *head)
 343:./include/linux/list.h **** {
 344:./include/linux/list.h **** 	return list->prev == head;
 345:./include/linux/list.h **** }
 346:./include/linux/list.h **** 
 347:./include/linux/list.h **** /**
 348:./include/linux/list.h ****  * list_is_last - tests whether @list is the last entry in list @head
 349:./include/linux/list.h ****  * @list: the entry to test
 350:./include/linux/list.h ****  * @head: the head of the list
 351:./include/linux/list.h ****  */
 352:./include/linux/list.h **** static inline int list_is_last(const struct list_head *list, const struct list_head *head)
 353:./include/linux/list.h **** {
 354:./include/linux/list.h **** 	return list->next == head;
 355:./include/linux/list.h **** }
 356:./include/linux/list.h **** 
 357:./include/linux/list.h **** /**
 358:./include/linux/list.h ****  * list_is_head - tests whether @list is the list @head
 359:./include/linux/list.h ****  * @list: the entry to test
 360:./include/linux/list.h ****  * @head: the head of the list
 361:./include/linux/list.h ****  */
 362:./include/linux/list.h **** static inline int list_is_head(const struct list_head *list, const struct list_head *head)
 363:./include/linux/list.h **** {
 364:./include/linux/list.h **** 	return list == head;
 365:./include/linux/list.h **** }
 366:./include/linux/list.h **** 
 367:./include/linux/list.h **** /**
 368:./include/linux/list.h ****  * list_empty - tests whether a list is empty
 369:./include/linux/list.h ****  * @head: the list to test.
 370:./include/linux/list.h ****  */
 371:./include/linux/list.h **** static inline int list_empty(const struct list_head *head)
 1977              		.loc 7 371 19 is_stmt 1 view .LVU633
 372:./include/linux/list.h **** {
ARM GAS  /tmp/ccZILEbd.s 			page 136


 373:./include/linux/list.h **** 	return READ_ONCE(head->next) == head;
 1978              		.loc 7 373 2 view .LVU634
 1979              	.LBB307:
 1980              		.loc 7 373 9 view .LVU635
 1981              	.LBB308:
 1982              		.loc 7 373 9 view .LVU636
 1983              		.loc 7 373 9 view .LVU637
 1984              	.LBE308:
 1985              		.loc 7 373 9 discriminator 2 view .LVU638
 1986              		.loc 7 373 9 discriminator 2 view .LVU639
 1987 004c D369     		ldr	r3, [r2, #28]
 1988              	.LVL173:
 1989              		.loc 7 373 9 is_stmt 0 discriminator 2 view .LVU640
 1990              	.LBE307:
 1991              	.LBE306:
 220:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 1992              		.loc 1 220 11 discriminator 1 view .LVU641
 1993 004e 9942     		cmp	r1, r3
 1994 0050 E6D0     		beq	.L110
 221:./fs/pipefs/pipefs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 1995              		.loc 1 221 13 is_stmt 1 view .LVU642
 221:./fs/pipefs/pipefs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 1996              		.loc 1 221 15 is_stmt 0 view .LVU643
 1997 0052 002E     		cmp	r6, #0
 1998 0054 F7D0     		beq	.L108
 222:./fs/pipefs/pipefs.c ****             return;
 1999              		.loc 1 222 17 is_stmt 1 view .LVU644
 2000 0056 06F12400 		add	r0, r6, #36
 2001 005a FFF7FEFF 		bl	spin_unlock
 2002              	.LVL174:
 223:./fs/pipefs/pipefs.c ****         }
 2003              		.loc 1 223 13 view .LVU645
 2004 005e F2E7     		b	.L108
 2005              		.cfi_endproc
 2006              	.LFE1048:
 2008              		.section	.text.pipefs_unlink,"ax",%progbits
 2009              		.align	1
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2014              	pipefs_unlink:
 2015              	.LVL175:
 2016              	.LFB1063:
 528:./fs/pipefs/pipefs.c ****     struct pipefs_inode *parent_inode = (struct pipefs_inode *)dir->i_private;
 2017              		.loc 1 528 1 view -0
 2018              		.cfi_startproc
 2019              		@ args = 0, pretend = 0, frame = 0
 2020              		@ frame_needed = 0, uses_anonymous_args = 0
 528:./fs/pipefs/pipefs.c ****     struct pipefs_inode *parent_inode = (struct pipefs_inode *)dir->i_private;
 2021              		.loc 1 528 1 is_stmt 0 view .LVU647
 2022 0000 08B5     		push	{r3, lr}
 2023              	.LCFI22:
 2024              		.cfi_def_cfa_offset 8
 2025              		.cfi_offset 3, -8
 2026              		.cfi_offset 14, -4
 529:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *delete_dentry = (struct pipefs_dentry *)dentry->d_fsdata;
 2027              		.loc 1 529 5 is_stmt 1 view .LVU648
ARM GAS  /tmp/ccZILEbd.s 			page 137


 529:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *delete_dentry = (struct pipefs_dentry *)dentry->d_fsdata;
 2028              		.loc 1 529 26 is_stmt 0 view .LVU649
 2029 0002 D0F88430 		ldr	r3, [r0, #132]
 2030              	.LVL176:
 530:./fs/pipefs/pipefs.c ****     pipefs_delete_dentry(parent_inode->sb, parent_inode, delete_dentry);
 2031              		.loc 1 530 5 is_stmt 1 view .LVU650
 531:./fs/pipefs/pipefs.c ****     return 0;
 2032              		.loc 1 531 5 view .LVU651
 2033 0006 4A6D     		ldr	r2, [r1, #84]
 2034 0008 1946     		mov	r1, r3
 2035              	.LVL177:
 531:./fs/pipefs/pipefs.c ****     return 0;
 2036              		.loc 1 531 5 is_stmt 0 view .LVU652
 2037 000a 586B     		ldr	r0, [r3, #52]
 2038              	.LVL178:
 531:./fs/pipefs/pipefs.c ****     return 0;
 2039              		.loc 1 531 5 view .LVU653
 2040 000c FFF7FEFF 		bl	pipefs_delete_dentry
 2041              	.LVL179:
 532:./fs/pipefs/pipefs.c **** }
 2042              		.loc 1 532 5 is_stmt 1 view .LVU654
 533:./fs/pipefs/pipefs.c **** 
 2043              		.loc 1 533 1 is_stmt 0 view .LVU655
 2044 0010 0020     		movs	r0, #0
 2045 0012 08BD     		pop	{r3, pc}
 2046              		.cfi_endproc
 2047              	.LFE1063:
 2049              		.section	.text.pipefs_create_dentry,"ax",%progbits
 2050              		.align	1
 2051              		.syntax unified
 2052              		.thumb
 2053              		.thumb_func
 2055              	pipefs_create_dentry:
 2056              	.LVL180:
 2057              	.LFB1043:
 147:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 2058              		.loc 1 147 1 is_stmt 1 view -0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 0
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 147:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 2062              		.loc 1 147 1 is_stmt 0 view .LVU657
 2063 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2064              	.LCFI23:
 2065              		.cfi_def_cfa_offset 24
 2066              		.cfi_offset 4, -24
 2067              		.cfi_offset 5, -20
 2068              		.cfi_offset 6, -16
 2069              		.cfi_offset 7, -12
 2070              		.cfi_offset 8, -8
 2071              		.cfi_offset 14, -4
 148:./fs/pipefs/pipefs.c **** 
 2072              		.loc 1 148 5 is_stmt 1 view .LVU658
 148:./fs/pipefs/pipefs.c **** 
 2073              		.loc 1 148 7 is_stmt 0 view .LVU659
 2074 0004 8046     		mov	r8, r0
 2075 0006 0028     		cmp	r0, #0
ARM GAS  /tmp/ccZILEbd.s 			page 138


 2076 0008 47D0     		beq	.L121
 2077 000a 0E46     		mov	r6, r1
 2078 000c 1546     		mov	r5, r2
 148:./fs/pipefs/pipefs.c **** 
 2079              		.loc 1 148 36 discriminator 2 view .LVU660
 2080 000e 002A     		cmp	r2, #0
 2081 0010 45D0     		beq	.L122
 148:./fs/pipefs/pipefs.c **** 
 2082              		.loc 1 148 52 discriminator 4 view .LVU661
 2083 0012 0029     		cmp	r1, #0
 2084 0014 45D0     		beq	.L123
 150:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL)return NULL;
 2085              		.loc 1 150 5 is_stmt 1 view .LVU662
 2086              	.LVL181:
 2087              	.LBB309:
 2088              	.LBI309:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 2089              		.loc 4 379 21 view .LVU663
 2090              	.LBB310:
 380:./include/linux/slab.h **** }
 2091              		.loc 4 380 2 view .LVU664
 380:./include/linux/slab.h **** }
 2092              		.loc 4 380 9 is_stmt 0 view .LVU665
 2093 0016 4FF44C61 		mov	r1, #3264
 2094              	.LVL182:
 380:./include/linux/slab.h **** }
 2095              		.loc 4 380 9 view .LVU666
 2096 001a 1420     		movs	r0, #20
 2097              	.LVL183:
 380:./include/linux/slab.h **** }
 2098              		.loc 4 380 9 view .LVU667
 2099 001c FFF7FEFF 		bl	__smalloc__
 2100              	.LVL184:
 380:./include/linux/slab.h **** }
 2101              		.loc 4 380 9 view .LVU668
 2102              	.LBE310:
 2103              	.LBE309:
 151:./fs/pipefs/pipefs.c ****     new_dentry->magic = MAGIC;
 2104              		.loc 1 151 5 is_stmt 1 view .LVU669
 151:./fs/pipefs/pipefs.c ****     new_dentry->magic = MAGIC;
 2105              		.loc 1 151 7 is_stmt 0 view .LVU670
 2106 0020 0446     		mov	r4, r0
 2107 0022 90B3     		cbz	r0, .L118
 152:./fs/pipefs/pipefs.c ****     new_dentry->name = NULL;
 2108              		.loc 1 152 5 is_stmt 1 view .LVU671
 152:./fs/pipefs/pipefs.c ****     new_dentry->name = NULL;
 2109              		.loc 1 152 23 is_stmt 0 view .LVU672
 2110 0024 204B     		ldr	r3, .L126
 2111 0026 0360     		str	r3, [r0]
 153:./fs/pipefs/pipefs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 2112              		.loc 1 153 5 is_stmt 1 view .LVU673
 153:./fs/pipefs/pipefs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 2113              		.loc 1 153 22 is_stmt 0 view .LVU674
 2114 0028 0023     		movs	r3, #0
 2115 002a 4360     		str	r3, [r0, #4]
 154:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2116              		.loc 1 154 5 is_stmt 1 view .LVU675
ARM GAS  /tmp/ccZILEbd.s 			page 139


 154:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2117              		.loc 1 154 32 is_stmt 0 view .LVU676
 2118 002c 2846     		mov	r0, r5
 2119              	.LVL185:
 154:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2120              		.loc 1 154 32 view .LVU677
 2121 002e FFF7FEFF 		bl	strlen
 2122              	.LVL186:
 2123              	.LBB311:
 2124              	.LBI311:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 2125              		.loc 4 379 21 is_stmt 1 view .LVU678
 2126              	.LBB312:
 380:./include/linux/slab.h **** }
 2127              		.loc 4 380 2 view .LVU679
 380:./include/linux/slab.h **** }
 2128              		.loc 4 380 9 is_stmt 0 view .LVU680
 2129 0032 4FF44C61 		mov	r1, #3264
 2130 0036 0130     		adds	r0, r0, #1
 2131              	.LVL187:
 380:./include/linux/slab.h **** }
 2132              		.loc 4 380 9 view .LVU681
 2133 0038 FFF7FEFF 		bl	__smalloc__
 2134              	.LVL188:
 380:./include/linux/slab.h **** }
 2135              		.loc 4 380 9 view .LVU682
 2136 003c 0746     		mov	r7, r0
 2137              	.LVL189:
 380:./include/linux/slab.h **** }
 2138              		.loc 4 380 9 view .LVU683
 2139              	.LBE312:
 2140              	.LBE311:
 154:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2141              		.loc 1 154 22 discriminator 2 view .LVU684
 2142 003e 6060     		str	r0, [r4, #4]
 155:./fs/pipefs/pipefs.c ****         kfree(new_dentry);
 2143              		.loc 1 155 5 is_stmt 1 view .LVU685
 155:./fs/pipefs/pipefs.c ****         kfree(new_dentry);
 2144              		.loc 1 155 7 is_stmt 0 view .LVU686
 2145 0040 30B3     		cbz	r0, .L125
 159:./fs/pipefs/pipefs.c ****     new_dentry->target_inode = target_inode;
 2146              		.loc 1 159 5 is_stmt 1 view .LVU687
 2147 0042 2946     		mov	r1, r5
 2148 0044 FFF7FEFF 		bl	strcpy
 2149              	.LVL190:
 160:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 2150              		.loc 1 160 5 view .LVU688
 160:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 2151              		.loc 1 160 30 is_stmt 0 view .LVU689
 2152 0048 A660     		str	r6, [r4, #8]
 161:./fs/pipefs/pipefs.c ****     
 2153              		.loc 1 161 5 is_stmt 1 view .LVU690
 2154 004a 04F10C05 		add	r5, r4, #12
 2155              	.LVL191:
 2156              	.LBB313:
 2157              	.LBI313:
  35:./include/linux/list.h **** {
ARM GAS  /tmp/ccZILEbd.s 			page 140


 2158              		.loc 7 35 20 view .LVU691
 2159              	.LBB314:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2160              		.loc 7 37 2 view .LVU692
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2161              		.loc 7 37 2 view .LVU693
 2162              	.LBB315:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2163              		.loc 7 37 2 view .LVU694
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2164              		.loc 7 37 2 view .LVU695
 2165              	.LBE315:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2166              		.loc 7 37 2 discriminator 2 view .LVU696
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2167              		.loc 7 37 2 discriminator 2 view .LVU697
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2168              		.loc 7 37 2 discriminator 2 view .LVU698
 2169 004e E560     		str	r5, [r4, #12]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2170              		.loc 7 37 2 discriminator 2 view .LVU699
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2171              		.loc 7 37 2 discriminator 2 view .LVU700
  38:./include/linux/list.h **** }
 2172              		.loc 7 38 2 view .LVU701
  38:./include/linux/list.h **** }
 2173              		.loc 7 38 2 view .LVU702
 2174              	.LBB316:
  38:./include/linux/list.h **** }
 2175              		.loc 7 38 2 view .LVU703
  38:./include/linux/list.h **** }
 2176              		.loc 7 38 2 view .LVU704
 2177              	.LBE316:
  38:./include/linux/list.h **** }
 2178              		.loc 7 38 2 discriminator 2 view .LVU705
  38:./include/linux/list.h **** }
 2179              		.loc 7 38 2 discriminator 2 view .LVU706
  38:./include/linux/list.h **** }
 2180              		.loc 7 38 2 discriminator 2 view .LVU707
 2181 0050 2561     		str	r5, [r4, #16]
  38:./include/linux/list.h **** }
 2182              		.loc 7 38 2 discriminator 2 view .LVU708
  38:./include/linux/list.h **** }
 2183              		.loc 7 38 2 discriminator 2 view .LVU709
 2184              	.LVL192:
  38:./include/linux/list.h **** }
 2185              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU710
 2186              	.LBE314:
 2187              	.LBE313:
 164:./fs/pipefs/pipefs.c ****     
 2188              		.loc 1 164 5 is_stmt 1 view .LVU711
 2189 0052 06F10C01 		add	r1, r6, #12
 2190              	.LVL193:
 2191              	.LBB317:
 2192              	.LBI317:
 433:./include/linux/atomic/atomic-instrumented.h **** {
 2193              		.loc 5 433 1 view .LVU712
ARM GAS  /tmp/ccZILEbd.s 			page 141


 435:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_inc(v);
 2194              		.loc 5 435 2 view .LVU713
 436:./include/linux/atomic/atomic-instrumented.h **** }
 2195              		.loc 5 436 2 view .LVU714
 2196              	.LBB318:
 2197              	.LBI318:
 999:./include/linux/atomic/atomic-arch-fallback.h **** {
 2198              		.loc 6 999 1 view .LVU715
1004:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 2199              		.loc 6 1004 2 view .LVU716
 2200              	.LBB319:
 2201              	.LBI319:
 550:./include/linux/atomic/atomic-arch-fallback.h **** {
 2202              		.loc 6 550 1 view .LVU717
 552:./include/linux/atomic/atomic-arch-fallback.h **** }
 2203              		.loc 6 552 2 view .LVU718
 2204              	.LBB320:
 2205              	.LBI320:
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2206              		.loc 8 170 1 view .LVU719
 2207              	.LBB321:
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2208              		.loc 8 170 1 view .LVU720
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2209              		.loc 8 170 1 view .LVU721
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2210              		.loc 8 170 1 view .LVU722
 2211              		.syntax unified
 2212              	@ 170 "./arch/arm_m/include/asm/atomic.h" 1
 2213              		@ atomic_add
 2214 0056 51E8003F 	1: ldrex   r3, [r1]
 2215 005a 03F10103 	   add r3, r3, #1
 2216 005e 41E80032 	   strex   r2, r3, [r1]
 2217 0062 92F0000F 	   teq r2, #0
 2218 0066 F6D1     	   bne 1b
 2219              	@ 0 "" 2
 2220              	.LVL194:
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2221              		.loc 8 170 1 is_stmt 0 view .LVU723
 2222              		.thumb
 2223              		.syntax unified
 2224              	.LBE321:
 2225              	.LBE320:
 2226              	.LBE319:
 2227              	.LBE318:
 2228              	.LBE317:
 167:./fs/pipefs/pipefs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 2229              		.loc 1 167 5 is_stmt 1 view .LVU724
 2230 0068 08F12406 		add	r6, r8, #36
 2231              	.LVL195:
 167:./fs/pipefs/pipefs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 2232              		.loc 1 167 5 is_stmt 0 view .LVU725
 2233 006c 3046     		mov	r0, r6
 2234 006e FFF7FEFF 		bl	spin_lock
 2235              	.LVL196:
 168:./fs/pipefs/pipefs.c ****     spin_unlock(&parent_dentry_inode->lock);
 2236              		.loc 1 168 5 is_stmt 1 view .LVU726
ARM GAS  /tmp/ccZILEbd.s 			page 142


 2237 0072 08F11C02 		add	r2, r8, #28
 2238              	.LVL197:
 2239              	.LBB322:
 2240              	.LBI322:
 167:./include/linux/list.h **** {
 2241              		.loc 7 167 20 view .LVU727
 2242              	.LBB323:
 169:./include/linux/list.h **** }
 2243              		.loc 7 169 2 view .LVU728
 2244 0076 D8F81C30 		ldr	r3, [r8, #28]
 2245              	.LVL198:
 2246              	.LBB324:
 2247              	.LBI324:
 146:./include/linux/list.h **** 			      struct list_head *prev,
 2248              		.loc 7 146 20 view .LVU729
 2249              	.LBB325:
 150:./include/linux/list.h **** 		return;
 2250              		.loc 7 150 2 view .LVU730
 153:./include/linux/list.h **** 	new->next = next;
 2251              		.loc 7 153 2 view .LVU731
 153:./include/linux/list.h **** 	new->next = next;
 2252              		.loc 7 153 13 is_stmt 0 view .LVU732
 2253 007a 5D60     		str	r5, [r3, #4]
 154:./include/linux/list.h **** 	new->prev = prev;
 2254              		.loc 7 154 2 is_stmt 1 view .LVU733
 154:./include/linux/list.h **** 	new->prev = prev;
 2255              		.loc 7 154 12 is_stmt 0 view .LVU734
 2256 007c E360     		str	r3, [r4, #12]
 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 2257              		.loc 7 155 2 is_stmt 1 view .LVU735
 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 2258              		.loc 7 155 12 is_stmt 0 view .LVU736
 2259 007e 2261     		str	r2, [r4, #16]
 156:./include/linux/list.h **** }
 2260              		.loc 7 156 2 is_stmt 1 view .LVU737
 156:./include/linux/list.h **** }
 2261              		.loc 7 156 2 view .LVU738
 2262              	.LBB326:
 156:./include/linux/list.h **** }
 2263              		.loc 7 156 2 view .LVU739
 156:./include/linux/list.h **** }
 2264              		.loc 7 156 2 view .LVU740
 2265              	.LBE326:
 156:./include/linux/list.h **** }
 2266              		.loc 7 156 2 discriminator 2 view .LVU741
 156:./include/linux/list.h **** }
 2267              		.loc 7 156 2 discriminator 2 view .LVU742
 156:./include/linux/list.h **** }
 2268              		.loc 7 156 2 discriminator 2 view .LVU743
 2269 0080 C8F81C50 		str	r5, [r8, #28]
 156:./include/linux/list.h **** }
 2270              		.loc 7 156 2 discriminator 3 view .LVU744
 156:./include/linux/list.h **** }
 2271              		.loc 7 156 2 discriminator 3 view .LVU745
 2272              	.LVL199:
 156:./include/linux/list.h **** }
 2273              		.loc 7 156 2 is_stmt 0 discriminator 3 view .LVU746
ARM GAS  /tmp/ccZILEbd.s 			page 143


 2274              	.LBE325:
 2275              	.LBE324:
 2276              	.LBE323:
 2277              	.LBE322:
 169:./fs/pipefs/pipefs.c ****     return new_dentry;
 2278              		.loc 1 169 5 is_stmt 1 view .LVU747
 2279 0084 3046     		mov	r0, r6
 2280 0086 FFF7FEFF 		bl	spin_unlock
 2281              	.LVL200:
 170:./fs/pipefs/pipefs.c **** }
 2282              		.loc 1 170 5 view .LVU748
 2283              	.L118:
 171:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_inode( struct pipefs_superblock *sb,struct pipefs_inode*
 2284              		.loc 1 171 1 is_stmt 0 view .LVU749
 2285 008a 2046     		mov	r0, r4
 2286 008c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2287              	.LVL201:
 2288              	.L125:
 156:./fs/pipefs/pipefs.c ****         return NULL;
 2289              		.loc 1 156 9 is_stmt 1 view .LVU750
 2290              	.LBB327:
 2291              	.LBI327:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 2292              		.loc 4 383 20 view .LVU751
 2293              	.LBB328:
 2294              		.loc 4 384 2 view .LVU752
 2295 0090 2046     		mov	r0, r4
 2296 0092 FFF7FEFF 		bl	__sfree__
 2297              	.LVL202:
 2298              		.loc 4 384 2 is_stmt 0 view .LVU753
 2299              	.LBE328:
 2300              	.LBE327:
 157:./fs/pipefs/pipefs.c ****     }
 2301              		.loc 1 157 9 is_stmt 1 view .LVU754
 157:./fs/pipefs/pipefs.c ****     }
 2302              		.loc 1 157 16 is_stmt 0 view .LVU755
 2303 0096 3C46     		mov	r4, r7
 2304              	.LVL203:
 157:./fs/pipefs/pipefs.c ****     }
 2305              		.loc 1 157 16 view .LVU756
 2306 0098 F7E7     		b	.L118
 2307              	.LVL204:
 2308              	.L121:
 148:./fs/pipefs/pipefs.c **** 
 2309              		.loc 1 148 84 discriminator 5 view .LVU757
 2310 009a 0446     		mov	r4, r0
 2311 009c F5E7     		b	.L118
 2312              	.L122:
 148:./fs/pipefs/pipefs.c **** 
 2313              		.loc 1 148 84 discriminator 5 view .LVU758
 2314 009e 1446     		mov	r4, r2
 2315 00a0 F3E7     		b	.L118
 2316              	.L123:
 148:./fs/pipefs/pipefs.c **** 
 2317              		.loc 1 148 84 discriminator 5 view .LVU759
 2318 00a2 0C46     		mov	r4, r1
 2319 00a4 F1E7     		b	.L118
ARM GAS  /tmp/ccZILEbd.s 			page 144


 2320              	.L127:
 2321 00a6 00BF     		.align	2
 2322              	.L126:
 2323 00a8 4E61BC00 		.word	12345678
 2324              		.cfi_endproc
 2325              	.LFE1043:
 2327              		.section	.text.pipefs_create_inode,"ax",%progbits
 2328              		.align	1
 2329              		.syntax unified
 2330              		.thumb
 2331              		.thumb_func
 2333              	pipefs_create_inode:
 2334              	.LVL205:
 2335              	.LFB1044:
 173:./fs/pipefs/pipefs.c ****     struct pipefs_inode * new_inode = pipefs_create_empty_inode(sb,fop,major);
 2336              		.loc 1 173 1 is_stmt 1 view -0
 2337              		.cfi_startproc
 2338              		@ args = 4, pretend = 0, frame = 0
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 173:./fs/pipefs/pipefs.c ****     struct pipefs_inode * new_inode = pipefs_create_empty_inode(sb,fop,major);
 2340              		.loc 1 173 1 is_stmt 0 view .LVU761
 2341 0000 70B5     		push	{r4, r5, r6, lr}
 2342              	.LCFI24:
 2343              		.cfi_def_cfa_offset 16
 2344              		.cfi_offset 4, -16
 2345              		.cfi_offset 5, -12
 2346              		.cfi_offset 6, -8
 2347              		.cfi_offset 14, -4
 2348 0002 0646     		mov	r6, r0
 2349 0004 0C46     		mov	r4, r1
 2350 0006 1146     		mov	r1, r2
 2351              	.LVL206:
 174:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 2352              		.loc 1 174 5 is_stmt 1 view .LVU762
 174:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 2353              		.loc 1 174 39 is_stmt 0 view .LVU763
 2354 0008 1A46     		mov	r2, r3
 2355              	.LVL207:
 174:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 2356              		.loc 1 174 39 view .LVU764
 2357 000a FFF7FEFF 		bl	pipefs_create_empty_inode
 2358              	.LVL208:
 175:./fs/pipefs/pipefs.c ****         return NULL;
 2359              		.loc 1 175 5 is_stmt 1 view .LVU765
 175:./fs/pipefs/pipefs.c ****         return NULL;
 2360              		.loc 1 175 7 is_stmt 0 view .LVU766
 2361 000e 0546     		mov	r5, r0
 2362 0010 E8B1     		cbz	r0, .L130
 178:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
 2363              		.loc 1 178 5 is_stmt 1 view .LVU767
 178:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
 2364              		.loc 1 178 40 is_stmt 0 view .LVU768
 2365 0012 049A     		ldr	r2, [sp, #16]
 2366 0014 0146     		mov	r1, r0
 2367 0016 2046     		mov	r0, r4
 2368              	.LVL209:
 178:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
ARM GAS  /tmp/ccZILEbd.s 			page 145


 2369              		.loc 1 178 40 view .LVU769
 2370 0018 FFF7FEFF 		bl	pipefs_create_dentry
 2371              	.LVL210:
 179:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 2372              		.loc 1 179 5 is_stmt 1 view .LVU770
 179:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 2373              		.loc 1 179 7 is_stmt 0 view .LVU771
 2374 001c 0446     		mov	r4, r0
 2375              	.LVL211:
 179:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 2376              		.loc 1 179 7 view .LVU772
 2377 001e 08B1     		cbz	r0, .L132
 2378              	.LVL212:
 2379              	.L128:
 187:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_file(struct pipefs_superblock *sb,struct pipefs_inode* p
 2380              		.loc 1 187 1 view .LVU773
 2381 0020 2046     		mov	r0, r4
 2382 0022 70BD     		pop	{r4, r5, r6, pc}
 2383              	.LVL213:
 2384              	.L132:
 180:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 2385              		.loc 1 180 9 is_stmt 1 view .LVU774
 2386 0024 0436     		adds	r6, r6, #4
 2387              	.LVL214:
 180:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 2388              		.loc 1 180 9 is_stmt 0 view .LVU775
 2389 0026 3046     		mov	r0, r6
 2390              	.LVL215:
 180:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 2391              		.loc 1 180 9 view .LVU776
 2392 0028 FFF7FEFF 		bl	spin_lock
 2393              	.LVL216:
 181:./fs/pipefs/pipefs.c ****         spin_unlock(&sb->lock);
 2394              		.loc 1 181 9 is_stmt 1 view .LVU777
 2395              	.LBB329:
 2396              	.LBI329:
 227:./include/linux/list.h **** {
 2397              		.loc 7 227 20 view .LVU778
 2398              	.LBB330:
 229:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 2399              		.loc 7 229 2 view .LVU779
 2400              	.LBB331:
 2401              	.LBI331:
 213:./include/linux/list.h **** {
 2402              		.loc 7 213 20 view .LVU780
 2403              	.LBB332:
 215:./include/linux/list.h **** 		return;
 2404              		.loc 7 215 2 view .LVU781
 218:./include/linux/list.h **** }
 2405              		.loc 7 218 2 view .LVU782
 2406 002c AB69     		ldr	r3, [r5, #24]
 2407 002e 6A69     		ldr	r2, [r5, #20]
 2408              	.LVL217:
 2409              	.LBB333:
 2410              	.LBI333:
 193:./include/linux/list.h **** {
 2411              		.loc 7 193 20 view .LVU783
ARM GAS  /tmp/ccZILEbd.s 			page 146


 2412              	.LBB334:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2413              		.loc 7 195 2 view .LVU784
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2414              		.loc 7 195 13 is_stmt 0 view .LVU785
 2415 0030 5360     		str	r3, [r2, #4]
 196:./include/linux/list.h **** }
 2416              		.loc 7 196 2 is_stmt 1 view .LVU786
 196:./include/linux/list.h **** }
 2417              		.loc 7 196 2 view .LVU787
 2418              	.LBB335:
 196:./include/linux/list.h **** }
 2419              		.loc 7 196 2 view .LVU788
 196:./include/linux/list.h **** }
 2420              		.loc 7 196 2 view .LVU789
 2421              	.LBE335:
 196:./include/linux/list.h **** }
 2422              		.loc 7 196 2 discriminator 2 view .LVU790
 196:./include/linux/list.h **** }
 2423              		.loc 7 196 2 discriminator 2 view .LVU791
 196:./include/linux/list.h **** }
 2424              		.loc 7 196 2 discriminator 2 view .LVU792
 2425 0032 1A60     		str	r2, [r3]
 196:./include/linux/list.h **** }
 2426              		.loc 7 196 2 discriminator 2 view .LVU793
 196:./include/linux/list.h **** }
 2427              		.loc 7 196 2 discriminator 2 view .LVU794
 2428              	.LVL218:
 196:./include/linux/list.h **** }
 2429              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU795
 2430              	.LBE334:
 2431              	.LBE333:
 2432              	.LBE332:
 2433              	.LBE331:
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2434              		.loc 7 230 2 is_stmt 1 view .LVU796
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2435              		.loc 7 230 14 is_stmt 0 view .LVU797
 2436 0034 4FF48073 		mov	r3, #256
 2437 0038 6B61     		str	r3, [r5, #20]
 231:./include/linux/list.h **** }
 2438              		.loc 7 231 2 is_stmt 1 view .LVU798
 231:./include/linux/list.h **** }
 2439              		.loc 7 231 14 is_stmt 0 view .LVU799
 2440 003a 4FF49173 		mov	r3, #290
 2441 003e AB61     		str	r3, [r5, #24]
 2442              	.LVL219:
 231:./include/linux/list.h **** }
 2443              		.loc 7 231 14 view .LVU800
 2444              	.LBE330:
 2445              	.LBE329:
 182:./fs/pipefs/pipefs.c ****         pipefs_inode_put(new_inode);
 2446              		.loc 1 182 9 is_stmt 1 view .LVU801
 2447 0040 3046     		mov	r0, r6
 2448 0042 FFF7FEFF 		bl	spin_unlock
 2449              	.LVL220:
 183:./fs/pipefs/pipefs.c ****         return NULL;
ARM GAS  /tmp/ccZILEbd.s 			page 147


 2450              		.loc 1 183 9 view .LVU802
 2451 0046 2846     		mov	r0, r5
 2452 0048 FFF7FEFF 		bl	pipefs_inode_put
 2453              	.LVL221:
 184:./fs/pipefs/pipefs.c ****     }
 2454              		.loc 1 184 9 view .LVU803
 184:./fs/pipefs/pipefs.c ****     }
 2455              		.loc 1 184 16 is_stmt 0 view .LVU804
 2456 004c E8E7     		b	.L128
 2457              	.LVL222:
 2458              	.L130:
 176:./fs/pipefs/pipefs.c ****     }   
 2459              		.loc 1 176 16 view .LVU805
 2460 004e 0446     		mov	r4, r0
 2461              	.LVL223:
 176:./fs/pipefs/pipefs.c ****     }   
 2462              		.loc 1 176 16 view .LVU806
 2463 0050 E6E7     		b	.L128
 2464              		.cfi_endproc
 2465              	.LFE1044:
 2467              		.section	.text.pipefs_create_dir,"ax",%progbits
 2468              		.align	1
 2469              		.syntax unified
 2470              		.thumb
 2471              		.thumb_func
 2473              	pipefs_create_dir:
 2474              	.LVL224:
 2475              	.LFB1046:
 194:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry =  pipefs_create_inode(sb,parent_dentry_inode,&pipefs_file_fops,0,
 2476              		.loc 1 194 1 is_stmt 1 view -0
 2477              		.cfi_startproc
 2478              		@ args = 0, pretend = 0, frame = 0
 2479              		@ frame_needed = 0, uses_anonymous_args = 0
 194:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry =  pipefs_create_inode(sb,parent_dentry_inode,&pipefs_file_fops,0,
 2480              		.loc 1 194 1 is_stmt 0 view .LVU808
 2481 0000 00B5     		push	{lr}
 2482              	.LCFI25:
 2483              		.cfi_def_cfa_offset 4
 2484              		.cfi_offset 14, -4
 2485 0002 83B0     		sub	sp, sp, #12
 2486              	.LCFI26:
 2487              		.cfi_def_cfa_offset 16
 195:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 2488              		.loc 1 195 5 is_stmt 1 view .LVU809
 195:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 2489              		.loc 1 195 37 is_stmt 0 view .LVU810
 2490 0004 0092     		str	r2, [sp]
 2491 0006 0023     		movs	r3, #0
 2492 0008 054A     		ldr	r2, .L136
 2493              	.LVL225:
 195:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 2494              		.loc 1 195 37 view .LVU811
 2495 000a FFF7FEFF 		bl	pipefs_create_inode
 2496              	.LVL226:
 196:./fs/pipefs/pipefs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 2497              		.loc 1 196 5 is_stmt 1 view .LVU812
 196:./fs/pipefs/pipefs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
ARM GAS  /tmp/ccZILEbd.s 			page 148


 2498              		.loc 1 196 7 is_stmt 0 view .LVU813
 2499 000e 18B1     		cbz	r0, .L133
 197:./fs/pipefs/pipefs.c ****     return dentry;
 2500              		.loc 1 197 5 is_stmt 1 view .LVU814
 197:./fs/pipefs/pipefs.c ****     return dentry;
 2501              		.loc 1 197 11 is_stmt 0 view .LVU815
 2502 0010 8368     		ldr	r3, [r0, #8]
 197:./fs/pipefs/pipefs.c ****     return dentry;
 2503              		.loc 1 197 34 view .LVU816
 2504 0012 44F2ED12 		movw	r2, #16877
 2505 0016 5A60     		str	r2, [r3, #4]
 198:./fs/pipefs/pipefs.c **** }
 2506              		.loc 1 198 5 is_stmt 1 view .LVU817
 2507              	.L133:
 199:./fs/pipefs/pipefs.c **** static void dentry_put(struct pipefs_superblock *sb,struct pipefs_dentry* dentry)
 2508              		.loc 1 199 1 is_stmt 0 view .LVU818
 2509 0018 03B0     		add	sp, sp, #12
 2510              	.LCFI27:
 2511              		.cfi_def_cfa_offset 4
 2512              		@ sp needed
 2513 001a 5DF804FB 		ldr	pc, [sp], #4
 2514              	.L137:
 2515 001e 00BF     		.align	2
 2516              	.L136:
 2517 0020 00000000 		.word	pipefs_file_fops
 2518              		.cfi_endproc
 2519              	.LFE1046:
 2521              		.section	.text.pipefs_mkdir,"ax",%progbits
 2522              		.align	1
 2523              		.syntax unified
 2524              		.thumb
 2525              		.thumb_func
 2527              	pipefs_mkdir:
 2528              	.LVL227:
 2529              	.LFB1064:
 537:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2530              		.loc 1 537 1 is_stmt 1 view -0
 2531              		.cfi_startproc
 2532              		@ args = 0, pretend = 0, frame = 0
 2533              		@ frame_needed = 0, uses_anonymous_args = 0
 537:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2534              		.loc 1 537 1 is_stmt 0 view .LVU820
 2535 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2536              	.LCFI28:
 2537              		.cfi_def_cfa_offset 24
 2538              		.cfi_offset 4, -24
 2539              		.cfi_offset 5, -20
 2540              		.cfi_offset 6, -16
 2541              		.cfi_offset 7, -12
 2542              		.cfi_offset 8, -8
 2543              		.cfi_offset 14, -4
 2544 0004 0D46     		mov	r5, r1
 2545 0006 1446     		mov	r4, r2
 2546 0008 9846     		mov	r8, r3
 538:./fs/pipefs/pipefs.c **** 
 2547              		.loc 1 538 5 is_stmt 1 view .LVU821
 538:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZILEbd.s 			page 149


 2548              		.loc 1 538 23 is_stmt 0 view .LVU822
 2549 000a 1046     		mov	r0, r2
 2550              	.LVL228:
 538:./fs/pipefs/pipefs.c **** 
 2551              		.loc 1 538 23 view .LVU823
 2552 000c FFF7FEFF 		bl	d_getname
 2553              	.LVL229:
 538:./fs/pipefs/pipefs.c **** 
 2554              		.loc 1 538 23 view .LVU824
 2555 0010 0646     		mov	r6, r0
 2556              	.LVL230:
 540:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2557              		.loc 1 540 5 is_stmt 1 view .LVU825
 540:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2558              		.loc 1 540 26 is_stmt 0 view .LVU826
 2559 0012 D5F88470 		ldr	r7, [r5, #132]
 2560              	.LVL231:
 541:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2561              		.loc 1 541 5 is_stmt 1 view .LVU827
 541:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2562              		.loc 1 541 34 is_stmt 0 view .LVU828
 2563 0016 0146     		mov	r1, r0
 2564 0018 3846     		mov	r0, r7
 2565              	.LVL232:
 541:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2566              		.loc 1 541 34 view .LVU829
 2567 001a FFF7FEFF 		bl	pipefs_lookup
 2568              	.LVL233:
 542:./fs/pipefs/pipefs.c ****         file =  pipefs_create_dir(dinode->sb,dinode,file_name);
 2569              		.loc 1 542 5 is_stmt 1 view .LVU830
 542:./fs/pipefs/pipefs.c ****         file =  pipefs_create_dir(dinode->sb,dinode,file_name);
 2570              		.loc 1 542 7 is_stmt 0 view .LVU831
 2571 001e 0146     		mov	r1, r0
 2572 0020 A8B1     		cbz	r0, .L145
 2573              	.L139:
 2574              	.LVL234:
 548:./fs/pipefs/pipefs.c ****     
 2575              		.loc 1 548 5 is_stmt 1 view .LVU832
 548:./fs/pipefs/pipefs.c ****     
 2576              		.loc 1 548 9 is_stmt 0 view .LVU833
 2577 0022 8A68     		ldr	r2, [r1, #8]
 548:./fs/pipefs/pipefs.c ****     
 2578              		.loc 1 548 42 view .LVU834
 2579 0024 C8F30803 		ubfx	r3, r8, #0, #9
 2580 0028 43F40043 		orr	r3, r3, #32768
 548:./fs/pipefs/pipefs.c ****     
 2581              		.loc 1 548 32 view .LVU835
 2582 002c 5360     		str	r3, [r2, #4]
 550:./fs/pipefs/pipefs.c ****      return -1;
 2583              		.loc 1 550 5 is_stmt 1 view .LVU836
 550:./fs/pipefs/pipefs.c ****      return -1;
 2584              		.loc 1 550 9 is_stmt 0 view .LVU837
 2585 002e 2046     		mov	r0, r4
 2586 0030 FFF7FEFF 		bl	pipefs_get_dentry
 2587              	.LVL235:
 550:./fs/pipefs/pipefs.c ****      return -1;
 2588              		.loc 1 550 7 discriminator 1 view .LVU838
ARM GAS  /tmp/ccZILEbd.s 			page 150


 2589 0034 B0B1     		cbz	r0, .L142
 553:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2590              		.loc 1 553 5 is_stmt 1 view .LVU839
 553:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2591              		.loc 1 553 37 is_stmt 0 view .LVU840
 2592 0036 6969     		ldr	r1, [r5, #20]
 2593 0038 3846     		mov	r0, r7
 2594 003a FFF7FEFF 		bl	pipefs_get_inode
 2595              	.LVL236:
 554:./fs/pipefs/pipefs.c ****         return -1;
 2596              		.loc 1 554 5 is_stmt 1 view .LVU841
 554:./fs/pipefs/pipefs.c ****         return -1;
 2597              		.loc 1 554 7 is_stmt 0 view .LVU842
 2598 003e 0146     		mov	r1, r0
 2599 0040 98B1     		cbz	r0, .L143
 557:./fs/pipefs/pipefs.c ****    return 0;
 2600              		.loc 1 557 5 is_stmt 1 view .LVU843
 2601 0042 2046     		mov	r0, r4
 2602              	.LVL237:
 557:./fs/pipefs/pipefs.c ****    return 0;
 2603              		.loc 1 557 5 is_stmt 0 view .LVU844
 2604 0044 FFF7FEFF 		bl	d_add
 2605              	.LVL238:
 558:./fs/pipefs/pipefs.c **** }
 2606              		.loc 1 558 4 is_stmt 1 view .LVU845
 558:./fs/pipefs/pipefs.c **** }
 2607              		.loc 1 558 11 is_stmt 0 view .LVU846
 2608 0048 0020     		movs	r0, #0
 2609              	.LVL239:
 2610              	.L138:
 559:./fs/pipefs/pipefs.c **** 
 2611              		.loc 1 559 1 view .LVU847
 2612 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2613              	.LVL240:
 2614              	.L145:
 543:./fs/pipefs/pipefs.c ****     }
 2615              		.loc 1 543 9 is_stmt 1 view .LVU848
 543:./fs/pipefs/pipefs.c ****     }
 2616              		.loc 1 543 17 is_stmt 0 view .LVU849
 2617 004e 3246     		mov	r2, r6
 2618 0050 3946     		mov	r1, r7
 2619 0052 786B     		ldr	r0, [r7, #52]
 2620              	.LVL241:
 543:./fs/pipefs/pipefs.c ****     }
 2621              		.loc 1 543 17 view .LVU850
 2622 0054 FFF7FEFF 		bl	pipefs_create_dir
 2623              	.LVL242:
 545:./fs/pipefs/pipefs.c ****         return -1;
 2624              		.loc 1 545 5 is_stmt 1 view .LVU851
 545:./fs/pipefs/pipefs.c ****         return -1;
 2625              		.loc 1 545 8 is_stmt 0 view .LVU852
 2626 0058 0146     		mov	r1, r0
 2627 005a 0028     		cmp	r0, #0
 2628 005c E1D1     		bne	.L139
 546:./fs/pipefs/pipefs.c ****     }
 2629              		.loc 1 546 16 view .LVU853
 2630 005e 4FF0FF30 		mov	r0, #-1
ARM GAS  /tmp/ccZILEbd.s 			page 151


 2631              	.LVL243:
 546:./fs/pipefs/pipefs.c ****     }
 2632              		.loc 1 546 16 view .LVU854
 2633 0062 F2E7     		b	.L138
 2634              	.LVL244:
 2635              	.L142:
 551:./fs/pipefs/pipefs.c ****     }  
 2636              		.loc 1 551 13 view .LVU855
 2637 0064 4FF0FF30 		mov	r0, #-1
 2638 0068 EFE7     		b	.L138
 2639              	.LVL245:
 2640              	.L143:
 555:./fs/pipefs/pipefs.c **** 
 2641              		.loc 1 555 16 view .LVU856
 2642 006a 4FF0FF30 		mov	r0, #-1
 2643              	.LVL246:
 555:./fs/pipefs/pipefs.c **** 
 2644              		.loc 1 555 16 view .LVU857
 2645 006e ECE7     		b	.L138
 2646              		.cfi_endproc
 2647              	.LFE1064:
 2649              		.section	.text.pipefs_create_file,"ax",%progbits
 2650              		.align	1
 2651              		.syntax unified
 2652              		.thumb
 2653              		.thumb_func
 2655              	pipefs_create_file:
 2656              	.LVL247:
 2657              	.LFB1045:
 189:./fs/pipefs/pipefs.c ****     return pipefs_create_inode(sb,parent_dentry_inode,fop,major,name);
 2658              		.loc 1 189 1 is_stmt 1 view -0
 2659              		.cfi_startproc
 2660              		@ args = 4, pretend = 0, frame = 0
 2661              		@ frame_needed = 0, uses_anonymous_args = 0
 189:./fs/pipefs/pipefs.c ****     return pipefs_create_inode(sb,parent_dentry_inode,fop,major,name);
 2662              		.loc 1 189 1 is_stmt 0 view .LVU859
 2663 0000 10B5     		push	{r4, lr}
 2664              	.LCFI29:
 2665              		.cfi_def_cfa_offset 8
 2666              		.cfi_offset 4, -8
 2667              		.cfi_offset 14, -4
 2668 0002 82B0     		sub	sp, sp, #8
 2669              	.LCFI30:
 2670              		.cfi_def_cfa_offset 16
 190:./fs/pipefs/pipefs.c **** }
 2671              		.loc 1 190 5 is_stmt 1 view .LVU860
 190:./fs/pipefs/pipefs.c **** }
 2672              		.loc 1 190 12 is_stmt 0 view .LVU861
 2673 0004 049C     		ldr	r4, [sp, #16]
 2674 0006 0094     		str	r4, [sp]
 2675 0008 FFF7FEFF 		bl	pipefs_create_inode
 2676              	.LVL248:
 191:./fs/pipefs/pipefs.c **** 
 2677              		.loc 1 191 1 view .LVU862
 2678 000c 02B0     		add	sp, sp, #8
 2679              	.LCFI31:
 2680              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccZILEbd.s 			page 152


 2681              		@ sp needed
 2682 000e 10BD     		pop	{r4, pc}
 191:./fs/pipefs/pipefs.c **** 
 2683              		.loc 1 191 1 view .LVU863
 2684              		.cfi_endproc
 2685              	.LFE1045:
 2687              		.section	.text.pipefs_create,"ax",%progbits
 2688              		.align	1
 2689              		.syntax unified
 2690              		.thumb
 2691              		.thumb_func
 2693              	pipefs_create:
 2694              	.LVL249:
 2695              	.LFB1060:
 469:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2696              		.loc 1 469 1 is_stmt 1 view -0
 2697              		.cfi_startproc
 2698              		@ args = 4, pretend = 0, frame = 0
 2699              		@ frame_needed = 0, uses_anonymous_args = 0
 469:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2700              		.loc 1 469 1 is_stmt 0 view .LVU865
 2701 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2702              	.LCFI32:
 2703              		.cfi_def_cfa_offset 28
 2704              		.cfi_offset 4, -28
 2705              		.cfi_offset 5, -24
 2706              		.cfi_offset 6, -20
 2707              		.cfi_offset 7, -16
 2708              		.cfi_offset 8, -12
 2709              		.cfi_offset 9, -8
 2710              		.cfi_offset 14, -4
 2711 0004 83B0     		sub	sp, sp, #12
 2712              	.LCFI33:
 2713              		.cfi_def_cfa_offset 40
 2714 0006 0D46     		mov	r5, r1
 2715 0008 1446     		mov	r4, r2
 2716 000a 9946     		mov	r9, r3
 470:./fs/pipefs/pipefs.c **** 
 2717              		.loc 1 470 5 is_stmt 1 view .LVU866
 470:./fs/pipefs/pipefs.c **** 
 2718              		.loc 1 470 23 is_stmt 0 view .LVU867
 2719 000c 1046     		mov	r0, r2
 2720              	.LVL250:
 470:./fs/pipefs/pipefs.c **** 
 2721              		.loc 1 470 23 view .LVU868
 2722 000e FFF7FEFF 		bl	d_getname
 2723              	.LVL251:
 470:./fs/pipefs/pipefs.c **** 
 2724              		.loc 1 470 23 view .LVU869
 2725 0012 0646     		mov	r6, r0
 2726              	.LVL252:
 472:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2727              		.loc 1 472 5 is_stmt 1 view .LVU870
 472:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2728              		.loc 1 472 26 is_stmt 0 view .LVU871
 2729 0014 D5F88470 		ldr	r7, [r5, #132]
 2730              	.LVL253:
ARM GAS  /tmp/ccZILEbd.s 			page 153


 473:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2731              		.loc 1 473 5 is_stmt 1 view .LVU872
 473:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2732              		.loc 1 473 34 is_stmt 0 view .LVU873
 2733 0018 0146     		mov	r1, r0
 2734 001a 3846     		mov	r0, r7
 2735              	.LVL254:
 473:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2736              		.loc 1 473 34 view .LVU874
 2737 001c FFF7FEFF 		bl	pipefs_lookup
 2738              	.LVL255:
 474:./fs/pipefs/pipefs.c ****         file =  pipefs_create_file(dinode->sb,dinode,&pipefs_file_fops,10,file_name);
 2739              		.loc 1 474 5 is_stmt 1 view .LVU875
 474:./fs/pipefs/pipefs.c ****         file =  pipefs_create_file(dinode->sb,dinode,&pipefs_file_fops,10,file_name);
 2740              		.loc 1 474 7 is_stmt 0 view .LVU876
 2741 0020 8046     		mov	r8, r0
 2742 0022 C8B1     		cbz	r0, .L155
 2743              	.L149:
 2744              	.LVL256:
 480:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2745              		.loc 1 480 5 is_stmt 1 view .LVU877
 480:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2746              		.loc 1 480 9 is_stmt 0 view .LVU878
 2747 0024 D8F80820 		ldr	r2, [r8, #8]
 480:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2748              		.loc 1 480 42 view .LVU879
 2749 0028 C9F30803 		ubfx	r3, r9, #0, #9
 2750 002c 43F40043 		orr	r3, r3, #32768
 480:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2751              		.loc 1 480 32 view .LVU880
 2752 0030 5360     		str	r3, [r2, #4]
 481:./fs/pipefs/pipefs.c ****      return -1;
 2753              		.loc 1 481 5 is_stmt 1 view .LVU881
 481:./fs/pipefs/pipefs.c ****      return -1;
 2754              		.loc 1 481 9 is_stmt 0 view .LVU882
 2755 0032 4146     		mov	r1, r8
 2756 0034 2046     		mov	r0, r4
 2757 0036 FFF7FEFF 		bl	pipefs_get_dentry
 2758              	.LVL257:
 481:./fs/pipefs/pipefs.c ****      return -1;
 2759              		.loc 1 481 7 discriminator 1 view .LVU883
 2760 003a D0B1     		cbz	r0, .L152
 485:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2761              		.loc 1 485 5 is_stmt 1 view .LVU884
 485:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2762              		.loc 1 485 37 is_stmt 0 view .LVU885
 2763 003c 6969     		ldr	r1, [r5, #20]
 2764 003e D8F80800 		ldr	r0, [r8, #8]
 2765 0042 FFF7FEFF 		bl	pipefs_get_inode
 2766              	.LVL258:
 486:./fs/pipefs/pipefs.c ****         return -1;
 2767              		.loc 1 486 5 is_stmt 1 view .LVU886
 486:./fs/pipefs/pipefs.c ****         return -1;
 2768              		.loc 1 486 7 is_stmt 0 view .LVU887
 2769 0046 0146     		mov	r1, r0
 2770 0048 B0B1     		cbz	r0, .L153
 489:./fs/pipefs/pipefs.c ****    return 0;
ARM GAS  /tmp/ccZILEbd.s 			page 154


 2771              		.loc 1 489 5 is_stmt 1 view .LVU888
 2772 004a 2046     		mov	r0, r4
 2773              	.LVL259:
 489:./fs/pipefs/pipefs.c ****    return 0;
 2774              		.loc 1 489 5 is_stmt 0 view .LVU889
 2775 004c FFF7FEFF 		bl	d_add
 2776              	.LVL260:
 490:./fs/pipefs/pipefs.c **** } 
 2777              		.loc 1 490 4 is_stmt 1 view .LVU890
 490:./fs/pipefs/pipefs.c **** } 
 2778              		.loc 1 490 11 is_stmt 0 view .LVU891
 2779 0050 0020     		movs	r0, #0
 2780              	.LVL261:
 2781              	.L148:
 491:./fs/pipefs/pipefs.c **** 
 2782              		.loc 1 491 1 view .LVU892
 2783 0052 03B0     		add	sp, sp, #12
 2784              	.LCFI34:
 2785              		.cfi_remember_state
 2786              		.cfi_def_cfa_offset 28
 2787              		@ sp needed
 2788 0054 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2789              	.LVL262:
 2790              	.L155:
 2791              	.LCFI35:
 2792              		.cfi_restore_state
 475:./fs/pipefs/pipefs.c ****     }
 2793              		.loc 1 475 9 is_stmt 1 view .LVU893
 475:./fs/pipefs/pipefs.c ****     }
 2794              		.loc 1 475 17 is_stmt 0 view .LVU894
 2795 0058 786B     		ldr	r0, [r7, #52]
 2796              	.LVL263:
 475:./fs/pipefs/pipefs.c ****     }
 2797              		.loc 1 475 17 view .LVU895
 2798 005a 0096     		str	r6, [sp]
 2799 005c 0A23     		movs	r3, #10
 2800 005e 084A     		ldr	r2, .L156
 2801 0060 3946     		mov	r1, r7
 2802 0062 FFF7FEFF 		bl	pipefs_create_file
 2803              	.LVL264:
 477:./fs/pipefs/pipefs.c ****         return -1;
 2804              		.loc 1 477 5 is_stmt 1 view .LVU896
 477:./fs/pipefs/pipefs.c ****         return -1;
 2805              		.loc 1 477 8 is_stmt 0 view .LVU897
 2806 0066 8046     		mov	r8, r0
 2807 0068 0028     		cmp	r0, #0
 2808 006a DBD1     		bne	.L149
 478:./fs/pipefs/pipefs.c ****     }
 2809              		.loc 1 478 16 view .LVU898
 2810 006c 4FF0FF30 		mov	r0, #-1
 2811              	.LVL265:
 478:./fs/pipefs/pipefs.c ****     }
 2812              		.loc 1 478 16 view .LVU899
 2813 0070 EFE7     		b	.L148
 2814              	.LVL266:
 2815              	.L152:
 482:./fs/pipefs/pipefs.c ****     }  
ARM GAS  /tmp/ccZILEbd.s 			page 155


 2816              		.loc 1 482 13 view .LVU900
 2817 0072 4FF0FF30 		mov	r0, #-1
 2818 0076 ECE7     		b	.L148
 2819              	.LVL267:
 2820              	.L153:
 487:./fs/pipefs/pipefs.c **** 
 2821              		.loc 1 487 16 view .LVU901
 2822 0078 4FF0FF30 		mov	r0, #-1
 2823              	.LVL268:
 487:./fs/pipefs/pipefs.c **** 
 2824              		.loc 1 487 16 view .LVU902
 2825 007c E9E7     		b	.L148
 2826              	.L157:
 2827 007e 00BF     		.align	2
 2828              	.L156:
 2829 0080 00000000 		.word	pipefs_file_fops
 2830              		.cfi_endproc
 2831              	.LFE1060:
 2833              		.section	.text.pipefs_link,"ax",%progbits
 2834              		.align	1
 2835              		.syntax unified
 2836              		.thumb
 2837              		.thumb_func
 2839              	pipefs_link:
 2840              	.LVL269:
 2841              	.LFB1062:
 514:./fs/pipefs/pipefs.c ****     struct pipefs_inode *old_inode = (struct pipefs_inode *)old_dentry->d_inode->i_private;
 2842              		.loc 1 514 1 is_stmt 1 view -0
 2843              		.cfi_startproc
 2844              		@ args = 0, pretend = 0, frame = 0
 2845              		@ frame_needed = 0, uses_anonymous_args = 0
 514:./fs/pipefs/pipefs.c ****     struct pipefs_inode *old_inode = (struct pipefs_inode *)old_dentry->d_inode->i_private;
 2846              		.loc 1 514 1 is_stmt 0 view .LVU904
 2847 0000 38B5     		push	{r3, r4, r5, lr}
 2848              	.LCFI36:
 2849              		.cfi_def_cfa_offset 16
 2850              		.cfi_offset 3, -16
 2851              		.cfi_offset 4, -12
 2852              		.cfi_offset 5, -8
 2853              		.cfi_offset 14, -4
 2854 0002 0D46     		mov	r5, r1
 2855 0004 1446     		mov	r4, r2
 515:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private;
 2856              		.loc 1 515 5 is_stmt 1 view .LVU905
 515:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private;
 2857              		.loc 1 515 71 is_stmt 0 view .LVU906
 2858 0006 836C     		ldr	r3, [r0, #72]
 2859              	.LVL270:
 516:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *new_dentry = pipefs_create_dentry(dir_inode, old_inode, dentry->d_name.na
 2860              		.loc 1 516 5 is_stmt 1 view .LVU907
 517:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2861              		.loc 1 517 5 view .LVU908
 517:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2862              		.loc 1 517 40 is_stmt 0 view .LVU909
 2863 0008 9269     		ldr	r2, [r2, #24]
 2864              	.LVL271:
 517:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
ARM GAS  /tmp/ccZILEbd.s 			page 156


 2865              		.loc 1 517 40 view .LVU910
 2866 000a D3F88410 		ldr	r1, [r3, #132]
 2867              	.LVL272:
 517:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2868              		.loc 1 517 40 view .LVU911
 2869 000e D5F88400 		ldr	r0, [r5, #132]
 2870              	.LVL273:
 517:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2871              		.loc 1 517 40 view .LVU912
 2872 0012 FFF7FEFF 		bl	pipefs_create_dentry
 2873              	.LVL274:
 518:./fs/pipefs/pipefs.c ****         return -ENOMEM;
 2874              		.loc 1 518 5 is_stmt 1 view .LVU913
 518:./fs/pipefs/pipefs.c ****         return -ENOMEM;
 2875              		.loc 1 518 8 is_stmt 0 view .LVU914
 2876 0016 58B1     		cbz	r0, .L160
 2877 0018 0146     		mov	r1, r0
 521:./fs/pipefs/pipefs.c ****     dentry->d_sb = dir->i_sb;
 2878              		.loc 1 521 5 is_stmt 1 view .LVU915
 2879 001a 2046     		mov	r0, r4
 2880              	.LVL275:
 521:./fs/pipefs/pipefs.c ****     dentry->d_sb = dir->i_sb;
 2881              		.loc 1 521 5 is_stmt 0 view .LVU916
 2882 001c FFF7FEFF 		bl	pipefs_get_dentry
 2883              	.LVL276:
 522:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
 2884              		.loc 1 522 5 is_stmt 1 view .LVU917
 522:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
 2885              		.loc 1 522 23 is_stmt 0 view .LVU918
 2886 0020 6B69     		ldr	r3, [r5, #20]
 522:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
 2887              		.loc 1 522 18 view .LVU919
 2888 0022 2365     		str	r3, [r4, #80]
 523:./fs/pipefs/pipefs.c ****     return 0;
 2889              		.loc 1 523 5 is_stmt 1 view .LVU920
 2890 0024 A16C     		ldr	r1, [r4, #72]
 2891 0026 2046     		mov	r0, r4
 2892 0028 FFF7FEFF 		bl	d_add
 2893              	.LVL277:
 524:./fs/pipefs/pipefs.c **** }
 2894              		.loc 1 524 5 view .LVU921
 524:./fs/pipefs/pipefs.c **** }
 2895              		.loc 1 524 12 is_stmt 0 view .LVU922
 2896 002c 0020     		movs	r0, #0
 2897              	.L158:
 525:./fs/pipefs/pipefs.c **** 
 2898              		.loc 1 525 1 view .LVU923
 2899 002e 38BD     		pop	{r3, r4, r5, pc}
 2900              	.LVL278:
 2901              	.L160:
 519:./fs/pipefs/pipefs.c ****     }
 2902              		.loc 1 519 16 view .LVU924
 2903 0030 6FF00B00 		mvn	r0, #11
 2904              	.LVL279:
 519:./fs/pipefs/pipefs.c ****     }
 2905              		.loc 1 519 16 view .LVU925
 2906 0034 FBE7     		b	.L158
ARM GAS  /tmp/ccZILEbd.s 			page 157


 2907              		.cfi_endproc
 2908              	.LFE1062:
 2910              		.section	.text.pipefs_destroy_inode,"ax",%progbits
 2911              		.align	1
 2912              		.syntax unified
 2913              		.thumb
 2914              		.thumb_func
 2916              	pipefs_destroy_inode:
 2917              	.LVL280:
 2918              	.LFB1057:
 417:./fs/pipefs/pipefs.c ****     if(node == NULL) return;
 2919              		.loc 1 417 1 is_stmt 1 view -0
 2920              		.cfi_startproc
 2921              		@ args = 0, pretend = 0, frame = 0
 2922              		@ frame_needed = 0, uses_anonymous_args = 0
 418:./fs/pipefs/pipefs.c ****     if(node->i_private != NULL) {
 2923              		.loc 1 418 5 view .LVU927
 418:./fs/pipefs/pipefs.c ****     if(node->i_private != NULL) {
 2924              		.loc 1 418 7 is_stmt 0 view .LVU928
 2925 0000 80B1     		cbz	r0, .L165
 417:./fs/pipefs/pipefs.c ****     if(node == NULL) return;
 2926              		.loc 1 417 1 view .LVU929
 2927 0002 08B5     		push	{r3, lr}
 2928              	.LCFI37:
 2929              		.cfi_def_cfa_offset 8
 2930              		.cfi_offset 3, -8
 2931              		.cfi_offset 14, -4
 419:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 2932              		.loc 1 419 5 is_stmt 1 view .LVU930
 419:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 2933              		.loc 1 419 12 is_stmt 0 view .LVU931
 2934 0004 D0F88400 		ldr	r0, [r0, #132]
 2935              	.LVL281:
 419:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 2936              		.loc 1 419 7 view .LVU932
 2937 0008 58B1     		cbz	r0, .L162
 2938              	.LBB336:
 420:./fs/pipefs/pipefs.c ****         list_del(&pipe_node->list_node);
 2939              		.loc 1 420 9 is_stmt 1 view .LVU933
 2940              	.LVL282:
 421:./fs/pipefs/pipefs.c ****         kfree(pipe_node);        
 2941              		.loc 1 421 9 view .LVU934
 2942              	.LBB337:
 2943              	.LBI337:
 227:./include/linux/list.h **** {
 2944              		.loc 7 227 20 view .LVU935
 2945              	.LBB338:
 229:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 2946              		.loc 7 229 2 view .LVU936
 2947              	.LBB339:
 2948              	.LBI339:
 213:./include/linux/list.h **** {
 2949              		.loc 7 213 20 view .LVU937
 2950              	.LBB340:
 215:./include/linux/list.h **** 		return;
 2951              		.loc 7 215 2 view .LVU938
 218:./include/linux/list.h **** }
ARM GAS  /tmp/ccZILEbd.s 			page 158


 2952              		.loc 7 218 2 view .LVU939
 2953 000a 8369     		ldr	r3, [r0, #24]
 2954 000c 4269     		ldr	r2, [r0, #20]
 2955              	.LVL283:
 2956              	.LBB341:
 2957              	.LBI341:
 193:./include/linux/list.h **** {
 2958              		.loc 7 193 20 view .LVU940
 2959              	.LBB342:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2960              		.loc 7 195 2 view .LVU941
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2961              		.loc 7 195 13 is_stmt 0 view .LVU942
 2962 000e 5360     		str	r3, [r2, #4]
 196:./include/linux/list.h **** }
 2963              		.loc 7 196 2 is_stmt 1 view .LVU943
 196:./include/linux/list.h **** }
 2964              		.loc 7 196 2 view .LVU944
 2965              	.LBB343:
 196:./include/linux/list.h **** }
 2966              		.loc 7 196 2 view .LVU945
 196:./include/linux/list.h **** }
 2967              		.loc 7 196 2 view .LVU946
 2968              	.LBE343:
 196:./include/linux/list.h **** }
 2969              		.loc 7 196 2 discriminator 2 view .LVU947
 196:./include/linux/list.h **** }
 2970              		.loc 7 196 2 discriminator 2 view .LVU948
 196:./include/linux/list.h **** }
 2971              		.loc 7 196 2 discriminator 2 view .LVU949
 2972 0010 1A60     		str	r2, [r3]
 196:./include/linux/list.h **** }
 2973              		.loc 7 196 2 discriminator 2 view .LVU950
 196:./include/linux/list.h **** }
 2974              		.loc 7 196 2 discriminator 2 view .LVU951
 2975              	.LVL284:
 196:./include/linux/list.h **** }
 2976              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU952
 2977              	.LBE342:
 2978              	.LBE341:
 2979              	.LBE340:
 2980              	.LBE339:
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2981              		.loc 7 230 2 is_stmt 1 view .LVU953
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2982              		.loc 7 230 14 is_stmt 0 view .LVU954
 2983 0012 4FF48073 		mov	r3, #256
 2984 0016 4361     		str	r3, [r0, #20]
 231:./include/linux/list.h **** }
 2985              		.loc 7 231 2 is_stmt 1 view .LVU955
 231:./include/linux/list.h **** }
 2986              		.loc 7 231 14 is_stmt 0 view .LVU956
 2987 0018 4FF49173 		mov	r3, #290
 2988 001c 8361     		str	r3, [r0, #24]
 2989              	.LVL285:
 231:./include/linux/list.h **** }
 2990              		.loc 7 231 14 view .LVU957
ARM GAS  /tmp/ccZILEbd.s 			page 159


 2991              	.LBE338:
 2992              	.LBE337:
 422:./fs/pipefs/pipefs.c ****     }
 2993              		.loc 1 422 9 is_stmt 1 view .LVU958
 2994              	.LBB344:
 2995              	.LBI344:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 2996              		.loc 4 383 20 view .LVU959
 2997              	.LBB345:
 2998              		.loc 4 384 2 view .LVU960
 2999 001e FFF7FEFF 		bl	__sfree__
 3000              	.LVL286:
 3001              	.L162:
 3002              		.loc 4 384 2 is_stmt 0 view .LVU961
 3003              	.LBE345:
 3004              	.LBE344:
 3005              	.LBE336:
 424:./fs/pipefs/pipefs.c **** 
 3006              		.loc 1 424 1 view .LVU962
 3007 0022 08BD     		pop	{r3, pc}
 3008              	.LVL287:
 3009              	.L165:
 3010              	.LCFI38:
 3011              		.cfi_def_cfa_offset 0
 3012              		.cfi_restore 3
 3013              		.cfi_restore 14
 424:./fs/pipefs/pipefs.c **** 
 3014              		.loc 1 424 1 view .LVU963
 3015 0024 7047     		bx	lr
 3016              		.cfi_endproc
 3017              	.LFE1057:
 3019              		.section	.text.pipefs_alloc_inode,"ax",%progbits
 3020              		.align	1
 3021              		.syntax unified
 3022              		.thumb
 3023              		.thumb_func
 3025              	pipefs_alloc_inode:
 3026              	.LVL288:
 3027              	.LFB1056:
 401:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *supb = sb->s_fs_info;
 3028              		.loc 1 401 1 is_stmt 1 view -0
 3029              		.cfi_startproc
 3030              		@ args = 0, pretend = 0, frame = 0
 3031              		@ frame_needed = 0, uses_anonymous_args = 0
 401:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *supb = sb->s_fs_info;
 3032              		.loc 1 401 1 is_stmt 0 view .LVU965
 3033 0000 38B5     		push	{r3, r4, r5, lr}
 3034              	.LCFI39:
 3035              		.cfi_def_cfa_offset 16
 3036              		.cfi_offset 3, -16
 3037              		.cfi_offset 4, -12
 3038              		.cfi_offset 5, -8
 3039              		.cfi_offset 14, -4
 3040 0002 0446     		mov	r4, r0
 402:./fs/pipefs/pipefs.c ****     if(supb->magic != MAGIC) return NULL;
 3041              		.loc 1 402 5 is_stmt 1 view .LVU966
 402:./fs/pipefs/pipefs.c ****     if(supb->magic != MAGIC) return NULL;
ARM GAS  /tmp/ccZILEbd.s 			page 160


 3042              		.loc 1 402 31 is_stmt 0 view .LVU967
 3043 0004 006B     		ldr	r0, [r0, #48]
 3044              	.LVL289:
 403:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3045              		.loc 1 403 5 is_stmt 1 view .LVU968
 403:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3046              		.loc 1 403 12 is_stmt 0 view .LVU969
 3047 0006 0268     		ldr	r2, [r0]
 403:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3048              		.loc 1 403 7 view .LVU970
 3049 0008 0B4B     		ldr	r3, .L173
 3050 000a 9A42     		cmp	r2, r3
 3051 000c 0ED1     		bne	.L170
 404:./fs/pipefs/pipefs.c ****      if(inode == NULL) return NULL;
 3052              		.loc 1 404 6 is_stmt 1 view .LVU971
 404:./fs/pipefs/pipefs.c ****      if(inode == NULL) return NULL;
 3053              		.loc 1 404 36 is_stmt 0 view .LVU972
 3054 000e 0A22     		movs	r2, #10
 3055 0010 0A49     		ldr	r1, .L173+4
 3056 0012 FFF7FEFF 		bl	pipefs_create_empty_inode
 3057              	.LVL290:
 405:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3058              		.loc 1 405 6 is_stmt 1 view .LVU973
 405:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3059              		.loc 1 405 8 is_stmt 0 view .LVU974
 3060 0016 0546     		mov	r5, r0
 3061 0018 58B1     		cbz	r0, .L171
 406:./fs/pipefs/pipefs.c ****      if(out_inode == NULL){
 3062              		.loc 1 406 6 is_stmt 1 view .LVU975
 406:./fs/pipefs/pipefs.c ****      if(out_inode == NULL){
 3063              		.loc 1 406 32 is_stmt 0 view .LVU976
 3064 001a 2146     		mov	r1, r4
 3065 001c FFF7FEFF 		bl	pipefs_get_inode
 3066              	.LVL291:
 407:./fs/pipefs/pipefs.c ****         kfree(inode);
 3067              		.loc 1 407 6 is_stmt 1 view .LVU977
 407:./fs/pipefs/pipefs.c ****         kfree(inode);
 3068              		.loc 1 407 8 is_stmt 0 view .LVU978
 3069 0020 0446     		mov	r4, r0
 3070              	.LVL292:
 407:./fs/pipefs/pipefs.c ****         kfree(inode);
 3071              		.loc 1 407 8 view .LVU979
 3072 0022 20B9     		cbnz	r0, .L168
 408:./fs/pipefs/pipefs.c ****         return NULL;
 3073              		.loc 1 408 9 is_stmt 1 view .LVU980
 3074              	.LVL293:
 3075              	.LBB346:
 3076              	.LBI346:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3077              		.loc 4 383 20 view .LVU981
 3078              	.LBB347:
 3079              		.loc 4 384 2 view .LVU982
 3080 0024 2846     		mov	r0, r5
 3081              	.LVL294:
 3082              		.loc 4 384 2 is_stmt 0 view .LVU983
 3083 0026 FFF7FEFF 		bl	__sfree__
 3084              	.LVL295:
ARM GAS  /tmp/ccZILEbd.s 			page 161


 3085              		.loc 4 384 2 view .LVU984
 3086              	.LBE347:
 3087              	.LBE346:
 409:./fs/pipefs/pipefs.c ****      }
 3088              		.loc 1 409 9 is_stmt 1 view .LVU985
 409:./fs/pipefs/pipefs.c ****      }
 3089              		.loc 1 409 16 is_stmt 0 view .LVU986
 3090 002a 00E0     		b	.L168
 3091              	.LVL296:
 3092              	.L170:
 403:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3093              		.loc 1 403 37 discriminator 1 view .LVU987
 3094 002c 0024     		movs	r4, #0
 3095              	.LVL297:
 3096              	.L168:
 412:./fs/pipefs/pipefs.c **** 
 3097              		.loc 1 412 1 view .LVU988
 3098 002e 2046     		mov	r0, r4
 3099 0030 38BD     		pop	{r3, r4, r5, pc}
 3100              	.LVL298:
 3101              	.L171:
 405:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3102              		.loc 1 405 31 discriminator 1 view .LVU989
 3103 0032 0446     		mov	r4, r0
 3104              	.LVL299:
 405:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3105              		.loc 1 405 31 discriminator 1 view .LVU990
 3106 0034 FBE7     		b	.L168
 3107              	.L174:
 3108 0036 00BF     		.align	2
 3109              	.L173:
 3110 0038 4E61BC00 		.word	12345678
 3111 003c 00000000 		.word	pipefs_file_fops
 3112              		.cfi_endproc
 3113              	.LFE1056:
 3115              		.section	.text.pipefs_superblock_destory,"ax",%progbits
 3116              		.align	1
 3117              		.syntax unified
 3118              		.thumb
 3119              		.thumb_func
 3121              	pipefs_superblock_destory:
 3122              	.LVL300:
 3123              	.LFB1050:
 251:./fs/pipefs/pipefs.c ****     if(sb!= NULL) {
 3124              		.loc 1 251 68 is_stmt 1 view -0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 252:./fs/pipefs/pipefs.c ****         struct pipefs_inode * root_inode = sb->rootinode;
 3128              		.loc 1 252 5 view .LVU992
 252:./fs/pipefs/pipefs.c ****         struct pipefs_inode * root_inode = sb->rootinode;
 3129              		.loc 1 252 7 is_stmt 0 view .LVU993
 3130 0000 50B1     		cbz	r0, .L179
 251:./fs/pipefs/pipefs.c ****     if(sb!= NULL) {
 3131              		.loc 1 251 68 view .LVU994
 3132 0002 10B5     		push	{r4, lr}
 3133              	.LCFI40:
ARM GAS  /tmp/ccZILEbd.s 			page 162


 3134              		.cfi_def_cfa_offset 8
 3135              		.cfi_offset 4, -8
 3136              		.cfi_offset 14, -4
 3137 0004 0446     		mov	r4, r0
 3138              	.LBB348:
 253:./fs/pipefs/pipefs.c ****         if(!root_inode){
 3139              		.loc 1 253 9 is_stmt 1 view .LVU995
 253:./fs/pipefs/pipefs.c ****         if(!root_inode){
 3140              		.loc 1 253 31 is_stmt 0 view .LVU996
 3141 0006 4069     		ldr	r0, [r0, #20]
 3142              	.LVL301:
 254:./fs/pipefs/pipefs.c ****             kfree(root_inode);
 3143              		.loc 1 254 9 is_stmt 1 view .LVU997
 254:./fs/pipefs/pipefs.c ****             kfree(root_inode);
 3144              		.loc 1 254 11 is_stmt 0 view .LVU998
 3145 0008 18B1     		cbz	r0, .L182
 3146              	.LVL302:
 3147              	.L177:
 257:./fs/pipefs/pipefs.c ****     }
 3148              		.loc 1 257 9 is_stmt 1 view .LVU999
 3149              	.LBB349:
 3150              	.LBI349:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3151              		.loc 4 383 20 view .LVU1000
 3152              	.LBB350:
 3153              		.loc 4 384 2 view .LVU1001
 3154 000a 2046     		mov	r0, r4
 3155 000c FFF7FEFF 		bl	__sfree__
 3156              	.LVL303:
 3157              		.loc 4 384 2 is_stmt 0 view .LVU1002
 3158              	.LBE350:
 3159              	.LBE349:
 3160              	.LBE348:
 259:./fs/pipefs/pipefs.c **** 
 3161              		.loc 1 259 1 view .LVU1003
 3162 0010 10BD     		pop	{r4, pc}
 3163              	.LVL304:
 3164              	.L182:
 3165              	.LBB353:
 255:./fs/pipefs/pipefs.c ****         }
 3166              		.loc 1 255 13 is_stmt 1 view .LVU1004
 3167              	.LBB351:
 3168              	.LBI351:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3169              		.loc 4 383 20 view .LVU1005
 3170              	.LBB352:
 3171              		.loc 4 384 2 view .LVU1006
 3172 0012 FFF7FEFF 		bl	__sfree__
 3173              	.LVL305:
 385:./include/linux/slab.h **** }
 3174              		.loc 4 385 1 is_stmt 0 view .LVU1007
 3175 0016 F8E7     		b	.L177
 3176              	.LVL306:
 3177              	.L179:
 3178              	.LCFI41:
 3179              		.cfi_def_cfa_offset 0
 3180              		.cfi_restore 4
ARM GAS  /tmp/ccZILEbd.s 			page 163


 3181              		.cfi_restore 14
 3182              		.loc 4 385 1 view .LVU1008
 3183 0018 7047     		bx	lr
 3184              	.LBE352:
 3185              	.LBE351:
 3186              	.LBE353:
 3187              		.cfi_endproc
 3188              	.LFE1050:
 3190              		.section	.rodata.pipefs_mount.str1.4,"aMS",%progbits,1
 3191              		.align	2
 3192              	.LC1:
 3193 0000 726F6F74 		.ascii	"root\000"
 3193      00
 3194              		.section	.text.pipefs_mount,"ax",%progbits
 3195              		.align	1
 3196              		.syntax unified
 3197              		.thumb
 3198              		.thumb_func
 3200              	pipefs_mount:
 3201              	.LVL307:
 3202              	.LFB1052:
 314:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *fs_superblock= pipefs_superblock_create();
 3203              		.loc 1 314 1 is_stmt 1 view -0
 3204              		.cfi_startproc
 3205              		@ args = 0, pretend = 0, frame = 0
 3206              		@ frame_needed = 0, uses_anonymous_args = 0
 314:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *fs_superblock= pipefs_superblock_create();
 3207              		.loc 1 314 1 is_stmt 0 view .LVU1010
 3208 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3209              	.LCFI42:
 3210              		.cfi_def_cfa_offset 24
 3211              		.cfi_offset 3, -24
 3212              		.cfi_offset 4, -20
 3213              		.cfi_offset 5, -16
 3214              		.cfi_offset 6, -12
 3215              		.cfi_offset 7, -8
 3216              		.cfi_offset 14, -4
 315:./fs/pipefs/pipefs.c ****     if (fs_superblock == NULL){
 3217              		.loc 1 315 5 is_stmt 1 view .LVU1011
 315:./fs/pipefs/pipefs.c ****     if (fs_superblock == NULL){
 3218              		.loc 1 315 46 is_stmt 0 view .LVU1012
 3219 0002 FFF7FEFF 		bl	pipefs_superblock_create
 3220              	.LVL308:
 316:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3221              		.loc 1 316 5 is_stmt 1 view .LVU1013
 316:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3222              		.loc 1 316 8 is_stmt 0 view .LVU1014
 3223 0006 0028     		cmp	r0, #0
 3224 0008 49D0     		beq	.L189
 3225 000a 0646     		mov	r6, r0
 319:./fs/pipefs/pipefs.c ****     if(root == NULL){
 3226              		.loc 1 319 5 is_stmt 1 view .LVU1015
 319:./fs/pipefs/pipefs.c ****     if(root == NULL){
 3227              		.loc 1 319 28 is_stmt 0 view .LVU1016
 3228 000c 2549     		ldr	r1, .L195
 3229 000e 0020     		movs	r0, #0
 3230              	.LVL309:
ARM GAS  /tmp/ccZILEbd.s 			page 164


 319:./fs/pipefs/pipefs.c ****     if(root == NULL){
 3231              		.loc 1 319 28 view .LVU1017
 3232 0010 FFF7FEFF 		bl	__d_alloc
 3233              	.LVL310:
 320:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3234              		.loc 1 320 5 is_stmt 1 view .LVU1018
 320:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3235              		.loc 1 320 7 is_stmt 0 view .LVU1019
 3236 0014 0446     		mov	r4, r0
 3237 0016 D8B1     		cbz	r0, .L191
 326:./fs/pipefs/pipefs.c ****     if(dentry == NULL){
 3238              		.loc 1 326 5 is_stmt 1 view .LVU1020
 3239              	.LVL311:
 3240              	.LBB354:
 3241              	.LBI354:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 3242              		.loc 4 379 21 view .LVU1021
 3243              	.LBB355:
 380:./include/linux/slab.h **** }
 3244              		.loc 4 380 2 view .LVU1022
 380:./include/linux/slab.h **** }
 3245              		.loc 4 380 9 is_stmt 0 view .LVU1023
 3246 0018 4FF44C61 		mov	r1, #3264
 3247 001c 1420     		movs	r0, #20
 3248              	.LVL312:
 380:./include/linux/slab.h **** }
 3249              		.loc 4 380 9 view .LVU1024
 3250 001e FFF7FEFF 		bl	__smalloc__
 3251              	.LVL313:
 380:./include/linux/slab.h **** }
 3252              		.loc 4 380 9 view .LVU1025
 3253              	.LBE355:
 3254              	.LBE354:
 327:./fs/pipefs/pipefs.c ****        
 3255              		.loc 1 327 5 is_stmt 1 view .LVU1026
 327:./fs/pipefs/pipefs.c ****        
 3256              		.loc 1 327 7 is_stmt 0 view .LVU1027
 3257 0022 0546     		mov	r5, r0
 3258 0024 D0B1     		cbz	r0, .L192
 332:./fs/pipefs/pipefs.c ****     dentry->target_inode = fs_superblock->rootinode;
 3259              		.loc 1 332 5 is_stmt 1 view .LVU1028
 332:./fs/pipefs/pipefs.c ****     dentry->target_inode = fs_superblock->rootinode;
 3260              		.loc 1 332 18 is_stmt 0 view .LVU1029
 3261 0026 0021     		movs	r1, #0
 3262 0028 4160     		str	r1, [r0, #4]
 333:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 3263              		.loc 1 333 5 is_stmt 1 view .LVU1030
 333:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 3264              		.loc 1 333 41 is_stmt 0 view .LVU1031
 3265 002a 7369     		ldr	r3, [r6, #20]
 333:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 3266              		.loc 1 333 26 view .LVU1032
 3267 002c 8360     		str	r3, [r0, #8]
 334:./fs/pipefs/pipefs.c ****     root->d_fsdata = dentry;
 3268              		.loc 1 334 5 is_stmt 1 view .LVU1033
 334:./fs/pipefs/pipefs.c ****     root->d_fsdata = dentry;
 3269              		.loc 1 334 19 is_stmt 0 view .LVU1034
ARM GAS  /tmp/ccZILEbd.s 			page 165


 3270 002e 1E4B     		ldr	r3, .L195+4
 3271 0030 0360     		str	r3, [r0]
 335:./fs/pipefs/pipefs.c ****     struct inode * root_inode = pipefs_get_inode(dentry->target_inode,NULL);
 3272              		.loc 1 335 5 is_stmt 1 view .LVU1035
 335:./fs/pipefs/pipefs.c ****     struct inode * root_inode = pipefs_get_inode(dentry->target_inode,NULL);
 3273              		.loc 1 335 20 is_stmt 0 view .LVU1036
 3274 0032 6065     		str	r0, [r4, #84]
 336:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 3275              		.loc 1 336 5 is_stmt 1 view .LVU1037
 336:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 3276              		.loc 1 336 33 is_stmt 0 view .LVU1038
 3277 0034 8068     		ldr	r0, [r0, #8]
 3278              	.LVL314:
 336:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 3279              		.loc 1 336 33 view .LVU1039
 3280 0036 FFF7FEFF 		bl	pipefs_get_inode
 3281              	.LVL315:
 337:./fs/pipefs/pipefs.c ****         kfree(dentry);
 3282              		.loc 1 337 5 is_stmt 1 view .LVU1040
 337:./fs/pipefs/pipefs.c ****         kfree(dentry);
 3283              		.loc 1 337 7 is_stmt 0 view .LVU1041
 3284 003a 0746     		mov	r7, r0
 3285 003c A0B1     		cbz	r0, .L193
 343:./fs/pipefs/pipefs.c **** 
 3286              		.loc 1 343 5 is_stmt 1 view .LVU1042
 343:./fs/pipefs/pipefs.c **** 
 3287              		.loc 1 343 19 is_stmt 0 view .LVU1043
 3288 003e A064     		str	r0, [r4, #72]
 345:./fs/pipefs/pipefs.c ****     if(sb == NULL){
 3289              		.loc 1 345 5 is_stmt 1 view .LVU1044
 345:./fs/pipefs/pipefs.c ****     if(sb == NULL){
 3290              		.loc 1 345 29 is_stmt 0 view .LVU1045
 3291 0040 3046     		mov	r0, r6
 3292              	.LVL316:
 345:./fs/pipefs/pipefs.c ****     if(sb == NULL){
 3293              		.loc 1 345 29 view .LVU1046
 3294 0042 FFF7FEFF 		bl	pipefs_get_vfs_superblock
 3295              	.LVL317:
 346:./fs/pipefs/pipefs.c ****         kfree(root);
 3296              		.loc 1 346 5 is_stmt 1 view .LVU1047
 346:./fs/pipefs/pipefs.c ****         kfree(root);
 3297              		.loc 1 346 7 is_stmt 0 view .LVU1048
 3298 0046 D8B1     		cbz	r0, .L194
 353:./fs/pipefs/pipefs.c ****     root->d_sb = sb;
 3299              		.loc 1 353 5 is_stmt 1 view .LVU1049
 353:./fs/pipefs/pipefs.c ****     root->d_sb = sb;
 3300              		.loc 1 353 16 is_stmt 0 view .LVU1050
 3301 0048 8461     		str	r4, [r0, #24]
 354:./fs/pipefs/pipefs.c ****     return root;
 3302              		.loc 1 354 5 is_stmt 1 view .LVU1051
 354:./fs/pipefs/pipefs.c ****     return root;
 3303              		.loc 1 354 16 is_stmt 0 view .LVU1052
 3304 004a 2065     		str	r0, [r4, #80]
 355:./fs/pipefs/pipefs.c **** }
 3305              		.loc 1 355 5 is_stmt 1 view .LVU1053
 3306              	.LVL318:
 3307              	.L183:
ARM GAS  /tmp/ccZILEbd.s 			page 166


 356:./fs/pipefs/pipefs.c **** 
 3308              		.loc 1 356 1 is_stmt 0 view .LVU1054
 3309 004c 2046     		mov	r0, r4
 3310 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3311              	.LVL319:
 3312              	.L191:
 321:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);   
 3313              		.loc 1 321 9 is_stmt 1 view .LVU1055
 3314 0050 3046     		mov	r0, r6
 3315              	.LVL320:
 321:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);   
 3316              		.loc 1 321 9 is_stmt 0 view .LVU1056
 3317 0052 FFF7FEFF 		bl	pipefs_superblock_destory
 3318              	.LVL321:
 322:./fs/pipefs/pipefs.c ****     }
 3319              		.loc 1 322 9 is_stmt 1 view .LVU1057
 322:./fs/pipefs/pipefs.c ****     }
 3320              		.loc 1 322 16 is_stmt 0 view .LVU1058
 3321 0056 6FF00B04 		mvn	r4, #11
 3322              	.LVL322:
 322:./fs/pipefs/pipefs.c ****     }
 3323              		.loc 1 322 16 view .LVU1059
 3324 005a F7E7     		b	.L183
 3325              	.LVL323:
 3326              	.L192:
 329:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3327              		.loc 1 329 9 is_stmt 1 view .LVU1060
 3328              	.LBB356:
 3329              	.LBI356:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3330              		.loc 4 383 20 view .LVU1061
 3331              	.LBB357:
 384:./include/linux/slab.h **** }
 3332              		.loc 4 384 2 view .LVU1062
 3333 005c 2046     		mov	r0, r4
 3334              	.LVL324:
 384:./include/linux/slab.h **** }
 3335              		.loc 4 384 2 is_stmt 0 view .LVU1063
 3336 005e FFF7FEFF 		bl	__sfree__
 3337              	.LVL325:
 384:./include/linux/slab.h **** }
 3338              		.loc 4 384 2 view .LVU1064
 3339              	.LBE357:
 3340              	.LBE356:
 330:./fs/pipefs/pipefs.c ****     }
 3341              		.loc 1 330 9 is_stmt 1 view .LVU1065
 330:./fs/pipefs/pipefs.c ****     }
 3342              		.loc 1 330 16 is_stmt 0 view .LVU1066
 3343 0062 6FF00B04 		mvn	r4, #11
 3344              	.LVL326:
 330:./fs/pipefs/pipefs.c ****     }
 3345              		.loc 1 330 16 view .LVU1067
 3346 0066 F1E7     		b	.L183
 3347              	.LVL327:
 3348              	.L193:
 338:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3349              		.loc 1 338 9 is_stmt 1 view .LVU1068
ARM GAS  /tmp/ccZILEbd.s 			page 167


 3350              	.LBB358:
 3351              	.LBI358:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3352              		.loc 4 383 20 view .LVU1069
 3353              	.LBB359:
 384:./include/linux/slab.h **** }
 3354              		.loc 4 384 2 view .LVU1070
 3355 0068 2846     		mov	r0, r5
 3356              	.LVL328:
 384:./include/linux/slab.h **** }
 3357              		.loc 4 384 2 is_stmt 0 view .LVU1071
 3358 006a FFF7FEFF 		bl	__sfree__
 3359              	.LVL329:
 384:./include/linux/slab.h **** }
 3360              		.loc 4 384 2 view .LVU1072
 3361              	.LBE359:
 3362              	.LBE358:
 339:./fs/pipefs/pipefs.c ****         kfree(root);
 3363              		.loc 1 339 9 is_stmt 1 view .LVU1073
 3364 006e 3046     		mov	r0, r6
 3365 0070 FFF7FEFF 		bl	pipefs_superblock_destory
 3366              	.LVL330:
 340:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3367              		.loc 1 340 9 view .LVU1074
 3368              	.LBB360:
 3369              	.LBI360:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3370              		.loc 4 383 20 view .LVU1075
 3371              	.LBB361:
 384:./include/linux/slab.h **** }
 3372              		.loc 4 384 2 view .LVU1076
 3373 0074 2046     		mov	r0, r4
 3374 0076 FFF7FEFF 		bl	__sfree__
 3375              	.LVL331:
 384:./include/linux/slab.h **** }
 3376              		.loc 4 384 2 is_stmt 0 view .LVU1077
 3377              	.LBE361:
 3378              	.LBE360:
 341:./fs/pipefs/pipefs.c ****     } 
 3379              		.loc 1 341 9 is_stmt 1 view .LVU1078
 341:./fs/pipefs/pipefs.c ****     } 
 3380              		.loc 1 341 16 is_stmt 0 view .LVU1079
 3381 007a 6FF00B04 		mvn	r4, #11
 3382              	.LVL332:
 341:./fs/pipefs/pipefs.c ****     } 
 3383              		.loc 1 341 16 view .LVU1080
 3384 007e E5E7     		b	.L183
 3385              	.LVL333:
 3386              	.L194:
 347:./fs/pipefs/pipefs.c ****         kfree(dentry);
 3387              		.loc 1 347 9 is_stmt 1 view .LVU1081
 3388              	.LBB362:
 3389              	.LBI362:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3390              		.loc 4 383 20 view .LVU1082
 3391              	.LBB363:
 384:./include/linux/slab.h **** }
ARM GAS  /tmp/ccZILEbd.s 			page 168


 3392              		.loc 4 384 2 view .LVU1083
 3393 0080 2046     		mov	r0, r4
 3394              	.LVL334:
 384:./include/linux/slab.h **** }
 3395              		.loc 4 384 2 is_stmt 0 view .LVU1084
 3396 0082 FFF7FEFF 		bl	__sfree__
 3397              	.LVL335:
 384:./include/linux/slab.h **** }
 3398              		.loc 4 384 2 view .LVU1085
 3399              	.LBE363:
 3400              	.LBE362:
 348:./fs/pipefs/pipefs.c ****         inode_put(root_inode);
 3401              		.loc 1 348 9 is_stmt 1 view .LVU1086
 3402              	.LBB364:
 3403              	.LBI364:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3404              		.loc 4 383 20 view .LVU1087
 3405              	.LBB365:
 384:./include/linux/slab.h **** }
 3406              		.loc 4 384 2 view .LVU1088
 3407 0086 2846     		mov	r0, r5
 3408 0088 FFF7FEFF 		bl	__sfree__
 3409              	.LVL336:
 384:./include/linux/slab.h **** }
 3410              		.loc 4 384 2 is_stmt 0 view .LVU1089
 3411              	.LBE365:
 3412              	.LBE364:
 349:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3413              		.loc 1 349 9 is_stmt 1 view .LVU1090
 3414 008c 3846     		mov	r0, r7
 3415 008e FFF7FEFF 		bl	inode_put
 3416              	.LVL337:
 350:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);       
 3417              		.loc 1 350 9 view .LVU1091
 3418 0092 3046     		mov	r0, r6
 3419 0094 FFF7FEFF 		bl	pipefs_superblock_destory
 3420              	.LVL338:
 351:./fs/pipefs/pipefs.c ****     }
 3421              		.loc 1 351 9 view .LVU1092
 351:./fs/pipefs/pipefs.c ****     }
 3422              		.loc 1 351 16 is_stmt 0 view .LVU1093
 3423 0098 6FF00B04 		mvn	r4, #11
 3424              	.LVL339:
 351:./fs/pipefs/pipefs.c ****     }
 3425              		.loc 1 351 16 view .LVU1094
 3426 009c D6E7     		b	.L183
 3427              	.LVL340:
 3428              	.L189:
 317:./fs/pipefs/pipefs.c ****     }
 3429              		.loc 1 317 16 view .LVU1095
 3430 009e 6FF00B04 		mvn	r4, #11
 3431 00a2 D3E7     		b	.L183
 3432              	.L196:
 3433              		.align	2
 3434              	.L195:
 3435 00a4 00000000 		.word	.LC1
 3436 00a8 4E61BC00 		.word	12345678
ARM GAS  /tmp/ccZILEbd.s 			page 169


 3437              		.cfi_endproc
 3438              	.LFE1052:
 3440              		.section	.text.pipe_buffer_read,"ax",%progbits
 3441              		.align	1
 3442              		.global	pipe_buffer_read
 3443              		.syntax unified
 3444              		.thumb
 3445              		.thumb_func
 3447              	pipe_buffer_read:
 3448              	.LVL341:
 3449              	.LFB1035:
  31:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3450              		.loc 1 31 1 is_stmt 1 view -0
 3451              		.cfi_startproc
 3452              		@ args = 0, pretend = 0, frame = 0
 3453              		@ frame_needed = 0, uses_anonymous_args = 0
  31:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3454              		.loc 1 31 1 is_stmt 0 view .LVU1097
 3455 0000 70B5     		push	{r4, r5, r6, lr}
 3456              	.LCFI43:
 3457              		.cfi_def_cfa_offset 16
 3458              		.cfi_offset 4, -16
 3459              		.cfi_offset 5, -12
 3460              		.cfi_offset 6, -8
 3461              		.cfi_offset 14, -4
 3462 0002 0446     		mov	r4, r0
 3463 0004 0D46     		mov	r5, r1
  32:./fs/pipefs/pipefs.c **** 
 3464              		.loc 1 32 5 is_stmt 1 view .LVU1098
 3465 0006 00F20C46 		addw	r6, r0, #1036
 3466 000a 3046     		mov	r0, r6
 3467              	.LVL342:
  32:./fs/pipefs/pipefs.c **** 
 3468              		.loc 1 32 5 is_stmt 0 view .LVU1099
 3469 000c FFF7FEFF 		bl	spin_lock
 3470              	.LVL343:
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3471              		.loc 1 34 5 is_stmt 1 view .LVU1100
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3472              		.loc 1 34 12 is_stmt 0 view .LVU1101
 3473 0010 D4F80424 		ldr	r2, [r4, #1028]
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3474              		.loc 1 34 25 view .LVU1102
 3475 0014 D4F80834 		ldr	r3, [r4, #1032]
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3476              		.loc 1 34 8 view .LVU1103
 3477 0018 9A42     		cmp	r2, r3
 3478 001a 11D0     		beq	.L201
  39:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
 3479              		.loc 1 39 5 is_stmt 1 view .LVU1104
  39:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
 3480              		.loc 1 39 26 is_stmt 0 view .LVU1105
 3481 001c E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
  39:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
 3482              		.loc 1 39 13 view .LVU1106
 3483 001e 2B70     		strb	r3, [r5]
  40:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZILEbd.s 			page 170


 3484              		.loc 1 40 5 is_stmt 1 view .LVU1107
  40:./fs/pipefs/pipefs.c **** 
 3485              		.loc 1 40 21 is_stmt 0 view .LVU1108
 3486 0020 D4F80834 		ldr	r3, [r4, #1032]
  40:./fs/pipefs/pipefs.c **** 
 3487              		.loc 1 40 28 view .LVU1109
 3488 0024 0133     		adds	r3, r3, #1
  40:./fs/pipefs/pipefs.c **** 
 3489              		.loc 1 40 38 view .LVU1110
 3490 0026 D4F80024 		ldr	r2, [r4, #1024]
  40:./fs/pipefs/pipefs.c **** 
 3491              		.loc 1 40 33 view .LVU1111
 3492 002a B3FBF2F1 		udiv	r1, r3, r2
 3493 002e 02FB1133 		mls	r3, r2, r1, r3
  40:./fs/pipefs/pipefs.c **** 
 3494              		.loc 1 40 15 view .LVU1112
 3495 0032 C4F80834 		str	r3, [r4, #1032]
  42:./fs/pipefs/pipefs.c ****     return 0;
 3496              		.loc 1 42 5 is_stmt 1 view .LVU1113
 3497 0036 3046     		mov	r0, r6
 3498 0038 FFF7FEFF 		bl	spin_unlock
 3499              	.LVL344:
  43:./fs/pipefs/pipefs.c **** }
 3500              		.loc 1 43 5 view .LVU1114
  43:./fs/pipefs/pipefs.c **** }
 3501              		.loc 1 43 12 is_stmt 0 view .LVU1115
 3502 003c 0020     		movs	r0, #0
 3503              	.L197:
  44:./fs/pipefs/pipefs.c **** 
 3504              		.loc 1 44 1 view .LVU1116
 3505 003e 70BD     		pop	{r4, r5, r6, pc}
 3506              	.LVL345:
 3507              	.L201:
  35:./fs/pipefs/pipefs.c ****         return -1; // Buffer empty
 3508              		.loc 1 35 9 is_stmt 1 view .LVU1117
 3509 0040 3046     		mov	r0, r6
 3510 0042 FFF7FEFF 		bl	spin_unlock
 3511              	.LVL346:
  36:./fs/pipefs/pipefs.c ****     }
 3512              		.loc 1 36 9 view .LVU1118
  36:./fs/pipefs/pipefs.c ****     }
 3513              		.loc 1 36 16 is_stmt 0 view .LVU1119
 3514 0046 4FF0FF30 		mov	r0, #-1
 3515 004a F8E7     		b	.L197
 3516              		.cfi_endproc
 3517              	.LFE1035:
 3519              		.section	.text.pipefs_read,"ax",%progbits
 3520              		.align	1
 3521              		.syntax unified
 3522              		.thumb
 3523              		.thumb_func
 3525              	pipefs_read:
 3526              	.LVL347:
 3527              	.LFB1039:
  81:./fs/pipefs/pipefs.c ****     for(int i = 0;i < size;i++)
 3528              		.loc 1 81 1 is_stmt 1 view -0
 3529              		.cfi_startproc
ARM GAS  /tmp/ccZILEbd.s 			page 171


 3530              		@ args = 0, pretend = 0, frame = 0
 3531              		@ frame_needed = 0, uses_anonymous_args = 0
  81:./fs/pipefs/pipefs.c ****     for(int i = 0;i < size;i++)
 3532              		.loc 1 81 1 is_stmt 0 view .LVU1121
 3533 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3534              	.LCFI44:
 3535              		.cfi_def_cfa_offset 24
 3536              		.cfi_offset 4, -24
 3537              		.cfi_offset 5, -20
 3538              		.cfi_offset 6, -16
 3539              		.cfi_offset 7, -12
 3540              		.cfi_offset 8, -8
 3541              		.cfi_offset 14, -4
 3542 0004 0646     		mov	r6, r0
 3543 0006 0D46     		mov	r5, r1
 3544 0008 9046     		mov	r8, r2
  82:./fs/pipefs/pipefs.c ****     {
 3545              		.loc 1 82 5 is_stmt 1 view .LVU1122
 3546              	.LBB366:
  82:./fs/pipefs/pipefs.c ****     {
 3547              		.loc 1 82 9 view .LVU1123
 3548              	.LVL348:
  82:./fs/pipefs/pipefs.c ****     {
 3549              		.loc 1 82 13 is_stmt 0 view .LVU1124
 3550 000a 0027     		movs	r7, #0
  82:./fs/pipefs/pipefs.c ****     {
 3551              		.loc 1 82 5 view .LVU1125
 3552 000c 0CE0     		b	.L203
 3553              	.LVL349:
 3554              	.L204:
  85:./fs/pipefs/pipefs.c ****         }
 3555              		.loc 1 85 13 is_stmt 1 view .LVU1126
 3556 000e 0120     		movs	r0, #1
 3557 0010 FFF7FEFF 		bl	__delay
 3558              	.LVL350:
 3559              	.L205:
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3560              		.loc 1 84 99 view .LVU1127
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3561              		.loc 1 84 61 is_stmt 0 view .LVU1128
 3562 0014 F36A     		ldr	r3, [r6, #44]
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3563              		.loc 1 84 70 view .LVU1129
 3564 0016 D3F88430 		ldr	r3, [r3, #132]
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3565              		.loc 1 84 16 view .LVU1130
 3566 001a 2919     		adds	r1, r5, r4
 3567 001c 986B     		ldr	r0, [r3, #56]
 3568 001e FFF7FEFF 		bl	pipe_buffer_read
 3569              	.LVL351:
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3570              		.loc 1 84 99 discriminator 1 view .LVU1131
 3571 0022 0028     		cmp	r0, #0
 3572 0024 F3DB     		blt	.L204
  82:./fs/pipefs/pipefs.c ****     {
 3573              		.loc 1 82 29 is_stmt 1 discriminator 2 view .LVU1132
 3574 0026 0137     		adds	r7, r7, #1
ARM GAS  /tmp/ccZILEbd.s 			page 172


 3575              	.LVL352:
 3576              	.L203:
  82:./fs/pipefs/pipefs.c ****     {
 3577              		.loc 1 82 21 discriminator 1 view .LVU1133
 3578 0028 3C46     		mov	r4, r7
 3579 002a 4745     		cmp	r7, r8
 3580 002c F2D3     		bcc	.L205
 3581              	.LBE366:
  88:./fs/pipefs/pipefs.c **** }
 3582              		.loc 1 88 5 view .LVU1134
  89:./fs/pipefs/pipefs.c **** 
 3583              		.loc 1 89 1 is_stmt 0 view .LVU1135
 3584 002e 0020     		movs	r0, #0
 3585 0030 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
  89:./fs/pipefs/pipefs.c **** 
 3586              		.loc 1 89 1 view .LVU1136
 3587              		.cfi_endproc
 3588              	.LFE1039:
 3590              		.section	.text.pipe_buffer_write,"ax",%progbits
 3591              		.align	1
 3592              		.global	pipe_buffer_write
 3593              		.syntax unified
 3594              		.thumb
 3595              		.thumb_func
 3597              	pipe_buffer_write:
 3598              	.LVL353:
 3599              	.LFB1036:
  47:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3600              		.loc 1 47 1 is_stmt 1 view -0
 3601              		.cfi_startproc
 3602              		@ args = 0, pretend = 0, frame = 0
 3603              		@ frame_needed = 0, uses_anonymous_args = 0
  47:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3604              		.loc 1 47 1 is_stmt 0 view .LVU1138
 3605 0000 70B5     		push	{r4, r5, r6, lr}
 3606              	.LCFI45:
 3607              		.cfi_def_cfa_offset 16
 3608              		.cfi_offset 4, -16
 3609              		.cfi_offset 5, -12
 3610              		.cfi_offset 6, -8
 3611              		.cfi_offset 14, -4
 3612 0002 0446     		mov	r4, r0
 3613 0004 0D46     		mov	r5, r1
  48:./fs/pipefs/pipefs.c **** 
 3614              		.loc 1 48 5 is_stmt 1 view .LVU1139
 3615 0006 00F20C46 		addw	r6, r0, #1036
 3616 000a 3046     		mov	r0, r6
 3617              	.LVL354:
  48:./fs/pipefs/pipefs.c **** 
 3618              		.loc 1 48 5 is_stmt 0 view .LVU1140
 3619 000c FFF7FEFF 		bl	spin_lock
 3620              	.LVL355:
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3621              		.loc 1 50 5 is_stmt 1 view .LVU1141
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3622              		.loc 1 50 13 is_stmt 0 view .LVU1142
 3623 0010 D4F80414 		ldr	r1, [r4, #1028]
ARM GAS  /tmp/ccZILEbd.s 			page 173


  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3624              		.loc 1 50 20 view .LVU1143
 3625 0014 4B1C     		adds	r3, r1, #1
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3626              		.loc 1 50 30 view .LVU1144
 3627 0016 D4F80024 		ldr	r2, [r4, #1024]
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3628              		.loc 1 50 25 view .LVU1145
 3629 001a B3FBF2F0 		udiv	r0, r3, r2
 3630 001e 02FB1033 		mls	r3, r2, r0, r3
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3631              		.loc 1 50 43 view .LVU1146
 3632 0022 D4F80824 		ldr	r2, [r4, #1032]
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3633              		.loc 1 50 8 view .LVU1147
 3634 0026 9342     		cmp	r3, r2
 3635 0028 07D0     		beq	.L211
  55:./fs/pipefs/pipefs.c ****     buf->head = (buf->head + 1) % buf->size;
 3636              		.loc 1 55 5 is_stmt 1 view .LVU1148
  55:./fs/pipefs/pipefs.c ****     buf->head = (buf->head + 1) % buf->size;
 3637              		.loc 1 55 28 is_stmt 0 view .LVU1149
 3638 002a 6554     		strb	r5, [r4, r1]
  56:./fs/pipefs/pipefs.c **** 
 3639              		.loc 1 56 5 is_stmt 1 view .LVU1150
  56:./fs/pipefs/pipefs.c **** 
 3640              		.loc 1 56 15 is_stmt 0 view .LVU1151
 3641 002c C4F80434 		str	r3, [r4, #1028]
  58:./fs/pipefs/pipefs.c ****     return 0;
 3642              		.loc 1 58 5 is_stmt 1 view .LVU1152
 3643 0030 3046     		mov	r0, r6
 3644 0032 FFF7FEFF 		bl	spin_unlock
 3645              	.LVL356:
  59:./fs/pipefs/pipefs.c **** }
 3646              		.loc 1 59 5 view .LVU1153
  59:./fs/pipefs/pipefs.c **** }
 3647              		.loc 1 59 12 is_stmt 0 view .LVU1154
 3648 0036 0020     		movs	r0, #0
 3649              	.L207:
  60:./fs/pipefs/pipefs.c **** 
 3650              		.loc 1 60 1 view .LVU1155
 3651 0038 70BD     		pop	{r4, r5, r6, pc}
 3652              	.LVL357:
 3653              	.L211:
  51:./fs/pipefs/pipefs.c ****         return -1; // Buffer full
 3654              		.loc 1 51 9 is_stmt 1 view .LVU1156
 3655 003a 3046     		mov	r0, r6
 3656 003c FFF7FEFF 		bl	spin_unlock
 3657              	.LVL358:
  52:./fs/pipefs/pipefs.c ****     }
 3658              		.loc 1 52 9 view .LVU1157
  52:./fs/pipefs/pipefs.c ****     }
 3659              		.loc 1 52 16 is_stmt 0 view .LVU1158
 3660 0040 4FF0FF30 		mov	r0, #-1
 3661 0044 F8E7     		b	.L207
 3662              		.cfi_endproc
 3663              	.LFE1036:
 3665              		.section	.text.pipefs_write,"ax",%progbits
ARM GAS  /tmp/ccZILEbd.s 			page 174


 3666              		.align	1
 3667              		.syntax unified
 3668              		.thumb
 3669              		.thumb_func
 3671              	pipefs_write:
 3672              	.LVL359:
 3673              	.LFB1040:
  91:./fs/pipefs/pipefs.c ****     int i;
 3674              		.loc 1 91 92 is_stmt 1 view -0
 3675              		.cfi_startproc
 3676              		@ args = 0, pretend = 0, frame = 0
 3677              		@ frame_needed = 0, uses_anonymous_args = 0
  91:./fs/pipefs/pipefs.c ****     int i;
 3678              		.loc 1 91 92 is_stmt 0 view .LVU1160
 3679 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3680              	.LCFI46:
 3681              		.cfi_def_cfa_offset 24
 3682              		.cfi_offset 4, -24
 3683              		.cfi_offset 5, -20
 3684              		.cfi_offset 6, -16
 3685              		.cfi_offset 7, -12
 3686              		.cfi_offset 8, -8
 3687              		.cfi_offset 14, -4
 3688 0004 0646     		mov	r6, r0
 3689 0006 0D46     		mov	r5, r1
 3690 0008 9046     		mov	r8, r2
  92:./fs/pipefs/pipefs.c ****     for(i = 0;i < size;i++)
 3691              		.loc 1 92 5 is_stmt 1 view .LVU1161
  93:./fs/pipefs/pipefs.c ****     {
 3692              		.loc 1 93 5 view .LVU1162
 3693              	.LVL360:
  93:./fs/pipefs/pipefs.c ****     {
 3694              		.loc 1 93 11 is_stmt 0 view .LVU1163
 3695 000a 0027     		movs	r7, #0
  93:./fs/pipefs/pipefs.c ****     {
 3696              		.loc 1 93 5 view .LVU1164
 3697 000c 0CE0     		b	.L213
 3698              	.LVL361:
 3699              	.L214:
  96:./fs/pipefs/pipefs.c ****         }
 3700              		.loc 1 96 13 is_stmt 1 view .LVU1165
 3701 000e 0120     		movs	r0, #1
 3702 0010 FFF7FEFF 		bl	__delay
 3703              	.LVL362:
 3704              	.L215:
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3705              		.loc 1 95 99 view .LVU1166
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3706              		.loc 1 95 62 is_stmt 0 view .LVU1167
 3707 0014 F36A     		ldr	r3, [r6, #44]
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3708              		.loc 1 95 71 view .LVU1168
 3709 0016 D3F88430 		ldr	r3, [r3, #132]
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3710              		.loc 1 95 16 view .LVU1169
 3711 001a 295D     		ldrb	r1, [r5, r4]	@ zero_extendqisi2
 3712 001c 986B     		ldr	r0, [r3, #56]
ARM GAS  /tmp/ccZILEbd.s 			page 175


 3713 001e FFF7FEFF 		bl	pipe_buffer_write
 3714              	.LVL363:
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3715              		.loc 1 95 99 discriminator 1 view .LVU1170
 3716 0022 0028     		cmp	r0, #0
 3717 0024 F3DB     		blt	.L214
  93:./fs/pipefs/pipefs.c ****     {
 3718              		.loc 1 93 25 is_stmt 1 discriminator 2 view .LVU1171
 3719 0026 0137     		adds	r7, r7, #1
 3720              	.LVL364:
 3721              	.L213:
  93:./fs/pipefs/pipefs.c ****     {
 3722              		.loc 1 93 17 discriminator 1 view .LVU1172
 3723 0028 3C46     		mov	r4, r7
 3724 002a 4745     		cmp	r7, r8
 3725 002c F2D3     		bcc	.L215
  99:./fs/pipefs/pipefs.c **** }
 3726              		.loc 1 99 5 view .LVU1173
 100:./fs/pipefs/pipefs.c **** 
 3727              		.loc 1 100 1 is_stmt 0 view .LVU1174
 3728 002e 0020     		movs	r0, #0
 3729 0030 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 100:./fs/pipefs/pipefs.c **** 
 3730              		.loc 1 100 1 view .LVU1175
 3731              		.cfi_endproc
 3732              	.LFE1040:
 3734              		.section	.fsinitcall,"aw"
 3735              		.align	2
 3738              	_initcall_pipefs_ops_init:
 3739 0000 00000000 		.word	pipefs_ops_init
 3740              		.section	.rodata.str1.4,"aMS",%progbits,1
 3741              		.align	2
 3742              	.LC2:
 3743 0000 70697065 		.ascii	"pipefs\000"
 3743      667300
 3744              		.section	.data.fs_type,"aw"
 3745              		.align	2
 3748              	fs_type:
 3749 0000 00000000 		.word	.LC2
 3750 0004 00000000 		.word	0
 3751 0008 00000000 		.word	0
 3752 000c 00000000 		.space	4
 3753 0010 00000000 		.word	pipefs_mount
 3754 0014 00000000 		.word	pipefs_kill_sb
 3755 0018 00000000 		.word	0
 3756 001c 00000000 		.space	8
 3756      00000000 
 3757              		.section	.data.pipefs_inode_operation,"aw"
 3758              		.align	2
 3761              	pipefs_inode_operation:
 3762 0000 00000000 		.word	pipefs_vfs_lookup
 3763 0004 00000000 		.space	16
 3763      00000000 
 3763      00000000 
 3763      00000000 
 3764 0014 00000000 		.word	pipefs_create
 3765 0018 00000000 		.word	pipefs_link
ARM GAS  /tmp/ccZILEbd.s 			page 176


 3766 001c 00000000 		.word	pipefs_unlink
 3767 0020 00000000 		.space	4
 3768 0024 00000000 		.word	pipefs_mkdir
 3769 0028 00000000 		.word	pipefs_rmdir
 3770 002c 00000000 		.space	8
 3770      00000000 
 3771 0034 00000000 		.word	pipefs_setattr
 3772 0038 00000000 		.word	pipefs_getattr
 3773 003c 00000000 		.space	40
 3773      00000000 
 3773      00000000 
 3773      00000000 
 3773      00000000 
 3774              		.section	.data.pipefs_dentry_operation,"aw"
 3775              		.align	7
 3778              	pipefs_dentry_operation:
 3779 0000 00000000 		.space	24
 3779      00000000 
 3779      00000000 
 3779      00000000 
 3779      00000000 
 3780 0018 00000000 		.word	pipefs_release_dentry
 3781 001c 00000000 		.space	100
 3781      00000000 
 3781      00000000 
 3781      00000000 
 3781      00000000 
 3782              		.section	.data.pipefs_super_operation,"aw"
 3783              		.align	2
 3786              	pipefs_super_operation:
 3787 0000 00000000 		.word	pipefs_alloc_inode
 3788 0004 00000000 		.word	pipefs_destroy_inode
 3789 0008 00000000 		.word	0
 3790 000c 00000000 		.word	0
 3791 0010 00000000 		.word	0
 3792 0014 00000000 		.word	0
 3793 0018 00000000 		.space	4
 3794 001c 00000000 		.word	pipefs_kill_sb
 3795 0020 00000000 		.word	0
 3796 0024 00000000 		.space	16
 3796      00000000 
 3796      00000000 
 3796      00000000 
 3797 0034 00000000 		.word	pipefs_statfs
 3798 0038 00000000 		.space	36
 3798      00000000 
 3798      00000000 
 3798      00000000 
 3798      00000000 
 3799              		.section	.data.pipefs_file_fops,"aw"
 3800              		.align	2
 3803              	pipefs_file_fops:
 3804 0000 00000000 		.word	0
 3805 0004 00000000 		.space	8
 3805      00000000 
 3806 000c 00000000 		.word	pipefs_read
 3807 0010 00000000 		.word	pipefs_write
ARM GAS  /tmp/ccZILEbd.s 			page 177


 3808 0014 00000000 		.space	32
 3808      00000000 
 3808      00000000 
 3808      00000000 
 3808      00000000 
 3809 0034 00000000 		.word	pipefs_open
 3810 0038 00000000 		.space	4
 3811 003c 00000000 		.word	pipefs_release
 3812 0040 00000000 		.space	72
 3812      00000000 
 3812      00000000 
 3812      00000000 
 3812      00000000 
 3813              		.text
 3814              	.Letext0:
 3815              		.file 10 "./include/asm-generic/int-l64.h"
 3816              		.file 11 "./include/asm-generic/posix_types.h"
 3817              		.file 12 "./include/uapi/linux/types.h"
 3818              		.file 13 "./include/linux/types.h"
 3819              		.file 14 "./include/linux/init.h"
 3820              		.file 15 "./include/linux/time64.h"
 3821              		.file 16 "./include/linux/uidgid_types.h"
 3822              		.file 17 "./include/linux/stat.h"
 3823              		.file 18 "./include/linux/errseq.h"
 3824              		.file 19 "./arch/arm_m/include/asm/sched.h"
 3825              		.file 20 "./include/linux/sched.h"
 3826              		.file 21 "./include/linux/lockdep_types.h"
 3827              		.file 22 "./include/linux/spinlock_types_raw.h"
 3828              		.file 23 "./include/linux/spinlock_types.h"
 3829              		.file 24 "./include/linux/rbtree_types.h"
 3830              		.file 25 "./include/linux/projid.h"
 3831              		.file 26 "./include/linux/fs.h"
 3832              		.file 27 "./include/linux/mnt_idmapping.h"
 3833              		.file 28 "./include/linux/mutex.h"
 3834              		.file 29 "./include/linux/uio.h"
 3835              		.file 30 "./include/linux/migrate_mode.h"
 3836              		.file 31 "./include/linux/wait.h"
 3837              		.file 32 "./include/linux/pipe_fs_i.h"
 3838              		.file 33 "./include/linux/xarray.h"
 3839              		.file 34 "./include/linux/rw_hint.h"
 3840              		.file 35 "./include/linux/stddef.h"
 3841              		.file 36 "./include/linux/gfp_types.h"
 3842              		.file 37 "./include/linux/reciprocal_div.h"
 3843              		.file 38 "./include/linux/mm_type.h"
 3844              		.file 39 "./include/linux/bvec.h"
 3845              		.file 40 "./include/linux/blk_types.h"
 3846              		.file 41 "./include/linux/blkdev.h"
 3847              		.file 42 "./include/linux/bio.h"
 3848              		.file 43 "./include/linux/mempool_super_haper.h"
 3849              		.file 44 "./include/linux/mempool.h"
 3850              		.file 45 "./include/linux/workqueue_types.h"
 3851              		.file 46 "./include/linux/blk-mq.h"
 3852              		.file 47 "./include/linux/dcache.h"
 3853              		.file 48 "./include/uapi/linux/pr.h"
 3854              		.file 49 "./include/linux/pr.h"
 3855              		.file 50 "./include/linux/hdreg.h"
 3856              		.file 51 "./include/linux/lockref.h"
ARM GAS  /tmp/ccZILEbd.s 			page 178


 3857              		.file 52 "./include/linux/path.h"
 3858              		.file 53 "./include/linux/statfs.h"
 3859              		.file 54 "./include/linux/string.h"
 3860              		.file 55 "./arch/arm_m/include/asm/string.h"
 3861              		.file 56 "./include/linux/time.h"
 3862              		.file 57 "./include/linux/printk.h"
 3863              		.file 58 "./include/linux/instrumented.h"
 3864              		.file 59 "./include/linux/err.h"
 3865              		.file 60 "./include/linux/kcsan-checks.h"
 3866              		.file 61 "./include/linux/kasan-checks.h"
ARM GAS  /tmp/ccZILEbd.s 			page 179


DEFINED SYMBOLS
                            *ABS*:00000000 pipefs.c
     /tmp/ccZILEbd.s:21     .text.__spin_init:00000000 $t
     /tmp/ccZILEbd.s:26     .text.__spin_init:00000000 __spin_init
     /tmp/ccZILEbd.s:46     .text.__spin_unlock:00000000 $t
     /tmp/ccZILEbd.s:51     .text.__spin_unlock:00000000 __spin_unlock
     /tmp/ccZILEbd.s:69     .text.spin_lock_init:00000000 $t
     /tmp/ccZILEbd.s:74     .text.spin_lock_init:00000000 spin_lock_init
     /tmp/ccZILEbd.s:97     .text.spin_unlock:00000000 $t
     /tmp/ccZILEbd.s:102    .text.spin_unlock:00000000 spin_unlock
     /tmp/ccZILEbd.s:124    .text.pipefs_statfs:00000000 $t
     /tmp/ccZILEbd.s:129    .text.pipefs_statfs:00000000 pipefs_statfs
     /tmp/ccZILEbd.s:174    .text.pipefs_statfs:0000001c $d
     /tmp/ccZILEbd.s:179    .text.pipefs_get_dentry:00000000 $t
     /tmp/ccZILEbd.s:184    .text.pipefs_get_dentry:00000000 pipefs_get_dentry
     /tmp/ccZILEbd.s:214    .text.pipefs_setattr:00000000 $t
     /tmp/ccZILEbd.s:219    .text.pipefs_setattr:00000000 pipefs_setattr
     /tmp/ccZILEbd.s:251    .text.__spin_lock:00000000 $t
     /tmp/ccZILEbd.s:256    .text.__spin_lock:00000000 __spin_lock
     /tmp/ccZILEbd.s:306    .text.spin_lock:00000000 $t
     /tmp/ccZILEbd.s:311    .text.spin_lock:00000000 spin_lock
     /tmp/ccZILEbd.s:371    .init.text:00000000 $t
     /tmp/ccZILEbd.s:376    .init.text:00000000 pipefs_ops_init
     /tmp/ccZILEbd.s:398    .init.text:0000000c $d
     /tmp/ccZILEbd.s:3748   .data.fs_type:00000000 fs_type
     /tmp/ccZILEbd.s:403    .text.pipefs_kill_sb:00000000 $t
     /tmp/ccZILEbd.s:408    .text.pipefs_kill_sb:00000000 pipefs_kill_sb
     /tmp/ccZILEbd.s:430    .rodata.pipefs_release.str1.4:00000000 $d
     /tmp/ccZILEbd.s:434    .text.pipefs_release:00000000 $t
     /tmp/ccZILEbd.s:439    .text.pipefs_release:00000000 pipefs_release
     /tmp/ccZILEbd.s:465    .text.pipefs_release:0000000c $d
     /tmp/ccZILEbd.s:470    .text.pipefs_open:00000000 $t
     /tmp/ccZILEbd.s:475    .text.pipefs_open:00000000 pipefs_open
     /tmp/ccZILEbd.s:540    .text.pipefs_create_empty_inode:00000000 $t
     /tmp/ccZILEbd.s:545    .text.pipefs_create_empty_inode:00000000 pipefs_create_empty_inode
     /tmp/ccZILEbd.s:785    .text.pipefs_create_empty_inode:00000068 $d
     /tmp/ccZILEbd.s:790    .text.pipefs_get_inode:00000000 $t
     /tmp/ccZILEbd.s:795    .text.pipefs_get_inode:00000000 pipefs_get_inode
     /tmp/ccZILEbd.s:849    .text.pipefs_get_inode:00000020 $d
     /tmp/ccZILEbd.s:3761   .data.pipefs_inode_operation:00000000 pipefs_inode_operation
     /tmp/ccZILEbd.s:854    .text.pipefs_getattr:00000000 $t
     /tmp/ccZILEbd.s:859    .text.pipefs_getattr:00000000 pipefs_getattr
     /tmp/ccZILEbd.s:1002   .text.pipefs_getattr:0000007c $d
     /tmp/ccZILEbd.s:1007   .text.pipefs_lookup:00000000 $t
     /tmp/ccZILEbd.s:1012   .text.pipefs_lookup:00000000 pipefs_lookup
     /tmp/ccZILEbd.s:1126   .text.pipefs_vfs_lookup:00000000 $t
     /tmp/ccZILEbd.s:1131   .text.pipefs_vfs_lookup:00000000 pipefs_vfs_lookup
     /tmp/ccZILEbd.s:1214   .text.pipefs_get_vfs_superblock:00000000 $t
     /tmp/ccZILEbd.s:1219   .text.pipefs_get_vfs_superblock:00000000 pipefs_get_vfs_superblock
     /tmp/ccZILEbd.s:1267   .text.pipefs_get_vfs_superblock:0000001c $d
     /tmp/ccZILEbd.s:3778   .data.pipefs_dentry_operation:00000000 pipefs_dentry_operation
     /tmp/ccZILEbd.s:3786   .data.pipefs_super_operation:00000000 pipefs_super_operation
     /tmp/ccZILEbd.s:1273   .text.pipefs_superblock_create:00000000 $t
     /tmp/ccZILEbd.s:1278   .text.pipefs_superblock_create:00000000 pipefs_superblock_create
     /tmp/ccZILEbd.s:1482   .text.pipefs_superblock_create:00000068 $d
     /tmp/ccZILEbd.s:3803   .data.pipefs_file_fops:00000000 pipefs_file_fops
     /tmp/ccZILEbd.s:1488   .text.pipefs_inode_put:00000000 $t
ARM GAS  /tmp/ccZILEbd.s 			page 180


     /tmp/ccZILEbd.s:1493   .text.pipefs_inode_put:00000000 pipefs_inode_put
     /tmp/ccZILEbd.s:1555   .text.dentry_put:00000000 $t
     /tmp/ccZILEbd.s:1560   .text.dentry_put:00000000 dentry_put
     /tmp/ccZILEbd.s:1778   .text.pipefs_release_dentry:00000000 $t
     /tmp/ccZILEbd.s:1783   .text.pipefs_release_dentry:00000000 pipefs_release_dentry
     /tmp/ccZILEbd.s:1815   .text.pipefs_rmdir:00000000 $t
     /tmp/ccZILEbd.s:1820   .text.pipefs_rmdir:00000000 pipefs_rmdir
     /tmp/ccZILEbd.s:1856   .text.pipefs_delete_dentry:00000000 $t
     /tmp/ccZILEbd.s:1861   .text.pipefs_delete_dentry:00000000 pipefs_delete_dentry
     /tmp/ccZILEbd.s:2009   .text.pipefs_unlink:00000000 $t
     /tmp/ccZILEbd.s:2014   .text.pipefs_unlink:00000000 pipefs_unlink
     /tmp/ccZILEbd.s:2050   .text.pipefs_create_dentry:00000000 $t
     /tmp/ccZILEbd.s:2055   .text.pipefs_create_dentry:00000000 pipefs_create_dentry
     /tmp/ccZILEbd.s:2323   .text.pipefs_create_dentry:000000a8 $d
     /tmp/ccZILEbd.s:2328   .text.pipefs_create_inode:00000000 $t
     /tmp/ccZILEbd.s:2333   .text.pipefs_create_inode:00000000 pipefs_create_inode
     /tmp/ccZILEbd.s:2468   .text.pipefs_create_dir:00000000 $t
     /tmp/ccZILEbd.s:2473   .text.pipefs_create_dir:00000000 pipefs_create_dir
     /tmp/ccZILEbd.s:2517   .text.pipefs_create_dir:00000020 $d
     /tmp/ccZILEbd.s:2522   .text.pipefs_mkdir:00000000 $t
     /tmp/ccZILEbd.s:2527   .text.pipefs_mkdir:00000000 pipefs_mkdir
     /tmp/ccZILEbd.s:2650   .text.pipefs_create_file:00000000 $t
     /tmp/ccZILEbd.s:2655   .text.pipefs_create_file:00000000 pipefs_create_file
     /tmp/ccZILEbd.s:2688   .text.pipefs_create:00000000 $t
     /tmp/ccZILEbd.s:2693   .text.pipefs_create:00000000 pipefs_create
     /tmp/ccZILEbd.s:2829   .text.pipefs_create:00000080 $d
     /tmp/ccZILEbd.s:2834   .text.pipefs_link:00000000 $t
     /tmp/ccZILEbd.s:2839   .text.pipefs_link:00000000 pipefs_link
     /tmp/ccZILEbd.s:2911   .text.pipefs_destroy_inode:00000000 $t
     /tmp/ccZILEbd.s:2916   .text.pipefs_destroy_inode:00000000 pipefs_destroy_inode
     /tmp/ccZILEbd.s:3020   .text.pipefs_alloc_inode:00000000 $t
     /tmp/ccZILEbd.s:3025   .text.pipefs_alloc_inode:00000000 pipefs_alloc_inode
     /tmp/ccZILEbd.s:3110   .text.pipefs_alloc_inode:00000038 $d
     /tmp/ccZILEbd.s:3116   .text.pipefs_superblock_destory:00000000 $t
     /tmp/ccZILEbd.s:3121   .text.pipefs_superblock_destory:00000000 pipefs_superblock_destory
     /tmp/ccZILEbd.s:3191   .rodata.pipefs_mount.str1.4:00000000 $d
     /tmp/ccZILEbd.s:3195   .text.pipefs_mount:00000000 $t
     /tmp/ccZILEbd.s:3200   .text.pipefs_mount:00000000 pipefs_mount
     /tmp/ccZILEbd.s:3435   .text.pipefs_mount:000000a4 $d
     /tmp/ccZILEbd.s:3441   .text.pipe_buffer_read:00000000 $t
     /tmp/ccZILEbd.s:3447   .text.pipe_buffer_read:00000000 pipe_buffer_read
     /tmp/ccZILEbd.s:3520   .text.pipefs_read:00000000 $t
     /tmp/ccZILEbd.s:3525   .text.pipefs_read:00000000 pipefs_read
     /tmp/ccZILEbd.s:3591   .text.pipe_buffer_write:00000000 $t
     /tmp/ccZILEbd.s:3597   .text.pipe_buffer_write:00000000 pipe_buffer_write
     /tmp/ccZILEbd.s:3666   .text.pipefs_write:00000000 $t
     /tmp/ccZILEbd.s:3671   .text.pipefs_write:00000000 pipefs_write
     /tmp/ccZILEbd.s:3735   .fsinitcall:00000000 $d
     /tmp/ccZILEbd.s:3738   .fsinitcall:00000000 _initcall_pipefs_ops_init
     /tmp/ccZILEbd.s:3741   .rodata.str1.4:00000000 $d
     /tmp/ccZILEbd.s:3745   .data.fs_type:00000000 $d
     /tmp/ccZILEbd.s:3758   .data.pipefs_inode_operation:00000000 $d
     /tmp/ccZILEbd.s:3775   .data.pipefs_dentry_operation:00000000 $d
     /tmp/ccZILEbd.s:3783   .data.pipefs_super_operation:00000000 $d
     /tmp/ccZILEbd.s:3800   .data.pipefs_file_fops:00000000 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccZILEbd.s 			page 181


stop_all_scheduler
start_all_scheduler
get_current_task
__delay
register_filesystem
put_super
printk
__smalloc__
new_inode
ktime_get
HZ
strcmp
d_add
alloc_super
__sfree__
simple_unlink
strlen
strcpy
d_getname
__d_alloc
inode_put
