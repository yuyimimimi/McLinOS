ARM GAS  /tmp/ccZnep12.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"pipefs.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./fs/pipefs/pipefs.c"
  20              		.section	.text.__spin_init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	__spin_init:
  27              	.LVL0:
  28              	.LFB852:
  29              		.file 2 "./arch/arm_m/include/asm/spinlock.h"
   1:./arch/arm_m/include/asm/spinlock.h **** #ifndef __SPIN_LOCK_H_
   2:./arch/arm_m/include/asm/spinlock.h **** #define __SPIN_LOCK_H_
   3:./arch/arm_m/include/asm/spinlock.h **** 
   4:./arch/arm_m/include/asm/spinlock.h **** #include <linux/sched.h>
   5:./arch/arm_m/include/asm/spinlock.h **** 
   6:./arch/arm_m/include/asm/spinlock.h **** typedef struct { 
   7:./arch/arm_m/include/asm/spinlock.h ****      int flag; 
   8:./arch/arm_m/include/asm/spinlock.h **** } arch_spinlock_t;
   9:./arch/arm_m/include/asm/spinlock.h **** 
  10:./arch/arm_m/include/asm/spinlock.h **** static int __spin_init(arch_spinlock_t *lock) 
  11:./arch/arm_m/include/asm/spinlock.h **** {
  30              		.loc 2 11 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  12:./arch/arm_m/include/asm/spinlock.h ****     lock->flag = 0;
  35              		.loc 2 12 5 view .LVU1
  36              		.loc 2 12 16 is_stmt 0 view .LVU2
  37 0000 0023     		movs	r3, #0
  38 0002 0360     		str	r3, [r0]
  39              	.LVL1:
  13:./arch/arm_m/include/asm/spinlock.h **** }
  40              		.loc 2 13 1 view .LVU3
  41 0004 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE852:
  45              		.section	.text.__spin_unlock,"ax",%progbits
  46              		.align	1
ARM GAS  /tmp/ccZnep12.s 			page 2


  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  51              	__spin_unlock:
  52              	.LVL2:
  53              	.LFB854:
  14:./arch/arm_m/include/asm/spinlock.h **** 
  15:./arch/arm_m/include/asm/spinlock.h **** static int __spin_lock(arch_spinlock_t *lock) {
  16:./arch/arm_m/include/asm/spinlock.h **** 
  17:./arch/arm_m/include/asm/spinlock.h ****     stop_all_scheduler();
  18:./arch/arm_m/include/asm/spinlock.h ****     if(lock->flag == 0){
  19:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
  20:./arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
  21:./arch/arm_m/include/asm/spinlock.h ****         return 1;
  22:./arch/arm_m/include/asm/spinlock.h ****     }
  23:./arch/arm_m/include/asm/spinlock.h ****     else
  24:./arch/arm_m/include/asm/spinlock.h ****     {
  25:./arch/arm_m/include/asm/spinlock.h ****         start_all_scheduler();
  26:./arch/arm_m/include/asm/spinlock.h ****         return 0;
  27:./arch/arm_m/include/asm/spinlock.h ****     }
  28:./arch/arm_m/include/asm/spinlock.h **** }
  29:./arch/arm_m/include/asm/spinlock.h **** 
  30:./arch/arm_m/include/asm/spinlock.h **** static void  __spin_unlock( arch_spinlock_t *lock ){
  54              		.loc 2 30 52 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  31:./arch/arm_m/include/asm/spinlock.h ****     lock->flag = 0;
  59              		.loc 2 31 5 view .LVU5
  60              		.loc 2 31 16 is_stmt 0 view .LVU6
  61 0000 0023     		movs	r3, #0
  62 0002 0360     		str	r3, [r0]
  32:./arch/arm_m/include/asm/spinlock.h **** }
  63              		.loc 2 32 1 view .LVU7
  64 0004 7047     		bx	lr
  65              		.cfi_endproc
  66              	.LFE854:
  68              		.section	.text.spin_lock_init,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  74              	spin_lock_init:
  75              	.LVL3:
  76              	.LFB855:
  77              		.file 3 "./include/linux/spinlock.h"
   1:./include/linux/spinlock.h **** #ifndef __SPINLOCK_H__
   2:./include/linux/spinlock.h **** #define __SPINLOCK_H__
   3:./include/linux/spinlock.h **** 
   4:./include/linux/spinlock.h **** #include <linux/types.h>
   5:./include/linux/spinlock.h **** #include <linux/spinlock_types.h>
   6:./include/linux/spinlock.h **** #include <linux/sched.h>
   7:./include/linux/spinlock.h **** 
   8:./include/linux/spinlock.h **** 
   9:./include/linux/spinlock.h **** 
  10:./include/linux/spinlock.h **** static void spin_lock_init(spinlock_t* lock){
ARM GAS  /tmp/ccZnep12.s 			page 3


  78              		.loc 3 10 45 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		.loc 3 10 45 is_stmt 0 view .LVU9
  83 0000 08B5     		push	{r3, lr}
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
  11:./include/linux/spinlock.h ****     __spin_init(&lock->rlock.raw_lock);
  88              		.loc 3 11 5 is_stmt 1 view .LVU10
  89 0002 FFF7FEFF 		bl	__spin_init
  90              	.LVL4:
  12:./include/linux/spinlock.h **** }
  91              		.loc 3 12 1 is_stmt 0 view .LVU11
  92 0006 08BD     		pop	{r3, pc}
  93              		.cfi_endproc
  94              	.LFE855:
  96              		.section	.text.spin_unlock,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 102              	spin_unlock:
 103              	.LVL5:
 104              	.LFB857:
  13:./include/linux/spinlock.h **** 
  14:./include/linux/spinlock.h **** static void spin_lock(spinlock_t* lock)
  15:./include/linux/spinlock.h **** {  
  16:./include/linux/spinlock.h ****     while (1)
  17:./include/linux/spinlock.h ****     {
  18:./include/linux/spinlock.h ****         if(__spin_lock(&lock->rlock.raw_lock) == 1){
  19:./include/linux/spinlock.h ****             lock->owner = get_current_task();
  20:./include/linux/spinlock.h ****             break;
  21:./include/linux/spinlock.h ****         }
  22:./include/linux/spinlock.h ****         else  if(lock->owner == get_current_task()){  //Â¶ÇÊûúÂ∑≤ÁªèË¢´ÈîÅ‰Ωè‰ΩÜÊòØÈîÅÊòØËá™Â∑±ÁöÑÔ
  23:./include/linux/spinlock.h ****             return;   
  24:./include/linux/spinlock.h ****         }
  25:./include/linux/spinlock.h ****         else{
  26:./include/linux/spinlock.h ****             __delay(5); //‰∏ªÂä®ËÆ©Âá∫Êó∂Èó¥Áâá
  27:./include/linux/spinlock.h ****         }
  28:./include/linux/spinlock.h ****     }
  29:./include/linux/spinlock.h **** }
  30:./include/linux/spinlock.h **** 
  31:./include/linux/spinlock.h **** static void spin_unlock(spinlock_t* lock)
  32:./include/linux/spinlock.h **** {
 105              		.loc 3 32 1 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		.loc 3 32 1 is_stmt 0 view .LVU13
 110 0000 08B5     		push	{r3, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 3, -8
 114              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZnep12.s 			page 4


  33:./include/linux/spinlock.h ****     __spin_unlock(&lock->rlock.raw_lock);
 115              		.loc 3 33 5 is_stmt 1 view .LVU14
 116 0002 FFF7FEFF 		bl	__spin_unlock
 117              	.LVL6:
  34:./include/linux/spinlock.h **** }
 118              		.loc 3 34 1 is_stmt 0 view .LVU15
 119 0006 08BD     		pop	{r3, pc}
 120              		.cfi_endproc
 121              	.LFE857:
 123              		.section	.text.pipefs_statfs,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	pipefs_statfs:
 130              	.LVL7:
 131              	.LFB1060:
   1:./fs/pipefs/pipefs.c **** #include <linux/kernel.h>
   2:./fs/pipefs/pipefs.c **** #include <linux/uaccess.h>
   3:./fs/pipefs/pipefs.c **** #include <linux/atomic.h>
   4:./fs/pipefs/pipefs.c **** #include <linux/types.h>
   5:./fs/pipefs/pipefs.c **** #include <linux/module.h>
   6:./fs/pipefs/pipefs.c **** #include <linux/string.h>
   7:./fs/pipefs/pipefs.c **** #include <linux/fs.h>
   8:./fs/pipefs/pipefs.c **** #include <linux/slab.h>
   9:./fs/pipefs/pipefs.c **** #include <linux/init.h>
  10:./fs/pipefs/pipefs.c **** #include <linux/sched.h>
  11:./fs/pipefs/pipefs.c **** 
  12:./fs/pipefs/pipefs.c **** 
  13:./fs/pipefs/pipefs.c **** 
  14:./fs/pipefs/pipefs.c **** 
  15:./fs/pipefs/pipefs.c **** #define MAGIC 12345678
  16:./fs/pipefs/pipefs.c **** struct pipefs_dentry {
  17:./fs/pipefs/pipefs.c ****     int                    magic;
  18:./fs/pipefs/pipefs.c ****     char *name;                             // ÂêçÂ≠ó
  19:./fs/pipefs/pipefs.c ****     struct pipefs_inode *target_inode;       // ËØ•dentryÊåáÂêëÁöÑÁõÆÊ†áinode
  20:./fs/pipefs/pipefs.c ****     struct list_head list_node;             // ÊåÇËΩΩÂà∞Áà∂ÁõÆÂΩïinode‰∏≠ÁöÑlisthead‰∏≠
  21:./fs/pipefs/pipefs.c **** };
  22:./fs/pipefs/pipefs.c **** struct pipefs_superblock {
  23:./fs/pipefs/pipefs.c ****     int                    magic;
  24:./fs/pipefs/pipefs.c ****     spinlock_t             lock;
  25:./fs/pipefs/pipefs.c ****     struct pipefs_inode *rootinode;
  26:./fs/pipefs/pipefs.c ****     struct list_head inode_list_head;       // ËØ•superblock‰∏ãÁöÑinodeÈìæË°®Â§¥
  27:./fs/pipefs/pipefs.c **** };
  28:./fs/pipefs/pipefs.c **** 
  29:./fs/pipefs/pipefs.c **** 
  30:./fs/pipefs/pipefs.c **** int pipe_buffer_read(struct pipe_buffer *buf, char* data) 
  31:./fs/pipefs/pipefs.c **** {
  32:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
  33:./fs/pipefs/pipefs.c **** 
  34:./fs/pipefs/pipefs.c ****     if (buf->head == buf->tail) {
  35:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
  36:./fs/pipefs/pipefs.c ****         return -1; // Buffer empty
  37:./fs/pipefs/pipefs.c ****     }
  38:./fs/pipefs/pipefs.c **** 
  39:./fs/pipefs/pipefs.c ****     data[0] = buf->buffer[buf->tail];
  40:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
ARM GAS  /tmp/ccZnep12.s 			page 5


  41:./fs/pipefs/pipefs.c **** 
  42:./fs/pipefs/pipefs.c ****     spin_unlock(&buf->lock);
  43:./fs/pipefs/pipefs.c ****     return 0;
  44:./fs/pipefs/pipefs.c **** }
  45:./fs/pipefs/pipefs.c **** 
  46:./fs/pipefs/pipefs.c **** int pipe_buffer_write(struct pipe_buffer *buf, char data)
  47:./fs/pipefs/pipefs.c **** {
  48:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
  49:./fs/pipefs/pipefs.c **** 
  50:./fs/pipefs/pipefs.c ****     if ((buf->head + 1) % buf->size == buf->tail) {
  51:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
  52:./fs/pipefs/pipefs.c ****         return -1; // Buffer full
  53:./fs/pipefs/pipefs.c ****     }
  54:./fs/pipefs/pipefs.c **** 
  55:./fs/pipefs/pipefs.c ****     buf->buffer[buf->head] = data;
  56:./fs/pipefs/pipefs.c ****     buf->head = (buf->head + 1) % buf->size;
  57:./fs/pipefs/pipefs.c **** 
  58:./fs/pipefs/pipefs.c ****     spin_unlock(&buf->lock);
  59:./fs/pipefs/pipefs.c ****     return 0;
  60:./fs/pipefs/pipefs.c **** }
  61:./fs/pipefs/pipefs.c **** 
  62:./fs/pipefs/pipefs.c **** 
  63:./fs/pipefs/pipefs.c **** static int pipefs_open(struct inode *inode, struct file *file)
  64:./fs/pipefs/pipefs.c **** {
  65:./fs/pipefs/pipefs.c ****     struct pipefs_inode *p_inode = inode->i_private;
  66:./fs/pipefs/pipefs.c ****     if(p_inode->buf == NULL)
  67:./fs/pipefs/pipefs.c ****     {
  68:./fs/pipefs/pipefs.c ****         p_inode->buf = kmalloc(sizeof(struct pipe_buffer),GFP_KERNEL);
  69:./fs/pipefs/pipefs.c ****         if(!p_inode->buf)
  70:./fs/pipefs/pipefs.c ****            return -1;
  71:./fs/pipefs/pipefs.c ****     }
  72:./fs/pipefs/pipefs.c ****     return 0;
  73:./fs/pipefs/pipefs.c **** }
  74:./fs/pipefs/pipefs.c **** 
  75:./fs/pipefs/pipefs.c **** static int pipefs_release(struct inode *inode, struct file *file){
  76:./fs/pipefs/pipefs.c ****     pr_info("pipefs test close\n");
  77:./fs/pipefs/pipefs.c ****     return 0;
  78:./fs/pipefs/pipefs.c **** }
  79:./fs/pipefs/pipefs.c **** 
  80:./fs/pipefs/pipefs.c **** static int pipefs_read(struct file *file, char __user * data, size_t size, loff_t *offset)
  81:./fs/pipefs/pipefs.c **** {    
  82:./fs/pipefs/pipefs.c ****     for(int i = 0;i < size;i++)
  83:./fs/pipefs/pipefs.c ****     {
  84:./fs/pipefs/pipefs.c ****         while (pipe_buffer_read(((struct pipefs_inode*)(file->f_inode->i_private))->buf,&data[i]) <
  85:./fs/pipefs/pipefs.c ****             __delay(1);
  86:./fs/pipefs/pipefs.c ****         }
  87:./fs/pipefs/pipefs.c ****     }
  88:./fs/pipefs/pipefs.c ****     return 0;
  89:./fs/pipefs/pipefs.c **** }
  90:./fs/pipefs/pipefs.c **** 
  91:./fs/pipefs/pipefs.c **** static int pipefs_write(struct file *file, char __user * data, size_t size, loff_t *offset){
  92:./fs/pipefs/pipefs.c ****     int i;
  93:./fs/pipefs/pipefs.c ****     for(i = 0;i < size;i++)
  94:./fs/pipefs/pipefs.c ****     {
  95:./fs/pipefs/pipefs.c ****         while (pipe_buffer_write(((struct pipefs_inode*)(file->f_inode->i_private))->buf,data[i]) <
  96:./fs/pipefs/pipefs.c ****             __delay(1);
  97:./fs/pipefs/pipefs.c ****         }
ARM GAS  /tmp/ccZnep12.s 			page 6


  98:./fs/pipefs/pipefs.c ****     }
  99:./fs/pipefs/pipefs.c ****     return 0;
 100:./fs/pipefs/pipefs.c **** }
 101:./fs/pipefs/pipefs.c **** 
 102:./fs/pipefs/pipefs.c **** 
 103:./fs/pipefs/pipefs.c **** 
 104:./fs/pipefs/pipefs.c **** 
 105:./fs/pipefs/pipefs.c **** 
 106:./fs/pipefs/pipefs.c **** static struct file_operations pipefs_file_fops = {
 107:./fs/pipefs/pipefs.c ****     .owner = THIS_MODULE,
 108:./fs/pipefs/pipefs.c ****     .open = pipefs_open,
 109:./fs/pipefs/pipefs.c ****     .release = pipefs_release,
 110:./fs/pipefs/pipefs.c ****     .read  = pipefs_read,
 111:./fs/pipefs/pipefs.c ****     .write = pipefs_write
 112:./fs/pipefs/pipefs.c **** };
 113:./fs/pipefs/pipefs.c **** 
 114:./fs/pipefs/pipefs.c **** static struct pipefs_inode *pipefs_create_empty_inode(struct pipefs_superblock *sb,struct file_oper
 115:./fs/pipefs/pipefs.c **** {
 116:./fs/pipefs/pipefs.c ****     if(fop == NULL) return NULL;
 117:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
 118:./fs/pipefs/pipefs.c ****     if(pipe_inode == NULL) return NULL;
 119:./fs/pipefs/pipefs.c ****     pipe_inode->magic = MAGIC;
 120:./fs/pipefs/pipefs.c ****     pipe_inode->major = major;
 121:./fs/pipefs/pipefs.c ****     pipe_inode->i_fop = fop;
 122:./fs/pipefs/pipefs.c ****     pipe_inode->sb    = sb;
 123:./fs/pipefs/pipefs.c ****     pipe_inode->i_mode = S_IFREG | 0755;
 124:./fs/pipefs/pipefs.c ****     atomic_set(&pipe_inode->dentry_count,0);
 125:./fs/pipefs/pipefs.c ****     spin_lock_init(&pipe_inode->lock);
 126:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->list_node);
 127:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->dentry_list_head);
 128:./fs/pipefs/pipefs.c ****     
 129:./fs/pipefs/pipefs.c ****     pipe_inode->buf = NULL;
 130:./fs/pipefs/pipefs.c **** 
 131:./fs/pipefs/pipefs.c ****     spin_lock(&sb->lock);
 132:./fs/pipefs/pipefs.c ****     list_add(&pipe_inode->list_node,&sb->inode_list_head);
 133:./fs/pipefs/pipefs.c ****     spin_unlock(&sb->lock);
 134:./fs/pipefs/pipefs.c ****     
 135:./fs/pipefs/pipefs.c ****     return pipe_inode;
 136:./fs/pipefs/pipefs.c **** }
 137:./fs/pipefs/pipefs.c **** static void pipefs_inode_put(struct pipefs_inode *node){
 138:./fs/pipefs/pipefs.c ****     if(node != NULL)kfree(node);
 139:./fs/pipefs/pipefs.c **** }
 140:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dentry(struct pipefs_inode* parent_dentry_inode,struct p
 141:./fs/pipefs/pipefs.c **** {
 142:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 143:./fs/pipefs/pipefs.c **** 
 144:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* new_dentry =  kmalloc(sizeof(struct pipefs_dentry),GFP_KERNEL);
 145:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL)return NULL;
 146:./fs/pipefs/pipefs.c ****     new_dentry->magic = MAGIC;
 147:./fs/pipefs/pipefs.c ****     new_dentry->name = NULL;
 148:./fs/pipefs/pipefs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 149:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 150:./fs/pipefs/pipefs.c ****         kfree(new_dentry);
 151:./fs/pipefs/pipefs.c ****         return NULL;
 152:./fs/pipefs/pipefs.c ****     }
 153:./fs/pipefs/pipefs.c ****     strcpy(new_dentry->name,name);
 154:./fs/pipefs/pipefs.c ****     new_dentry->target_inode = target_inode;
ARM GAS  /tmp/ccZnep12.s 			page 7


 155:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 156:./fs/pipefs/pipefs.c ****     
 157:./fs/pipefs/pipefs.c **** 
 158:./fs/pipefs/pipefs.c ****     atomic_inc (&target_inode->dentry_count);      //Â¢ûÂä†ÂºïÁî®ËÆ°Êï∞
 159:./fs/pipefs/pipefs.c ****     
 160:./fs/pipefs/pipefs.c ****     
 161:./fs/pipefs/pipefs.c ****     spin_lock   (&parent_dentry_inode->lock);
 162:./fs/pipefs/pipefs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 163:./fs/pipefs/pipefs.c ****     spin_unlock(&parent_dentry_inode->lock);
 164:./fs/pipefs/pipefs.c ****     return new_dentry;
 165:./fs/pipefs/pipefs.c **** }
 166:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_inode( struct pipefs_superblock *sb,struct pipefs_inode*
 167:./fs/pipefs/pipefs.c **** {
 168:./fs/pipefs/pipefs.c ****     struct pipefs_inode * new_inode = pipefs_create_empty_inode(sb,fop,major);
 169:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 170:./fs/pipefs/pipefs.c ****         return NULL;
 171:./fs/pipefs/pipefs.c ****     }   
 172:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* new_dentry = pipefs_create_dentry(parent_dentry_inode,new_inode,name); //
 173:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
 174:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 175:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 176:./fs/pipefs/pipefs.c ****         spin_unlock(&sb->lock);
 177:./fs/pipefs/pipefs.c ****         pipefs_inode_put(new_inode);
 178:./fs/pipefs/pipefs.c ****         return NULL;
 179:./fs/pipefs/pipefs.c ****     }
 180:./fs/pipefs/pipefs.c ****     return new_dentry;
 181:./fs/pipefs/pipefs.c **** }
 182:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_file(struct pipefs_superblock *sb,struct pipefs_inode* p
 183:./fs/pipefs/pipefs.c **** {
 184:./fs/pipefs/pipefs.c ****     return pipefs_create_inode(sb,parent_dentry_inode,fop,major,name);
 185:./fs/pipefs/pipefs.c **** }
 186:./fs/pipefs/pipefs.c **** 
 187:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dir(struct pipefs_superblock *sb,struct pipefs_inode* pa
 188:./fs/pipefs/pipefs.c **** {
 189:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry =  pipefs_create_inode(sb,parent_dentry_inode,&pipefs_file_fops,0,
 190:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 191:./fs/pipefs/pipefs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 192:./fs/pipefs/pipefs.c ****     return dentry;
 193:./fs/pipefs/pipefs.c **** }
 194:./fs/pipefs/pipefs.c **** static void dentry_put(struct pipefs_superblock *sb,struct pipefs_dentry* dentry)
 195:./fs/pipefs/pipefs.c **** {
 196:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return;
 197:./fs/pipefs/pipefs.c ****     if(dentry->target_inode != NULL)
 198:./fs/pipefs/pipefs.c ****     {
 199:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 200:./fs/pipefs/pipefs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 201:./fs/pipefs/pipefs.c ****         {
 202:./fs/pipefs/pipefs.c ****             list_del(&dentry->target_inode->list_node);    
 203:./fs/pipefs/pipefs.c ****             pipefs_inode_put(dentry->target_inode);
 204:./fs/pipefs/pipefs.c ****         }
 205:./fs/pipefs/pipefs.c ****         spin_unlock(&sb->lock);
 206:./fs/pipefs/pipefs.c ****     }
 207:./fs/pipefs/pipefs.c ****     kfree(dentry->name);
 208:./fs/pipefs/pipefs.c ****     kfree(dentry);
 209:./fs/pipefs/pipefs.c **** }
 210:./fs/pipefs/pipefs.c **** static void pipefs_delete_dentry(struct pipefs_superblock *sb,struct pipefs_inode* parent_dentry_in
 211:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
ARM GAS  /tmp/ccZnep12.s 			page 8


 212:./fs/pipefs/pipefs.c ****     
 213:./fs/pipefs/pipefs.c ****     if ((delete_dentry->target_inode->i_mode & S_IFMT) == S_IFDIR ){         //Â¶ÇÊûúÊòØÁõÆÂΩïÈ°πÈú
 214:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 215:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 216:./fs/pipefs/pipefs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 217:./fs/pipefs/pipefs.c ****             return;
 218:./fs/pipefs/pipefs.c ****         }
 219:./fs/pipefs/pipefs.c ****     }
 220:./fs/pipefs/pipefs.c ****     list_del(&delete_dentry->list_node);                                     //Â∞Üdentry‰ªéÁà∂ÁõÆÂΩ
 221:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_unlock(&parent_dentry_inode->lock);
 222:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 223:./fs/pipefs/pipefs.c **** }
 224:./fs/pipefs/pipefs.c **** static struct pipefs_superblock* pipefs_superblock_create(void) //ÂàõÂª∫superblock
 225:./fs/pipefs/pipefs.c **** {
 226:./fs/pipefs/pipefs.c ****     struct pipefs_superblock*d_sb = kmalloc(sizeof(struct pipefs_superblock),GFP_KERNEL);
 227:./fs/pipefs/pipefs.c ****     if(d_sb == NULL){
 228:./fs/pipefs/pipefs.c ****         return NULL;        
 229:./fs/pipefs/pipefs.c ****     }
 230:./fs/pipefs/pipefs.c ****     d_sb->magic = MAGIC;
 231:./fs/pipefs/pipefs.c ****     spin_lock_init(&d_sb->lock);
 232:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&d_sb->inode_list_head);
 233:./fs/pipefs/pipefs.c ****     struct pipefs_inode* root_inode = pipefs_create_empty_inode(d_sb ,&pipefs_file_fops,0);
 234:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 235:./fs/pipefs/pipefs.c ****         kfree(d_sb);
 236:./fs/pipefs/pipefs.c ****         return NULL;
 237:./fs/pipefs/pipefs.c ****     }
 238:./fs/pipefs/pipefs.c ****     root_inode->i_mode = S_IFDIR | 0755;
 239:./fs/pipefs/pipefs.c ****     d_sb->rootinode = root_inode;
 240:./fs/pipefs/pipefs.c ****     root_inode->i_fop = &pipefs_file_fops;
 241:./fs/pipefs/pipefs.c ****     atomic_inc (&root_inode->dentry_count); 
 242:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&root_inode->dentry_list_head);
 243:./fs/pipefs/pipefs.c ****     return d_sb;
 244:./fs/pipefs/pipefs.c **** } 
 245:./fs/pipefs/pipefs.c **** static void pipefs_superblock_destory(struct pipefs_superblock* sb){
 246:./fs/pipefs/pipefs.c ****     if(sb!= NULL) {
 247:./fs/pipefs/pipefs.c ****         struct pipefs_inode * root_inode = sb->rootinode;
 248:./fs/pipefs/pipefs.c ****         if(!root_inode){
 249:./fs/pipefs/pipefs.c ****             kfree(root_inode);
 250:./fs/pipefs/pipefs.c ****         }
 251:./fs/pipefs/pipefs.c ****         kfree(sb);
 252:./fs/pipefs/pipefs.c ****     }
 253:./fs/pipefs/pipefs.c **** }
 254:./fs/pipefs/pipefs.c **** 
 255:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_lookup(struct pipefs_inode* dentry_inode,char *name)
 256:./fs/pipefs/pipefs.c **** {
 257:./fs/pipefs/pipefs.c ****     if(dentry_inode == NULL) return NULL;
 258:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 259:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 260:./fs/pipefs/pipefs.c ****     spin_lock(&dentry_inode->lock);
 261:./fs/pipefs/pipefs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 262:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 263:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 264:./fs/pipefs/pipefs.c ****             return pos;
 265:./fs/pipefs/pipefs.c ****         }
 266:./fs/pipefs/pipefs.c ****     }
 267:./fs/pipefs/pipefs.c ****     spin_unlock(&dentry_inode->lock);
 268:./fs/pipefs/pipefs.c ****     return NULL;
ARM GAS  /tmp/ccZnep12.s 			page 9


 269:./fs/pipefs/pipefs.c **** }
 270:./fs/pipefs/pipefs.c **** 
 271:./fs/pipefs/pipefs.c **** 
 272:./fs/pipefs/pipefs.c **** 
 273:./fs/pipefs/pipefs.c **** 
 274:./fs/pipefs/pipefs.c **** 
 275:./fs/pipefs/pipefs.c **** 
 276:./fs/pipefs/pipefs.c **** 
 277:./fs/pipefs/pipefs.c **** 
 278:./fs/pipefs/pipefs.c **** 
 279:./fs/pipefs/pipefs.c **** static struct super_operations pipefs_super_operation;
 280:./fs/pipefs/pipefs.c **** static struct dentry_operations pipefs_dentry_operation;
 281:./fs/pipefs/pipefs.c **** static struct inode_operations pipefs_inode_operation;
 282:./fs/pipefs/pipefs.c **** 
 283:./fs/pipefs/pipefs.c **** static void pipefs_kill_sb (struct super_block * sb);
 284:./fs/pipefs/pipefs.c **** static struct inode *pipefs_alloc_inode(struct super_block *sb);
 285:./fs/pipefs/pipefs.c **** static void  pipefs_destroy_inode(struct inode * node); //Êí§ÈîÄpipefs_alloc_inodeÊâÄÂÅöÁöÑ‰∏ÄÂàá
 286:./fs/pipefs/pipefs.c **** static int pipefs_statfs (struct dentry * dentry, struct kstatfs *star);
 287:./fs/pipefs/pipefs.c **** static struct dentry * pipefs_get_dentry(struct dentry * vdentry, struct pipefs_dentry *dentry);
 288:./fs/pipefs/pipefs.c **** static struct super_block *pipefs_get_vfs_superblock(struct pipefs_superblock *sb);
 289:./fs/pipefs/pipefs.c **** static struct inode *  pipefs_get_inode(struct pipefs_inode *,struct super_block*);
 290:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_mount(struct file_system_type *fs_type,
 291:./fs/pipefs/pipefs.c ****     int flags,
 292:./fs/pipefs/pipefs.c ****     const char *pipe_name,
 293:./fs/pipefs/pipefs.c ****     void *data);
 294:./fs/pipefs/pipefs.c **** 
 295:./fs/pipefs/pipefs.c **** static struct file_system_type fs_type = {
 296:./fs/pipefs/pipefs.c ****     .name     = "pipefs",
 297:./fs/pipefs/pipefs.c ****     .fs_flags = 0,
 298:./fs/pipefs/pipefs.c ****     .init_fs_context = NULL,
 299:./fs/pipefs/pipefs.c ****     .kill_sb  = pipefs_kill_sb,
 300:./fs/pipefs/pipefs.c ****     .mount    = pipefs_mount,
 301:./fs/pipefs/pipefs.c ****     .owner    = THIS_MODULE,
 302:./fs/pipefs/pipefs.c **** };
 303:./fs/pipefs/pipefs.c **** 
 304:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_mount(struct file_system_type *fs_type,
 305:./fs/pipefs/pipefs.c ****     int flags,
 306:./fs/pipefs/pipefs.c ****     const char *pipe_name,
 307:./fs/pipefs/pipefs.c ****     void *data)
 308:./fs/pipefs/pipefs.c **** {
 309:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *fs_superblock= pipefs_superblock_create();
 310:./fs/pipefs/pipefs.c ****     if (fs_superblock == NULL){
 311:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 312:./fs/pipefs/pipefs.c ****     }
 313:./fs/pipefs/pipefs.c ****     struct dentry * root = __d_alloc(NULL,"root");
 314:./fs/pipefs/pipefs.c ****     if(root == NULL){
 315:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 316:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);   
 317:./fs/pipefs/pipefs.c ****     }
 318:./fs/pipefs/pipefs.c **** 
 319:./fs/pipefs/pipefs.c **** 
 320:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry = kmalloc(sizeof(struct pipefs_dentry),GFP_KERNEL);
 321:./fs/pipefs/pipefs.c ****     if(dentry == NULL){
 322:./fs/pipefs/pipefs.c ****        
 323:./fs/pipefs/pipefs.c ****         kfree(root);
 324:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 325:./fs/pipefs/pipefs.c ****     }
ARM GAS  /tmp/ccZnep12.s 			page 10


 326:./fs/pipefs/pipefs.c ****     dentry->name = NULL;
 327:./fs/pipefs/pipefs.c ****     dentry->target_inode = fs_superblock->rootinode;
 328:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 329:./fs/pipefs/pipefs.c ****     root->d_fsdata = dentry;
 330:./fs/pipefs/pipefs.c ****     struct inode * root_inode = pipefs_get_inode(dentry->target_inode,NULL);
 331:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 332:./fs/pipefs/pipefs.c ****         kfree(dentry);
 333:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 334:./fs/pipefs/pipefs.c ****         kfree(root);
 335:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 336:./fs/pipefs/pipefs.c ****     } 
 337:./fs/pipefs/pipefs.c ****     root->d_inode = root_inode;
 338:./fs/pipefs/pipefs.c **** 
 339:./fs/pipefs/pipefs.c ****     struct super_block *sb =pipefs_get_vfs_superblock(fs_superblock);
 340:./fs/pipefs/pipefs.c ****     if(sb == NULL){
 341:./fs/pipefs/pipefs.c ****         kfree(root);
 342:./fs/pipefs/pipefs.c ****         kfree(dentry);
 343:./fs/pipefs/pipefs.c ****         inode_put(root_inode);
 344:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 345:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);       
 346:./fs/pipefs/pipefs.c ****     }
 347:./fs/pipefs/pipefs.c ****     sb->s_root = root;
 348:./fs/pipefs/pipefs.c ****     root->d_sb = sb;
 349:./fs/pipefs/pipefs.c **** 
 350:./fs/pipefs/pipefs.c ****     return root;
 351:./fs/pipefs/pipefs.c **** }
 352:./fs/pipefs/pipefs.c **** 
 353:./fs/pipefs/pipefs.c **** 
 354:./fs/pipefs/pipefs.c **** 
 355:./fs/pipefs/pipefs.c **** static struct super_operations pipefs_super_operation = {
 356:./fs/pipefs/pipefs.c ****     .alloc_inode   = pipefs_alloc_inode,
 357:./fs/pipefs/pipefs.c ****     .destroy_inode = pipefs_destroy_inode, 
 358:./fs/pipefs/pipefs.c ****     .free_inode    = NULL,         
 359:./fs/pipefs/pipefs.c ****     .dirty_inode   = NULL,
 360:./fs/pipefs/pipefs.c ****     .write_inode   = NULL,
 361:./fs/pipefs/pipefs.c ****     .drop_inode    = NULL,
 362:./fs/pipefs/pipefs.c ****     .put_super     = pipefs_kill_sb,
 363:./fs/pipefs/pipefs.c ****     .sync_fs       = NULL,
 364:./fs/pipefs/pipefs.c ****     .statfs        = pipefs_statfs,
 365:./fs/pipefs/pipefs.c **** };
 366:./fs/pipefs/pipefs.c **** 
 367:./fs/pipefs/pipefs.c **** static struct super_block *pipefs_get_vfs_superblock(struct pipefs_superblock *sb) //Â∞ÜÊñá‰ª∂Á≥ªÁª
 368:./fs/pipefs/pipefs.c **** {
 369:./fs/pipefs/pipefs.c ****     if(sb == NULL) return NULL;
 370:./fs/pipefs/pipefs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 371:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 372:./fs/pipefs/pipefs.c ****     vsb->s_fs_info =   sb;
 373:./fs/pipefs/pipefs.c ****     vsb->s_d_op    =  &pipefs_dentry_operation;
 374:./fs/pipefs/pipefs.c ****     vsb->s_op      =  &pipefs_super_operation;    
 375:./fs/pipefs/pipefs.c ****     return vsb;
 376:./fs/pipefs/pipefs.c **** }
 377:./fs/pipefs/pipefs.c **** 
 378:./fs/pipefs/pipefs.c **** 
 379:./fs/pipefs/pipefs.c **** static void pipefs_kill_sb (struct super_block * sb){                          //ÈáäÊîæÊñá‰ª∂Á≥ªÁªü
 380:./fs/pipefs/pipefs.c ****     put_super(sb);
 381:./fs/pipefs/pipefs.c **** }
 382:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZnep12.s 			page 11


 383:./fs/pipefs/pipefs.c **** static struct inode *  pipefs_get_inode(struct pipefs_inode * pipe_node,struct super_block* sb )  /
 384:./fs/pipefs/pipefs.c **** {
 385:./fs/pipefs/pipefs.c ****     if(pipe_node == NULL) return NULL;
 386:./fs/pipefs/pipefs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 387:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 388:./fs/pipefs/pipefs.c ****     inode->i_mode    = pipe_node->i_mode;
 389:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 390:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 391:./fs/pipefs/pipefs.c ****     inode->i_private = pipe_node;
 392:./fs/pipefs/pipefs.c ****     return inode;
 393:./fs/pipefs/pipefs.c **** }
 394:./fs/pipefs/pipefs.c **** 
 395:./fs/pipefs/pipefs.c **** static struct inode *pipefs_alloc_inode(struct super_block *sb) //ÂàõÂª∫‰∏Ä‰∏™inodeÔºåÂêåÊó∂ÂàõÂª∫i
 396:./fs/pipefs/pipefs.c **** {
 397:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *supb = sb->s_fs_info;
 398:./fs/pipefs/pipefs.c ****     if(supb->magic != MAGIC) return NULL;
 399:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 400:./fs/pipefs/pipefs.c ****      if(inode == NULL) return NULL;
 401:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 402:./fs/pipefs/pipefs.c ****      if(out_inode == NULL){
 403:./fs/pipefs/pipefs.c ****         kfree(inode);
 404:./fs/pipefs/pipefs.c ****         return NULL;
 405:./fs/pipefs/pipefs.c ****      }
 406:./fs/pipefs/pipefs.c ****      return out_inode;
 407:./fs/pipefs/pipefs.c **** }
 408:./fs/pipefs/pipefs.c **** 
 409:./fs/pipefs/pipefs.c **** 
 410:./fs/pipefs/pipefs.c **** 
 411:./fs/pipefs/pipefs.c **** static void  pipefs_destroy_inode(struct inode * node) //Êí§ÈîÄpipefs_alloc_inodeÊâÄÂÅöÁöÑ‰∏ÄÂàá
 412:./fs/pipefs/pipefs.c **** {
 413:./fs/pipefs/pipefs.c ****     if(node == NULL) return;
 414:./fs/pipefs/pipefs.c ****     if(node->i_private != NULL) {
 415:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 416:./fs/pipefs/pipefs.c ****         list_del(&pipe_node->list_node);
 417:./fs/pipefs/pipefs.c ****         kfree(pipe_node);        
 418:./fs/pipefs/pipefs.c ****     }
 419:./fs/pipefs/pipefs.c **** }
 420:./fs/pipefs/pipefs.c **** 
 421:./fs/pipefs/pipefs.c **** static int pipefs_statfs (struct dentry * dentry, struct kstatfs *star){
 132              		.loc 1 421 72 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 422:./fs/pipefs/pipefs.c ****     struct pipefs_dentry * pipefs_dentry = dentry->d_fsdata;
 137              		.loc 1 422 5 view .LVU17
 423:./fs/pipefs/pipefs.c ****     struct pipefs_inode * pipefs_node = pipefs_dentry->target_inode;
 138              		.loc 1 423 5 view .LVU18
 424:./fs/pipefs/pipefs.c ****     star->f_type = MAGIC;
 139              		.loc 1 424 5 view .LVU19
 140              		.loc 1 424 18 is_stmt 0 view .LVU20
 141 0000 064B     		ldr	r3, .L8
 142 0002 0B60     		str	r3, [r1]
 143              	.LVL8:
 425:./fs/pipefs/pipefs.c ****     star->f_bsize  = 0;
 144              		.loc 1 425 5 is_stmt 1 view .LVU21
 145              		.loc 1 425 20 is_stmt 0 view .LVU22
ARM GAS  /tmp/ccZnep12.s 			page 12


 146 0004 0020     		movs	r0, #0
 147              	.LVL9:
 148              		.loc 1 425 20 view .LVU23
 149 0006 4860     		str	r0, [r1, #4]
 426:./fs/pipefs/pipefs.c ****     star->f_blocks = 1;
 150              		.loc 1 426 5 is_stmt 1 view .LVU24
 151              		.loc 1 426 20 is_stmt 0 view .LVU25
 152 0008 0123     		movs	r3, #1
 153 000a 8B60     		str	r3, [r1, #8]
 427:./fs/pipefs/pipefs.c ****     star->f_bfree  = 0;
 154              		.loc 1 427 5 is_stmt 1 view .LVU26
 155              		.loc 1 427 20 is_stmt 0 view .LVU27
 156 000c C860     		str	r0, [r1, #12]
 428:./fs/pipefs/pipefs.c ****     star->f_bavail = 0;
 157              		.loc 1 428 5 is_stmt 1 view .LVU28
 158              		.loc 1 428 20 is_stmt 0 view .LVU29
 159 000e 0861     		str	r0, [r1, #16]
 429:./fs/pipefs/pipefs.c ****     star->f_files  = 128;
 160              		.loc 1 429 5 is_stmt 1 view .LVU30
 161              		.loc 1 429 20 is_stmt 0 view .LVU31
 162 0010 8023     		movs	r3, #128
 163 0012 4B61     		str	r3, [r1, #20]
 430:./fs/pipefs/pipefs.c ****     star->f_ffree  = 127;
 164              		.loc 1 430 5 is_stmt 1 view .LVU32
 165              		.loc 1 430 20 is_stmt 0 view .LVU33
 166 0014 7F23     		movs	r3, #127
 167 0016 8B61     		str	r3, [r1, #24]
 431:./fs/pipefs/pipefs.c ****     return 0;
 168              		.loc 1 431 5 is_stmt 1 view .LVU34
 432:./fs/pipefs/pipefs.c **** }
 169              		.loc 1 432 1 is_stmt 0 view .LVU35
 170 0018 7047     		bx	lr
 171              	.L9:
 172 001a 00BF     		.align	2
 173              	.L8:
 174 001c 4E61BC00 		.word	12345678
 175              		.cfi_endproc
 176              	.LFE1060:
 178              		.section	.text.pipefs_get_dentry,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	pipefs_get_dentry:
 185              	.LVL10:
 186              	.LFB1061:
 433:./fs/pipefs/pipefs.c **** 
 434:./fs/pipefs/pipefs.c **** 
 435:./fs/pipefs/pipefs.c **** 
 436:./fs/pipefs/pipefs.c **** static int pipefs_create(struct mnt_idmap * map, struct inode * dir,struct dentry * dentry,umode_t 
 437:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_vfs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flag
 438:./fs/pipefs/pipefs.c **** static int pipefs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry);
 439:./fs/pipefs/pipefs.c **** static int pipefs_unlink(struct inode *dir, struct dentry *dentry);
 440:./fs/pipefs/pipefs.c **** static int pipefs_mkdir(struct mnt_idmap *mnt, struct inode *dir, struct dentry *dentry, umode_t mo
 441:./fs/pipefs/pipefs.c **** static int pipefs_setattr(struct mnt_idmap *map, struct dentry *dentry, struct iattr *iattr);
 442:./fs/pipefs/pipefs.c **** static int  pipefs_getattr (struct mnt_idmap *dmp, const struct path * path,struct kstat *stat, u32
 443:./fs/pipefs/pipefs.c **** static int pipefs_rmdir(struct inode *	inode  ,struct dentry *dentry);
ARM GAS  /tmp/ccZnep12.s 			page 13


 444:./fs/pipefs/pipefs.c **** 
 445:./fs/pipefs/pipefs.c **** static struct inode_operations pipefs_inode_operation = {
 446:./fs/pipefs/pipefs.c ****     .create = pipefs_create,
 447:./fs/pipefs/pipefs.c ****     .lookup = pipefs_vfs_lookup,
 448:./fs/pipefs/pipefs.c ****     .link   = pipefs_link,
 449:./fs/pipefs/pipefs.c ****     .unlink = pipefs_unlink,
 450:./fs/pipefs/pipefs.c ****     .mkdir  = pipefs_mkdir,
 451:./fs/pipefs/pipefs.c ****     .rmdir  = pipefs_rmdir,
 452:./fs/pipefs/pipefs.c ****     .setattr = pipefs_setattr,
 453:./fs/pipefs/pipefs.c ****     .getattr = pipefs_getattr
 454:./fs/pipefs/pipefs.c **** };
 455:./fs/pipefs/pipefs.c **** 
 456:./fs/pipefs/pipefs.c **** static struct dentry * pipefs_get_dentry(struct dentry * vdentry, struct pipefs_dentry *dentry) //È
 457:./fs/pipefs/pipefs.c **** {
 187              		.loc 1 457 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 458:./fs/pipefs/pipefs.c ****     if(dentry == NULL || vdentry == NULL) return NULL;
 192              		.loc 1 458 5 view .LVU37
 193              		.loc 1 458 7 is_stmt 0 view .LVU38
 194 0000 11B1     		cbz	r1, .L12
 195              		.loc 1 458 23 discriminator 2 view .LVU39
 196 0002 10B1     		cbz	r0, .L10
 459:./fs/pipefs/pipefs.c ****     vdentry->d_fsdata = dentry;
 197              		.loc 1 459 5 is_stmt 1 view .LVU40
 198              		.loc 1 459 23 is_stmt 0 view .LVU41
 199 0004 4165     		str	r1, [r0, #84]
 460:./fs/pipefs/pipefs.c ****     return vdentry;
 200              		.loc 1 460 5 is_stmt 1 view .LVU42
 201              		.loc 1 460 12 is_stmt 0 view .LVU43
 202 0006 7047     		bx	lr
 203              	.L12:
 458:./fs/pipefs/pipefs.c ****     if(dentry == NULL || vdentry == NULL) return NULL;
 204              		.loc 1 458 50 discriminator 3 view .LVU44
 205 0008 0846     		mov	r0, r1
 206              	.LVL11:
 207              	.L10:
 461:./fs/pipefs/pipefs.c **** }
 208              		.loc 1 461 1 view .LVU45
 209 000a 7047     		bx	lr
 210              		.cfi_endproc
 211              	.LFE1061:
 213              		.section	.text.pipefs_setattr,"ax",%progbits
 214              		.align	1
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 219              	pipefs_setattr:
 220              	.LVL12:
 221              	.LFB1069:
 462:./fs/pipefs/pipefs.c **** 
 463:./fs/pipefs/pipefs.c **** static int pipefs_create(struct mnt_idmap * map, struct inode * dir,struct dentry * dentry,umode_t 
 464:./fs/pipefs/pipefs.c **** {
 465:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 466:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZnep12.s 			page 14


 467:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dinode = dir->i_private;
 468:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 469:./fs/pipefs/pipefs.c ****     if(file == NULL){
 470:./fs/pipefs/pipefs.c ****         file =  pipefs_create_file(dinode->sb,dinode,&pipefs_file_fops,10,file_name);
 471:./fs/pipefs/pipefs.c ****     }
 472:./fs/pipefs/pipefs.c ****     if (file == NULL){                               //Á°ÆÂÆöÊñá‰ª∂ÊòØÂê¶Ë¢´ÂàõÂª∫
 473:./fs/pipefs/pipefs.c ****         return -1;
 474:./fs/pipefs/pipefs.c ****     }
 475:./fs/pipefs/pipefs.c ****     file->target_inode->i_mode = S_IFREG | (mode & 0777);
 476:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 477:./fs/pipefs/pipefs.c ****      return -1;
 478:./fs/pipefs/pipefs.c ****     }  
 479:./fs/pipefs/pipefs.c **** 
 480:./fs/pipefs/pipefs.c ****     struct inode * new_file_inode = pipefs_get_inode(dinode,dir->i_sb);
 481:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 482:./fs/pipefs/pipefs.c ****         return -1;
 483:./fs/pipefs/pipefs.c **** 
 484:./fs/pipefs/pipefs.c ****     d_add(dentry,new_file_inode); //ÈÄöÁü•Êñá‰ª∂Á≥ªÁªüÂä†ÂÖ•ÁºìÂ≠òÔºåÂπ∂ËøõË°åËµÑÊ∫êÁªëÂÆö
 485:./fs/pipefs/pipefs.c ****    return 0;
 486:./fs/pipefs/pipefs.c **** } 
 487:./fs/pipefs/pipefs.c **** 
 488:./fs/pipefs/pipefs.c **** static struct dentry *pipefs_vfs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flag
 489:./fs/pipefs/pipefs.c ****     
 490:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private; //Ëé∑ÂèñÊñá‰ª∂Á≥ªÁªüÊú¨
 491:./fs/pipefs/pipefs.c ****     char *name = dentry->d_name.name;                           
 492:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *pos;    
 493:./fs/pipefs/pipefs.c ****     pos = pipefs_lookup(dir_inode,name);       //Êü•ËØ¢Ëé∑Âæódentry
 494:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 495:./fs/pipefs/pipefs.c **** 
 496:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,pos) == NULL)
 497:./fs/pipefs/pipefs.c ****         return NULL;
 498:./fs/pipefs/pipefs.c **** 
 499:./fs/pipefs/pipefs.c ****     struct inode * find_inode = pipefs_get_inode(pos->target_inode,dir->i_sb);
 500:./fs/pipefs/pipefs.c ****     if(find_inode == NULL)
 501:./fs/pipefs/pipefs.c ****         return NULL;
 502:./fs/pipefs/pipefs.c ****     
 503:./fs/pipefs/pipefs.c ****     return d_add(dentry,find_inode);
 504:./fs/pipefs/pipefs.c ****     return NULL;
 505:./fs/pipefs/pipefs.c **** }
 506:./fs/pipefs/pipefs.c **** 
 507:./fs/pipefs/pipefs.c **** 
 508:./fs/pipefs/pipefs.c **** static int pipefs_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)
 509:./fs/pipefs/pipefs.c **** {
 510:./fs/pipefs/pipefs.c ****     struct pipefs_inode *old_inode = (struct pipefs_inode *)old_dentry->d_inode->i_private;
 511:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private;
 512:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *new_dentry = pipefs_create_dentry(dir_inode, old_inode, dentry->d_name.na
 513:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 514:./fs/pipefs/pipefs.c ****         return -ENOMEM;
 515:./fs/pipefs/pipefs.c ****     }
 516:./fs/pipefs/pipefs.c ****     pipefs_get_dentry(dentry,new_dentry);
 517:./fs/pipefs/pipefs.c ****     dentry->d_sb = dir->i_sb;
 518:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
 519:./fs/pipefs/pipefs.c ****     return 0;
 520:./fs/pipefs/pipefs.c **** }
 521:./fs/pipefs/pipefs.c **** 
 522:./fs/pipefs/pipefs.c **** static int pipefs_unlink(struct inode *dir, struct dentry *dentry)
 523:./fs/pipefs/pipefs.c **** {
ARM GAS  /tmp/ccZnep12.s 			page 15


 524:./fs/pipefs/pipefs.c ****     struct pipefs_inode *parent_inode = (struct pipefs_inode *)dir->i_private;
 525:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *delete_dentry = (struct pipefs_dentry *)dentry->d_fsdata;
 526:./fs/pipefs/pipefs.c ****     pipefs_delete_dentry(parent_inode->sb, parent_inode, delete_dentry);
 527:./fs/pipefs/pipefs.c ****     return 0;
 528:./fs/pipefs/pipefs.c **** }
 529:./fs/pipefs/pipefs.c **** 
 530:./fs/pipefs/pipefs.c **** 
 531:./fs/pipefs/pipefs.c **** static int pipefs_mkdir(struct mnt_idmap *mnt, struct inode *dir, struct dentry *dentry, umode_t mo
 532:./fs/pipefs/pipefs.c **** {
 533:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 534:./fs/pipefs/pipefs.c **** 
 535:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dinode = dir->i_private;
 536:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 537:./fs/pipefs/pipefs.c ****     if(file == NULL){
 538:./fs/pipefs/pipefs.c ****         file =  pipefs_create_dir(dinode->sb,dinode,file_name);
 539:./fs/pipefs/pipefs.c ****     }
 540:./fs/pipefs/pipefs.c ****     if (file == NULL){                               //Á°ÆÂÆöÊñá‰ª∂ÊòØÂê¶Ë¢´ÂàõÂª∫
 541:./fs/pipefs/pipefs.c ****         return -1;
 542:./fs/pipefs/pipefs.c ****     }
 543:./fs/pipefs/pipefs.c ****     file->target_inode->i_mode = S_IFREG | (mode & 0777);
 544:./fs/pipefs/pipefs.c ****     
 545:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 546:./fs/pipefs/pipefs.c ****      return -1;
 547:./fs/pipefs/pipefs.c ****     }  
 548:./fs/pipefs/pipefs.c ****     struct inode * new_file_inode = pipefs_get_inode(dinode,dir->i_sb);
 549:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 550:./fs/pipefs/pipefs.c ****         return -1;
 551:./fs/pipefs/pipefs.c **** 
 552:./fs/pipefs/pipefs.c ****     d_add(dentry,new_file_inode); //ÈÄöÁü•Êñá‰ª∂Á≥ªÁªüÂä†ÂÖ•ÁºìÂ≠òÔºåÂπ∂ËøõË°åËµÑÊ∫êÁªëÂÆö
 553:./fs/pipefs/pipefs.c ****    return 0;
 554:./fs/pipefs/pipefs.c **** }
 555:./fs/pipefs/pipefs.c **** 
 556:./fs/pipefs/pipefs.c **** 
 557:./fs/pipefs/pipefs.c **** static int pipefs_release_dentry(struct dentry *dentry){
 558:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *fs_dentry = dentry->d_fsdata;
 559:./fs/pipefs/pipefs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 560:./fs/pipefs/pipefs.c **** }
 561:./fs/pipefs/pipefs.c **** static int pipefs_rmdir(struct inode *	dir  ,struct dentry *dentry){
 562:./fs/pipefs/pipefs.c ****     pipefs_release_dentry(dentry);
 563:./fs/pipefs/pipefs.c ****     return simple_unlink(dir,dentry);
 564:./fs/pipefs/pipefs.c **** }
 565:./fs/pipefs/pipefs.c **** 
 566:./fs/pipefs/pipefs.c **** static int pipefs_setattr(struct mnt_idmap *map, struct dentry *dentry, struct iattr *iattr)
 567:./fs/pipefs/pipefs.c **** {
 222              		.loc 1 567 1 is_stmt 1 view -0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 568:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = dentry->d_fsdata;
 227              		.loc 1 568 5 view .LVU47
 228              		.loc 1 568 27 is_stmt 0 view .LVU48
 229 0000 4B6D     		ldr	r3, [r1, #84]
 230              	.LVL13:
 569:./fs/pipefs/pipefs.c ****     file->target_inode->i_mode = (iattr->ia_mode & S_IFMT) | iattr->ia_mode;
 231              		.loc 1 569 5 is_stmt 1 view .LVU49
 232              		.loc 1 569 40 is_stmt 0 view .LVU50
ARM GAS  /tmp/ccZnep12.s 			page 16


 233 0002 9288     		ldrh	r2, [r2, #4]
 234              	.LVL14:
 235              		.loc 1 569 9 view .LVU51
 236 0004 9B68     		ldr	r3, [r3, #8]
 237              	.LVL15:
 238              		.loc 1 569 32 view .LVU52
 239 0006 5A60     		str	r2, [r3, #4]
 240              	.LVL16:
 570:./fs/pipefs/pipefs.c ****     return 0;
 241              		.loc 1 570 5 is_stmt 1 view .LVU53
 571:./fs/pipefs/pipefs.c **** }
 242              		.loc 1 571 1 is_stmt 0 view .LVU54
 243 0008 0020     		movs	r0, #0
 244              	.LVL17:
 245              		.loc 1 571 1 view .LVU55
 246 000a 7047     		bx	lr
 247              		.cfi_endproc
 248              	.LFE1069:
 250              		.section	.text.__spin_lock,"ax",%progbits
 251              		.align	1
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	__spin_lock:
 257              	.LVL18:
 258              	.LFB853:
  15:./arch/arm_m/include/asm/spinlock.h **** 
 259              		.loc 2 15 47 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
  15:./arch/arm_m/include/asm/spinlock.h **** 
 263              		.loc 2 15 47 is_stmt 0 view .LVU57
 264 0000 38B5     		push	{r3, r4, r5, lr}
 265              	.LCFI2:
 266              		.cfi_def_cfa_offset 16
 267              		.cfi_offset 3, -16
 268              		.cfi_offset 4, -12
 269              		.cfi_offset 5, -8
 270              		.cfi_offset 14, -4
 271 0002 0446     		mov	r4, r0
  17:./arch/arm_m/include/asm/spinlock.h ****     if(lock->flag == 0){
 272              		.loc 2 17 5 is_stmt 1 view .LVU58
 273 0004 FFF7FEFF 		bl	stop_all_scheduler
 274              	.LVL19:
  18:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 275              		.loc 2 18 5 view .LVU59
  18:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 276              		.loc 2 18 12 is_stmt 0 view .LVU60
 277 0008 2368     		ldr	r3, [r4]
  18:./arch/arm_m/include/asm/spinlock.h ****           lock->flag = 1;  
 278              		.loc 2 18 7 view .LVU61
 279 000a 2BB9     		cbnz	r3, .L16
  19:./arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
 280              		.loc 2 19 11 is_stmt 1 view .LVU62
  19:./arch/arm_m/include/asm/spinlock.h ****           start_all_scheduler();
 281              		.loc 2 19 22 is_stmt 0 view .LVU63
ARM GAS  /tmp/ccZnep12.s 			page 17


 282 000c 0125     		movs	r5, #1
 283 000e 2560     		str	r5, [r4]
  20:./arch/arm_m/include/asm/spinlock.h ****         return 1;
 284              		.loc 2 20 11 is_stmt 1 view .LVU64
 285 0010 FFF7FEFF 		bl	start_all_scheduler
 286              	.LVL20:
  21:./arch/arm_m/include/asm/spinlock.h ****     }
 287              		.loc 2 21 9 view .LVU65
  21:./arch/arm_m/include/asm/spinlock.h ****     }
 288              		.loc 2 21 16 is_stmt 0 view .LVU66
 289 0014 2846     		mov	r0, r5
 290              	.L15:
  28:./arch/arm_m/include/asm/spinlock.h **** 
 291              		.loc 2 28 1 view .LVU67
 292 0016 38BD     		pop	{r3, r4, r5, pc}
 293              	.LVL21:
 294              	.L16:
  25:./arch/arm_m/include/asm/spinlock.h ****         return 0;
 295              		.loc 2 25 9 is_stmt 1 view .LVU68
 296 0018 FFF7FEFF 		bl	start_all_scheduler
 297              	.LVL22:
  26:./arch/arm_m/include/asm/spinlock.h ****     }
 298              		.loc 2 26 9 view .LVU69
  26:./arch/arm_m/include/asm/spinlock.h ****     }
 299              		.loc 2 26 16 is_stmt 0 view .LVU70
 300 001c 0020     		movs	r0, #0
 301 001e FAE7     		b	.L15
 302              		.cfi_endproc
 303              	.LFE853:
 305              		.section	.text.spin_lock,"ax",%progbits
 306              		.align	1
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 311              	spin_lock:
 312              	.LVL23:
 313              	.LFB856:
  15:./include/linux/spinlock.h ****     while (1)
 314              		.loc 3 15 1 is_stmt 1 view -0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
  15:./include/linux/spinlock.h ****     while (1)
 318              		.loc 3 15 1 is_stmt 0 view .LVU72
 319 0000 38B5     		push	{r3, r4, r5, lr}
 320              	.LCFI3:
 321              		.cfi_def_cfa_offset 16
 322              		.cfi_offset 3, -16
 323              		.cfi_offset 4, -12
 324              		.cfi_offset 5, -8
 325              		.cfi_offset 14, -4
 326 0002 0446     		mov	r4, r0
 327 0004 06E0     		b	.L22
 328              	.LVL24:
 329              	.L24:
  19:./include/linux/spinlock.h ****             break;
 330              		.loc 3 19 13 is_stmt 1 view .LVU73
ARM GAS  /tmp/ccZnep12.s 			page 18


  19:./include/linux/spinlock.h ****             break;
 331              		.loc 3 19 27 is_stmt 0 view .LVU74
 332 0006 FFF7FEFF 		bl	get_current_task
 333              	.LVL25:
  19:./include/linux/spinlock.h ****             break;
 334              		.loc 3 19 25 discriminator 1 view .LVU75
 335 000a 2060     		str	r0, [r4]
  20:./include/linux/spinlock.h ****         }
 336              		.loc 3 20 13 is_stmt 1 view .LVU76
 337              	.L19:
  29:./include/linux/spinlock.h **** 
 338              		.loc 3 29 1 is_stmt 0 view .LVU77
 339 000c 38BD     		pop	{r3, r4, r5, pc}
 340              	.LVL26:
 341              	.L25:
  26:./include/linux/spinlock.h ****         }
 342              		.loc 3 26 13 is_stmt 1 view .LVU78
 343 000e 0520     		movs	r0, #5
 344 0010 FFF7FEFF 		bl	__delay
 345              	.LVL27:
  16:./include/linux/spinlock.h ****     {
 346              		.loc 3 16 11 view .LVU79
 347              	.L22:
  16:./include/linux/spinlock.h ****     {
 348              		.loc 3 16 5 view .LVU80
  18:./include/linux/spinlock.h ****             lock->owner = get_current_task();
 349              		.loc 3 18 9 view .LVU81
  18:./include/linux/spinlock.h ****             lock->owner = get_current_task();
 350              		.loc 3 18 12 is_stmt 0 view .LVU82
 351 0014 2046     		mov	r0, r4
 352 0016 FFF7FEFF 		bl	__spin_lock
 353              	.LVL28:
  18:./include/linux/spinlock.h ****             lock->owner = get_current_task();
 354              		.loc 3 18 11 discriminator 1 view .LVU83
 355 001a 0128     		cmp	r0, #1
 356 001c F3D0     		beq	.L24
  22:./include/linux/spinlock.h ****             return;   
 357              		.loc 3 22 15 is_stmt 1 view .LVU84
  22:./include/linux/spinlock.h ****             return;   
 358              		.loc 3 22 22 is_stmt 0 view .LVU85
 359 001e 2568     		ldr	r5, [r4]
  22:./include/linux/spinlock.h ****             return;   
 360              		.loc 3 22 33 view .LVU86
 361 0020 FFF7FEFF 		bl	get_current_task
 362              	.LVL29:
  22:./include/linux/spinlock.h ****             return;   
 363              		.loc 3 22 17 discriminator 1 view .LVU87
 364 0024 8542     		cmp	r5, r0
 365 0026 F2D1     		bne	.L25
 366 0028 F0E7     		b	.L19
 367              		.cfi_endproc
 368              	.LFE856:
 370              		.section	.init.text,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
ARM GAS  /tmp/ccZnep12.s 			page 19


 376              	pipefs_ops_init:
 377              	.LFB1071:
 572:./fs/pipefs/pipefs.c **** static int  pipefs_getattr (struct mnt_idmap *dmp, const struct path * path,struct kstat *stat, u32
 573:./fs/pipefs/pipefs.c **** {
 574:./fs/pipefs/pipefs.c ****     struct dentry *d = path->dentry;
 575:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = d->d_fsdata;
 576:./fs/pipefs/pipefs.c ****     struct pipefs_inode *inode;
 577:./fs/pipefs/pipefs.c **** 
 578:./fs/pipefs/pipefs.c ****     if (!file || !(inode = file->target_inode))
 579:./fs/pipefs/pipefs.c ****     return -ENOENT;
 580:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 581:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 582:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 583:./fs/pipefs/pipefs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 584:./fs/pipefs/pipefs.c ****     stat->size  = 0; 
 585:./fs/pipefs/pipefs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 586:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 587:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 588:./fs/pipefs/pipefs.c ****     stat->ctime = stat->atime;
 589:./fs/pipefs/pipefs.c ****     stat->blksize = PAGE_SIZE;
 590:./fs/pipefs/pipefs.c ****     stat->blocks  = 0;
 591:./fs/pipefs/pipefs.c ****     return 0;
 592:./fs/pipefs/pipefs.c **** }
 593:./fs/pipefs/pipefs.c **** 
 594:./fs/pipefs/pipefs.c **** static struct dentry_operations pipefs_dentry_operation = {
 595:./fs/pipefs/pipefs.c ****     .d_release = pipefs_release_dentry,
 596:./fs/pipefs/pipefs.c **** };
 597:./fs/pipefs/pipefs.c **** 
 598:./fs/pipefs/pipefs.c **** static int __init pipefs_ops_init(void){
 378              		.loc 1 598 40 is_stmt 1 view -0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382 0000 08B5     		push	{r3, lr}
 383              	.LCFI4:
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 3, -8
 386              		.cfi_offset 14, -4
 599:./fs/pipefs/pipefs.c ****     register_filesystem(&fs_type);
 387              		.loc 1 599 5 view .LVU89
 388 0002 0248     		ldr	r0, .L28
 389 0004 FFF7FEFF 		bl	register_filesystem
 390              	.LVL30:
 600:./fs/pipefs/pipefs.c ****     return 0;
 391              		.loc 1 600 5 view .LVU90
 601:./fs/pipefs/pipefs.c **** }
 392              		.loc 1 601 1 is_stmt 0 view .LVU91
 393 0008 0020     		movs	r0, #0
 394 000a 08BD     		pop	{r3, pc}
 395              	.L29:
 396              		.align	2
 397              	.L28:
 398 000c 00000000 		.word	fs_type
 399              		.cfi_endproc
 400              	.LFE1071:
 402              		.section	.text.pipefs_kill_sb,"ax",%progbits
 403              		.align	1
ARM GAS  /tmp/ccZnep12.s 			page 20


 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 408              	pipefs_kill_sb:
 409              	.LVL31:
 410              	.LFB1056:
 379:./fs/pipefs/pipefs.c ****     put_super(sb);
 411              		.loc 1 379 53 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 379:./fs/pipefs/pipefs.c ****     put_super(sb);
 415              		.loc 1 379 53 is_stmt 0 view .LVU93
 416 0000 08B5     		push	{r3, lr}
 417              	.LCFI5:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 3, -8
 420              		.cfi_offset 14, -4
 380:./fs/pipefs/pipefs.c **** }
 421              		.loc 1 380 5 is_stmt 1 view .LVU94
 422 0002 FFF7FEFF 		bl	put_super
 423              	.LVL32:
 381:./fs/pipefs/pipefs.c **** 
 424              		.loc 1 381 1 is_stmt 0 view .LVU95
 425 0006 08BD     		pop	{r3, pc}
 426              		.cfi_endproc
 427              	.LFE1056:
 429              		.section	.rodata.pipefs_release.str1.4,"aMS",%progbits,1
 430              		.align	2
 431              	.LC0:
 432 0000 70697065 		.ascii	"pipefs test close\012\000"
 432      66732074 
 432      65737420 
 432      636C6F73 
 432      650A00
 433              		.section	.text.pipefs_release,"ax",%progbits
 434              		.align	1
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	pipefs_release:
 440              	.LVL33:
 441              	.LFB1040:
  75:./fs/pipefs/pipefs.c ****     pr_info("pipefs test close\n");
 442              		.loc 1 75 66 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
  75:./fs/pipefs/pipefs.c ****     pr_info("pipefs test close\n");
 446              		.loc 1 75 66 is_stmt 0 view .LVU97
 447 0000 08B5     		push	{r3, lr}
 448              	.LCFI6:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 3, -8
 451              		.cfi_offset 14, -4
  76:./fs/pipefs/pipefs.c ****     return 0;
 452              		.loc 1 76 5 is_stmt 1 view .LVU98
ARM GAS  /tmp/ccZnep12.s 			page 21


 453 0002 0248     		ldr	r0, .L34
 454              	.LVL34:
  76:./fs/pipefs/pipefs.c ****     return 0;
 455              		.loc 1 76 5 is_stmt 0 view .LVU99
 456 0004 FFF7FEFF 		bl	printk
 457              	.LVL35:
  77:./fs/pipefs/pipefs.c **** }
 458              		.loc 1 77 5 is_stmt 1 view .LVU100
  78:./fs/pipefs/pipefs.c **** 
 459              		.loc 1 78 1 is_stmt 0 view .LVU101
 460 0008 0020     		movs	r0, #0
 461 000a 08BD     		pop	{r3, pc}
 462              	.L35:
 463              		.align	2
 464              	.L34:
 465 000c 00000000 		.word	.LC0
 466              		.cfi_endproc
 467              	.LFE1040:
 469              		.section	.text.pipefs_open,"ax",%progbits
 470              		.align	1
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 475              	pipefs_open:
 476              	.LVL36:
 477              	.LFB1039:
  64:./fs/pipefs/pipefs.c ****     struct pipefs_inode *p_inode = inode->i_private;
 478              		.loc 1 64 1 is_stmt 1 view -0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
  64:./fs/pipefs/pipefs.c ****     struct pipefs_inode *p_inode = inode->i_private;
 482              		.loc 1 64 1 is_stmt 0 view .LVU103
 483 0000 10B5     		push	{r4, lr}
 484              	.LCFI7:
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 4, -8
 487              		.cfi_offset 14, -4
  65:./fs/pipefs/pipefs.c ****     if(p_inode->buf == NULL)
 488              		.loc 1 65 5 is_stmt 1 view .LVU104
  65:./fs/pipefs/pipefs.c ****     if(p_inode->buf == NULL)
 489              		.loc 1 65 26 is_stmt 0 view .LVU105
 490 0002 846D     		ldr	r4, [r0, #88]
 491              	.LVL37:
  66:./fs/pipefs/pipefs.c ****     {
 492              		.loc 1 66 5 is_stmt 1 view .LVU106
  66:./fs/pipefs/pipefs.c ****     {
 493              		.loc 1 66 15 is_stmt 0 view .LVU107
 494 0004 A36B     		ldr	r3, [r4, #56]
  66:./fs/pipefs/pipefs.c ****     {
 495              		.loc 1 66 7 view .LVU108
 496 0006 0BB1     		cbz	r3, .L41
  72:./fs/pipefs/pipefs.c **** }
 497              		.loc 1 72 12 view .LVU109
 498 0008 0020     		movs	r0, #0
 499              	.LVL38:
 500              	.L36:
ARM GAS  /tmp/ccZnep12.s 			page 22


  73:./fs/pipefs/pipefs.c **** 
 501              		.loc 1 73 1 view .LVU110
 502 000a 10BD     		pop	{r4, pc}
 503              	.LVL39:
 504              	.L41:
  68:./fs/pipefs/pipefs.c ****         if(!p_inode->buf)
 505              		.loc 1 68 9 is_stmt 1 view .LVU111
 506              	.LBB227:
 507              	.LBI227:
 508              		.file 4 "./include/linux/slab.h"
   1:./include/linux/slab.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/slab.h **** /*
   3:./include/linux/slab.h ****  * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).
   4:./include/linux/slab.h ****  *
   5:./include/linux/slab.h ****  * (C) SGI 2006, Christoph Lameter
   6:./include/linux/slab.h ****  * 	Cleaned up and restructured to ease the addition of alternative
   7:./include/linux/slab.h ****  * 	implementations of SLAB allocators.
   8:./include/linux/slab.h ****  * (C) Linux Foundation 2008-2013
   9:./include/linux/slab.h ****  *      Unified interface for all slab allocators
  10:./include/linux/slab.h ****  */
  11:./include/linux/slab.h **** 
  12:./include/linux/slab.h **** #ifndef _LINUX_SLAB_H
  13:./include/linux/slab.h **** #define	_LINUX_SLAB_H
  14:./include/linux/slab.h **** 
  15:./include/linux/slab.h **** #include <linux/cache.h>
  16:./include/linux/slab.h **** #include <linux/overflow.h>
  17:./include/linux/slab.h **** #include <linux/types.h>
  18:./include/linux/slab.h **** #include <linux/raid/pq.h>
  19:./include/linux/slab.h **** #include <linux/gfp_types.h>
  20:./include/linux/slab.h **** #include <linux/numa.h>
  21:./include/linux/slab.h **** #include <linux/reciprocal_div.h>
  22:./include/linux/slab.h **** #include <linux/spinlock.h>
  23:./include/linux/slab.h **** 
  24:./include/linux/slab.h **** enum _slab_flag_bits {
  25:./include/linux/slab.h **** 	_SLAB_CONSISTENCY_CHECKS,
  26:./include/linux/slab.h **** 	_SLAB_RED_ZONE,
  27:./include/linux/slab.h **** 	_SLAB_POISON,
  28:./include/linux/slab.h **** 	_SLAB_KMALLOC,
  29:./include/linux/slab.h **** 	_SLAB_HWCACHE_ALIGN,
  30:./include/linux/slab.h **** 	_SLAB_CACHE_DMA,
  31:./include/linux/slab.h **** 	_SLAB_CACHE_DMA32,
  32:./include/linux/slab.h **** 	_SLAB_STORE_USER,
  33:./include/linux/slab.h **** 	_SLAB_PANIC,
  34:./include/linux/slab.h **** 	_SLAB_TYPESAFE_BY_RCU,
  35:./include/linux/slab.h **** 	_SLAB_TRACE,
  36:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
  37:./include/linux/slab.h **** 	_SLAB_DEBUG_OBJECTS,
  38:./include/linux/slab.h **** #endif
  39:./include/linux/slab.h **** 	_SLAB_NOLEAKTRACE,
  40:./include/linux/slab.h **** 	_SLAB_NO_MERGE,
  41:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
  42:./include/linux/slab.h **** 	_SLAB_FAILSLAB,
  43:./include/linux/slab.h **** #endif
  44:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
  45:./include/linux/slab.h **** 	_SLAB_ACCOUNT,
  46:./include/linux/slab.h **** #endif
  47:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
ARM GAS  /tmp/ccZnep12.s 			page 23


  48:./include/linux/slab.h **** 	_SLAB_KASAN,
  49:./include/linux/slab.h **** #endif
  50:./include/linux/slab.h **** 	_SLAB_NO_USER_FLAGS,
  51:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
  52:./include/linux/slab.h **** 	_SLAB_SKIP_KFENCE,
  53:./include/linux/slab.h **** #endif
  54:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
  55:./include/linux/slab.h **** 	_SLAB_RECLAIM_ACCOUNT,
  56:./include/linux/slab.h **** #endif
  57:./include/linux/slab.h **** 	_SLAB_OBJECT_POISON,
  58:./include/linux/slab.h **** 	_SLAB_CMPXCHG_DOUBLE,
  59:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
  60:./include/linux/slab.h **** 	_SLAB_NO_OBJ_EXT,
  61:./include/linux/slab.h **** #endif
  62:./include/linux/slab.h **** 	_SLAB_FLAGS_LAST_BIT
  63:./include/linux/slab.h **** };
  64:./include/linux/slab.h **** 
  65:./include/linux/slab.h **** 
  66:./include/linux/slab.h **** 
  67:./include/linux/slab.h **** #define __SLAB_FLAG_BIT(nr)	((slab_flags_t __force)(1U << (nr)))
  68:./include/linux/slab.h **** #define __SLAB_FLAG_UNUSED	((slab_flags_t __force)(0U))
  69:./include/linux/slab.h **** 
  70:./include/linux/slab.h **** /*
  71:./include/linux/slab.h ****  * Flags to pass to kmem_cache_create().
  72:./include/linux/slab.h ****  * The ones marked DEBUG need CONFIG_SLUB_DEBUG enabled, otherwise are no-op
  73:./include/linux/slab.h ****  */
  74:./include/linux/slab.h **** /* DEBUG: Perform (expensive) checks on alloc/free */
  75:./include/linux/slab.h **** #define SLAB_CONSISTENCY_CHECKS	__SLAB_FLAG_BIT(_SLAB_CONSISTENCY_CHECKS)
  76:./include/linux/slab.h **** /* DEBUG: Red zone objs in a cache */
  77:./include/linux/slab.h **** #define SLAB_RED_ZONE		__SLAB_FLAG_BIT(_SLAB_RED_ZONE)
  78:./include/linux/slab.h **** /* DEBUG: Poison objects */
  79:./include/linux/slab.h **** #define SLAB_POISON		__SLAB_FLAG_BIT(_SLAB_POISON)
  80:./include/linux/slab.h **** /* Indicate a kmalloc slab */
  81:./include/linux/slab.h **** #define SLAB_KMALLOC		__SLAB_FLAG_BIT(_SLAB_KMALLOC)
  82:./include/linux/slab.h **** /**
  83:./include/linux/slab.h ****  * define SLAB_HWCACHE_ALIGN - Align objects on cache line boundaries.
  84:./include/linux/slab.h ****  *
  85:./include/linux/slab.h ****  * Sufficiently large objects are aligned on cache line boundary. For object
  86:./include/linux/slab.h ****  * size smaller than a half of cache line size, the alignment is on the half of
  87:./include/linux/slab.h ****  * cache line size. In general, if object size is smaller than 1/2^n of cache
  88:./include/linux/slab.h ****  * line size, the alignment is adjusted to 1/2^n.
  89:./include/linux/slab.h ****  *
  90:./include/linux/slab.h ****  * If explicit alignment is also requested by the respective
  91:./include/linux/slab.h ****  * &struct kmem_cache_args field, the greater of both is alignments is applied.
  92:./include/linux/slab.h ****  */
  93:./include/linux/slab.h **** #define SLAB_HWCACHE_ALIGN	__SLAB_FLAG_BIT(_SLAB_HWCACHE_ALIGN)
  94:./include/linux/slab.h **** /* Use GFP_DMA memory */
  95:./include/linux/slab.h **** #define SLAB_CACHE_DMA		__SLAB_FLAG_BIT(_SLAB_CACHE_DMA)
  96:./include/linux/slab.h **** /* Use GFP_DMA32 memory */
  97:./include/linux/slab.h **** #define SLAB_CACHE_DMA32	__SLAB_FLAG_BIT(_SLAB_CACHE_DMA32)
  98:./include/linux/slab.h **** /* DEBUG: Store the last owner for bug hunting */
  99:./include/linux/slab.h **** #define SLAB_STORE_USER		__SLAB_FLAG_BIT(_SLAB_STORE_USER)
 100:./include/linux/slab.h **** /* Panic if kmem_cache_create() fails */
 101:./include/linux/slab.h **** #define SLAB_PANIC		__SLAB_FLAG_BIT(_SLAB_PANIC)
 102:./include/linux/slab.h **** /**
 103:./include/linux/slab.h ****  * define SLAB_TYPESAFE_BY_RCU - **WARNING** READ THIS!
 104:./include/linux/slab.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 24


 105:./include/linux/slab.h ****  * This delays freeing the SLAB page by a grace period, it does _NOT_
 106:./include/linux/slab.h ****  * delay object freeing. This means that if you do kmem_cache_free()
 107:./include/linux/slab.h ****  * that memory location is free to be reused at any time. Thus it may
 108:./include/linux/slab.h ****  * be possible to see another object there in the same RCU grace period.
 109:./include/linux/slab.h ****  *
 110:./include/linux/slab.h ****  * This feature only ensures the memory location backing the object
 111:./include/linux/slab.h ****  * stays valid, the trick to using this is relying on an independent
 112:./include/linux/slab.h ****  * object validation pass. Something like:
 113:./include/linux/slab.h ****  *
 114:./include/linux/slab.h ****  * ::
 115:./include/linux/slab.h ****  *
 116:./include/linux/slab.h ****  *  begin:
 117:./include/linux/slab.h ****  *   rcu_read_lock();
 118:./include/linux/slab.h ****  *   obj = lockless_lookup(key);
 119:./include/linux/slab.h ****  *   if (obj) {
 120:./include/linux/slab.h ****  *     if (!try_get_ref(obj)) // might fail for free objects
 121:./include/linux/slab.h ****  *       rcu_read_unlock();
 122:./include/linux/slab.h ****  *       goto begin;
 123:./include/linux/slab.h ****  *
 124:./include/linux/slab.h ****  *     if (obj->key != key) { // not the object we expected
 125:./include/linux/slab.h ****  *       put_ref(obj);
 126:./include/linux/slab.h ****  *       rcu_read_unlock();
 127:./include/linux/slab.h ****  *       goto begin;
 128:./include/linux/slab.h ****  *     }
 129:./include/linux/slab.h ****  *   }
 130:./include/linux/slab.h ****  *  rcu_read_unlock();
 131:./include/linux/slab.h ****  *
 132:./include/linux/slab.h ****  * This is useful if we need to approach a kernel structure obliquely,
 133:./include/linux/slab.h ****  * from its address obtained without the usual locking. We can lock
 134:./include/linux/slab.h ****  * the structure to stabilize it and check it's still at the given address,
 135:./include/linux/slab.h ****  * only if we can be sure that the memory has not been meanwhile reused
 136:./include/linux/slab.h ****  * for some other kind of object (which our subsystem's lock might corrupt).
 137:./include/linux/slab.h ****  *
 138:./include/linux/slab.h ****  * rcu_read_lock before reading the address, then rcu_read_unlock after
 139:./include/linux/slab.h ****  * taking the spinlock within the structure expected at that address.
 140:./include/linux/slab.h ****  *
 141:./include/linux/slab.h ****  * Note that it is not possible to acquire a lock within a structure
 142:./include/linux/slab.h ****  * allocated with SLAB_TYPESAFE_BY_RCU without first acquiring a reference
 143:./include/linux/slab.h ****  * as described above.  The reason is that SLAB_TYPESAFE_BY_RCU pages
 144:./include/linux/slab.h ****  * are not zeroed before being given to the slab, which means that any
 145:./include/linux/slab.h ****  * locks must be initialized after each and every kmem_struct_alloc().
 146:./include/linux/slab.h ****  * Alternatively, make the ctor passed to kmem_cache_create() initialize
 147:./include/linux/slab.h ****  * the locks at page-allocation time, as is done in __i915_request_ctor(),
 148:./include/linux/slab.h ****  * sighand_ctor(), and anon_vma_ctor().  Such a ctor permits readers
 149:./include/linux/slab.h ****  * to safely acquire those ctor-initialized locks under rcu_read_lock()
 150:./include/linux/slab.h ****  * protection.
 151:./include/linux/slab.h ****  *
 152:./include/linux/slab.h ****  * Note that SLAB_TYPESAFE_BY_RCU was originally named SLAB_DESTROY_BY_RCU.
 153:./include/linux/slab.h ****  */
 154:./include/linux/slab.h **** #define SLAB_TYPESAFE_BY_RCU	__SLAB_FLAG_BIT(_SLAB_TYPESAFE_BY_RCU)
 155:./include/linux/slab.h **** /* Trace allocations and frees */
 156:./include/linux/slab.h **** #define SLAB_TRACE		__SLAB_FLAG_BIT(_SLAB_TRACE)
 157:./include/linux/slab.h **** 
 158:./include/linux/slab.h **** /* Flag to prevent checks on free */
 159:./include/linux/slab.h **** #ifdef CONFIG_DEBUG_OBJECTS
 160:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_BIT(_SLAB_DEBUG_OBJECTS)
 161:./include/linux/slab.h **** #else
ARM GAS  /tmp/ccZnep12.s 			page 25


 162:./include/linux/slab.h **** # define SLAB_DEBUG_OBJECTS	__SLAB_FLAG_UNUSED
 163:./include/linux/slab.h **** #endif
 164:./include/linux/slab.h **** 
 165:./include/linux/slab.h **** /* Avoid kmemleak tracing */
 166:./include/linux/slab.h **** #define SLAB_NOLEAKTRACE	__SLAB_FLAG_BIT(_SLAB_NOLEAKTRACE)
 167:./include/linux/slab.h **** 
 168:./include/linux/slab.h **** /*
 169:./include/linux/slab.h ****  * Prevent merging with compatible kmem caches. This flag should be used
 170:./include/linux/slab.h ****  * cautiously. Valid use cases:
 171:./include/linux/slab.h ****  *
 172:./include/linux/slab.h ****  * - caches created for self-tests (e.g. kunit)
 173:./include/linux/slab.h ****  * - general caches created and used by a subsystem, only when a
 174:./include/linux/slab.h ****  *   (subsystem-specific) debug option is enabled
 175:./include/linux/slab.h ****  * - performance critical caches, should be very rare and consulted with slab
 176:./include/linux/slab.h ****  *   maintainers, and not used together with CONFIG_SLUB_TINY
 177:./include/linux/slab.h ****  */
 178:./include/linux/slab.h **** #define SLAB_NO_MERGE		__SLAB_FLAG_BIT(_SLAB_NO_MERGE)
 179:./include/linux/slab.h **** 
 180:./include/linux/slab.h **** /* Fault injection mark */
 181:./include/linux/slab.h **** #ifdef CONFIG_FAILSLAB
 182:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_BIT(_SLAB_FAILSLAB)
 183:./include/linux/slab.h **** #else
 184:./include/linux/slab.h **** # define SLAB_FAILSLAB		__SLAB_FLAG_UNUSED
 185:./include/linux/slab.h **** #endif
 186:./include/linux/slab.h **** /**
 187:./include/linux/slab.h ****  * define SLAB_ACCOUNT - Account allocations to memcg.
 188:./include/linux/slab.h ****  *
 189:./include/linux/slab.h ****  * All object allocations from this cache will be memcg accounted, regardless of
 190:./include/linux/slab.h ****  * __GFP_ACCOUNT being or not being passed to individual allocations.
 191:./include/linux/slab.h ****  */
 192:./include/linux/slab.h **** #ifdef CONFIG_MEMCG
 193:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_BIT(_SLAB_ACCOUNT)
 194:./include/linux/slab.h **** #else
 195:./include/linux/slab.h **** # define SLAB_ACCOUNT		__SLAB_FLAG_UNUSED
 196:./include/linux/slab.h **** #endif
 197:./include/linux/slab.h **** 
 198:./include/linux/slab.h **** #ifdef CONFIG_KASAN_GENERIC
 199:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_BIT(_SLAB_KASAN)
 200:./include/linux/slab.h **** #else
 201:./include/linux/slab.h **** #define SLAB_KASAN		__SLAB_FLAG_UNUSED
 202:./include/linux/slab.h **** #endif
 203:./include/linux/slab.h **** 
 204:./include/linux/slab.h **** /*
 205:./include/linux/slab.h ****  * Ignore user specified debugging flags.
 206:./include/linux/slab.h ****  * Intended for caches created for self-tests so they have only flags
 207:./include/linux/slab.h ****  * specified in the code and other flags are ignored.
 208:./include/linux/slab.h ****  */
 209:./include/linux/slab.h **** #define SLAB_NO_USER_FLAGS	__SLAB_FLAG_BIT(_SLAB_NO_USER_FLAGS)
 210:./include/linux/slab.h **** 
 211:./include/linux/slab.h **** #ifdef CONFIG_KFENCE
 212:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_BIT(_SLAB_SKIP_KFENCE)
 213:./include/linux/slab.h **** #else
 214:./include/linux/slab.h **** #define SLAB_SKIP_KFENCE	__SLAB_FLAG_UNUSED
 215:./include/linux/slab.h **** #endif
 216:./include/linux/slab.h **** 
 217:./include/linux/slab.h **** /* The following flags affect the page allocator grouping pages by mobility */
 218:./include/linux/slab.h **** /**
ARM GAS  /tmp/ccZnep12.s 			page 26


 219:./include/linux/slab.h ****  * define SLAB_RECLAIM_ACCOUNT - Objects are reclaimable.
 220:./include/linux/slab.h ****  *
 221:./include/linux/slab.h ****  * Use this flag for caches that have an associated shrinker. As a result, slab
 222:./include/linux/slab.h ****  * pages are allocated with __GFP_RECLAIMABLE, which affects grouping pages by
 223:./include/linux/slab.h ****  * mobility, and are accounted in SReclaimable counter in /proc/meminfo
 224:./include/linux/slab.h ****  */
 225:./include/linux/slab.h **** #ifndef CONFIG_SLUB_TINY
 226:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_BIT(_SLAB_RECLAIM_ACCOUNT)
 227:./include/linux/slab.h **** #else
 228:./include/linux/slab.h **** #define SLAB_RECLAIM_ACCOUNT	__SLAB_FLAG_UNUSED
 229:./include/linux/slab.h **** #endif
 230:./include/linux/slab.h **** #define SLAB_TEMPORARY		SLAB_RECLAIM_ACCOUNT	/* Objects are short-lived */
 231:./include/linux/slab.h **** 
 232:./include/linux/slab.h **** /* Slab created using create_boot_cache */
 233:./include/linux/slab.h **** #ifdef CONFIG_SLAB_OBJ_EXT
 234:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_BIT(_SLAB_NO_OBJ_EXT)
 235:./include/linux/slab.h **** #else
 236:./include/linux/slab.h **** #define SLAB_NO_OBJ_EXT		__SLAB_FLAG_UNUSED
 237:./include/linux/slab.h **** #endif
 238:./include/linux/slab.h **** 
 239:./include/linux/slab.h **** /*
 240:./include/linux/slab.h ****  * freeptr_t represents a SLUB freelist pointer, which might be encoded
 241:./include/linux/slab.h ****  * and not dereferenceable if CONFIG_SLAB_FREELIST_HARDENED is enabled.
 242:./include/linux/slab.h ****  */
 243:./include/linux/slab.h **** typedef struct { unsigned long v; } freeptr_t;
 244:./include/linux/slab.h **** 
 245:./include/linux/slab.h **** /*
 246:./include/linux/slab.h ****  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
 247:./include/linux/slab.h ****  *
 248:./include/linux/slab.h ****  * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.
 249:./include/linux/slab.h ****  *
 250:./include/linux/slab.h ****  * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.
 251:./include/linux/slab.h ****  * Both make kfree a no-op.
 252:./include/linux/slab.h ****  */
 253:./include/linux/slab.h **** #define ZERO_SIZE_PTR ((void *)16)
 254:./include/linux/slab.h **** 
 255:./include/linux/slab.h **** #define ZERO_OR_NULL_PTR(x) ((unsigned long)(x) <= \
 256:./include/linux/slab.h **** 				(unsigned long)ZERO_SIZE_PTR)
 257:./include/linux/slab.h **** 
 258:./include/linux/slab.h **** 
 259:./include/linux/slab.h **** 
 260:./include/linux/slab.h **** 
 261:./include/linux/slab.h **** 
 262:./include/linux/slab.h **** #ifdef CONFIG_SLUB_CPU_PARTIAL
 263:./include/linux/slab.h **** #define slub_percpu_partial(c)			((c)->partial)
 264:./include/linux/slab.h **** 
 265:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)		\
 266:./include/linux/slab.h **** ({						\
 267:./include/linux/slab.h **** 	slub_percpu_partial(c) = (p)->next;	\
 268:./include/linux/slab.h **** })
 269:./include/linux/slab.h **** 
 270:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	READ_ONCE(slub_percpu_partial(c))
 271:./include/linux/slab.h **** #else
 272:./include/linux/slab.h **** #define slub_percpu_partial(c)			NULL
 273:./include/linux/slab.h **** 
 274:./include/linux/slab.h **** #define slub_set_percpu_partial(c, p)
 275:./include/linux/slab.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 27


 276:./include/linux/slab.h **** #define slub_percpu_partial_read_once(c)	NULL
 277:./include/linux/slab.h **** 
 278:./include/linux/slab.h **** 
 279:./include/linux/slab.h **** #endif // CONFIG_SLUB_CPU_PARTIAL
 280:./include/linux/slab.h **** 
 281:./include/linux/slab.h **** /*
 282:./include/linux/slab.h **** 	* Word size structure that can be atomically updated or read and that
 283:./include/linux/slab.h **** 	* contains both the order and the number of objects that a slab of the
 284:./include/linux/slab.h **** 	* given order would contain.
 285:./include/linux/slab.h **** 	*/				
 286:./include/linux/slab.h **** struct kmem_cache_order_objects {
 287:./include/linux/slab.h **** 	unsigned int x;
 288:./include/linux/slab.h **** };
 289:./include/linux/slab.h **** 
 290:./include/linux/slab.h **** struct kmem_cache_node {
 291:./include/linux/slab.h **** 	spinlock_t list_lock;
 292:./include/linux/slab.h **** 	unsigned long nr_partial;
 293:./include/linux/slab.h **** 	struct list_head partial;
 294:./include/linux/slab.h **** #ifdef CONFIG_SLUB_DEBUG
 295:./include/linux/slab.h **** 	atomic_long_t nr_slabs;
 296:./include/linux/slab.h **** 	atomic_long_t total_objects;
 297:./include/linux/slab.h **** 	struct list_head full;
 298:./include/linux/slab.h **** #endif
 299:./include/linux/slab.h **** };
 300:./include/linux/slab.h **** 
 301:./include/linux/slab.h **** struct kmem_cache {
 302:./include/linux/slab.h **** 	#ifndef CONFIG_SLUB_TINY
 303:./include/linux/slab.h **** 	//	struct kmem_cache_cpu __percpu *cpu_slab;
 304:./include/linux/slab.h **** 	#endif
 305:./include/linux/slab.h **** 		/* Used for retrieving partial slabs, etc. */
 306:./include/linux/slab.h **** 		slab_flags_t flags;
 307:./include/linux/slab.h **** 		unsigned long min_partial;
 308:./include/linux/slab.h **** 		unsigned int size;		/* Object size including metadata */
 309:./include/linux/slab.h **** 		unsigned int object_size;	/* Object size without metadata */
 310:./include/linux/slab.h **** 		struct reciprocal_value reciprocal_size;
 311:./include/linux/slab.h **** 		unsigned int offset;		/* Free pointer offset */
 312:./include/linux/slab.h **** 	#ifdef CONFIG_SLUB_CPU_PARTIAL
 313:./include/linux/slab.h **** 		/* Number of per cpu partial objects to keep around */
 314:./include/linux/slab.h **** 		unsigned int cpu_partial;
 315:./include/linux/slab.h **** 		/* Number of per cpu partial slabs to keep around */
 316:./include/linux/slab.h **** 		unsigned int cpu_partial_slabs;
 317:./include/linux/slab.h **** 	#endif
 318:./include/linux/slab.h **** 		struct kmem_cache_order_objects oo;
 319:./include/linux/slab.h **** 	
 320:./include/linux/slab.h **** 		/* Allocation and freeing of slabs */
 321:./include/linux/slab.h **** 		struct kmem_cache_order_objects min;
 322:./include/linux/slab.h **** 		gfp_t allocflags;		/* gfp flags to use on each alloc */
 323:./include/linux/slab.h **** 		int refcount;			/* Refcount for slab cache destroy */
 324:./include/linux/slab.h **** 		void (*ctor)(void *object);	/* Object constructor */
 325:./include/linux/slab.h **** 		unsigned int inuse;		/* Offset to metadata */
 326:./include/linux/slab.h **** 		unsigned int align;		/* Alignment */
 327:./include/linux/slab.h **** 		unsigned int red_left_pad;	/* Left redzone padding size */
 328:./include/linux/slab.h **** 		const char *name;		/* Name (only for display!) */
 329:./include/linux/slab.h **** 		struct list_head list;		/* List of slab caches */
 330:./include/linux/slab.h **** 	#ifdef CONFIG_SYSFS
 331:./include/linux/slab.h **** 		struct kobject kobj;		/* For sysfs */
 332:./include/linux/slab.h **** 	#endif
ARM GAS  /tmp/ccZnep12.s 			page 28


 333:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_HARDENED
 334:./include/linux/slab.h **** 		unsigned long random;
 335:./include/linux/slab.h **** 	#endif
 336:./include/linux/slab.h **** 	
 337:./include/linux/slab.h **** 	#ifdef CONFIG_NUMA
 338:./include/linux/slab.h **** 		/*
 339:./include/linux/slab.h **** 			* Defragmentation by allocating from a remote node.
 340:./include/linux/slab.h **** 			*/
 341:./include/linux/slab.h **** 		unsigned int remote_node_defrag_ratio;
 342:./include/linux/slab.h **** 	#endif
 343:./include/linux/slab.h **** 	
 344:./include/linux/slab.h **** 	#ifdef CONFIG_SLAB_FREELIST_RANDOM
 345:./include/linux/slab.h **** 		unsigned int *random_seq;
 346:./include/linux/slab.h **** 	#endif
 347:./include/linux/slab.h **** 	
 348:./include/linux/slab.h **** 	#ifdef CONFIG_KASAN_GENERIC
 349:./include/linux/slab.h **** 		struct kasan_cache kasan_info;
 350:./include/linux/slab.h **** 	#endif
 351:./include/linux/slab.h **** 	
 352:./include/linux/slab.h **** 	#ifdef CONFIG_HARDENED_USERCOPY
 353:./include/linux/slab.h **** 		unsigned int useroffset;	/* Usercopy region offset */
 354:./include/linux/slab.h **** 		unsigned int usersize;		/* Usercopy region size */
 355:./include/linux/slab.h **** 	#endif
 356:./include/linux/slab.h **** 	
 357:./include/linux/slab.h **** 		struct kmem_cache_node *node[MAX_NUMNODES];
 358:./include/linux/slab.h **** 	};
 359:./include/linux/slab.h **** 					
 360:./include/linux/slab.h **** 
 361:./include/linux/slab.h **** 
 362:./include/linux/slab.h **** 
 363:./include/linux/slab.h **** 
 364:./include/linux/slab.h **** #define KMALLOC_WAIT 1
 365:./include/linux/slab.h **** 
 366:./include/linux/slab.h **** 
 367:./include/linux/slab.h **** extern void* __smalloc__(u32 size, gfp_t flags);
 368:./include/linux/slab.h **** extern void  __sfree__(void* addr);
 369:./include/linux/slab.h **** 
 370:./include/linux/slab.h **** 
 371:./include/linux/slab.h **** static void inline *vmalloc(unsigned long size){
 372:./include/linux/slab.h **** 	return __smalloc__(size,GFP_TRANSHUGE_LIGHT);
 373:./include/linux/slab.h **** }
 374:./include/linux/slab.h **** 
 375:./include/linux/slab.h **** static void inline vfree(void *addr){
 376:./include/linux/slab.h **** 	__sfree__(addr);
 377:./include/linux/slab.h **** }
 378:./include/linux/slab.h **** 
 379:./include/linux/slab.h **** static void inline *kmalloc(size_t size, gfp_t flags){
 509              		.loc 4 379 21 view .LVU112
 510              	.LBB228:
 380:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 511              		.loc 4 380 2 view .LVU113
 512              		.loc 4 380 9 is_stmt 0 view .LVU114
 513 000c 4FF44C61 		mov	r1, #3264
 514              	.LVL40:
 515              		.loc 4 380 9 view .LVU115
 516 0010 40F21C40 		movw	r0, #1052
 517              	.LVL41:
ARM GAS  /tmp/ccZnep12.s 			page 29


 518              		.loc 4 380 9 view .LVU116
 519 0014 FFF7FEFF 		bl	__smalloc__
 520              	.LVL42:
 521              		.loc 4 380 9 view .LVU117
 522              	.LBE228:
 523              	.LBE227:
  68:./fs/pipefs/pipefs.c ****         if(!p_inode->buf)
 524              		.loc 1 68 22 discriminator 1 view .LVU118
 525 0018 A063     		str	r0, [r4, #56]
  69:./fs/pipefs/pipefs.c ****            return -1;
 526              		.loc 1 69 9 is_stmt 1 view .LVU119
  69:./fs/pipefs/pipefs.c ****            return -1;
 527              		.loc 1 69 11 is_stmt 0 view .LVU120
 528 001a 08B1     		cbz	r0, .L39
  72:./fs/pipefs/pipefs.c **** }
 529              		.loc 1 72 12 view .LVU121
 530 001c 0020     		movs	r0, #0
 531 001e F4E7     		b	.L36
 532              	.L39:
  70:./fs/pipefs/pipefs.c ****     }
 533              		.loc 1 70 19 view .LVU122
 534 0020 4FF0FF30 		mov	r0, #-1
 535 0024 F1E7     		b	.L36
 536              		.cfi_endproc
 537              	.LFE1039:
 539              		.section	.text.pipefs_create_empty_inode,"ax",%progbits
 540              		.align	1
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 545              	pipefs_create_empty_inode:
 546              	.LVL43:
 547              	.LFB1043:
 115:./fs/pipefs/pipefs.c ****     if(fop == NULL) return NULL;
 548              		.loc 1 115 1 is_stmt 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 115:./fs/pipefs/pipefs.c ****     if(fop == NULL) return NULL;
 552              		.loc 1 115 1 is_stmt 0 view .LVU124
 553 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 554              	.LCFI8:
 555              		.cfi_def_cfa_offset 24
 556              		.cfi_offset 3, -24
 557              		.cfi_offset 4, -20
 558              		.cfi_offset 5, -16
 559              		.cfi_offset 6, -12
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 116:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
 562              		.loc 1 116 5 is_stmt 1 view .LVU125
 116:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
 563              		.loc 1 116 7 is_stmt 0 view .LVU126
 564 0002 0F46     		mov	r7, r1
 565 0004 71B3     		cbz	r1, .L44
 566 0006 0546     		mov	r5, r0
 567 0008 1646     		mov	r6, r2
ARM GAS  /tmp/ccZnep12.s 			page 30


 117:./fs/pipefs/pipefs.c ****     if(pipe_inode == NULL) return NULL;
 568              		.loc 1 117 5 is_stmt 1 view .LVU127
 569              	.LVL44:
 570              	.LBB229:
 571              	.LBI229:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 572              		.loc 4 379 21 view .LVU128
 573              	.LBB230:
 574              		.loc 4 380 2 view .LVU129
 575              		.loc 4 380 9 is_stmt 0 view .LVU130
 576 000a 4FF44C61 		mov	r1, #3264
 577              	.LVL45:
 578              		.loc 4 380 9 view .LVU131
 579 000e 3C20     		movs	r0, #60
 580              	.LVL46:
 581              		.loc 4 380 9 view .LVU132
 582 0010 FFF7FEFF 		bl	__smalloc__
 583              	.LVL47:
 584              		.loc 4 380 9 view .LVU133
 585              	.LBE230:
 586              	.LBE229:
 118:./fs/pipefs/pipefs.c ****     pipe_inode->magic = MAGIC;
 587              		.loc 1 118 5 is_stmt 1 view .LVU134
 118:./fs/pipefs/pipefs.c ****     pipe_inode->magic = MAGIC;
 588              		.loc 1 118 7 is_stmt 0 view .LVU135
 589 0014 0446     		mov	r4, r0
 590 0016 18B3     		cbz	r0, .L42
 119:./fs/pipefs/pipefs.c ****     pipe_inode->major = major;
 591              		.loc 1 119 5 is_stmt 1 view .LVU136
 119:./fs/pipefs/pipefs.c ****     pipe_inode->major = major;
 592              		.loc 1 119 23 is_stmt 0 view .LVU137
 593 0018 134B     		ldr	r3, .L46
 594 001a 0360     		str	r3, [r0]
 120:./fs/pipefs/pipefs.c ****     pipe_inode->i_fop = fop;
 595              		.loc 1 120 5 is_stmt 1 view .LVU138
 120:./fs/pipefs/pipefs.c ****     pipe_inode->i_fop = fop;
 596              		.loc 1 120 23 is_stmt 0 view .LVU139
 597 001c 8660     		str	r6, [r0, #8]
 121:./fs/pipefs/pipefs.c ****     pipe_inode->sb    = sb;
 598              		.loc 1 121 5 is_stmt 1 view .LVU140
 121:./fs/pipefs/pipefs.c ****     pipe_inode->sb    = sb;
 599              		.loc 1 121 23 is_stmt 0 view .LVU141
 600 001e 0761     		str	r7, [r0, #16]
 122:./fs/pipefs/pipefs.c ****     pipe_inode->i_mode = S_IFREG | 0755;
 601              		.loc 1 122 5 is_stmt 1 view .LVU142
 122:./fs/pipefs/pipefs.c ****     pipe_inode->i_mode = S_IFREG | 0755;
 602              		.loc 1 122 23 is_stmt 0 view .LVU143
 603 0020 4563     		str	r5, [r0, #52]
 123:./fs/pipefs/pipefs.c ****     atomic_set(&pipe_inode->dentry_count,0);
 604              		.loc 1 123 5 is_stmt 1 view .LVU144
 123:./fs/pipefs/pipefs.c ****     atomic_set(&pipe_inode->dentry_count,0);
 605              		.loc 1 123 24 is_stmt 0 view .LVU145
 606 0022 48F2ED13 		movw	r3, #33261
 607 0026 4360     		str	r3, [r0, #4]
 124:./fs/pipefs/pipefs.c ****     spin_lock_init(&pipe_inode->lock);
 608              		.loc 1 124 5 is_stmt 1 view .LVU146
 609              	.LVL48:
ARM GAS  /tmp/ccZnep12.s 			page 31


 610              	.LBB231:
 611              	.LBI231:
 612              		.file 5 "./include/linux/atomic/atomic-instrumented.h"
   1:./include/linux/atomic/atomic-instrumented.h **** // SPDX-License-Identifier: GPL-2.0
   2:./include/linux/atomic/atomic-instrumented.h **** 
   3:./include/linux/atomic/atomic-instrumented.h **** // Generated by scripts/atomic/gen-atomic-instrumented.sh 
   4:./include/linux/atomic/atomic-instrumented.h **** // DO NOT MODIFY THIS FILE DIRECTLY
   5:./include/linux/atomic/atomic-instrumented.h **** 
   6:./include/linux/atomic/atomic-instrumented.h **** /*
   7:./include/linux/atomic/atomic-instrumented.h ****  * This file provoides atomic operations with explicit instrumentation (e.g.
   8:./include/linux/atomic/atomic-instrumented.h ****  * KASAN, KCSAN), which should be used unless it is necessary to avoid
   9:./include/linux/atomic/atomic-instrumented.h ****  * instrumentation. Where it is necessary to aovid instrumenation, the
  10:./include/linux/atomic/atomic-instrumented.h ****  * raw_atomic*() operations should be used.
  11:./include/linux/atomic/atomic-instrumented.h ****  */
  12:./include/linux/atomic/atomic-instrumented.h **** #ifndef _LINUX_ATOMIC_INSTRUMENTED_H
  13:./include/linux/atomic/atomic-instrumented.h **** #define _LINUX_ATOMIC_INSTRUMENTED_H
  14:./include/linux/atomic/atomic-instrumented.h **** 
  15:./include/linux/atomic/atomic-instrumented.h **** #include <linux/build_bug.h>
  16:./include/linux/atomic/atomic-instrumented.h **** #include <linux/compiler.h>
  17:./include/linux/atomic/atomic-instrumented.h **** #include <linux/instrumented.h>
  18:./include/linux/atomic/atomic-instrumented.h **** 
  19:./include/linux/atomic/atomic-instrumented.h **** /**
  20:./include/linux/atomic/atomic-instrumented.h ****  * atomic_read() - atomic load with relaxed ordering
  21:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  22:./include/linux/atomic/atomic-instrumented.h ****  *
  23:./include/linux/atomic/atomic-instrumented.h ****  * Atomically loads the value of @v with relaxed ordering.
  24:./include/linux/atomic/atomic-instrumented.h ****  *
  25:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_read() there.
  26:./include/linux/atomic/atomic-instrumented.h ****  *
  27:./include/linux/atomic/atomic-instrumented.h ****  * Return: The value loaded from @v.
  28:./include/linux/atomic/atomic-instrumented.h ****  */
  29:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
  30:./include/linux/atomic/atomic-instrumented.h **** atomic_read(const atomic_t *v)
  31:./include/linux/atomic/atomic-instrumented.h **** {
  32:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read(v, sizeof(*v));
  33:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read(v);
  34:./include/linux/atomic/atomic-instrumented.h **** }
  35:./include/linux/atomic/atomic-instrumented.h **** 
  36:./include/linux/atomic/atomic-instrumented.h **** /**
  37:./include/linux/atomic/atomic-instrumented.h ****  * atomic_read_acquire() - atomic load with acquire ordering
  38:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  39:./include/linux/atomic/atomic-instrumented.h ****  *
  40:./include/linux/atomic/atomic-instrumented.h ****  * Atomically loads the value of @v with acquire ordering.
  41:./include/linux/atomic/atomic-instrumented.h ****  *
  42:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_read_acquire() there.
  43:./include/linux/atomic/atomic-instrumented.h ****  *
  44:./include/linux/atomic/atomic-instrumented.h ****  * Return: The value loaded from @v.
  45:./include/linux/atomic/atomic-instrumented.h ****  */
  46:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
  47:./include/linux/atomic/atomic-instrumented.h **** atomic_read_acquire(const atomic_t *v)
  48:./include/linux/atomic/atomic-instrumented.h **** {
  49:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read(v, sizeof(*v));
  50:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read_acquire(v);
  51:./include/linux/atomic/atomic-instrumented.h **** }
  52:./include/linux/atomic/atomic-instrumented.h **** 
  53:./include/linux/atomic/atomic-instrumented.h **** /**
  54:./include/linux/atomic/atomic-instrumented.h ****  * atomic_set() - atomic set with relaxed ordering
ARM GAS  /tmp/ccZnep12.s 			page 32


  55:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  56:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to assign
  57:./include/linux/atomic/atomic-instrumented.h ****  *
  58:./include/linux/atomic/atomic-instrumented.h ****  * Atomically sets @v to @i with relaxed ordering.
  59:./include/linux/atomic/atomic-instrumented.h ****  *
  60:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_set() there.
  61:./include/linux/atomic/atomic-instrumented.h ****  *
  62:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
  63:./include/linux/atomic/atomic-instrumented.h ****  */
  64:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
  65:./include/linux/atomic/atomic-instrumented.h **** atomic_set(atomic_t *v, int i)
 613              		.loc 5 65 1 view .LVU147
  66:./include/linux/atomic/atomic-instrumented.h **** {
  67:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_write(v, sizeof(*v));
 614              		.loc 5 67 2 view .LVU148
  68:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_set(v, i);
 615              		.loc 5 68 2 view .LVU149
 616              	.LBB232:
 617              	.LBI232:
 618              		.file 6 "./include/linux/atomic/atomic-arch-fallback.h"
   1:./include/linux/atomic/atomic-arch-fallback.h **** // SPDX-License-Identifier: GPL-2.0
   2:./include/linux/atomic/atomic-arch-fallback.h **** 
   3:./include/linux/atomic/atomic-arch-fallback.h **** // Generated by scripts/atomic/gen-atomic-fallback.sh
   4:./include/linux/atomic/atomic-arch-fallback.h **** // DO NOT MODIFY THIS FILE DIRECTLY
   5:./include/linux/atomic/atomic-arch-fallback.h **** 
   6:./include/linux/atomic/atomic-arch-fallback.h **** #ifndef _LINUX_ATOMIC_FALLBACK_H
   7:./include/linux/atomic/atomic-arch-fallback.h **** #define _LINUX_ATOMIC_FALLBACK_H
   8:./include/linux/atomic/atomic-arch-fallback.h **** 
   9:./include/linux/atomic/atomic-arch-fallback.h **** #include <linux/compiler.h>
  10:./include/linux/atomic/atomic-arch-fallback.h **** 
  11:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg)
  12:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg arch_xchg
  13:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  14:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg(...) \
  15:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_xchg, __VA_ARGS__)
  16:./include/linux/atomic/atomic-arch-fallback.h **** #else
  17:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_not_implemented(void);
  18:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg(...) raw_xchg_not_implemented()
  19:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  20:./include/linux/atomic/atomic-arch-fallback.h **** 
  21:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_acquire)
  22:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire arch_xchg_acquire
  23:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  24:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire(...) \
  25:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_xchg, __VA_ARGS__)
  26:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  27:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire arch_xchg
  28:./include/linux/atomic/atomic-arch-fallback.h **** #else
  29:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_acquire_not_implemented(void);
  30:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_acquire(...) raw_xchg_acquire_not_implemented()
  31:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  32:./include/linux/atomic/atomic-arch-fallback.h **** 
  33:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_release)
  34:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release arch_xchg_release
  35:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg_relaxed)
  36:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release(...) \
  37:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_xchg, __VA_ARGS__)
ARM GAS  /tmp/ccZnep12.s 			page 33


  38:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  39:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release arch_xchg
  40:./include/linux/atomic/atomic-arch-fallback.h **** #else
  41:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_release_not_implemented(void);
  42:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_release(...) raw_xchg_release_not_implemented()
  43:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  44:./include/linux/atomic/atomic-arch-fallback.h **** 
  45:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_xchg_relaxed)
  46:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed arch_xchg_relaxed
  47:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_xchg)
  48:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed arch_xchg
  49:./include/linux/atomic/atomic-arch-fallback.h **** #else
  50:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_xchg_relaxed_not_implemented(void);
  51:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_xchg_relaxed(...) raw_xchg_relaxed_not_implemented()
  52:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  53:./include/linux/atomic/atomic-arch-fallback.h **** 
  54:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg)
  55:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg arch_cmpxchg
  56:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  57:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg(...) \
  58:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg, __VA_ARGS__)
  59:./include/linux/atomic/atomic-arch-fallback.h **** #else
  60:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_not_implemented(void);
  61:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg(...) raw_cmpxchg_not_implemented()
  62:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  63:./include/linux/atomic/atomic-arch-fallback.h **** 
  64:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_acquire)
  65:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire arch_cmpxchg_acquire
  66:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  67:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire(...) \
  68:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg, __VA_ARGS__)
  69:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  70:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire arch_cmpxchg
  71:./include/linux/atomic/atomic-arch-fallback.h **** #else
  72:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_acquire_not_implemented(void);
  73:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_acquire(...) raw_cmpxchg_acquire_not_implemented()
  74:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  75:./include/linux/atomic/atomic-arch-fallback.h **** 
  76:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_release)
  77:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release arch_cmpxchg_release
  78:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg_relaxed)
  79:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release(...) \
  80:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg, __VA_ARGS__)
  81:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  82:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release arch_cmpxchg
  83:./include/linux/atomic/atomic-arch-fallback.h **** #else
  84:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_release_not_implemented(void);
  85:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_release(...) raw_cmpxchg_release_not_implemented()
  86:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  87:./include/linux/atomic/atomic-arch-fallback.h **** 
  88:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg_relaxed)
  89:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed arch_cmpxchg_relaxed
  90:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg)
  91:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed arch_cmpxchg
  92:./include/linux/atomic/atomic-arch-fallback.h **** #else
  93:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg_relaxed_not_implemented(void);
  94:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_relaxed(...) raw_cmpxchg_relaxed_not_implemented()
ARM GAS  /tmp/ccZnep12.s 			page 34


  95:./include/linux/atomic/atomic-arch-fallback.h **** #endif
  96:./include/linux/atomic/atomic-arch-fallback.h **** 
  97:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64)
  98:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64 arch_cmpxchg64
  99:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 100:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64(...) \
 101:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg64, __VA_ARGS__)
 102:./include/linux/atomic/atomic-arch-fallback.h **** #else
 103:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_not_implemented(void);
 104:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64(...) raw_cmpxchg64_not_implemented()
 105:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 106:./include/linux/atomic/atomic-arch-fallback.h **** 
 107:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_acquire)
 108:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire arch_cmpxchg64_acquire
 109:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 110:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire(...) \
 111:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg64, __VA_ARGS__)
 112:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 113:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire arch_cmpxchg64
 114:./include/linux/atomic/atomic-arch-fallback.h **** #else
 115:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_acquire_not_implemented(void);
 116:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_acquire(...) raw_cmpxchg64_acquire_not_implemented()
 117:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 118:./include/linux/atomic/atomic-arch-fallback.h **** 
 119:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_release)
 120:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release arch_cmpxchg64_release
 121:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64_relaxed)
 122:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release(...) \
 123:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg64, __VA_ARGS__)
 124:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 125:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release arch_cmpxchg64
 126:./include/linux/atomic/atomic-arch-fallback.h **** #else
 127:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_release_not_implemented(void);
 128:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_release(...) raw_cmpxchg64_release_not_implemented()
 129:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 130:./include/linux/atomic/atomic-arch-fallback.h **** 
 131:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg64_relaxed)
 132:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed arch_cmpxchg64_relaxed
 133:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg64)
 134:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed arch_cmpxchg64
 135:./include/linux/atomic/atomic-arch-fallback.h **** #else
 136:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg64_relaxed_not_implemented(void);
 137:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_relaxed(...) raw_cmpxchg64_relaxed_not_implemented()
 138:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 139:./include/linux/atomic/atomic-arch-fallback.h **** 
 140:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128)
 141:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128 arch_cmpxchg128
 142:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 143:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128(...) \
 144:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_cmpxchg128, __VA_ARGS__)
 145:./include/linux/atomic/atomic-arch-fallback.h **** #else
 146:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_not_implemented(void);
 147:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128(...) raw_cmpxchg128_not_implemented()
 148:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 149:./include/linux/atomic/atomic-arch-fallback.h **** 
 150:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_acquire)
 151:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire arch_cmpxchg128_acquire
ARM GAS  /tmp/ccZnep12.s 			page 35


 152:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 153:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire(...) \
 154:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_cmpxchg128, __VA_ARGS__)
 155:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 156:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire arch_cmpxchg128
 157:./include/linux/atomic/atomic-arch-fallback.h **** #else
 158:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_acquire_not_implemented(void);
 159:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_acquire(...) raw_cmpxchg128_acquire_not_implemented()
 160:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 161:./include/linux/atomic/atomic-arch-fallback.h **** 
 162:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_release)
 163:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release arch_cmpxchg128_release
 164:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128_relaxed)
 165:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release(...) \
 166:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_cmpxchg128, __VA_ARGS__)
 167:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 168:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release arch_cmpxchg128
 169:./include/linux/atomic/atomic-arch-fallback.h **** #else
 170:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_release_not_implemented(void);
 171:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_release(...) raw_cmpxchg128_release_not_implemented()
 172:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 173:./include/linux/atomic/atomic-arch-fallback.h **** 
 174:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_cmpxchg128_relaxed)
 175:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed arch_cmpxchg128_relaxed
 176:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_cmpxchg128)
 177:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed arch_cmpxchg128
 178:./include/linux/atomic/atomic-arch-fallback.h **** #else
 179:./include/linux/atomic/atomic-arch-fallback.h **** extern void raw_cmpxchg128_relaxed_not_implemented(void);
 180:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_relaxed(...) raw_cmpxchg128_relaxed_not_implemented()
 181:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 182:./include/linux/atomic/atomic-arch-fallback.h **** 
 183:./include/linux/atomic/atomic-arch-fallback.h **** 
 184:./include/linux/atomic/atomic-arch-fallback.h **** 
 185:./include/linux/atomic/atomic-arch-fallback.h **** 
 186:./include/linux/atomic/atomic-arch-fallback.h **** 
 187:./include/linux/atomic/atomic-arch-fallback.h **** 
 188:./include/linux/atomic/atomic-arch-fallback.h **** 
 189:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg)
 190:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg arch_try_cmpxchg
 191:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 192:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg(...) \
 193:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg, __VA_ARGS__)
 194:./include/linux/atomic/atomic-arch-fallback.h **** #else
 195:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg(_ptr, _oldp, _new) \
 196:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 197:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 198:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg((_ptr), ___o, (_new)); \
 199:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 200:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 201:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 202:./include/linux/atomic/atomic-arch-fallback.h **** })
 203:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 204:./include/linux/atomic/atomic-arch-fallback.h **** 
 205:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_acquire)
 206:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire arch_try_cmpxchg_acquire
 207:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 208:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire(...) \
ARM GAS  /tmp/ccZnep12.s 			page 36


 209:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg, __VA_ARGS__)
 210:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 211:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire arch_try_cmpxchg
 212:./include/linux/atomic/atomic-arch-fallback.h **** #else
 213:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_acquire(_ptr, _oldp, _new) \
 214:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 215:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 216:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_acquire((_ptr), ___o, (_new)); \
 217:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 218:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 219:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 220:./include/linux/atomic/atomic-arch-fallback.h **** })
 221:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 222:./include/linux/atomic/atomic-arch-fallback.h **** 
 223:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_release)
 224:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release arch_try_cmpxchg_release
 225:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg_relaxed)
 226:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release(...) \
 227:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg, __VA_ARGS__)
 228:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 229:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release arch_try_cmpxchg
 230:./include/linux/atomic/atomic-arch-fallback.h **** #else
 231:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_release(_ptr, _oldp, _new) \
 232:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 233:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 234:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_release((_ptr), ___o, (_new)); \
 235:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 236:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 237:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 238:./include/linux/atomic/atomic-arch-fallback.h **** })
 239:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 240:./include/linux/atomic/atomic-arch-fallback.h **** 
 241:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg_relaxed)
 242:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed arch_try_cmpxchg_relaxed
 243:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg)
 244:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed arch_try_cmpxchg
 245:./include/linux/atomic/atomic-arch-fallback.h **** #else
 246:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_relaxed(_ptr, _oldp, _new) \
 247:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 248:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 249:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_relaxed((_ptr), ___o, (_new)); \
 250:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 251:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 252:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 253:./include/linux/atomic/atomic-arch-fallback.h **** })
 254:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 255:./include/linux/atomic/atomic-arch-fallback.h **** 
 256:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64)
 257:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64 arch_try_cmpxchg64
 258:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 259:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64(...) \
 260:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg64, __VA_ARGS__)
 261:./include/linux/atomic/atomic-arch-fallback.h **** #else
 262:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64(_ptr, _oldp, _new) \
 263:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 264:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 265:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64((_ptr), ___o, (_new)); \
ARM GAS  /tmp/ccZnep12.s 			page 37


 266:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 267:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 268:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 269:./include/linux/atomic/atomic-arch-fallback.h **** })
 270:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 271:./include/linux/atomic/atomic-arch-fallback.h **** 
 272:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_acquire)
 273:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire arch_try_cmpxchg64_acquire
 274:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 275:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire(...) \
 276:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg64, __VA_ARGS__)
 277:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 278:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire arch_try_cmpxchg64
 279:./include/linux/atomic/atomic-arch-fallback.h **** #else
 280:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_acquire(_ptr, _oldp, _new) \
 281:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 282:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 283:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_acquire((_ptr), ___o, (_new)); \
 284:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 285:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 286:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 287:./include/linux/atomic/atomic-arch-fallback.h **** })
 288:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 289:./include/linux/atomic/atomic-arch-fallback.h **** 
 290:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_release)
 291:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release arch_try_cmpxchg64_release
 292:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64_relaxed)
 293:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release(...) \
 294:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg64, __VA_ARGS__)
 295:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 296:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release arch_try_cmpxchg64
 297:./include/linux/atomic/atomic-arch-fallback.h **** #else
 298:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_release(_ptr, _oldp, _new) \
 299:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 300:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 301:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_release((_ptr), ___o, (_new)); \
 302:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 303:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 304:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 305:./include/linux/atomic/atomic-arch-fallback.h **** })
 306:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 307:./include/linux/atomic/atomic-arch-fallback.h **** 
 308:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg64_relaxed)
 309:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed arch_try_cmpxchg64_relaxed
 310:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg64)
 311:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed arch_try_cmpxchg64
 312:./include/linux/atomic/atomic-arch-fallback.h **** #else
 313:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_relaxed(_ptr, _oldp, _new) \
 314:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 315:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 316:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_relaxed((_ptr), ___o, (_new)); \
 317:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 318:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 319:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 320:./include/linux/atomic/atomic-arch-fallback.h **** })
 321:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 322:./include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 38


 323:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128)
 324:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128 arch_try_cmpxchg128
 325:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 326:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128(...) \
 327:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_fence(arch_try_cmpxchg128, __VA_ARGS__)
 328:./include/linux/atomic/atomic-arch-fallback.h **** #else
 329:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128(_ptr, _oldp, _new) \
 330:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 331:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 332:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128((_ptr), ___o, (_new)); \
 333:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 334:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 335:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 336:./include/linux/atomic/atomic-arch-fallback.h **** })
 337:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 338:./include/linux/atomic/atomic-arch-fallback.h **** 
 339:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_acquire)
 340:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire arch_try_cmpxchg128_acquire
 341:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 342:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire(...) \
 343:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_acquire(arch_try_cmpxchg128, __VA_ARGS__)
 344:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 345:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire arch_try_cmpxchg128
 346:./include/linux/atomic/atomic-arch-fallback.h **** #else
 347:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_acquire(_ptr, _oldp, _new) \
 348:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 349:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 350:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_acquire((_ptr), ___o, (_new)); \
 351:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 352:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 353:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 354:./include/linux/atomic/atomic-arch-fallback.h **** })
 355:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 356:./include/linux/atomic/atomic-arch-fallback.h **** 
 357:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_release)
 358:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release arch_try_cmpxchg128_release
 359:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128_relaxed)
 360:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release(...) \
 361:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_op_release(arch_try_cmpxchg128, __VA_ARGS__)
 362:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 363:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release arch_try_cmpxchg128
 364:./include/linux/atomic/atomic-arch-fallback.h **** #else
 365:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_release(_ptr, _oldp, _new) \
 366:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 367:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 368:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_release((_ptr), ___o, (_new)); \
 369:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 370:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 371:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 372:./include/linux/atomic/atomic-arch-fallback.h **** })
 373:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 374:./include/linux/atomic/atomic-arch-fallback.h **** 
 375:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_try_cmpxchg128_relaxed)
 376:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed arch_try_cmpxchg128_relaxed
 377:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_try_cmpxchg128)
 378:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed arch_try_cmpxchg128
 379:./include/linux/atomic/atomic-arch-fallback.h **** #else
ARM GAS  /tmp/ccZnep12.s 			page 39


 380:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_relaxed(_ptr, _oldp, _new) \
 381:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 382:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 383:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_relaxed((_ptr), ___o, (_new)); \
 384:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 385:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 386:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 387:./include/linux/atomic/atomic-arch-fallback.h **** })
 388:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 389:./include/linux/atomic/atomic-arch-fallback.h **** 
 390:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg_local arch_cmpxchg_local
 391:./include/linux/atomic/atomic-arch-fallback.h **** 
 392:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg_local
 393:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_local arch_try_cmpxchg_local
 394:./include/linux/atomic/atomic-arch-fallback.h **** #else
 395:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg_local(_ptr, _oldp, _new) \
 396:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 397:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 398:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg_local((_ptr), ___o, (_new)); \
 399:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 400:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 401:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 402:./include/linux/atomic/atomic-arch-fallback.h **** })
 403:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 404:./include/linux/atomic/atomic-arch-fallback.h **** 
 405:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg64_local arch_cmpxchg64_local
 406:./include/linux/atomic/atomic-arch-fallback.h **** 
 407:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg64_local
 408:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_local arch_try_cmpxchg64_local
 409:./include/linux/atomic/atomic-arch-fallback.h **** #else
 410:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg64_local(_ptr, _oldp, _new) \
 411:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 412:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 413:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg64_local((_ptr), ___o, (_new)); \
 414:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 415:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 416:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 417:./include/linux/atomic/atomic-arch-fallback.h **** })
 418:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 419:./include/linux/atomic/atomic-arch-fallback.h **** 
 420:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_cmpxchg128_local arch_cmpxchg128_local
 421:./include/linux/atomic/atomic-arch-fallback.h **** 
 422:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_try_cmpxchg128_local
 423:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_local arch_try_cmpxchg128_local
 424:./include/linux/atomic/atomic-arch-fallback.h **** #else
 425:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_try_cmpxchg128_local(_ptr, _oldp, _new) \
 426:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 427:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 428:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_cmpxchg128_local((_ptr), ___o, (_new)); \
 429:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 430:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 431:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 432:./include/linux/atomic/atomic-arch-fallback.h **** })
 433:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 434:./include/linux/atomic/atomic-arch-fallback.h **** 
 435:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_cmpxchg arch_sync_cmpxchg
 436:./include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 40


 437:./include/linux/atomic/atomic-arch-fallback.h **** #ifdef arch_sync_try_cmpxchg
 438:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_try_cmpxchg arch_sync_try_cmpxchg
 439:./include/linux/atomic/atomic-arch-fallback.h **** #else
 440:./include/linux/atomic/atomic-arch-fallback.h **** #define raw_sync_try_cmpxchg(_ptr, _oldp, _new) \
 441:./include/linux/atomic/atomic-arch-fallback.h **** ({ \
 442:./include/linux/atomic/atomic-arch-fallback.h **** 	typeof(*(_ptr)) *___op = (_oldp), ___o = *___op, ___r; \
 443:./include/linux/atomic/atomic-arch-fallback.h **** 	___r = raw_sync_cmpxchg((_ptr), ___o, (_new)); \
 444:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(___r != ___o)) \
 445:./include/linux/atomic/atomic-arch-fallback.h **** 		*___op = ___r; \
 446:./include/linux/atomic/atomic-arch-fallback.h **** 	likely(___r == ___o); \
 447:./include/linux/atomic/atomic-arch-fallback.h **** })
 448:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 449:./include/linux/atomic/atomic-arch-fallback.h **** 
 450:./include/linux/atomic/atomic-arch-fallback.h **** /**
 451:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_read() - atomic load with relaxed ordering
 452:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 453:./include/linux/atomic/atomic-arch-fallback.h ****  *
 454:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically loads the value of @v with relaxed ordering.
 455:./include/linux/atomic/atomic-arch-fallback.h ****  *
 456:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_read() elsewhere.
 457:./include/linux/atomic/atomic-arch-fallback.h ****  *
 458:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The value loaded from @v.
 459:./include/linux/atomic/atomic-arch-fallback.h ****  */
 460:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 461:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_read(const atomic_t *v)
 462:./include/linux/atomic/atomic-arch-fallback.h **** {
 463:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_read(v);
 464:./include/linux/atomic/atomic-arch-fallback.h **** }
 465:./include/linux/atomic/atomic-arch-fallback.h **** 
 466:./include/linux/atomic/atomic-arch-fallback.h **** /**
 467:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_read_acquire() - atomic load with acquire ordering
 468:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 469:./include/linux/atomic/atomic-arch-fallback.h ****  *
 470:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically loads the value of @v with acquire ordering.
 471:./include/linux/atomic/atomic-arch-fallback.h ****  *
 472:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_read_acquire() elsewhere.
 473:./include/linux/atomic/atomic-arch-fallback.h ****  *
 474:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The value loaded from @v.
 475:./include/linux/atomic/atomic-arch-fallback.h ****  */
 476:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 477:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_read_acquire(const atomic_t *v)
 478:./include/linux/atomic/atomic-arch-fallback.h **** {
 479:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_read_acquire)
 480:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_read_acquire(v);
 481:./include/linux/atomic/atomic-arch-fallback.h **** #else
 482:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 483:./include/linux/atomic/atomic-arch-fallback.h **** 
 484:./include/linux/atomic/atomic-arch-fallback.h **** 	if (__native_word(atomic_t)) {
 485:./include/linux/atomic/atomic-arch-fallback.h **** 		ret = smp_load_acquire(&(v)->counter);
 486:./include/linux/atomic/atomic-arch-fallback.h **** 	} else {
 487:./include/linux/atomic/atomic-arch-fallback.h **** 		ret = raw_atomic_read(v);
 488:./include/linux/atomic/atomic-arch-fallback.h **** 		__atomic_acquire_fence();
 489:./include/linux/atomic/atomic-arch-fallback.h **** 	}
 490:./include/linux/atomic/atomic-arch-fallback.h **** 
 491:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 492:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 493:./include/linux/atomic/atomic-arch-fallback.h **** }
ARM GAS  /tmp/ccZnep12.s 			page 41


 494:./include/linux/atomic/atomic-arch-fallback.h **** 
 495:./include/linux/atomic/atomic-arch-fallback.h **** /**
 496:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_set() - atomic set with relaxed ordering
 497:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 498:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to assign
 499:./include/linux/atomic/atomic-arch-fallback.h ****  *
 500:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically sets @v to @i with relaxed ordering.
 501:./include/linux/atomic/atomic-arch-fallback.h ****  *
 502:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_set() elsewhere.
 503:./include/linux/atomic/atomic-arch-fallback.h ****  *
 504:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 505:./include/linux/atomic/atomic-arch-fallback.h ****  */
 506:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 507:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_set(atomic_t *v, int i)
 619              		.loc 6 507 1 view .LVU150
 620              	.LBB233:
 508:./include/linux/atomic/atomic-arch-fallback.h **** {
 509:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_set(v, i);
 621              		.loc 6 509 2 view .LVU151
 622              		.loc 6 509 2 view .LVU152
 623              	.LBB234:
 624              		.loc 6 509 2 view .LVU153
 625              		.loc 6 509 2 view .LVU154
 626              	.LBE234:
 627              		.loc 6 509 2 discriminator 2 view .LVU155
 628              		.loc 6 509 2 discriminator 2 view .LVU156
 629              		.loc 6 509 2 discriminator 2 view .LVU157
 630 0028 0027     		movs	r7, #0
 631              	.LVL49:
 632              		.loc 6 509 2 is_stmt 0 discriminator 2 view .LVU158
 633 002a C760     		str	r7, [r0, #12]
 634              		.loc 6 509 2 is_stmt 1 discriminator 2 view .LVU159
 635              		.loc 6 509 2 discriminator 2 view .LVU160
 636              	.LVL50:
 637              		.loc 6 509 2 is_stmt 0 discriminator 2 view .LVU161
 638              	.LBE233:
 639              	.LBE232:
 640              	.LBE231:
 125:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->list_node);
 641              		.loc 1 125 5 is_stmt 1 view .LVU162
 642 002c 2430     		adds	r0, r0, #36
 643              	.LVL51:
 125:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->list_node);
 644              		.loc 1 125 5 is_stmt 0 view .LVU163
 645 002e FFF7FEFF 		bl	spin_lock_init
 646              	.LVL52:
 126:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&pipe_inode->dentry_list_head);
 647              		.loc 1 126 5 is_stmt 1 view .LVU164
 648 0032 04F11406 		add	r6, r4, #20
 649              	.LVL53:
 650              	.LBB235:
 651              	.LBI235:
 652              		.file 7 "./include/linux/list.h"
   1:./include/linux/list.h **** /* SPDX-License-Identifier: GPL-2.0 */
   2:./include/linux/list.h **** #ifndef _LINUX_LIST_H
   3:./include/linux/list.h **** #define _LINUX_LIST_H
   4:./include/linux/list.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 42


   5:./include/linux/list.h **** #include <linux/container_of.h>
   6:./include/linux/list.h **** #include <linux/types.h>
   7:./include/linux/list.h **** #include <linux/stddef.h>
   8:./include/linux/list.h **** #include <linux/poison.h>
   9:./include/linux/list.h **** #include <linux/const.h>
  10:./include/linux/list.h **** 
  11:./include/linux/list.h **** #include <asm/barrier.h>
  12:./include/linux/list.h **** #include <linux/rwonce.h>
  13:./include/linux/list.h **** /*
  14:./include/linux/list.h ****  * Circular doubly linked list implementation.
  15:./include/linux/list.h ****  *
  16:./include/linux/list.h ****  * Some of the internal functions ("__xxx") are useful when
  17:./include/linux/list.h ****  * manipulating whole lists rather than single entries, as
  18:./include/linux/list.h ****  * sometimes we already know the next/prev entries and we can
  19:./include/linux/list.h ****  * generate better code by using them directly rather than
  20:./include/linux/list.h ****  * using the generic single-entry routines.
  21:./include/linux/list.h ****  */
  22:./include/linux/list.h **** 
  23:./include/linux/list.h **** #define LIST_HEAD_INIT(name) { &(name), &(name) }
  24:./include/linux/list.h **** 
  25:./include/linux/list.h **** #define LIST_HEAD(name) \
  26:./include/linux/list.h **** 	struct list_head name = LIST_HEAD_INIT(name)
  27:./include/linux/list.h **** 
  28:./include/linux/list.h **** /**
  29:./include/linux/list.h ****  * INIT_LIST_HEAD - Initialize a list_head structure
  30:./include/linux/list.h ****  * @list: list_head structure to be initialized.
  31:./include/linux/list.h ****  *
  32:./include/linux/list.h ****  * Initializes the list_head to point to itself.  If it is a list header,
  33:./include/linux/list.h ****  * the result is an empty list.
  34:./include/linux/list.h ****  */
  35:./include/linux/list.h **** static inline void INIT_LIST_HEAD(struct list_head *list)
 653              		.loc 7 35 20 view .LVU165
 654              	.LBB236:
  36:./include/linux/list.h **** {
  37:./include/linux/list.h **** 	WRITE_ONCE(list->next, list);
 655              		.loc 7 37 2 view .LVU166
 656              		.loc 7 37 2 view .LVU167
 657              	.LBB237:
 658              		.loc 7 37 2 view .LVU168
 659              		.loc 7 37 2 view .LVU169
 660              	.LBE237:
 661              		.loc 7 37 2 discriminator 2 view .LVU170
 662              		.loc 7 37 2 discriminator 2 view .LVU171
 663              		.loc 7 37 2 discriminator 2 view .LVU172
 664 0036 6661     		str	r6, [r4, #20]
 665              		.loc 7 37 2 discriminator 2 view .LVU173
 666              		.loc 7 37 2 discriminator 2 view .LVU174
  38:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 667              		.loc 7 38 2 view .LVU175
 668              		.loc 7 38 2 view .LVU176
 669              	.LBB238:
 670              		.loc 7 38 2 view .LVU177
 671              		.loc 7 38 2 view .LVU178
 672              	.LBE238:
 673              		.loc 7 38 2 discriminator 2 view .LVU179
 674              		.loc 7 38 2 discriminator 2 view .LVU180
 675              		.loc 7 38 2 discriminator 2 view .LVU181
ARM GAS  /tmp/ccZnep12.s 			page 43


 676 0038 A661     		str	r6, [r4, #24]
 677              		.loc 7 38 2 discriminator 2 view .LVU182
 678              		.loc 7 38 2 discriminator 2 view .LVU183
 679              	.LVL54:
 680              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU184
 681              	.LBE236:
 682              	.LBE235:
 127:./fs/pipefs/pipefs.c ****     
 683              		.loc 1 127 5 is_stmt 1 view .LVU185
 684 003a 04F11C03 		add	r3, r4, #28
 685              	.LVL55:
 686              	.LBB239:
 687              	.LBI239:
  35:./include/linux/list.h **** {
 688              		.loc 7 35 20 view .LVU186
 689              	.LBB240:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 690              		.loc 7 37 2 view .LVU187
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 691              		.loc 7 37 2 view .LVU188
 692              	.LBB241:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 693              		.loc 7 37 2 view .LVU189
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 694              		.loc 7 37 2 view .LVU190
 695              	.LBE241:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 696              		.loc 7 37 2 discriminator 2 view .LVU191
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 697              		.loc 7 37 2 discriminator 2 view .LVU192
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 698              		.loc 7 37 2 discriminator 2 view .LVU193
 699 003e E361     		str	r3, [r4, #28]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 700              		.loc 7 37 2 discriminator 2 view .LVU194
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 701              		.loc 7 37 2 discriminator 2 view .LVU195
 702              		.loc 7 38 2 view .LVU196
 703              		.loc 7 38 2 view .LVU197
 704              	.LBB242:
 705              		.loc 7 38 2 view .LVU198
 706              		.loc 7 38 2 view .LVU199
 707              	.LBE242:
 708              		.loc 7 38 2 discriminator 2 view .LVU200
 709              		.loc 7 38 2 discriminator 2 view .LVU201
 710              		.loc 7 38 2 discriminator 2 view .LVU202
 711 0040 2362     		str	r3, [r4, #32]
 712              		.loc 7 38 2 discriminator 2 view .LVU203
 713              		.loc 7 38 2 discriminator 2 view .LVU204
 714              	.LVL56:
 715              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU205
 716              	.LBE240:
 717              	.LBE239:
 129:./fs/pipefs/pipefs.c **** 
 718              		.loc 1 129 5 is_stmt 1 view .LVU206
 129:./fs/pipefs/pipefs.c **** 
 719              		.loc 1 129 21 is_stmt 0 view .LVU207
ARM GAS  /tmp/ccZnep12.s 			page 44


 720 0042 A763     		str	r7, [r4, #56]
 131:./fs/pipefs/pipefs.c ****     list_add(&pipe_inode->list_node,&sb->inode_list_head);
 721              		.loc 1 131 5 is_stmt 1 view .LVU208
 722 0044 2F1D     		adds	r7, r5, #4
 723 0046 3846     		mov	r0, r7
 724 0048 FFF7FEFF 		bl	spin_lock
 725              	.LVL57:
 132:./fs/pipefs/pipefs.c ****     spin_unlock(&sb->lock);
 726              		.loc 1 132 5 view .LVU209
 727 004c 05F11802 		add	r2, r5, #24
 728              	.LVL58:
 729              	.LBB243:
 730              	.LBI243:
  39:./include/linux/list.h **** }
  40:./include/linux/list.h **** 
  41:./include/linux/list.h **** #ifdef CONFIG_LIST_HARDENED
  42:./include/linux/list.h **** 
  43:./include/linux/list.h **** #ifdef CONFIG_DEBUG_LIST
  44:./include/linux/list.h **** # define __list_valid_slowpath
  45:./include/linux/list.h **** #else
  46:./include/linux/list.h **** # define __list_valid_slowpath __cold __preserve_most
  47:./include/linux/list.h **** #endif
  48:./include/linux/list.h **** 
  49:./include/linux/list.h **** /*
  50:./include/linux/list.h ****  * Performs the full set of list corruption checks before __list_add().
  51:./include/linux/list.h ****  * On list corruption reports a warning, and returns false.
  52:./include/linux/list.h ****  */
  53:./include/linux/list.h **** extern bool __list_valid_slowpath __list_add_valid_or_report(struct list_head *new,
  54:./include/linux/list.h **** 							     struct list_head *prev,
  55:./include/linux/list.h **** 							     struct list_head *next);
  56:./include/linux/list.h **** 
  57:./include/linux/list.h **** /*
  58:./include/linux/list.h ****  * Performs list corruption checks before __list_add(). Returns false if a
  59:./include/linux/list.h ****  * corruption is detected, true otherwise.
  60:./include/linux/list.h ****  *
  61:./include/linux/list.h ****  * With CONFIG_LIST_HARDENED only, performs minimal list integrity checking
  62:./include/linux/list.h ****  * inline to catch non-faulting corruptions, and only if a corruption is
  63:./include/linux/list.h ****  * detected calls the reporting function __list_add_valid_or_report().
  64:./include/linux/list.h ****  */
  65:./include/linux/list.h **** static __always_inline bool __list_add_valid(struct list_head *new,
  66:./include/linux/list.h **** 					     struct list_head *prev,
  67:./include/linux/list.h **** 					     struct list_head *next)
  68:./include/linux/list.h **** {
  69:./include/linux/list.h **** 	bool ret = true;
  70:./include/linux/list.h **** 
  71:./include/linux/list.h **** 	if (!IS_ENABLED(CONFIG_DEBUG_LIST)) {
  72:./include/linux/list.h **** 		/*
  73:./include/linux/list.h **** 		 * With the hardening version, elide checking if next and prev
  74:./include/linux/list.h **** 		 * are NULL, since the immediate dereference of them below would
  75:./include/linux/list.h **** 		 * result in a fault if NULL.
  76:./include/linux/list.h **** 		 *
  77:./include/linux/list.h **** 		 * With the reduced set of checks, we can afford to inline the
  78:./include/linux/list.h **** 		 * checks, which also gives the compiler a chance to elide some
  79:./include/linux/list.h **** 		 * of them completely if they can be proven at compile-time. If
  80:./include/linux/list.h **** 		 * one of the pre-conditions does not hold, the slow-path will
  81:./include/linux/list.h **** 		 * show a report which pre-condition failed.
  82:./include/linux/list.h **** 		 */
ARM GAS  /tmp/ccZnep12.s 			page 45


  83:./include/linux/list.h **** 		if (likely(next->prev == prev && prev->next == next && new != prev && new != next))
  84:./include/linux/list.h **** 			return true;
  85:./include/linux/list.h **** 		ret = false;
  86:./include/linux/list.h **** 	}
  87:./include/linux/list.h **** 
  88:./include/linux/list.h **** 	ret &= __list_add_valid_or_report(new, prev, next);
  89:./include/linux/list.h **** 	return ret;
  90:./include/linux/list.h **** }
  91:./include/linux/list.h **** 
  92:./include/linux/list.h **** /*
  93:./include/linux/list.h ****  * Performs the full set of list corruption checks before __list_del_entry().
  94:./include/linux/list.h ****  * On list corruption reports a warning, and returns false.
  95:./include/linux/list.h ****  */
  96:./include/linux/list.h **** extern bool __list_valid_slowpath __list_del_entry_valid_or_report(struct list_head *entry);
  97:./include/linux/list.h **** 
  98:./include/linux/list.h **** /*
  99:./include/linux/list.h ****  * Performs list corruption checks before __list_del_entry(). Returns false if a
 100:./include/linux/list.h ****  * corruption is detected, true otherwise.
 101:./include/linux/list.h ****  *
 102:./include/linux/list.h ****  * With CONFIG_LIST_HARDENED only, performs minimal list integrity checking
 103:./include/linux/list.h ****  * inline to catch non-faulting corruptions, and only if a corruption is
 104:./include/linux/list.h ****  * detected calls the reporting function __list_del_entry_valid_or_report().
 105:./include/linux/list.h ****  */
 106:./include/linux/list.h **** static __always_inline bool __list_del_entry_valid(struct list_head *entry)
 107:./include/linux/list.h **** {
 108:./include/linux/list.h **** 	bool ret = true;
 109:./include/linux/list.h **** 
 110:./include/linux/list.h **** 	if (!IS_ENABLED(CONFIG_DEBUG_LIST)) {
 111:./include/linux/list.h **** 		struct list_head *prev = entry->prev;
 112:./include/linux/list.h **** 		struct list_head *next = entry->next;
 113:./include/linux/list.h **** 
 114:./include/linux/list.h **** 		/*
 115:./include/linux/list.h **** 		 * With the hardening version, elide checking if next and prev
 116:./include/linux/list.h **** 		 * are NULL, LIST_POISON1 or LIST_POISON2, since the immediate
 117:./include/linux/list.h **** 		 * dereference of them below would result in a fault.
 118:./include/linux/list.h **** 		 */
 119:./include/linux/list.h **** 		if (likely(prev->next == entry && next->prev == entry))
 120:./include/linux/list.h **** 			return true;
 121:./include/linux/list.h **** 		ret = false;
 122:./include/linux/list.h **** 	}
 123:./include/linux/list.h **** 
 124:./include/linux/list.h **** 	ret &= __list_del_entry_valid_or_report(entry);
 125:./include/linux/list.h **** 	return ret;
 126:./include/linux/list.h **** }
 127:./include/linux/list.h **** #else
 128:./include/linux/list.h **** static inline bool __list_add_valid(struct list_head *new,
 129:./include/linux/list.h **** 				struct list_head *prev,
 130:./include/linux/list.h **** 				struct list_head *next)
 131:./include/linux/list.h **** {
 132:./include/linux/list.h **** 	return true;
 133:./include/linux/list.h **** }
 134:./include/linux/list.h **** static inline bool __list_del_entry_valid(struct list_head *entry)
 135:./include/linux/list.h **** {
 136:./include/linux/list.h **** 	return true;
 137:./include/linux/list.h **** }
 138:./include/linux/list.h **** #endif
 139:./include/linux/list.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 46


 140:./include/linux/list.h **** /*
 141:./include/linux/list.h ****  * Insert a new entry between two known consecutive entries.
 142:./include/linux/list.h ****  *
 143:./include/linux/list.h ****  * This is only for internal list manipulation where we know
 144:./include/linux/list.h ****  * the prev/next entries already!
 145:./include/linux/list.h ****  */
 146:./include/linux/list.h **** static inline void __list_add(struct list_head *new,
 147:./include/linux/list.h **** 			      struct list_head *prev,
 148:./include/linux/list.h **** 			      struct list_head *next)
 149:./include/linux/list.h **** {
 150:./include/linux/list.h **** 	if (!__list_add_valid(new, prev, next))
 151:./include/linux/list.h **** 		return;
 152:./include/linux/list.h **** 
 153:./include/linux/list.h **** 	next->prev = new;
 154:./include/linux/list.h **** 	new->next = next;
 155:./include/linux/list.h **** 	new->prev = prev;
 156:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 157:./include/linux/list.h **** }
 158:./include/linux/list.h **** 
 159:./include/linux/list.h **** /**
 160:./include/linux/list.h ****  * list_add - add a new entry
 161:./include/linux/list.h ****  * @new: new entry to be added
 162:./include/linux/list.h ****  * @head: list head to add it after
 163:./include/linux/list.h ****  *
 164:./include/linux/list.h ****  * Insert a new entry after the specified head.
 165:./include/linux/list.h ****  * This is good for implementing stacks.
 166:./include/linux/list.h ****  */
 167:./include/linux/list.h **** static inline void list_add(struct list_head *new, struct list_head *head)
 731              		.loc 7 167 20 view .LVU210
 732              	.LBB244:
 168:./include/linux/list.h **** {
 169:./include/linux/list.h **** 	__list_add(new, head, head->next);
 733              		.loc 7 169 2 view .LVU211
 734 0050 AB69     		ldr	r3, [r5, #24]
 735              	.LVL59:
 736              	.LBB245:
 737              	.LBI245:
 146:./include/linux/list.h **** 			      struct list_head *prev,
 738              		.loc 7 146 20 view .LVU212
 739              	.LBB246:
 150:./include/linux/list.h **** 		return;
 740              		.loc 7 150 2 view .LVU213
 153:./include/linux/list.h **** 	new->next = next;
 741              		.loc 7 153 2 view .LVU214
 153:./include/linux/list.h **** 	new->next = next;
 742              		.loc 7 153 13 is_stmt 0 view .LVU215
 743 0052 5E60     		str	r6, [r3, #4]
 154:./include/linux/list.h **** 	new->prev = prev;
 744              		.loc 7 154 2 is_stmt 1 view .LVU216
 154:./include/linux/list.h **** 	new->prev = prev;
 745              		.loc 7 154 12 is_stmt 0 view .LVU217
 746 0054 6361     		str	r3, [r4, #20]
 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 747              		.loc 7 155 2 is_stmt 1 view .LVU218
 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 748              		.loc 7 155 12 is_stmt 0 view .LVU219
 749 0056 A261     		str	r2, [r4, #24]
ARM GAS  /tmp/ccZnep12.s 			page 47


 156:./include/linux/list.h **** }
 750              		.loc 7 156 2 is_stmt 1 view .LVU220
 156:./include/linux/list.h **** }
 751              		.loc 7 156 2 view .LVU221
 752              	.LBB247:
 156:./include/linux/list.h **** }
 753              		.loc 7 156 2 view .LVU222
 156:./include/linux/list.h **** }
 754              		.loc 7 156 2 view .LVU223
 755              	.LBE247:
 156:./include/linux/list.h **** }
 756              		.loc 7 156 2 discriminator 2 view .LVU224
 156:./include/linux/list.h **** }
 757              		.loc 7 156 2 discriminator 2 view .LVU225
 156:./include/linux/list.h **** }
 758              		.loc 7 156 2 discriminator 2 view .LVU226
 759 0058 AE61     		str	r6, [r5, #24]
 156:./include/linux/list.h **** }
 760              		.loc 7 156 2 discriminator 3 view .LVU227
 156:./include/linux/list.h **** }
 761              		.loc 7 156 2 discriminator 3 view .LVU228
 762              	.LVL60:
 156:./include/linux/list.h **** }
 763              		.loc 7 156 2 is_stmt 0 discriminator 3 view .LVU229
 764              	.LBE246:
 765              	.LBE245:
 766              	.LBE244:
 767              	.LBE243:
 133:./fs/pipefs/pipefs.c ****     
 768              		.loc 1 133 5 is_stmt 1 view .LVU230
 769 005a 3846     		mov	r0, r7
 770 005c FFF7FEFF 		bl	spin_unlock
 771              	.LVL61:
 135:./fs/pipefs/pipefs.c **** }
 772              		.loc 1 135 5 view .LVU231
 773              	.L42:
 136:./fs/pipefs/pipefs.c **** static void pipefs_inode_put(struct pipefs_inode *node){
 774              		.loc 1 136 1 is_stmt 0 view .LVU232
 775 0060 2046     		mov	r0, r4
 776 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 777              	.LVL62:
 778              	.L44:
 116:./fs/pipefs/pipefs.c ****     struct pipefs_inode *pipe_inode = kmalloc(sizeof(struct pipefs_inode),GFP_KERNEL);
 779              		.loc 1 116 28 discriminator 1 view .LVU233
 780 0064 0C46     		mov	r4, r1
 781 0066 FBE7     		b	.L42
 782              	.L47:
 783              		.align	2
 784              	.L46:
 785 0068 4E61BC00 		.word	12345678
 786              		.cfi_endproc
 787              	.LFE1043:
 789              		.section	.text.pipefs_get_inode,"ax",%progbits
 790              		.align	1
 791              		.syntax unified
 792              		.thumb
 793              		.thumb_func
ARM GAS  /tmp/ccZnep12.s 			page 48


 795              	pipefs_get_inode:
 796              	.LVL63:
 797              	.LFB1057:
 384:./fs/pipefs/pipefs.c ****     if(pipe_node == NULL) return NULL;
 798              		.loc 1 384 1 is_stmt 1 view -0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 0
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 384:./fs/pipefs/pipefs.c ****     if(pipe_node == NULL) return NULL;
 802              		.loc 1 384 1 is_stmt 0 view .LVU235
 803 0000 10B5     		push	{r4, lr}
 804              	.LCFI9:
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 4, -8
 807              		.cfi_offset 14, -4
 385:./fs/pipefs/pipefs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 808              		.loc 1 385 5 is_stmt 1 view .LVU236
 385:./fs/pipefs/pipefs.c ****     struct inode*inode  =  new_inode(sb); //Ê≠§Â§ÑÂä®ÊÄÅÂàõÂª∫‰∫Ü‰∏Ä‰∏™inode,ÈúÄË¶ÅÂêéÁª≠ÈáäÊîæ
 809              		.loc 1 385 7 is_stmt 0 view .LVU237
 810 0002 0446     		mov	r4, r0
 811 0004 50B1     		cbz	r0, .L48
 386:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 812              		.loc 1 386 5 is_stmt 1 view .LVU238
 386:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 813              		.loc 1 386 28 is_stmt 0 view .LVU239
 814 0006 0846     		mov	r0, r1
 815              	.LVL64:
 386:./fs/pipefs/pipefs.c ****     if(inode == NULL) return NULL;  
 816              		.loc 1 386 28 view .LVU240
 817 0008 FFF7FEFF 		bl	new_inode
 818              	.LVL65:
 387:./fs/pipefs/pipefs.c ****     inode->i_mode    = pipe_node->i_mode;
 819              		.loc 1 387 5 is_stmt 1 view .LVU241
 387:./fs/pipefs/pipefs.c ****     inode->i_mode    = pipe_node->i_mode;
 820              		.loc 1 387 7 is_stmt 0 view .LVU242
 821 000c 30B1     		cbz	r0, .L48
 388:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 822              		.loc 1 388 5 is_stmt 1 view .LVU243
 388:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 823              		.loc 1 388 33 is_stmt 0 view .LVU244
 824 000e 6368     		ldr	r3, [r4, #4]
 388:./fs/pipefs/pipefs.c ****     inode->i_fop     = pipe_node->i_fop;
 825              		.loc 1 388 22 view .LVU245
 826 0010 0380     		strh	r3, [r0]	@ movhi
 389:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 827              		.loc 1 389 5 is_stmt 1 view .LVU246
 389:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 828              		.loc 1 389 33 is_stmt 0 view .LVU247
 829 0012 2369     		ldr	r3, [r4, #16]
 389:./fs/pipefs/pipefs.c ****     inode->i_op      = &pipefs_inode_operation;
 830              		.loc 1 389 22 view .LVU248
 831 0014 0365     		str	r3, [r0, #80]
 390:./fs/pipefs/pipefs.c ****     inode->i_private = pipe_node;
 832              		.loc 1 390 5 is_stmt 1 view .LVU249
 390:./fs/pipefs/pipefs.c ****     inode->i_private = pipe_node;
 833              		.loc 1 390 22 is_stmt 0 view .LVU250
 834 0016 024B     		ldr	r3, .L52
ARM GAS  /tmp/ccZnep12.s 			page 49


 835 0018 8360     		str	r3, [r0, #8]
 391:./fs/pipefs/pipefs.c ****     return inode;
 836              		.loc 1 391 5 is_stmt 1 view .LVU251
 391:./fs/pipefs/pipefs.c ****     return inode;
 837              		.loc 1 391 22 is_stmt 0 view .LVU252
 838 001a 8465     		str	r4, [r0, #88]
 392:./fs/pipefs/pipefs.c **** }
 839              		.loc 1 392 5 is_stmt 1 view .LVU253
 840              	.LVL66:
 841              	.L48:
 393:./fs/pipefs/pipefs.c **** 
 842              		.loc 1 393 1 is_stmt 0 view .LVU254
 843 001c 10BD     		pop	{r4, pc}
 844              	.LVL67:
 845              	.L53:
 393:./fs/pipefs/pipefs.c **** 
 846              		.loc 1 393 1 view .LVU255
 847 001e 00BF     		.align	2
 848              	.L52:
 849 0020 00000000 		.word	pipefs_inode_operation
 850              		.cfi_endproc
 851              	.LFE1057:
 853              		.section	.text.pipefs_getattr,"ax",%progbits
 854              		.align	1
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 859              	pipefs_getattr:
 860              	.LVL68:
 861              	.LFB1070:
 573:./fs/pipefs/pipefs.c ****     struct dentry *d = path->dentry;
 862              		.loc 1 573 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 4, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 573:./fs/pipefs/pipefs.c ****     struct dentry *d = path->dentry;
 866              		.loc 1 573 1 is_stmt 0 view .LVU257
 867 0000 38B5     		push	{r3, r4, r5, lr}
 868              	.LCFI10:
 869              		.cfi_def_cfa_offset 16
 870              		.cfi_offset 3, -16
 871              		.cfi_offset 4, -12
 872              		.cfi_offset 5, -8
 873              		.cfi_offset 14, -4
 574:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = d->d_fsdata;
 874              		.loc 1 574 5 is_stmt 1 view .LVU258
 574:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = d->d_fsdata;
 875              		.loc 1 574 20 is_stmt 0 view .LVU259
 876 0002 4B68     		ldr	r3, [r1, #4]
 877              	.LVL69:
 575:./fs/pipefs/pipefs.c ****     struct pipefs_inode *inode;
 878              		.loc 1 575 5 is_stmt 1 view .LVU260
 575:./fs/pipefs/pipefs.c ****     struct pipefs_inode *inode;
 879              		.loc 1 575 27 is_stmt 0 view .LVU261
 880 0004 5B6D     		ldr	r3, [r3, #84]
 881              	.LVL70:
 576:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZnep12.s 			page 50


 882              		.loc 1 576 5 is_stmt 1 view .LVU262
 578:./fs/pipefs/pipefs.c ****     return -ENOENT;
 883              		.loc 1 578 5 view .LVU263
 578:./fs/pipefs/pipefs.c ****     return -ENOENT;
 884              		.loc 1 578 8 is_stmt 0 view .LVU264
 885 0006 002B     		cmp	r3, #0
 886 0008 31D0     		beq	.L56
 887 000a 1446     		mov	r4, r2
 578:./fs/pipefs/pipefs.c ****     return -ENOENT;
 888              		.loc 1 578 26 discriminator 1 view .LVU265
 889 000c 9B68     		ldr	r3, [r3, #8]
 890              	.LVL71:
 578:./fs/pipefs/pipefs.c ****     return -ENOENT;
 891              		.loc 1 578 15 discriminator 1 view .LVU266
 892 000e 8BB3     		cbz	r3, .L57
 580:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 893              		.loc 1 580 5 is_stmt 1 view .LVU267
 580:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 894              		.loc 1 580 23 is_stmt 0 view .LVU268
 895 0010 5A68     		ldr	r2, [r3, #4]
 896              	.LVL72:
 580:./fs/pipefs/pipefs.c ****     stat->dev  = MKDEV(inode->major, 0);
 897              		.loc 1 580 16 view .LVU269
 898 0012 A280     		strh	r2, [r4, #4]	@ movhi
 899              	.LVL73:
 581:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 900              		.loc 1 581 5 is_stmt 1 view .LVU270
 581:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 901              		.loc 1 581 18 is_stmt 0 view .LVU271
 902 0014 9A68     		ldr	r2, [r3, #8]
 903 0016 1205     		lsls	r2, r2, #20
 581:./fs/pipefs/pipefs.c ****     stat->ino  = (unsigned long)inode;  
 904              		.loc 1 581 16 view .LVU272
 905 0018 E261     		str	r2, [r4, #28]
 582:./fs/pipefs/pipefs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 906              		.loc 1 582 5 is_stmt 1 view .LVU273
 582:./fs/pipefs/pipefs.c ****     stat->nlink = atomic_read(&inode->dentry_count);
 907              		.loc 1 582 16 is_stmt 0 view .LVU274
 908 001a A361     		str	r3, [r4, #24]
 583:./fs/pipefs/pipefs.c ****     stat->size  = 0; 
 909              		.loc 1 583 5 is_stmt 1 view .LVU275
 910              	.LVL74:
 911              	.LBB248:
 912              	.LBI248:
  30:./include/linux/atomic/atomic-instrumented.h **** {
 913              		.loc 5 30 1 view .LVU276
  32:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_read(v);
 914              		.loc 5 32 2 view .LVU277
  33:./include/linux/atomic/atomic-instrumented.h **** }
 915              		.loc 5 33 2 view .LVU278
 916              	.LBB249:
 917              	.LBI249:
 461:./include/linux/atomic/atomic-arch-fallback.h **** {
 918              		.loc 6 461 1 view .LVU279
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 919              		.loc 6 463 2 view .LVU280
 920              	.LBB250:
ARM GAS  /tmp/ccZnep12.s 			page 51


 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 921              		.loc 6 463 9 view .LVU281
 922              	.LBB251:
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 923              		.loc 6 463 9 view .LVU282
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 924              		.loc 6 463 9 view .LVU283
 925              	.LBE251:
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 926              		.loc 6 463 9 discriminator 2 view .LVU284
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 927              		.loc 6 463 9 discriminator 2 view .LVU285
 928 001c DB68     		ldr	r3, [r3, #12]
 929              	.LVL75:
 463:./include/linux/atomic/atomic-arch-fallback.h **** }
 930              		.loc 6 463 9 is_stmt 0 discriminator 2 view .LVU286
 931              	.LBE250:
 932              	.LBE249:
 933              	.LBE248:
 583:./fs/pipefs/pipefs.c ****     stat->size  = 0; 
 934              		.loc 1 583 17 discriminator 1 view .LVU287
 935 001e A360     		str	r3, [r4, #8]
 584:./fs/pipefs/pipefs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 936              		.loc 1 584 5 is_stmt 1 view .LVU288
 584:./fs/pipefs/pipefs.c ****     stat->atime.tv_nsec = jiffies/HZ;
 937              		.loc 1 584 17 is_stmt 0 view .LVU289
 938 0020 0022     		movs	r2, #0
 939 0022 0023     		movs	r3, #0
 940 0024 C4E90C23 		strd	r2, [r4, #48]
 585:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 941              		.loc 1 585 5 is_stmt 1 view .LVU290
 585:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 942              		.loc 1 585 27 is_stmt 0 view .LVU291
 943 0028 FFF7FEFF 		bl	ktime_get
 944              	.LVL76:
 585:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 945              		.loc 1 585 34 discriminator 1 view .LVU292
 946 002c 134D     		ldr	r5, .L59
 947 002e 2B68     		ldr	r3, [r5]
 948 0030 B0FBF3F0 		udiv	r0, r0, r3
 585:./fs/pipefs/pipefs.c ****     stat->atime.tv_sec  = jiffies%HZ;
 949              		.loc 1 585 25 discriminator 1 view .LVU293
 950 0034 E063     		str	r0, [r4, #60]
 586:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 951              		.loc 1 586 5 is_stmt 1 view .LVU294
 586:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 952              		.loc 1 586 27 is_stmt 0 view .LVU295
 953 0036 FFF7FEFF 		bl	ktime_get
 954              	.LVL77:
 586:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 955              		.loc 1 586 34 discriminator 1 view .LVU296
 956 003a 2B68     		ldr	r3, [r5]
 957 003c B0FBF3F2 		udiv	r2, r0, r3
 958 0040 03FB1200 		mls	r0, r3, r2, r0
 586:./fs/pipefs/pipefs.c ****     stat->mtime = stat->atime;
 959              		.loc 1 586 25 discriminator 1 view .LVU297
 960 0044 A063     		str	r0, [r4, #56]
ARM GAS  /tmp/ccZnep12.s 			page 52


 587:./fs/pipefs/pipefs.c ****     stat->ctime = stat->atime;
 961              		.loc 1 587 5 is_stmt 1 view .LVU298
 587:./fs/pipefs/pipefs.c ****     stat->ctime = stat->atime;
 962              		.loc 1 587 17 is_stmt 0 view .LVU299
 963 0046 04F14002 		add	r2, r4, #64
 964 004a 04F13803 		add	r3, r4, #56
 965 004e 93E80300 		ldm	r3, {r0, r1}
 966 0052 82E80300 		stm	r2, {r0, r1}
 588:./fs/pipefs/pipefs.c ****     stat->blksize = PAGE_SIZE;
 967              		.loc 1 588 5 is_stmt 1 view .LVU300
 588:./fs/pipefs/pipefs.c ****     stat->blksize = PAGE_SIZE;
 968              		.loc 1 588 17 is_stmt 0 view .LVU301
 969 0056 04F14802 		add	r2, r4, #72
 970 005a 93E80300 		ldm	r3, {r0, r1}
 971 005e 82E80300 		stm	r2, {r0, r1}
 589:./fs/pipefs/pipefs.c ****     stat->blocks  = 0;
 972              		.loc 1 589 5 is_stmt 1 view .LVU302
 589:./fs/pipefs/pipefs.c ****     stat->blocks  = 0;
 973              		.loc 1 589 19 is_stmt 0 view .LVU303
 974 0062 4FF48053 		mov	r3, #4096
 975 0066 E360     		str	r3, [r4, #12]
 590:./fs/pipefs/pipefs.c ****     return 0;
 976              		.loc 1 590 5 is_stmt 1 view .LVU304
 590:./fs/pipefs/pipefs.c ****     return 0;
 977              		.loc 1 590 19 is_stmt 0 view .LVU305
 978 0068 0020     		movs	r0, #0
 979 006a A065     		str	r0, [r4, #88]
 591:./fs/pipefs/pipefs.c **** }
 980              		.loc 1 591 5 is_stmt 1 view .LVU306
 981              	.LVL78:
 982              	.L54:
 592:./fs/pipefs/pipefs.c **** 
 983              		.loc 1 592 1 is_stmt 0 view .LVU307
 984 006c 38BD     		pop	{r3, r4, r5, pc}
 985              	.LVL79:
 986              	.L56:
 579:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 987              		.loc 1 579 12 view .LVU308
 988 006e 6FF00100 		mvn	r0, #1
 989              	.LVL80:
 579:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 990              		.loc 1 579 12 view .LVU309
 991 0072 FBE7     		b	.L54
 992              	.LVL81:
 993              	.L57:
 579:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 994              		.loc 1 579 12 view .LVU310
 995 0074 6FF00100 		mvn	r0, #1
 996              	.LVL82:
 579:./fs/pipefs/pipefs.c ****     stat->mode = inode->i_mode;
 997              		.loc 1 579 12 view .LVU311
 998 0078 F8E7     		b	.L54
 999              	.L60:
 1000 007a 00BF     		.align	2
 1001              	.L59:
 1002 007c 00000000 		.word	HZ
 1003              		.cfi_endproc
ARM GAS  /tmp/ccZnep12.s 			page 53


 1004              	.LFE1070:
 1006              		.section	.text.pipefs_lookup,"ax",%progbits
 1007              		.align	1
 1008              		.syntax unified
 1009              		.thumb
 1010              		.thumb_func
 1012              	pipefs_lookup:
 1013              	.LVL83:
 1014              	.LFB1053:
 256:./fs/pipefs/pipefs.c ****     if(dentry_inode == NULL) return NULL;
 1015              		.loc 1 256 1 is_stmt 1 view -0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 0
 1018              		@ frame_needed = 0, uses_anonymous_args = 0
 256:./fs/pipefs/pipefs.c ****     if(dentry_inode == NULL) return NULL;
 1019              		.loc 1 256 1 is_stmt 0 view .LVU313
 1020 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1021              	.LCFI11:
 1022              		.cfi_def_cfa_offset 24
 1023              		.cfi_offset 3, -24
 1024              		.cfi_offset 4, -20
 1025              		.cfi_offset 5, -16
 1026              		.cfi_offset 6, -12
 1027              		.cfi_offset 7, -8
 1028              		.cfi_offset 14, -4
 257:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1029              		.loc 1 257 5 is_stmt 1 view .LVU314
 257:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1030              		.loc 1 257 7 is_stmt 0 view .LVU315
 1031 0002 0546     		mov	r5, r0
 1032 0004 20B3     		cbz	r0, .L66
 1033 0006 0E46     		mov	r6, r1
 258:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1034              		.loc 1 258 5 is_stmt 1 view .LVU316
 258:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1035              		.loc 1 258 23 is_stmt 0 view .LVU317
 1036 0008 4368     		ldr	r3, [r0, #4]
 258:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1037              		.loc 1 258 32 view .LVU318
 1038 000a 03F47043 		and	r3, r3, #61440
 258:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1039              		.loc 1 258 8 view .LVU319
 1040 000e B3F5804F 		cmp	r3, #16384
 1041 0012 1FD1     		bne	.L67
 259:./fs/pipefs/pipefs.c ****     spin_lock(&dentry_inode->lock);
 1042              		.loc 1 259 5 is_stmt 1 view .LVU320
 260:./fs/pipefs/pipefs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 1043              		.loc 1 260 5 view .LVU321
 1044 0014 00F12407 		add	r7, r0, #36
 1045 0018 3846     		mov	r0, r7
 1046              	.LVL84:
 260:./fs/pipefs/pipefs.c ****     list_for_each_entry(pos, &dentry_inode->dentry_list_head,list_node ) {
 1047              		.loc 1 260 5 is_stmt 0 view .LVU322
 1048 001a FFF7FEFF 		bl	spin_lock
 1049              	.LVL85:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1050              		.loc 1 261 5 is_stmt 1 view .LVU323
ARM GAS  /tmp/ccZnep12.s 			page 54


 1051              	.LBB252:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1052              		.loc 1 261 5 view .LVU324
 1053 001e EC69     		ldr	r4, [r5, #28]
 1054              	.LVL86:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1055              		.loc 1 261 5 view .LVU325
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1056              		.loc 1 261 5 view .LVU326
 1057 0020 0C3C     		subs	r4, r4, #12
 1058              	.LVL87:
 1059              	.L63:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1060              		.loc 1 261 5 is_stmt 0 view .LVU327
 1061              	.LBE252:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1062              		.loc 1 261 5 is_stmt 1 discriminator 1 view .LVU328
 1063 0022 04F10C03 		add	r3, r4, #12
 1064 0026 05F11C02 		add	r2, r5, #28
 1065 002a 9342     		cmp	r3, r2
 1066 002c 0BD0     		beq	.L69
 262:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 1067              		.loc 1 262 9 view .LVU329
 262:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 1068              		.loc 1 262 13 is_stmt 0 view .LVU330
 1069 002e 3146     		mov	r1, r6
 1070 0030 6068     		ldr	r0, [r4, #4]
 1071 0032 FFF7FEFF 		bl	strcmp
 1072              	.LVL88:
 262:./fs/pipefs/pipefs.c ****             spin_unlock(&dentry_inode->lock);
 1073              		.loc 1 262 12 discriminator 1 view .LVU331
 1074 0036 10B1     		cbz	r0, .L70
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1075              		.loc 1 261 5 is_stmt 1 discriminator 2 view .LVU332
 1076              	.LBB253:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1077              		.loc 1 261 5 discriminator 2 view .LVU333
 1078 0038 E468     		ldr	r4, [r4, #12]
 1079              	.LVL89:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1080              		.loc 1 261 5 discriminator 2 view .LVU334
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1081              		.loc 1 261 5 discriminator 2 view .LVU335
 1082 003a 0C3C     		subs	r4, r4, #12
 1083              	.LVL90:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1084              		.loc 1 261 5 is_stmt 0 discriminator 2 view .LVU336
 1085 003c F1E7     		b	.L63
 1086              	.LVL91:
 1087              	.L70:
 261:./fs/pipefs/pipefs.c ****         if (strcmp(pos->name, name) == 0) {
 1088              		.loc 1 261 5 discriminator 2 view .LVU337
 1089              	.LBE253:
 263:./fs/pipefs/pipefs.c ****             return pos;
 1090              		.loc 1 263 13 is_stmt 1 view .LVU338
 1091 003e 3846     		mov	r0, r7
 1092 0040 FFF7FEFF 		bl	spin_unlock
ARM GAS  /tmp/ccZnep12.s 			page 55


 1093              	.LVL92:
 264:./fs/pipefs/pipefs.c ****         }
 1094              		.loc 1 264 13 view .LVU339
 264:./fs/pipefs/pipefs.c ****         }
 1095              		.loc 1 264 20 is_stmt 0 view .LVU340
 1096 0044 07E0     		b	.L61
 1097              	.L69:
 267:./fs/pipefs/pipefs.c ****     return NULL;
 1098              		.loc 1 267 5 is_stmt 1 view .LVU341
 1099 0046 3846     		mov	r0, r7
 1100 0048 FFF7FEFF 		bl	spin_unlock
 1101              	.LVL93:
 268:./fs/pipefs/pipefs.c **** }
 1102              		.loc 1 268 5 view .LVU342
 268:./fs/pipefs/pipefs.c **** }
 1103              		.loc 1 268 12 is_stmt 0 view .LVU343
 1104 004c 0024     		movs	r4, #0
 1105              	.LVL94:
 268:./fs/pipefs/pipefs.c **** }
 1106              		.loc 1 268 12 view .LVU344
 1107 004e 02E0     		b	.L61
 1108              	.LVL95:
 1109              	.L66:
 257:./fs/pipefs/pipefs.c ****     if ( (dentry_inode->i_mode & S_IFMT) != S_IFDIR ) return NULL;
 1110              		.loc 1 257 37 discriminator 1 view .LVU345
 1111 0050 0446     		mov	r4, r0
 1112 0052 00E0     		b	.L61
 1113              	.L67:
 258:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* pos;
 1114              		.loc 1 258 62 discriminator 1 view .LVU346
 1115 0054 0024     		movs	r4, #0
 1116              	.LVL96:
 1117              	.L61:
 269:./fs/pipefs/pipefs.c **** 
 1118              		.loc 1 269 1 view .LVU347
 1119 0056 2046     		mov	r0, r4
 1120 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 269:./fs/pipefs/pipefs.c **** 
 1121              		.loc 1 269 1 view .LVU348
 1122              		.cfi_endproc
 1123              	.LFE1053:
 1125              		.section	.text.pipefs_vfs_lookup,"ax",%progbits
 1126              		.align	1
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1131              	pipefs_vfs_lookup:
 1132              	.LVL97:
 1133              	.LFB1063:
 488:./fs/pipefs/pipefs.c ****     
 1134              		.loc 1 488 102 is_stmt 1 view -0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 488:./fs/pipefs/pipefs.c ****     
 1138              		.loc 1 488 102 is_stmt 0 view .LVU350
 1139 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccZnep12.s 			page 56


 1140              	.LCFI12:
 1141              		.cfi_def_cfa_offset 16
 1142              		.cfi_offset 4, -16
 1143              		.cfi_offset 5, -12
 1144              		.cfi_offset 6, -8
 1145              		.cfi_offset 14, -4
 1146 0002 0646     		mov	r6, r0
 1147 0004 0D46     		mov	r5, r1
 490:./fs/pipefs/pipefs.c ****     char *name = dentry->d_name.name;                           
 1148              		.loc 1 490 5 is_stmt 1 view .LVU351
 1149              	.LVL98:
 491:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *pos;    
 1150              		.loc 1 491 5 view .LVU352
 492:./fs/pipefs/pipefs.c ****     pos = pipefs_lookup(dir_inode,name);       //Êü•ËØ¢Ëé∑Âæódentry
 1151              		.loc 1 492 5 view .LVU353
 493:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1152              		.loc 1 493 5 view .LVU354
 493:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1153              		.loc 1 493 11 is_stmt 0 view .LVU355
 1154 0006 8969     		ldr	r1, [r1, #24]
 1155              	.LVL99:
 493:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1156              		.loc 1 493 11 view .LVU356
 1157 0008 806D     		ldr	r0, [r0, #88]
 1158              	.LVL100:
 493:./fs/pipefs/pipefs.c ****     if(pos == NULL) return NULL;
 1159              		.loc 1 493 11 view .LVU357
 1160 000a FFF7FEFF 		bl	pipefs_lookup
 1161              	.LVL101:
 494:./fs/pipefs/pipefs.c **** 
 1162              		.loc 1 494 5 is_stmt 1 view .LVU358
 494:./fs/pipefs/pipefs.c **** 
 1163              		.loc 1 494 7 is_stmt 0 view .LVU359
 1164 000e 0446     		mov	r4, r0
 1165 0010 78B1     		cbz	r0, .L71
 496:./fs/pipefs/pipefs.c ****         return NULL;
 1166              		.loc 1 496 5 is_stmt 1 view .LVU360
 496:./fs/pipefs/pipefs.c ****         return NULL;
 1167              		.loc 1 496 9 is_stmt 0 view .LVU361
 1168 0012 0146     		mov	r1, r0
 1169 0014 2846     		mov	r0, r5
 1170              	.LVL102:
 496:./fs/pipefs/pipefs.c ****         return NULL;
 1171              		.loc 1 496 9 view .LVU362
 1172 0016 FFF7FEFF 		bl	pipefs_get_dentry
 1173              	.LVL103:
 496:./fs/pipefs/pipefs.c ****         return NULL;
 1174              		.loc 1 496 7 discriminator 1 view .LVU363
 1175 001a 60B1     		cbz	r0, .L73
 499:./fs/pipefs/pipefs.c ****     if(find_inode == NULL)
 1176              		.loc 1 499 5 is_stmt 1 view .LVU364
 499:./fs/pipefs/pipefs.c ****     if(find_inode == NULL)
 1177              		.loc 1 499 33 is_stmt 0 view .LVU365
 1178 001c F168     		ldr	r1, [r6, #12]
 1179 001e A068     		ldr	r0, [r4, #8]
 1180 0020 FFF7FEFF 		bl	pipefs_get_inode
 1181              	.LVL104:
ARM GAS  /tmp/ccZnep12.s 			page 57


 500:./fs/pipefs/pipefs.c ****         return NULL;
 1182              		.loc 1 500 5 is_stmt 1 view .LVU366
 500:./fs/pipefs/pipefs.c ****         return NULL;
 1183              		.loc 1 500 7 is_stmt 0 view .LVU367
 1184 0024 0446     		mov	r4, r0
 1185              	.LVL105:
 500:./fs/pipefs/pipefs.c ****         return NULL;
 1186              		.loc 1 500 7 view .LVU368
 1187 0026 20B1     		cbz	r0, .L71
 503:./fs/pipefs/pipefs.c ****     return NULL;
 1188              		.loc 1 503 5 is_stmt 1 view .LVU369
 503:./fs/pipefs/pipefs.c ****     return NULL;
 1189              		.loc 1 503 12 is_stmt 0 view .LVU370
 1190 0028 0146     		mov	r1, r0
 1191 002a 2846     		mov	r0, r5
 1192              	.LVL106:
 503:./fs/pipefs/pipefs.c ****     return NULL;
 1193              		.loc 1 503 12 view .LVU371
 1194 002c FFF7FEFF 		bl	d_add
 1195              	.LVL107:
 503:./fs/pipefs/pipefs.c ****     return NULL;
 1196              		.loc 1 503 12 view .LVU372
 1197 0030 0446     		mov	r4, r0
 1198              	.LVL108:
 1199              	.L71:
 505:./fs/pipefs/pipefs.c **** 
 1200              		.loc 1 505 1 view .LVU373
 1201 0032 2046     		mov	r0, r4
 1202 0034 70BD     		pop	{r4, r5, r6, pc}
 1203              	.LVL109:
 1204              	.L73:
 497:./fs/pipefs/pipefs.c **** 
 1205              		.loc 1 497 16 view .LVU374
 1206 0036 0446     		mov	r4, r0
 1207              	.LVL110:
 497:./fs/pipefs/pipefs.c **** 
 1208              		.loc 1 497 16 view .LVU375
 1209 0038 FBE7     		b	.L71
 1210              		.cfi_endproc
 1211              	.LFE1063:
 1213              		.section	.text.pipefs_get_vfs_superblock,"ax",%progbits
 1214              		.align	1
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1219              	pipefs_get_vfs_superblock:
 1220              	.LVL111:
 1221              	.LFB1055:
 368:./fs/pipefs/pipefs.c ****     if(sb == NULL) return NULL;
 1222              		.loc 1 368 1 is_stmt 1 view -0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 368:./fs/pipefs/pipefs.c ****     if(sb == NULL) return NULL;
 1226              		.loc 1 368 1 is_stmt 0 view .LVU377
 1227 0000 10B5     		push	{r4, lr}
 1228              	.LCFI13:
ARM GAS  /tmp/ccZnep12.s 			page 58


 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 4, -8
 1231              		.cfi_offset 14, -4
 369:./fs/pipefs/pipefs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 1232              		.loc 1 369 5 is_stmt 1 view .LVU378
 369:./fs/pipefs/pipefs.c ****     struct super_block * vsb  = alloc_super(NULL);                        //ÂàÜÈÖç‰∫Ü‰∏Ä‰∏™superblo
 1233              		.loc 1 369 7 is_stmt 0 view .LVU379
 1234 0002 0446     		mov	r4, r0
 1235 0004 40B1     		cbz	r0, .L75
 370:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 1236              		.loc 1 370 5 is_stmt 1 view .LVU380
 370:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 1237              		.loc 1 370 33 is_stmt 0 view .LVU381
 1238 0006 0020     		movs	r0, #0
 1239              	.LVL112:
 370:./fs/pipefs/pipefs.c ****     if(vsb == NULL) return NULL;
 1240              		.loc 1 370 33 view .LVU382
 1241 0008 FFF7FEFF 		bl	alloc_super
 1242              	.LVL113:
 371:./fs/pipefs/pipefs.c ****     vsb->s_fs_info =   sb;
 1243              		.loc 1 371 5 is_stmt 1 view .LVU383
 371:./fs/pipefs/pipefs.c ****     vsb->s_fs_info =   sb;
 1244              		.loc 1 371 7 is_stmt 0 view .LVU384
 1245 000c 20B1     		cbz	r0, .L75
 372:./fs/pipefs/pipefs.c ****     vsb->s_d_op    =  &pipefs_dentry_operation;
 1246              		.loc 1 372 5 is_stmt 1 view .LVU385
 372:./fs/pipefs/pipefs.c ****     vsb->s_d_op    =  &pipefs_dentry_operation;
 1247              		.loc 1 372 20 is_stmt 0 view .LVU386
 1248 000e C462     		str	r4, [r0, #44]
 373:./fs/pipefs/pipefs.c ****     vsb->s_op      =  &pipefs_super_operation;    
 1249              		.loc 1 373 5 is_stmt 1 view .LVU387
 373:./fs/pipefs/pipefs.c ****     vsb->s_op      =  &pipefs_super_operation;    
 1250              		.loc 1 373 20 is_stmt 0 view .LVU388
 1251 0010 024B     		ldr	r3, .L79
 1252 0012 C366     		str	r3, [r0, #108]
 374:./fs/pipefs/pipefs.c ****     return vsb;
 1253              		.loc 1 374 5 is_stmt 1 view .LVU389
 374:./fs/pipefs/pipefs.c ****     return vsb;
 1254              		.loc 1 374 20 is_stmt 0 view .LVU390
 1255 0014 024B     		ldr	r3, .L79+4
 1256 0016 C360     		str	r3, [r0, #12]
 375:./fs/pipefs/pipefs.c **** }
 1257              		.loc 1 375 5 is_stmt 1 view .LVU391
 1258              	.LVL114:
 1259              	.L75:
 376:./fs/pipefs/pipefs.c **** 
 1260              		.loc 1 376 1 is_stmt 0 view .LVU392
 1261 0018 10BD     		pop	{r4, pc}
 1262              	.LVL115:
 1263              	.L80:
 376:./fs/pipefs/pipefs.c **** 
 1264              		.loc 1 376 1 view .LVU393
 1265 001a 00BF     		.align	2
 1266              	.L79:
 1267 001c 00000000 		.word	pipefs_dentry_operation
 1268 0020 00000000 		.word	pipefs_super_operation
 1269              		.cfi_endproc
ARM GAS  /tmp/ccZnep12.s 			page 59


 1270              	.LFE1055:
 1272              		.section	.text.pipefs_superblock_create,"ax",%progbits
 1273              		.align	1
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1278              	pipefs_superblock_create:
 1279              	.LFB1051:
 225:./fs/pipefs/pipefs.c ****     struct pipefs_superblock*d_sb = kmalloc(sizeof(struct pipefs_superblock),GFP_KERNEL);
 1280              		.loc 1 225 1 is_stmt 1 view -0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 1284 0000 38B5     		push	{r3, r4, r5, lr}
 1285              	.LCFI14:
 1286              		.cfi_def_cfa_offset 16
 1287              		.cfi_offset 3, -16
 1288              		.cfi_offset 4, -12
 1289              		.cfi_offset 5, -8
 1290              		.cfi_offset 14, -4
 226:./fs/pipefs/pipefs.c ****     if(d_sb == NULL){
 1291              		.loc 1 226 5 view .LVU395
 1292              	.LVL116:
 1293              	.LBB254:
 1294              	.LBI254:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 1295              		.loc 4 379 21 view .LVU396
 1296              	.LBB255:
 1297              		.loc 4 380 2 view .LVU397
 1298              		.loc 4 380 9 is_stmt 0 view .LVU398
 1299 0002 4FF44C61 		mov	r1, #3264
 1300 0006 2020     		movs	r0, #32
 1301 0008 FFF7FEFF 		bl	__smalloc__
 1302              	.LVL117:
 1303              		.loc 4 380 9 view .LVU399
 1304              	.LBE255:
 1305              	.LBE254:
 227:./fs/pipefs/pipefs.c ****         return NULL;        
 1306              		.loc 1 227 5 is_stmt 1 view .LVU400
 227:./fs/pipefs/pipefs.c ****         return NULL;        
 1307              		.loc 1 227 7 is_stmt 0 view .LVU401
 1308 000c 0446     		mov	r4, r0
 1309 000e 20B3     		cbz	r0, .L81
 230:./fs/pipefs/pipefs.c ****     spin_lock_init(&d_sb->lock);
 1310              		.loc 1 230 5 is_stmt 1 view .LVU402
 230:./fs/pipefs/pipefs.c ****     spin_lock_init(&d_sb->lock);
 1311              		.loc 1 230 17 is_stmt 0 view .LVU403
 1312 0010 154B     		ldr	r3, .L86
 1313 0012 40F8043B 		str	r3, [r0], #4
 1314              	.LVL118:
 231:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&d_sb->inode_list_head);
 1315              		.loc 1 231 5 is_stmt 1 view .LVU404
 1316 0016 FFF7FEFF 		bl	spin_lock_init
 1317              	.LVL119:
 232:./fs/pipefs/pipefs.c ****     struct pipefs_inode* root_inode = pipefs_create_empty_inode(d_sb ,&pipefs_file_fops,0);
 1318              		.loc 1 232 5 view .LVU405
 1319 001a 04F11803 		add	r3, r4, #24
ARM GAS  /tmp/ccZnep12.s 			page 60


 1320              	.LVL120:
 1321              	.LBB256:
 1322              	.LBI256:
  35:./include/linux/list.h **** {
 1323              		.loc 7 35 20 view .LVU406
 1324              	.LBB257:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1325              		.loc 7 37 2 view .LVU407
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1326              		.loc 7 37 2 view .LVU408
 1327              	.LBB258:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1328              		.loc 7 37 2 view .LVU409
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1329              		.loc 7 37 2 view .LVU410
 1330              	.LBE258:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1331              		.loc 7 37 2 discriminator 2 view .LVU411
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1332              		.loc 7 37 2 discriminator 2 view .LVU412
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1333              		.loc 7 37 2 discriminator 2 view .LVU413
 1334 001e A361     		str	r3, [r4, #24]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1335              		.loc 7 37 2 discriminator 2 view .LVU414
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1336              		.loc 7 37 2 discriminator 2 view .LVU415
  38:./include/linux/list.h **** }
 1337              		.loc 7 38 2 view .LVU416
  38:./include/linux/list.h **** }
 1338              		.loc 7 38 2 view .LVU417
 1339              	.LBB259:
  38:./include/linux/list.h **** }
 1340              		.loc 7 38 2 view .LVU418
  38:./include/linux/list.h **** }
 1341              		.loc 7 38 2 view .LVU419
 1342              	.LBE259:
  38:./include/linux/list.h **** }
 1343              		.loc 7 38 2 discriminator 2 view .LVU420
  38:./include/linux/list.h **** }
 1344              		.loc 7 38 2 discriminator 2 view .LVU421
  38:./include/linux/list.h **** }
 1345              		.loc 7 38 2 discriminator 2 view .LVU422
 1346 0020 E361     		str	r3, [r4, #28]
  38:./include/linux/list.h **** }
 1347              		.loc 7 38 2 discriminator 2 view .LVU423
  38:./include/linux/list.h **** }
 1348              		.loc 7 38 2 discriminator 2 view .LVU424
 1349              	.LVL121:
  38:./include/linux/list.h **** }
 1350              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU425
 1351              	.LBE257:
 1352              	.LBE256:
 233:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 1353              		.loc 1 233 5 is_stmt 1 view .LVU426
 233:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 1354              		.loc 1 233 39 is_stmt 0 view .LVU427
ARM GAS  /tmp/ccZnep12.s 			page 61


 1355 0022 0022     		movs	r2, #0
 1356 0024 1149     		ldr	r1, .L86+4
 1357 0026 2046     		mov	r0, r4
 1358 0028 FFF7FEFF 		bl	pipefs_create_empty_inode
 1359              	.LVL122:
 234:./fs/pipefs/pipefs.c ****         kfree(d_sb);
 1360              		.loc 1 234 5 is_stmt 1 view .LVU428
 234:./fs/pipefs/pipefs.c ****         kfree(d_sb);
 1361              		.loc 1 234 7 is_stmt 0 view .LVU429
 1362 002c 0546     		mov	r5, r0
 1363 002e B0B1     		cbz	r0, .L85
 238:./fs/pipefs/pipefs.c ****     d_sb->rootinode = root_inode;
 1364              		.loc 1 238 5 is_stmt 1 view .LVU430
 238:./fs/pipefs/pipefs.c ****     d_sb->rootinode = root_inode;
 1365              		.loc 1 238 24 is_stmt 0 view .LVU431
 1366 0030 44F2ED13 		movw	r3, #16877
 1367 0034 4360     		str	r3, [r0, #4]
 239:./fs/pipefs/pipefs.c ****     root_inode->i_fop = &pipefs_file_fops;
 1368              		.loc 1 239 5 is_stmt 1 view .LVU432
 239:./fs/pipefs/pipefs.c ****     root_inode->i_fop = &pipefs_file_fops;
 1369              		.loc 1 239 21 is_stmt 0 view .LVU433
 1370 0036 6061     		str	r0, [r4, #20]
 240:./fs/pipefs/pipefs.c ****     atomic_inc (&root_inode->dentry_count); 
 1371              		.loc 1 240 5 is_stmt 1 view .LVU434
 240:./fs/pipefs/pipefs.c ****     atomic_inc (&root_inode->dentry_count); 
 1372              		.loc 1 240 23 is_stmt 0 view .LVU435
 1373 0038 0C4B     		ldr	r3, .L86+4
 1374 003a 0361     		str	r3, [r0, #16]
 241:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&root_inode->dentry_list_head);
 1375              		.loc 1 241 5 is_stmt 1 view .LVU436
 1376 003c 00F10C03 		add	r3, r0, #12
 1377              	.LVL123:
 1378              	.LBB260:
 1379              	.LBI260:
  69:./include/linux/atomic/atomic-instrumented.h **** }
  70:./include/linux/atomic/atomic-instrumented.h **** 
  71:./include/linux/atomic/atomic-instrumented.h **** /**
  72:./include/linux/atomic/atomic-instrumented.h ****  * atomic_set_release() - atomic set with release ordering
  73:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  74:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to assign
  75:./include/linux/atomic/atomic-instrumented.h ****  *
  76:./include/linux/atomic/atomic-instrumented.h ****  * Atomically sets @v to @i with release ordering.
  77:./include/linux/atomic/atomic-instrumented.h ****  *
  78:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_set_release() there.
  79:./include/linux/atomic/atomic-instrumented.h ****  *
  80:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
  81:./include/linux/atomic/atomic-instrumented.h ****  */
  82:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
  83:./include/linux/atomic/atomic-instrumented.h **** atomic_set_release(atomic_t *v, int i)
  84:./include/linux/atomic/atomic-instrumented.h **** {
  85:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
  86:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_write(v, sizeof(*v));
  87:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_set_release(v, i);
  88:./include/linux/atomic/atomic-instrumented.h **** }
  89:./include/linux/atomic/atomic-instrumented.h **** 
  90:./include/linux/atomic/atomic-instrumented.h **** /**
  91:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add() - atomic add with relaxed ordering
ARM GAS  /tmp/ccZnep12.s 			page 62


  92:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
  93:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
  94:./include/linux/atomic/atomic-instrumented.h ****  *
  95:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
  96:./include/linux/atomic/atomic-instrumented.h ****  *
  97:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add() there.
  98:./include/linux/atomic/atomic-instrumented.h ****  *
  99:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 100:./include/linux/atomic/atomic-instrumented.h ****  */
 101:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 102:./include/linux/atomic/atomic-instrumented.h **** atomic_add(int i, atomic_t *v)
 103:./include/linux/atomic/atomic-instrumented.h **** {
 104:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 105:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_add(i, v);
 106:./include/linux/atomic/atomic-instrumented.h **** }
 107:./include/linux/atomic/atomic-instrumented.h **** 
 108:./include/linux/atomic/atomic-instrumented.h **** /**
 109:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return() - atomic add with full ordering
 110:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 111:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 112:./include/linux/atomic/atomic-instrumented.h ****  *
 113:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 114:./include/linux/atomic/atomic-instrumented.h ****  *
 115:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return() there.
 116:./include/linux/atomic/atomic-instrumented.h ****  *
 117:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 118:./include/linux/atomic/atomic-instrumented.h ****  */
 119:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 120:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return(int i, atomic_t *v)
 121:./include/linux/atomic/atomic-instrumented.h **** {
 122:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 123:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 124:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return(i, v);
 125:./include/linux/atomic/atomic-instrumented.h **** }
 126:./include/linux/atomic/atomic-instrumented.h **** 
 127:./include/linux/atomic/atomic-instrumented.h **** /**
 128:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_acquire() - atomic add with acquire ordering
 129:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 130:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 131:./include/linux/atomic/atomic-instrumented.h ****  *
 132:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 133:./include/linux/atomic/atomic-instrumented.h ****  *
 134:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_acquire() there.
 135:./include/linux/atomic/atomic-instrumented.h ****  *
 136:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 137:./include/linux/atomic/atomic-instrumented.h ****  */
 138:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 139:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return_acquire(int i, atomic_t *v)
 140:./include/linux/atomic/atomic-instrumented.h **** {
 141:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 142:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_acquire(i, v);
 143:./include/linux/atomic/atomic-instrumented.h **** }
 144:./include/linux/atomic/atomic-instrumented.h **** 
 145:./include/linux/atomic/atomic-instrumented.h **** /**
 146:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_release() - atomic add with release ordering
 147:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 148:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZnep12.s 			page 63


 149:./include/linux/atomic/atomic-instrumented.h ****  *
 150:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 151:./include/linux/atomic/atomic-instrumented.h ****  *
 152:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_release() there.
 153:./include/linux/atomic/atomic-instrumented.h ****  *
 154:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 155:./include/linux/atomic/atomic-instrumented.h ****  */
 156:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 157:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return_release(int i, atomic_t *v)
 158:./include/linux/atomic/atomic-instrumented.h **** {
 159:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 160:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 161:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_release(i, v);
 162:./include/linux/atomic/atomic-instrumented.h **** }
 163:./include/linux/atomic/atomic-instrumented.h **** 
 164:./include/linux/atomic/atomic-instrumented.h **** /**
 165:./include/linux/atomic/atomic-instrumented.h ****  * atomic_add_return_relaxed() - atomic add with relaxed ordering
 166:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 167:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 168:./include/linux/atomic/atomic-instrumented.h ****  *
 169:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 170:./include/linux/atomic/atomic-instrumented.h ****  *
 171:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_add_return_relaxed() there.
 172:./include/linux/atomic/atomic-instrumented.h ****  *
 173:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 174:./include/linux/atomic/atomic-instrumented.h ****  */
 175:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 176:./include/linux/atomic/atomic-instrumented.h **** atomic_add_return_relaxed(int i, atomic_t *v)
 177:./include/linux/atomic/atomic-instrumented.h **** {
 178:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 179:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_add_return_relaxed(i, v);
 180:./include/linux/atomic/atomic-instrumented.h **** }
 181:./include/linux/atomic/atomic-instrumented.h **** 
 182:./include/linux/atomic/atomic-instrumented.h **** /**
 183:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add() - atomic add with full ordering
 184:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 185:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 186:./include/linux/atomic/atomic-instrumented.h ****  *
 187:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 188:./include/linux/atomic/atomic-instrumented.h ****  *
 189:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add() there.
 190:./include/linux/atomic/atomic-instrumented.h ****  *
 191:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 192:./include/linux/atomic/atomic-instrumented.h ****  */
 193:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 194:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add(int i, atomic_t *v)
 195:./include/linux/atomic/atomic-instrumented.h **** {
 196:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 197:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 198:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add(i, v);
 199:./include/linux/atomic/atomic-instrumented.h **** }
 200:./include/linux/atomic/atomic-instrumented.h **** 
 201:./include/linux/atomic/atomic-instrumented.h **** /**
 202:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_acquire() - atomic add with acquire ordering
 203:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 204:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 205:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 64


 206:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 207:./include/linux/atomic/atomic-instrumented.h ****  *
 208:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_acquire() there.
 209:./include/linux/atomic/atomic-instrumented.h ****  *
 210:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 211:./include/linux/atomic/atomic-instrumented.h ****  */
 212:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 213:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_acquire(int i, atomic_t *v)
 214:./include/linux/atomic/atomic-instrumented.h **** {
 215:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 216:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_acquire(i, v);
 217:./include/linux/atomic/atomic-instrumented.h **** }
 218:./include/linux/atomic/atomic-instrumented.h **** 
 219:./include/linux/atomic/atomic-instrumented.h **** /**
 220:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_release() - atomic add with release ordering
 221:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 222:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 223:./include/linux/atomic/atomic-instrumented.h ****  *
 224:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 225:./include/linux/atomic/atomic-instrumented.h ****  *
 226:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_release() there.
 227:./include/linux/atomic/atomic-instrumented.h ****  *
 228:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 229:./include/linux/atomic/atomic-instrumented.h ****  */
 230:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 231:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_release(int i, atomic_t *v)
 232:./include/linux/atomic/atomic-instrumented.h **** {
 233:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 234:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 235:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_release(i, v);
 236:./include/linux/atomic/atomic-instrumented.h **** }
 237:./include/linux/atomic/atomic-instrumented.h **** 
 238:./include/linux/atomic/atomic-instrumented.h **** /**
 239:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_add_relaxed() - atomic add with relaxed ordering
 240:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to add
 241:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 242:./include/linux/atomic/atomic-instrumented.h ****  *
 243:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 244:./include/linux/atomic/atomic-instrumented.h ****  *
 245:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_add_relaxed() there.
 246:./include/linux/atomic/atomic-instrumented.h ****  *
 247:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 248:./include/linux/atomic/atomic-instrumented.h ****  */
 249:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 250:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_add_relaxed(int i, atomic_t *v)
 251:./include/linux/atomic/atomic-instrumented.h **** {
 252:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 253:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_add_relaxed(i, v);
 254:./include/linux/atomic/atomic-instrumented.h **** }
 255:./include/linux/atomic/atomic-instrumented.h **** 
 256:./include/linux/atomic/atomic-instrumented.h **** /**
 257:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub() - atomic subtract with relaxed ordering
 258:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 259:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 260:./include/linux/atomic/atomic-instrumented.h ****  *
 261:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 262:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 65


 263:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub() there.
 264:./include/linux/atomic/atomic-instrumented.h ****  *
 265:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 266:./include/linux/atomic/atomic-instrumented.h ****  */
 267:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 268:./include/linux/atomic/atomic-instrumented.h **** atomic_sub(int i, atomic_t *v)
 269:./include/linux/atomic/atomic-instrumented.h **** {
 270:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 271:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_sub(i, v);
 272:./include/linux/atomic/atomic-instrumented.h **** }
 273:./include/linux/atomic/atomic-instrumented.h **** 
 274:./include/linux/atomic/atomic-instrumented.h **** /**
 275:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return() - atomic subtract with full ordering
 276:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 277:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 278:./include/linux/atomic/atomic-instrumented.h ****  *
 279:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 280:./include/linux/atomic/atomic-instrumented.h ****  *
 281:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return() there.
 282:./include/linux/atomic/atomic-instrumented.h ****  *
 283:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 284:./include/linux/atomic/atomic-instrumented.h ****  */
 285:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 286:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return(int i, atomic_t *v)
 287:./include/linux/atomic/atomic-instrumented.h **** {
 288:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 289:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 290:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return(i, v);
 291:./include/linux/atomic/atomic-instrumented.h **** }
 292:./include/linux/atomic/atomic-instrumented.h **** 
 293:./include/linux/atomic/atomic-instrumented.h **** /**
 294:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_acquire() - atomic subtract with acquire ordering
 295:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 296:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 297:./include/linux/atomic/atomic-instrumented.h ****  *
 298:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 299:./include/linux/atomic/atomic-instrumented.h ****  *
 300:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_acquire() there.
 301:./include/linux/atomic/atomic-instrumented.h ****  *
 302:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 303:./include/linux/atomic/atomic-instrumented.h ****  */
 304:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 305:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_acquire(int i, atomic_t *v)
 306:./include/linux/atomic/atomic-instrumented.h **** {
 307:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 308:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_acquire(i, v);
 309:./include/linux/atomic/atomic-instrumented.h **** }
 310:./include/linux/atomic/atomic-instrumented.h **** 
 311:./include/linux/atomic/atomic-instrumented.h **** /**
 312:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_release() - atomic subtract with release ordering
 313:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 314:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 315:./include/linux/atomic/atomic-instrumented.h ****  *
 316:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 317:./include/linux/atomic/atomic-instrumented.h ****  *
 318:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_release() there.
 319:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 66


 320:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 321:./include/linux/atomic/atomic-instrumented.h ****  */
 322:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 323:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_release(int i, atomic_t *v)
 324:./include/linux/atomic/atomic-instrumented.h **** {
 325:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 326:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 327:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_release(i, v);
 328:./include/linux/atomic/atomic-instrumented.h **** }
 329:./include/linux/atomic/atomic-instrumented.h **** 
 330:./include/linux/atomic/atomic-instrumented.h **** /**
 331:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_return_relaxed() - atomic subtract with relaxed ordering
 332:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 333:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 334:./include/linux/atomic/atomic-instrumented.h ****  *
 335:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 336:./include/linux/atomic/atomic-instrumented.h ****  *
 337:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_return_relaxed() there.
 338:./include/linux/atomic/atomic-instrumented.h ****  *
 339:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 340:./include/linux/atomic/atomic-instrumented.h ****  */
 341:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 342:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_return_relaxed(int i, atomic_t *v)
 343:./include/linux/atomic/atomic-instrumented.h **** {
 344:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 345:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_return_relaxed(i, v);
 346:./include/linux/atomic/atomic-instrumented.h **** }
 347:./include/linux/atomic/atomic-instrumented.h **** 
 348:./include/linux/atomic/atomic-instrumented.h **** /**
 349:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub() - atomic subtract with full ordering
 350:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 351:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 352:./include/linux/atomic/atomic-instrumented.h ****  *
 353:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 354:./include/linux/atomic/atomic-instrumented.h ****  *
 355:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub() there.
 356:./include/linux/atomic/atomic-instrumented.h ****  *
 357:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 358:./include/linux/atomic/atomic-instrumented.h ****  */
 359:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 360:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub(int i, atomic_t *v)
 361:./include/linux/atomic/atomic-instrumented.h **** {
 362:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 363:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 364:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub(i, v);
 365:./include/linux/atomic/atomic-instrumented.h **** }
 366:./include/linux/atomic/atomic-instrumented.h **** 
 367:./include/linux/atomic/atomic-instrumented.h **** /**
 368:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_acquire() - atomic subtract with acquire ordering
 369:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 370:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 371:./include/linux/atomic/atomic-instrumented.h ****  *
 372:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 373:./include/linux/atomic/atomic-instrumented.h ****  *
 374:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_acquire() there.
 375:./include/linux/atomic/atomic-instrumented.h ****  *
 376:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
ARM GAS  /tmp/ccZnep12.s 			page 67


 377:./include/linux/atomic/atomic-instrumented.h ****  */
 378:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 379:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_acquire(int i, atomic_t *v)
 380:./include/linux/atomic/atomic-instrumented.h **** {
 381:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 382:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_acquire(i, v);
 383:./include/linux/atomic/atomic-instrumented.h **** }
 384:./include/linux/atomic/atomic-instrumented.h **** 
 385:./include/linux/atomic/atomic-instrumented.h **** /**
 386:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_release() - atomic subtract with release ordering
 387:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 388:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 389:./include/linux/atomic/atomic-instrumented.h ****  *
 390:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 391:./include/linux/atomic/atomic-instrumented.h ****  *
 392:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_release() there.
 393:./include/linux/atomic/atomic-instrumented.h ****  *
 394:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 395:./include/linux/atomic/atomic-instrumented.h ****  */
 396:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 397:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_release(int i, atomic_t *v)
 398:./include/linux/atomic/atomic-instrumented.h **** {
 399:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 400:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 401:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_release(i, v);
 402:./include/linux/atomic/atomic-instrumented.h **** }
 403:./include/linux/atomic/atomic-instrumented.h **** 
 404:./include/linux/atomic/atomic-instrumented.h **** /**
 405:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_sub_relaxed() - atomic subtract with relaxed ordering
 406:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
 407:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 408:./include/linux/atomic/atomic-instrumented.h ****  *
 409:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 410:./include/linux/atomic/atomic-instrumented.h ****  *
 411:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_sub_relaxed() there.
 412:./include/linux/atomic/atomic-instrumented.h ****  *
 413:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 414:./include/linux/atomic/atomic-instrumented.h ****  */
 415:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 416:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_sub_relaxed(int i, atomic_t *v)
 417:./include/linux/atomic/atomic-instrumented.h **** {
 418:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 419:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_sub_relaxed(i, v);
 420:./include/linux/atomic/atomic-instrumented.h **** }
 421:./include/linux/atomic/atomic-instrumented.h **** 
 422:./include/linux/atomic/atomic-instrumented.h **** /**
 423:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc() - atomic increment with relaxed ordering
 424:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 425:./include/linux/atomic/atomic-instrumented.h ****  *
 426:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 427:./include/linux/atomic/atomic-instrumented.h ****  *
 428:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc() there.
 429:./include/linux/atomic/atomic-instrumented.h ****  *
 430:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 431:./include/linux/atomic/atomic-instrumented.h ****  */
 432:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 433:./include/linux/atomic/atomic-instrumented.h **** atomic_inc(atomic_t *v)
ARM GAS  /tmp/ccZnep12.s 			page 68


 1380              		.loc 5 433 1 view .LVU437
 434:./include/linux/atomic/atomic-instrumented.h **** {
 435:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 1381              		.loc 5 435 2 view .LVU438
 436:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_inc(v);
 1382              		.loc 5 436 2 view .LVU439
 1383              	.LBB261:
 1384              	.LBI261:
 510:./include/linux/atomic/atomic-arch-fallback.h **** }
 511:./include/linux/atomic/atomic-arch-fallback.h **** 
 512:./include/linux/atomic/atomic-arch-fallback.h **** /**
 513:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_set_release() - atomic set with release ordering
 514:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 515:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to assign
 516:./include/linux/atomic/atomic-arch-fallback.h ****  *
 517:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically sets @v to @i with release ordering.
 518:./include/linux/atomic/atomic-arch-fallback.h ****  *
 519:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_set_release() elsewhere.
 520:./include/linux/atomic/atomic-arch-fallback.h ****  *
 521:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 522:./include/linux/atomic/atomic-arch-fallback.h ****  */
 523:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 524:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_set_release(atomic_t *v, int i)
 525:./include/linux/atomic/atomic-arch-fallback.h **** {
 526:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_set_release)
 527:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_set_release(v, i);
 528:./include/linux/atomic/atomic-arch-fallback.h **** #else
 529:./include/linux/atomic/atomic-arch-fallback.h **** 	if (__native_word(atomic_t)) {
 530:./include/linux/atomic/atomic-arch-fallback.h **** 		smp_store_release(&(v)->counter, i);
 531:./include/linux/atomic/atomic-arch-fallback.h **** 	} else {
 532:./include/linux/atomic/atomic-arch-fallback.h **** 		__atomic_release_fence();
 533:./include/linux/atomic/atomic-arch-fallback.h **** 		raw_atomic_set(v, i);
 534:./include/linux/atomic/atomic-arch-fallback.h **** 	}
 535:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 536:./include/linux/atomic/atomic-arch-fallback.h **** }
 537:./include/linux/atomic/atomic-arch-fallback.h **** 
 538:./include/linux/atomic/atomic-arch-fallback.h **** /**
 539:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add() - atomic add with relaxed ordering
 540:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 541:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 542:./include/linux/atomic/atomic-arch-fallback.h ****  *
 543:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 544:./include/linux/atomic/atomic-arch-fallback.h ****  *
 545:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add() elsewhere.
 546:./include/linux/atomic/atomic-arch-fallback.h ****  *
 547:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 548:./include/linux/atomic/atomic-arch-fallback.h ****  */
 549:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 550:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add(int i, atomic_t *v)
 551:./include/linux/atomic/atomic-arch-fallback.h **** {
 552:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_add(i, v);
 553:./include/linux/atomic/atomic-arch-fallback.h **** }
 554:./include/linux/atomic/atomic-arch-fallback.h **** 
 555:./include/linux/atomic/atomic-arch-fallback.h **** /**
 556:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return() - atomic add with full ordering
 557:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 558:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZnep12.s 			page 69


 559:./include/linux/atomic/atomic-arch-fallback.h ****  *
 560:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 561:./include/linux/atomic/atomic-arch-fallback.h ****  *
 562:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return() elsewhere.
 563:./include/linux/atomic/atomic-arch-fallback.h ****  *
 564:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 565:./include/linux/atomic/atomic-arch-fallback.h ****  */
 566:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 567:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return(int i, atomic_t *v)
 568:./include/linux/atomic/atomic-arch-fallback.h **** {
 569:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return)
 570:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 571:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 572:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 573:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 574:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_add_return_relaxed(i, v);
 575:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 576:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 577:./include/linux/atomic/atomic-arch-fallback.h **** #else
 578:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return"
 579:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 580:./include/linux/atomic/atomic-arch-fallback.h **** }
 581:./include/linux/atomic/atomic-arch-fallback.h **** 
 582:./include/linux/atomic/atomic-arch-fallback.h **** /**
 583:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_acquire() - atomic add with acquire ordering
 584:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 585:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 586:./include/linux/atomic/atomic-arch-fallback.h ****  *
 587:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 588:./include/linux/atomic/atomic-arch-fallback.h ****  *
 589:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_acquire() elsewhere.
 590:./include/linux/atomic/atomic-arch-fallback.h ****  *
 591:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 592:./include/linux/atomic/atomic-arch-fallback.h ****  */
 593:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 594:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_acquire(int i, atomic_t *v)
 595:./include/linux/atomic/atomic-arch-fallback.h **** {
 596:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_acquire)
 597:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_acquire(i, v);
 598:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 599:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_add_return_relaxed(i, v);
 600:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 601:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 602:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 603:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 604:./include/linux/atomic/atomic-arch-fallback.h **** #else
 605:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_acquire"
 606:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 607:./include/linux/atomic/atomic-arch-fallback.h **** }
 608:./include/linux/atomic/atomic-arch-fallback.h **** 
 609:./include/linux/atomic/atomic-arch-fallback.h **** /**
 610:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_release() - atomic add with release ordering
 611:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 612:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 613:./include/linux/atomic/atomic-arch-fallback.h ****  *
 614:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 615:./include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 70


 616:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_release() elsewhere.
 617:./include/linux/atomic/atomic-arch-fallback.h ****  *
 618:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 619:./include/linux/atomic/atomic-arch-fallback.h ****  */
 620:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 621:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_release(int i, atomic_t *v)
 622:./include/linux/atomic/atomic-arch-fallback.h **** {
 623:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_release)
 624:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_release(i, v);
 625:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return_relaxed)
 626:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 627:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_relaxed(i, v);
 628:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 629:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 630:./include/linux/atomic/atomic-arch-fallback.h **** #else
 631:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_release"
 632:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 633:./include/linux/atomic/atomic-arch-fallback.h **** }
 634:./include/linux/atomic/atomic-arch-fallback.h **** 
 635:./include/linux/atomic/atomic-arch-fallback.h **** /**
 636:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_add_return_relaxed() - atomic add with relaxed ordering
 637:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 638:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 639:./include/linux/atomic/atomic-arch-fallback.h ****  *
 640:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 641:./include/linux/atomic/atomic-arch-fallback.h ****  *
 642:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_add_return_relaxed() elsewhere.
 643:./include/linux/atomic/atomic-arch-fallback.h ****  *
 644:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 645:./include/linux/atomic/atomic-arch-fallback.h ****  */
 646:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 647:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_add_return_relaxed(int i, atomic_t *v)
 648:./include/linux/atomic/atomic-arch-fallback.h **** {
 649:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_add_return_relaxed)
 650:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return_relaxed(i, v);
 651:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_add_return)
 652:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_add_return(i, v);
 653:./include/linux/atomic/atomic-arch-fallback.h **** #else
 654:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_add_return_relaxed"
 655:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 656:./include/linux/atomic/atomic-arch-fallback.h **** }
 657:./include/linux/atomic/atomic-arch-fallback.h **** 
 658:./include/linux/atomic/atomic-arch-fallback.h **** /**
 659:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add() - atomic add with full ordering
 660:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 661:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 662:./include/linux/atomic/atomic-arch-fallback.h ****  *
 663:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with full ordering.
 664:./include/linux/atomic/atomic-arch-fallback.h ****  *
 665:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add() elsewhere.
 666:./include/linux/atomic/atomic-arch-fallback.h ****  *
 667:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 668:./include/linux/atomic/atomic-arch-fallback.h ****  */
 669:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 670:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add(int i, atomic_t *v)
 671:./include/linux/atomic/atomic-arch-fallback.h **** {
 672:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add)
ARM GAS  /tmp/ccZnep12.s 			page 71


 673:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 674:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 675:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 676:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 677:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_add_relaxed(i, v);
 678:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 679:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 680:./include/linux/atomic/atomic-arch-fallback.h **** #else
 681:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add"
 682:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 683:./include/linux/atomic/atomic-arch-fallback.h **** }
 684:./include/linux/atomic/atomic-arch-fallback.h **** 
 685:./include/linux/atomic/atomic-arch-fallback.h **** /**
 686:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_acquire() - atomic add with acquire ordering
 687:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 688:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 689:./include/linux/atomic/atomic-arch-fallback.h ****  *
 690:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with acquire ordering.
 691:./include/linux/atomic/atomic-arch-fallback.h ****  *
 692:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_acquire() elsewhere.
 693:./include/linux/atomic/atomic-arch-fallback.h ****  *
 694:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 695:./include/linux/atomic/atomic-arch-fallback.h ****  */
 696:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 697:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_acquire(int i, atomic_t *v)
 698:./include/linux/atomic/atomic-arch-fallback.h **** {
 699:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_acquire)
 700:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_acquire(i, v);
 701:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 702:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_add_relaxed(i, v);
 703:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 704:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 705:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 706:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 707:./include/linux/atomic/atomic-arch-fallback.h **** #else
 708:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_acquire"
 709:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 710:./include/linux/atomic/atomic-arch-fallback.h **** }
 711:./include/linux/atomic/atomic-arch-fallback.h **** 
 712:./include/linux/atomic/atomic-arch-fallback.h **** /**
 713:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_release() - atomic add with release ordering
 714:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 715:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 716:./include/linux/atomic/atomic-arch-fallback.h ****  *
 717:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with release ordering.
 718:./include/linux/atomic/atomic-arch-fallback.h ****  *
 719:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_release() elsewhere.
 720:./include/linux/atomic/atomic-arch-fallback.h ****  *
 721:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 722:./include/linux/atomic/atomic-arch-fallback.h ****  */
 723:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 724:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_release(int i, atomic_t *v)
 725:./include/linux/atomic/atomic-arch-fallback.h **** {
 726:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_release)
 727:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_release(i, v);
 728:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add_relaxed)
 729:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
ARM GAS  /tmp/ccZnep12.s 			page 72


 730:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_relaxed(i, v);
 731:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 732:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 733:./include/linux/atomic/atomic-arch-fallback.h **** #else
 734:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_release"
 735:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 736:./include/linux/atomic/atomic-arch-fallback.h **** }
 737:./include/linux/atomic/atomic-arch-fallback.h **** 
 738:./include/linux/atomic/atomic-arch-fallback.h **** /**
 739:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_add_relaxed() - atomic add with relaxed ordering
 740:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to add
 741:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 742:./include/linux/atomic/atomic-arch-fallback.h ****  *
 743:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + @i) with relaxed ordering.
 744:./include/linux/atomic/atomic-arch-fallback.h ****  *
 745:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_add_relaxed() elsewhere.
 746:./include/linux/atomic/atomic-arch-fallback.h ****  *
 747:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 748:./include/linux/atomic/atomic-arch-fallback.h ****  */
 749:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 750:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_add_relaxed(int i, atomic_t *v)
 751:./include/linux/atomic/atomic-arch-fallback.h **** {
 752:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_add_relaxed)
 753:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add_relaxed(i, v);
 754:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_add)
 755:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_add(i, v);
 756:./include/linux/atomic/atomic-arch-fallback.h **** #else
 757:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_add_relaxed"
 758:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 759:./include/linux/atomic/atomic-arch-fallback.h **** }
 760:./include/linux/atomic/atomic-arch-fallback.h **** 
 761:./include/linux/atomic/atomic-arch-fallback.h **** /**
 762:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub() - atomic subtract with relaxed ordering
 763:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 764:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 765:./include/linux/atomic/atomic-arch-fallback.h ****  *
 766:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 767:./include/linux/atomic/atomic-arch-fallback.h ****  *
 768:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub() elsewhere.
 769:./include/linux/atomic/atomic-arch-fallback.h ****  *
 770:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 771:./include/linux/atomic/atomic-arch-fallback.h ****  */
 772:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 773:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub(int i, atomic_t *v)
 774:./include/linux/atomic/atomic-arch-fallback.h **** {
 775:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_sub(i, v);
 776:./include/linux/atomic/atomic-arch-fallback.h **** }
 777:./include/linux/atomic/atomic-arch-fallback.h **** 
 778:./include/linux/atomic/atomic-arch-fallback.h **** /**
 779:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return() - atomic subtract with full ordering
 780:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 781:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 782:./include/linux/atomic/atomic-arch-fallback.h ****  *
 783:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 784:./include/linux/atomic/atomic-arch-fallback.h ****  *
 785:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return() elsewhere.
 786:./include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 73


 787:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 788:./include/linux/atomic/atomic-arch-fallback.h ****  */
 789:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 790:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return(int i, atomic_t *v)
 791:./include/linux/atomic/atomic-arch-fallback.h **** {
 792:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return)
 793:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 794:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 795:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 796:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 797:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_sub_return_relaxed(i, v);
 798:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 799:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 800:./include/linux/atomic/atomic-arch-fallback.h **** #else
 801:./include/linux/atomic/atomic-arch-fallback.h **** 	volatile int *p = (volatile int *)&v->counter;
 802:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = *p;
 803:./include/linux/atomic/atomic-arch-fallback.h **** 	*p -= i;
 804:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 805:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 806:./include/linux/atomic/atomic-arch-fallback.h **** }
 807:./include/linux/atomic/atomic-arch-fallback.h **** 
 808:./include/linux/atomic/atomic-arch-fallback.h **** 
 809:./include/linux/atomic/atomic-arch-fallback.h **** /**
 810:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_acquire() - atomic subtract with acquire ordering
 811:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 812:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 813:./include/linux/atomic/atomic-arch-fallback.h ****  *
 814:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 815:./include/linux/atomic/atomic-arch-fallback.h ****  *
 816:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_acquire() elsewhere.
 817:./include/linux/atomic/atomic-arch-fallback.h ****  *
 818:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 819:./include/linux/atomic/atomic-arch-fallback.h ****  */
 820:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 821:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_acquire(int i, atomic_t *v)
 822:./include/linux/atomic/atomic-arch-fallback.h **** {
 823:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_acquire)
 824:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_acquire(i, v);
 825:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 826:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_sub_return_relaxed(i, v);
 827:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 828:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 829:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 830:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 831:./include/linux/atomic/atomic-arch-fallback.h **** #else
 832:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_acquire"
 833:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 834:./include/linux/atomic/atomic-arch-fallback.h **** }
 835:./include/linux/atomic/atomic-arch-fallback.h **** 
 836:./include/linux/atomic/atomic-arch-fallback.h **** /**
 837:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_release() - atomic subtract with release ordering
 838:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 839:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 840:./include/linux/atomic/atomic-arch-fallback.h ****  *
 841:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 842:./include/linux/atomic/atomic-arch-fallback.h ****  *
 843:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_release() elsewhere.
ARM GAS  /tmp/ccZnep12.s 			page 74


 844:./include/linux/atomic/atomic-arch-fallback.h ****  *
 845:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 846:./include/linux/atomic/atomic-arch-fallback.h ****  */
 847:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 848:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_release(int i, atomic_t *v)
 849:./include/linux/atomic/atomic-arch-fallback.h **** {
 850:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_release)
 851:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_release(i, v);
 852:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return_relaxed)
 853:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 854:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_relaxed(i, v);
 855:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 856:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 857:./include/linux/atomic/atomic-arch-fallback.h **** #else
 858:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_release"
 859:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 860:./include/linux/atomic/atomic-arch-fallback.h **** }
 861:./include/linux/atomic/atomic-arch-fallback.h **** 
 862:./include/linux/atomic/atomic-arch-fallback.h **** /**
 863:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_return_relaxed() - atomic subtract with relaxed ordering
 864:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 865:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 866:./include/linux/atomic/atomic-arch-fallback.h ****  *
 867:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 868:./include/linux/atomic/atomic-arch-fallback.h ****  *
 869:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_return_relaxed() elsewhere.
 870:./include/linux/atomic/atomic-arch-fallback.h ****  *
 871:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
 872:./include/linux/atomic/atomic-arch-fallback.h ****  */
 873:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 874:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_return_relaxed(int i, atomic_t *v)
 875:./include/linux/atomic/atomic-arch-fallback.h **** {
 876:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_return_relaxed)
 877:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return_relaxed(i, v);
 878:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_sub_return)
 879:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_return(i, v);
 880:./include/linux/atomic/atomic-arch-fallback.h **** #else
 881:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_sub_return_relaxed"
 882:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 883:./include/linux/atomic/atomic-arch-fallback.h **** }
 884:./include/linux/atomic/atomic-arch-fallback.h **** 
 885:./include/linux/atomic/atomic-arch-fallback.h **** /**
 886:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub() - atomic subtract with full ordering
 887:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 888:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 889:./include/linux/atomic/atomic-arch-fallback.h ****  *
 890:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
 891:./include/linux/atomic/atomic-arch-fallback.h ****  *
 892:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub() elsewhere.
 893:./include/linux/atomic/atomic-arch-fallback.h ****  *
 894:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 895:./include/linux/atomic/atomic-arch-fallback.h ****  */
 896:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 897:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub(int i, atomic_t *v)
 898:./include/linux/atomic/atomic-arch-fallback.h **** {
 899:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub)
 900:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
ARM GAS  /tmp/ccZnep12.s 			page 75


 901:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 902:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
 903:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 904:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_sub_relaxed(i, v);
 905:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 906:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 907:./include/linux/atomic/atomic-arch-fallback.h **** #else
 908:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub"
 909:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 910:./include/linux/atomic/atomic-arch-fallback.h **** }
 911:./include/linux/atomic/atomic-arch-fallback.h **** 
 912:./include/linux/atomic/atomic-arch-fallback.h **** /**
 913:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_acquire() - atomic subtract with acquire ordering
 914:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 915:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 916:./include/linux/atomic/atomic-arch-fallback.h ****  *
 917:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with acquire ordering.
 918:./include/linux/atomic/atomic-arch-fallback.h ****  *
 919:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_acquire() elsewhere.
 920:./include/linux/atomic/atomic-arch-fallback.h ****  *
 921:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 922:./include/linux/atomic/atomic-arch-fallback.h ****  */
 923:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 924:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_acquire(int i, atomic_t *v)
 925:./include/linux/atomic/atomic-arch-fallback.h **** {
 926:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_acquire)
 927:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_acquire(i, v);
 928:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 929:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_sub_relaxed(i, v);
 930:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
 931:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 932:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 933:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 934:./include/linux/atomic/atomic-arch-fallback.h **** #else
 935:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_acquire"
 936:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 937:./include/linux/atomic/atomic-arch-fallback.h **** }
 938:./include/linux/atomic/atomic-arch-fallback.h **** 
 939:./include/linux/atomic/atomic-arch-fallback.h **** /**
 940:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_release() - atomic subtract with release ordering
 941:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 942:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 943:./include/linux/atomic/atomic-arch-fallback.h ****  *
 944:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with release ordering.
 945:./include/linux/atomic/atomic-arch-fallback.h ****  *
 946:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_release() elsewhere.
 947:./include/linux/atomic/atomic-arch-fallback.h ****  *
 948:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 949:./include/linux/atomic/atomic-arch-fallback.h ****  */
 950:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 951:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_release(int i, atomic_t *v)
 952:./include/linux/atomic/atomic-arch-fallback.h **** {
 953:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_release)
 954:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_release(i, v);
 955:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub_relaxed)
 956:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
 957:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_relaxed(i, v);
ARM GAS  /tmp/ccZnep12.s 			page 76


 958:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 959:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 960:./include/linux/atomic/atomic-arch-fallback.h **** #else
 961:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_release"
 962:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 963:./include/linux/atomic/atomic-arch-fallback.h **** }
 964:./include/linux/atomic/atomic-arch-fallback.h **** 
 965:./include/linux/atomic/atomic-arch-fallback.h **** /**
 966:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_sub_relaxed() - atomic subtract with relaxed ordering
 967:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
 968:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 969:./include/linux/atomic/atomic-arch-fallback.h ****  *
 970:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with relaxed ordering.
 971:./include/linux/atomic/atomic-arch-fallback.h ****  *
 972:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_sub_relaxed() elsewhere.
 973:./include/linux/atomic/atomic-arch-fallback.h ****  *
 974:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
 975:./include/linux/atomic/atomic-arch-fallback.h ****  */
 976:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
 977:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_sub_relaxed(int i, atomic_t *v)
 978:./include/linux/atomic/atomic-arch-fallback.h **** {
 979:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_sub_relaxed)
 980:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub_relaxed(i, v);
 981:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_sub)
 982:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_sub(i, v);
 983:./include/linux/atomic/atomic-arch-fallback.h **** #else
 984:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_sub_relaxed"
 985:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 986:./include/linux/atomic/atomic-arch-fallback.h **** }
 987:./include/linux/atomic/atomic-arch-fallback.h **** 
 988:./include/linux/atomic/atomic-arch-fallback.h **** /**
 989:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc() - atomic increment with relaxed ordering
 990:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
 991:./include/linux/atomic/atomic-arch-fallback.h ****  *
 992:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 993:./include/linux/atomic/atomic-arch-fallback.h ****  *
 994:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc() elsewhere.
 995:./include/linux/atomic/atomic-arch-fallback.h ****  *
 996:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
 997:./include/linux/atomic/atomic-arch-fallback.h ****  */
 998:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
 999:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc(atomic_t *v)
 1385              		.loc 6 999 1 view .LVU440
1000:./include/linux/atomic/atomic-arch-fallback.h **** {
1001:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc)
1002:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_inc(v);
1003:./include/linux/atomic/atomic-arch-fallback.h **** #else
1004:./include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_add(1, v);
 1386              		.loc 6 1004 2 view .LVU441
 1387              	.LBB262:
 1388              	.LBI262:
 550:./include/linux/atomic/atomic-arch-fallback.h **** {
 1389              		.loc 6 550 1 view .LVU442
 552:./include/linux/atomic/atomic-arch-fallback.h **** }
 1390              		.loc 6 552 2 view .LVU443
 1391              	.LBB263:
 1392              	.LBI263:
ARM GAS  /tmp/ccZnep12.s 			page 77


 1393              		.file 8 "./arch/arm_m/include/asm/atomic.h"
   1:./arch/arm_m/include/asm/atomic.h **** /* SPDX-License-Identifier: GPL-2.0-only */
   2:./arch/arm_m/include/asm/atomic.h **** /*
   3:./arch/arm_m/include/asm/atomic.h ****  * arch/arm/include/asm/atomic.h
   4:./arch/arm_m/include/asm/atomic.h ****  *
   5:./arch/arm_m/include/asm/atomic.h ****  * Copyright (C) 1996 Russell King.
   6:./arch/arm_m/include/asm/atomic.h ****  * Copyright (C) 2002 Deep Blue Solutions Ltd.
   7:./arch/arm_m/include/asm/atomic.h ****  * Modified for uClinux on STM32F407
   8:./arch/arm_m/include/asm/atomic.h ****  */
   9:./arch/arm_m/include/asm/atomic.h **** #ifndef __ASM_ARM_ATOMIC_H
  10:./arch/arm_m/include/asm/atomic.h **** #define __ASM_ARM_ATOMIC_H
  11:./arch/arm_m/include/asm/atomic.h **** 
  12:./arch/arm_m/include/asm/atomic.h **** #include <linux/compiler.h> /* Available */
  13:./arch/arm_m/include/asm/atomic.h **** #include <linux/types.h>    /* Available */
  14:./arch/arm_m/include/asm/atomic.h **** #include <asm/barrier.h>    /* Available */
  15:./arch/arm_m/include/asm/atomic.h **** 
  16:./arch/arm_m/include/asm/atomic.h **** /* Include architecture-specific configuration */
  17:./arch/arm_m/include/asm/atomic.h **** 
  18:./arch/arm_m/include/asm/atomic.h **** 
  19:./arch/arm_m/include/asm/atomic.h **** #ifdef __KERNEL__
  20:./arch/arm_m/include/asm/atomic.h **** 
  21:./arch/arm_m/include/asm/atomic.h **** 
  22:./arch/arm_m/include/asm/atomic.h **** 
  23:./arch/arm_m/include/asm/atomic.h **** 
  24:./arch/arm_m/include/asm/atomic.h **** 
  25:./arch/arm_m/include/asm/atomic.h **** // typedef struct {
  26:./arch/arm_m/include/asm/atomic.h **** //     volatile int counter;
  27:./arch/arm_m/include/asm/atomic.h **** // } atomic_t;
  28:./arch/arm_m/include/asm/atomic.h **** 
  29:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_INIT(i) { (i) }
  30:./arch/arm_m/include/asm/atomic.h **** 
  31:./arch/arm_m/include/asm/atomic.h **** /*
  32:./arch/arm_m/include/asm/atomic.h ****  * On ARMv7-M, ordinary assignment (str instruction) doesn't clear the local
  33:./arch/arm_m/include/asm/atomic.h ****  * strex/ldrex monitor on some implementations. The reason we can use it for
  34:./arch/arm_m/include/asm/atomic.h ****  * atomic_set() is the clrex or dummy strex done on every exception return.
  35:./arch/arm_m/include/asm/atomic.h ****  */
  36:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_read(v) READ_ONCE((v)->counter)
  37:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_set(v,i)    WRITE_ONCE(((v)->counter), (i))
  38:./arch/arm_m/include/asm/atomic.h **** 
  39:./arch/arm_m/include/asm/atomic.h **** /*
  40:./arch/arm_m/include/asm/atomic.h ****  * ARMv6 UP and SMP safe atomic ops.  We use load exclusive and
  41:./arch/arm_m/include/asm/atomic.h ****  * store exclusive to ensure that these are atomic.  We may loop
  42:./arch/arm_m/include/asm/atomic.h ****  * to ensure that the update happens.
  43:./arch/arm_m/include/asm/atomic.h ****  *
  44:./arch/arm_m/include/asm/atomic.h ****  * For STM32F407 (Cortex-M4, ARMv7-M), these instructions are available.
  45:./arch/arm_m/include/asm/atomic.h ****  */
  46:./arch/arm_m/include/asm/atomic.h **** 
  47:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OP(op, c_op, asm_op)                     \
  48:./arch/arm_m/include/asm/atomic.h **** static inline void arch_atomic_##op(int i, atomic_t *v)         \
  49:./arch/arm_m/include/asm/atomic.h **** {                                       \
  50:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  51:./arch/arm_m/include/asm/atomic.h ****     int result;                                 \
  52:./arch/arm_m/include/asm/atomic.h ****                                         \
  53:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  54:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_" #op "\n"           \
  55:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%3]\n"                      \
  56:./arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %0, %0, %4\n"                \
ARM GAS  /tmp/ccZnep12.s 			page 78


  57:./arch/arm_m/include/asm/atomic.h **** "   strex   %1, %0, [%3]\n"                      \
  58:./arch/arm_m/include/asm/atomic.h **** "   teq %1, #0\n"                         \
  59:./arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  60:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)     \
  61:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
  62:./arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
  63:./arch/arm_m/include/asm/atomic.h **** }
  64:./arch/arm_m/include/asm/atomic.h **** 
  65:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OP_RETURN(op, c_op, asm_op)                  \
  66:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_##op##_return_relaxed(int i, atomic_t *v) \
  67:./arch/arm_m/include/asm/atomic.h **** {                                       \
  68:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  69:./arch/arm_m/include/asm/atomic.h ****     int result;                                 \
  70:./arch/arm_m/include/asm/atomic.h ****                                         \
  71:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  72:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_" #op "_return\n"        \
  73:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%3]\n"                      \
  74:./arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %0, %0, %4\n"                \
  75:./arch/arm_m/include/asm/atomic.h **** "   strex   %1, %0, [%3]\n"                      \
  76:./arch/arm_m/include/asm/atomic.h **** "   teq %1, #0\n"                         \
  77:./arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  78:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)     \
  79:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
  80:./arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
  81:./arch/arm_m/include/asm/atomic.h ****                                         \
  82:./arch/arm_m/include/asm/atomic.h ****     return result;                              \
  83:./arch/arm_m/include/asm/atomic.h **** }
  84:./arch/arm_m/include/asm/atomic.h **** 
  85:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_FETCH_OP(op, c_op, asm_op)                   \
  86:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_fetch_##op##_relaxed(int i, atomic_t *v)  \
  87:./arch/arm_m/include/asm/atomic.h **** {                                       \
  88:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;                          \
  89:./arch/arm_m/include/asm/atomic.h ****     int result, val;                             \
  90:./arch/arm_m/include/asm/atomic.h ****                                         \
  91:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */ \
  92:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__("@ atomic_fetch_" #op "\n"       \
  93:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%4]\n"                      \
  94:./arch/arm_m/include/asm/atomic.h **** "   " #asm_op " %1, %0, %5\n"                \
  95:./arch/arm_m/include/asm/atomic.h **** "   strex   %2, %1, [%4]\n"                      \
  96:./arch/arm_m/include/asm/atomic.h **** "   teq %2, #0\n"                         \
  97:./arch/arm_m/include/asm/atomic.h **** "   bne 1b"                                \
  98:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Qo" (v->counter) \
  99:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "Ir" (i)                 \
 100:./arch/arm_m/include/asm/atomic.h ****     : "cc");                                   \
 101:./arch/arm_m/include/asm/atomic.h ****                                         \
 102:./arch/arm_m/include/asm/atomic.h ****     return result;                              \
 103:./arch/arm_m/include/asm/atomic.h **** }
 104:./arch/arm_m/include/asm/atomic.h **** 
 105:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_add_return_relaxed       arch_atomic_add_return_relaxed
 106:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_sub_return_relaxed       arch_atomic_sub_return_relaxed
 107:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_add_relaxed        arch_atomic_fetch_add_relaxed
 108:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_sub_relaxed        arch_atomic_fetch_sub_relaxed
 109:./arch/arm_m/include/asm/atomic.h **** 
 110:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_and_relaxed        arch_atomic_fetch_and_relaxed
 111:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_andnot_relaxed     arch_atomic_fetch_andnot_relaxed
 112:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_or_relaxed         arch_atomic_fetch_or_relaxed
 113:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_xor_relaxed        arch_atomic_fetch_xor_relaxed
ARM GAS  /tmp/ccZnep12.s 			page 79


 114:./arch/arm_m/include/asm/atomic.h **** 
 115:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_cmpxchg_relaxed(atomic_t *ptr, int old, int new)
 116:./arch/arm_m/include/asm/atomic.h **** {
 117:./arch/arm_m/include/asm/atomic.h ****     int oldval;
 118:./arch/arm_m/include/asm/atomic.h ****     unsigned long res;
 119:./arch/arm_m/include/asm/atomic.h **** 
 120:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&ptr->counter); - prefetch not available */
 121:./arch/arm_m/include/asm/atomic.h **** 
 122:./arch/arm_m/include/asm/atomic.h ****     do {
 123:./arch/arm_m/include/asm/atomic.h ****         __asm__ __volatile__("@ atomic_cmpxchg\n"
 124:./arch/arm_m/include/asm/atomic.h **** "   ldrex   %1, [%3]\n"
 125:./arch/arm_m/include/asm/atomic.h **** "   mov     %0, #0\n"
 126:./arch/arm_m/include/asm/atomic.h **** "   teq     %1, %4\n"
 127:./arch/arm_m/include/asm/atomic.h **** "   strexeq %0, %5, [%3]\n"
 128:./arch/arm_m/include/asm/atomic.h ****         : "=&r" (res), "=&r" (oldval), "+Qo" (ptr->counter)
 129:./arch/arm_m/include/asm/atomic.h ****         : "r" (&ptr->counter), "Ir" (old), "r" (new)
 130:./arch/arm_m/include/asm/atomic.h ****         : "cc");
 131:./arch/arm_m/include/asm/atomic.h ****     } while (res);
 132:./arch/arm_m/include/asm/atomic.h **** 
 133:./arch/arm_m/include/asm/atomic.h ****     return oldval;
 134:./arch/arm_m/include/asm/atomic.h **** }
 135:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_cmpxchg_relaxed        arch_atomic_cmpxchg_relaxed
 136:./arch/arm_m/include/asm/atomic.h **** 
 137:./arch/arm_m/include/asm/atomic.h **** static inline int arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
 138:./arch/arm_m/include/asm/atomic.h **** {
 139:./arch/arm_m/include/asm/atomic.h ****     int oldval, newval;
 140:./arch/arm_m/include/asm/atomic.h ****     unsigned long tmp;
 141:./arch/arm_m/include/asm/atomic.h **** 
 142:./arch/arm_m/include/asm/atomic.h ****     /* smp_mb(); - Memory barriers might need specific implementation */
 143:./arch/arm_m/include/asm/atomic.h ****     /* prefetchw(&v->counter); - prefetch not available */
 144:./arch/arm_m/include/asm/atomic.h **** 
 145:./arch/arm_m/include/asm/atomic.h ****     __asm__ __volatile__ ("@ atomic_add_unless\n"
 146:./arch/arm_m/include/asm/atomic.h **** "1: ldrex   %0, [%4]\n"
 147:./arch/arm_m/include/asm/atomic.h **** "   teq %0, %5\n"
 148:./arch/arm_m/include/asm/atomic.h **** "   beq 2f\n"
 149:./arch/arm_m/include/asm/atomic.h **** "   add %1, %0, %6\n"
 150:./arch/arm_m/include/asm/atomic.h **** "   strex   %2, %1, [%4]\n"
 151:./arch/arm_m/include/asm/atomic.h **** "   teq %2, #0\n"
 152:./arch/arm_m/include/asm/atomic.h **** "   bne 1b\n"
 153:./arch/arm_m/include/asm/atomic.h **** "2:"
 154:./arch/arm_m/include/asm/atomic.h ****     : "=&r" (oldval), "=&r" (newval), "=&r" (tmp), "+Qo" (v->counter)
 155:./arch/arm_m/include/asm/atomic.h ****     : "r" (&v->counter), "r" (u), "r" (a)
 156:./arch/arm_m/include/asm/atomic.h ****     : "cc");
 157:./arch/arm_m/include/asm/atomic.h **** 
 158:./arch/arm_m/include/asm/atomic.h ****     if (oldval != u)
 159:./arch/arm_m/include/asm/atomic.h ****         ; /* smp_mb(); - Memory barriers might need specific implementation */
 160:./arch/arm_m/include/asm/atomic.h **** 
 161:./arch/arm_m/include/asm/atomic.h ****     return oldval;
 162:./arch/arm_m/include/asm/atomic.h **** }
 163:./arch/arm_m/include/asm/atomic.h **** #define arch_atomic_fetch_add_unless         arch_atomic_fetch_add_unless
 164:./arch/arm_m/include/asm/atomic.h **** 
 165:./arch/arm_m/include/asm/atomic.h **** #define ATOMIC_OPS(op, c_op, asm_op)                    \
 166:./arch/arm_m/include/asm/atomic.h ****     ATOMIC_OP(op, c_op, asm_op)                     \
 167:./arch/arm_m/include/asm/atomic.h ****     ATOMIC_OP_RETURN(op, c_op, asm_op)                  \
 168:./arch/arm_m/include/asm/atomic.h ****     ATOMIC_FETCH_OP(op, c_op, asm_op)
 169:./arch/arm_m/include/asm/atomic.h **** 
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(add, +=, add)
ARM GAS  /tmp/ccZnep12.s 			page 80


 1394              		.loc 8 170 1 view .LVU444
 1395              	.LBB264:
 1396              		.loc 8 170 1 view .LVU445
 1397              		.loc 8 170 1 view .LVU446
 1398              		.loc 8 170 1 view .LVU447
 1399              		.syntax unified
 1400              	@ 170 "./arch/arm_m/include/asm/atomic.h" 1
 1401              		@ atomic_add
 1402 0040 53E8002F 	1: ldrex   r2, [r3]
 1403 0044 02F10102 	   add r2, r2, #1
 1404 0048 43E80021 	   strex   r1, r2, [r3]
 1405 004c 91F0000F 	   teq r1, #0
 1406 0050 F6D1     	   bne 1b
 1407              	@ 0 "" 2
 1408              	.LVL124:
 1409              		.loc 8 170 1 is_stmt 0 view .LVU448
 1410              		.thumb
 1411              		.syntax unified
 1412              	.LBE264:
 1413              	.LBE263:
 1414              	.LBE262:
 1415              	.LBE261:
 1416              	.LBE260:
 242:./fs/pipefs/pipefs.c ****     return d_sb;
 1417              		.loc 1 242 5 is_stmt 1 view .LVU449
 1418 0052 00F11C03 		add	r3, r0, #28
 1419              	.LVL125:
 1420              	.LBB265:
 1421              	.LBI265:
  35:./include/linux/list.h **** {
 1422              		.loc 7 35 20 view .LVU450
 1423              	.LBB266:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1424              		.loc 7 37 2 view .LVU451
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1425              		.loc 7 37 2 view .LVU452
 1426              	.LBB267:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1427              		.loc 7 37 2 view .LVU453
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1428              		.loc 7 37 2 view .LVU454
 1429              	.LBE267:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1430              		.loc 7 37 2 discriminator 2 view .LVU455
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1431              		.loc 7 37 2 discriminator 2 view .LVU456
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1432              		.loc 7 37 2 discriminator 2 view .LVU457
 1433 0056 C361     		str	r3, [r0, #28]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1434              		.loc 7 37 2 discriminator 2 view .LVU458
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 1435              		.loc 7 37 2 discriminator 2 view .LVU459
  38:./include/linux/list.h **** }
 1436              		.loc 7 38 2 view .LVU460
  38:./include/linux/list.h **** }
 1437              		.loc 7 38 2 view .LVU461
ARM GAS  /tmp/ccZnep12.s 			page 81


 1438              	.LBB268:
  38:./include/linux/list.h **** }
 1439              		.loc 7 38 2 view .LVU462
  38:./include/linux/list.h **** }
 1440              		.loc 7 38 2 view .LVU463
 1441              	.LBE268:
  38:./include/linux/list.h **** }
 1442              		.loc 7 38 2 discriminator 2 view .LVU464
  38:./include/linux/list.h **** }
 1443              		.loc 7 38 2 discriminator 2 view .LVU465
  38:./include/linux/list.h **** }
 1444              		.loc 7 38 2 discriminator 2 view .LVU466
 1445 0058 0362     		str	r3, [r0, #32]
  38:./include/linux/list.h **** }
 1446              		.loc 7 38 2 discriminator 2 view .LVU467
  38:./include/linux/list.h **** }
 1447              		.loc 7 38 2 discriminator 2 view .LVU468
 1448              	.LVL126:
  38:./include/linux/list.h **** }
 1449              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU469
 1450              	.LBE266:
 1451              	.LBE265:
 243:./fs/pipefs/pipefs.c **** } 
 1452              		.loc 1 243 5 is_stmt 1 view .LVU470
 1453              	.L81:
 244:./fs/pipefs/pipefs.c **** static void pipefs_superblock_destory(struct pipefs_superblock* sb){
 1454              		.loc 1 244 1 is_stmt 0 view .LVU471
 1455 005a 2046     		mov	r0, r4
 1456 005c 38BD     		pop	{r3, r4, r5, pc}
 1457              	.LVL127:
 1458              	.L85:
 235:./fs/pipefs/pipefs.c ****         return NULL;
 1459              		.loc 1 235 9 is_stmt 1 view .LVU472
 1460              	.LBB269:
 1461              	.LBI269:
 381:./include/linux/slab.h **** }
 382:./include/linux/slab.h **** 
 383:./include/linux/slab.h **** static void inline kfree(const void *ptr){
 1462              		.loc 4 383 20 view .LVU473
 1463              	.LBB270:
 384:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1464              		.loc 4 384 2 view .LVU474
 1465 005e 2046     		mov	r0, r4
 1466              	.LVL128:
 1467              		.loc 4 384 2 is_stmt 0 view .LVU475
 1468 0060 FFF7FEFF 		bl	__sfree__
 1469              	.LVL129:
 1470              		.loc 4 384 2 view .LVU476
 1471              	.LBE270:
 1472              	.LBE269:
 236:./fs/pipefs/pipefs.c ****     }
 1473              		.loc 1 236 9 is_stmt 1 view .LVU477
 236:./fs/pipefs/pipefs.c ****     }
 1474              		.loc 1 236 16 is_stmt 0 view .LVU478
 1475 0064 2C46     		mov	r4, r5
 1476              	.LVL130:
 236:./fs/pipefs/pipefs.c ****     }
ARM GAS  /tmp/ccZnep12.s 			page 82


 1477              		.loc 1 236 16 view .LVU479
 1478 0066 F8E7     		b	.L81
 1479              	.L87:
 1480              		.align	2
 1481              	.L86:
 1482 0068 4E61BC00 		.word	12345678
 1483 006c 00000000 		.word	pipefs_file_fops
 1484              		.cfi_endproc
 1485              	.LFE1051:
 1487              		.section	.text.pipefs_inode_put,"ax",%progbits
 1488              		.align	1
 1489              		.syntax unified
 1490              		.thumb
 1491              		.thumb_func
 1493              	pipefs_inode_put:
 1494              	.LVL131:
 1495              	.LFB1044:
 137:./fs/pipefs/pipefs.c ****     if(node != NULL)kfree(node);
 1496              		.loc 1 137 56 is_stmt 1 view -0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 138:./fs/pipefs/pipefs.c **** }
 1500              		.loc 1 138 5 view .LVU481
 138:./fs/pipefs/pipefs.c **** }
 1501              		.loc 1 138 7 is_stmt 0 view .LVU482
 1502 0000 18B1     		cbz	r0, .L91
 137:./fs/pipefs/pipefs.c ****     if(node != NULL)kfree(node);
 1503              		.loc 1 137 56 view .LVU483
 1504 0002 08B5     		push	{r3, lr}
 1505              	.LCFI15:
 1506              		.cfi_def_cfa_offset 8
 1507              		.cfi_offset 3, -8
 1508              		.cfi_offset 14, -4
 138:./fs/pipefs/pipefs.c **** }
 1509              		.loc 1 138 21 is_stmt 1 discriminator 1 view .LVU484
 1510              	.LVL132:
 1511              	.LBB271:
 1512              	.LBI271:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1513              		.loc 4 383 20 view .LVU485
 1514              	.LBB272:
 1515              		.loc 4 384 2 view .LVU486
 1516 0004 FFF7FEFF 		bl	__sfree__
 1517              	.LVL133:
 1518              		.loc 4 384 2 is_stmt 0 view .LVU487
 1519              	.LBE272:
 1520              	.LBE271:
 139:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dentry(struct pipefs_inode* parent_dentry_inode,struct p
 1521              		.loc 1 139 1 view .LVU488
 1522 0008 08BD     		pop	{r3, pc}
 1523              	.LVL134:
 1524              	.L91:
 1525              	.LCFI16:
 1526              		.cfi_def_cfa_offset 0
 1527              		.cfi_restore 3
 1528              		.cfi_restore 14
ARM GAS  /tmp/ccZnep12.s 			page 83


 139:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_dentry(struct pipefs_inode* parent_dentry_inode,struct p
 1529              		.loc 1 139 1 view .LVU489
 1530 000a 7047     		bx	lr
 1531              		.cfi_endproc
 1532              	.LFE1044:
 1534              		.section	.text.dentry_put,"ax",%progbits
 1535              		.align	1
 1536              		.syntax unified
 1537              		.thumb
 1538              		.thumb_func
 1540              	dentry_put:
 1541              	.LVL135:
 1542              	.LFB1049:
 195:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return;
 1543              		.loc 1 195 1 is_stmt 1 view -0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 196:./fs/pipefs/pipefs.c ****     if(dentry->target_inode != NULL)
 1547              		.loc 1 196 5 view .LVU491
 196:./fs/pipefs/pipefs.c ****     if(dentry->target_inode != NULL)
 1548              		.loc 1 196 7 is_stmt 0 view .LVU492
 1549 0000 61B3     		cbz	r1, .L99
 195:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return;
 1550              		.loc 1 195 1 view .LVU493
 1551 0002 38B5     		push	{r3, r4, r5, lr}
 1552              	.LCFI17:
 1553              		.cfi_def_cfa_offset 16
 1554              		.cfi_offset 3, -16
 1555              		.cfi_offset 4, -12
 1556              		.cfi_offset 5, -8
 1557              		.cfi_offset 14, -4
 1558 0004 0D46     		mov	r5, r1
 197:./fs/pipefs/pipefs.c ****     {
 1559              		.loc 1 197 5 is_stmt 1 view .LVU494
 197:./fs/pipefs/pipefs.c ****     {
 1560              		.loc 1 197 14 is_stmt 0 view .LVU495
 1561 0006 8B68     		ldr	r3, [r1, #8]
 197:./fs/pipefs/pipefs.c ****     {
 1562              		.loc 1 197 7 view .LVU496
 1563 0008 93B1     		cbz	r3, .L96
 199:./fs/pipefs/pipefs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 1564              		.loc 1 199 9 is_stmt 1 view .LVU497
 1565 000a 041D     		adds	r4, r0, #4
 1566 000c 2046     		mov	r0, r4
 1567              	.LVL136:
 199:./fs/pipefs/pipefs.c ****         if (atomic_dec_and_test(&dentry->target_inode->dentry_count)) //Ê£ÄÊµãinodeÂºïÁî®ËÆ°Êï∞ÊòØÂ
 1568              		.loc 1 199 9 is_stmt 0 view .LVU498
 1569 000e FFF7FEFF 		bl	spin_lock
 1570              	.LVL137:
 200:./fs/pipefs/pipefs.c ****         {
 1571              		.loc 1 200 9 is_stmt 1 view .LVU499
 200:./fs/pipefs/pipefs.c ****         {
 1572              		.loc 1 200 40 is_stmt 0 view .LVU500
 1573 0012 AB68     		ldr	r3, [r5, #8]
 200:./fs/pipefs/pipefs.c ****         {
 1574              		.loc 1 200 13 view .LVU501
ARM GAS  /tmp/ccZnep12.s 			page 84


 1575 0014 0C33     		adds	r3, r3, #12
 1576              	.LVL138:
 1577              	.LBB273:
 1578              	.LBI273:
 437:./include/linux/atomic/atomic-instrumented.h **** }
 438:./include/linux/atomic/atomic-instrumented.h **** 
 439:./include/linux/atomic/atomic-instrumented.h **** /**
 440:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return() - atomic increment with full ordering
 441:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 442:./include/linux/atomic/atomic-instrumented.h ****  *
 443:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with full ordering.
 444:./include/linux/atomic/atomic-instrumented.h ****  *
 445:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return() there.
 446:./include/linux/atomic/atomic-instrumented.h ****  *
 447:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 448:./include/linux/atomic/atomic-instrumented.h ****  */
 449:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 450:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return(atomic_t *v)
 451:./include/linux/atomic/atomic-instrumented.h **** {
 452:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 453:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 454:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return(v);
 455:./include/linux/atomic/atomic-instrumented.h **** }
 456:./include/linux/atomic/atomic-instrumented.h **** 
 457:./include/linux/atomic/atomic-instrumented.h **** /**
 458:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_acquire() - atomic increment with acquire ordering
 459:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 460:./include/linux/atomic/atomic-instrumented.h ****  *
 461:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
 462:./include/linux/atomic/atomic-instrumented.h ****  *
 463:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_acquire() there.
 464:./include/linux/atomic/atomic-instrumented.h ****  *
 465:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 466:./include/linux/atomic/atomic-instrumented.h ****  */
 467:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 468:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_acquire(atomic_t *v)
 469:./include/linux/atomic/atomic-instrumented.h **** {
 470:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 471:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_acquire(v);
 472:./include/linux/atomic/atomic-instrumented.h **** }
 473:./include/linux/atomic/atomic-instrumented.h **** 
 474:./include/linux/atomic/atomic-instrumented.h **** /**
 475:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_release() - atomic increment with release ordering
 476:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 477:./include/linux/atomic/atomic-instrumented.h ****  *
 478:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with release ordering.
 479:./include/linux/atomic/atomic-instrumented.h ****  *
 480:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_release() there.
 481:./include/linux/atomic/atomic-instrumented.h ****  *
 482:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 483:./include/linux/atomic/atomic-instrumented.h ****  */
 484:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 485:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_release(atomic_t *v)
 486:./include/linux/atomic/atomic-instrumented.h **** {
 487:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 488:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 489:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_release(v);
ARM GAS  /tmp/ccZnep12.s 			page 85


 490:./include/linux/atomic/atomic-instrumented.h **** }
 491:./include/linux/atomic/atomic-instrumented.h **** 
 492:./include/linux/atomic/atomic-instrumented.h **** /**
 493:./include/linux/atomic/atomic-instrumented.h ****  * atomic_inc_return_relaxed() - atomic increment with relaxed ordering
 494:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 495:./include/linux/atomic/atomic-instrumented.h ****  *
 496:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 497:./include/linux/atomic/atomic-instrumented.h ****  *
 498:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_inc_return_relaxed() there.
 499:./include/linux/atomic/atomic-instrumented.h ****  *
 500:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 501:./include/linux/atomic/atomic-instrumented.h ****  */
 502:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 503:./include/linux/atomic/atomic-instrumented.h **** atomic_inc_return_relaxed(atomic_t *v)
 504:./include/linux/atomic/atomic-instrumented.h **** {
 505:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 506:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_inc_return_relaxed(v);
 507:./include/linux/atomic/atomic-instrumented.h **** }
 508:./include/linux/atomic/atomic-instrumented.h **** 
 509:./include/linux/atomic/atomic-instrumented.h **** /**
 510:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc() - atomic increment with full ordering
 511:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 512:./include/linux/atomic/atomic-instrumented.h ****  *
 513:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with full ordering.
 514:./include/linux/atomic/atomic-instrumented.h ****  *
 515:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc() there.
 516:./include/linux/atomic/atomic-instrumented.h ****  *
 517:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 518:./include/linux/atomic/atomic-instrumented.h ****  */
 519:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 520:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc(atomic_t *v)
 521:./include/linux/atomic/atomic-instrumented.h **** {
 522:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 523:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 524:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc(v);
 525:./include/linux/atomic/atomic-instrumented.h **** }
 526:./include/linux/atomic/atomic-instrumented.h **** 
 527:./include/linux/atomic/atomic-instrumented.h **** /**
 528:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_acquire() - atomic increment with acquire ordering
 529:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 530:./include/linux/atomic/atomic-instrumented.h ****  *
 531:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
 532:./include/linux/atomic/atomic-instrumented.h ****  *
 533:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_acquire() there.
 534:./include/linux/atomic/atomic-instrumented.h ****  *
 535:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 536:./include/linux/atomic/atomic-instrumented.h ****  */
 537:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 538:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_acquire(atomic_t *v)
 539:./include/linux/atomic/atomic-instrumented.h **** {
 540:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 541:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_acquire(v);
 542:./include/linux/atomic/atomic-instrumented.h **** }
 543:./include/linux/atomic/atomic-instrumented.h **** 
 544:./include/linux/atomic/atomic-instrumented.h **** /**
 545:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_release() - atomic increment with release ordering
 546:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZnep12.s 			page 86


 547:./include/linux/atomic/atomic-instrumented.h ****  *
 548:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with release ordering.
 549:./include/linux/atomic/atomic-instrumented.h ****  *
 550:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_release() there.
 551:./include/linux/atomic/atomic-instrumented.h ****  *
 552:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 553:./include/linux/atomic/atomic-instrumented.h ****  */
 554:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 555:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_release(atomic_t *v)
 556:./include/linux/atomic/atomic-instrumented.h **** {
 557:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 558:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 559:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_release(v);
 560:./include/linux/atomic/atomic-instrumented.h **** }
 561:./include/linux/atomic/atomic-instrumented.h **** 
 562:./include/linux/atomic/atomic-instrumented.h **** /**
 563:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_inc_relaxed() - atomic increment with relaxed ordering
 564:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 565:./include/linux/atomic/atomic-instrumented.h ****  *
 566:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
 567:./include/linux/atomic/atomic-instrumented.h ****  *
 568:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_inc_relaxed() there.
 569:./include/linux/atomic/atomic-instrumented.h ****  *
 570:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 571:./include/linux/atomic/atomic-instrumented.h ****  */
 572:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 573:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_inc_relaxed(atomic_t *v)
 574:./include/linux/atomic/atomic-instrumented.h **** {
 575:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 576:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_inc_relaxed(v);
 577:./include/linux/atomic/atomic-instrumented.h **** }
 578:./include/linux/atomic/atomic-instrumented.h **** 
 579:./include/linux/atomic/atomic-instrumented.h **** /**
 580:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec() - atomic decrement with relaxed ordering
 581:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 582:./include/linux/atomic/atomic-instrumented.h ****  *
 583:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 584:./include/linux/atomic/atomic-instrumented.h ****  *
 585:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec() there.
 586:./include/linux/atomic/atomic-instrumented.h ****  *
 587:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 588:./include/linux/atomic/atomic-instrumented.h ****  */
 589:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 590:./include/linux/atomic/atomic-instrumented.h **** atomic_dec(atomic_t *v)
 591:./include/linux/atomic/atomic-instrumented.h **** {
 592:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 593:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_dec(v);
 594:./include/linux/atomic/atomic-instrumented.h **** }
 595:./include/linux/atomic/atomic-instrumented.h **** 
 596:./include/linux/atomic/atomic-instrumented.h **** /**
 597:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return() - atomic decrement with full ordering
 598:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 599:./include/linux/atomic/atomic-instrumented.h ****  *
 600:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
 601:./include/linux/atomic/atomic-instrumented.h ****  *
 602:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return() there.
 603:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 87


 604:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 605:./include/linux/atomic/atomic-instrumented.h ****  */
 606:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 607:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return(atomic_t *v)
 608:./include/linux/atomic/atomic-instrumented.h **** {
 609:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 610:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 611:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return(v);
 612:./include/linux/atomic/atomic-instrumented.h **** }
 613:./include/linux/atomic/atomic-instrumented.h **** 
 614:./include/linux/atomic/atomic-instrumented.h **** /**
 615:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_acquire() - atomic decrement with acquire ordering
 616:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 617:./include/linux/atomic/atomic-instrumented.h ****  *
 618:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
 619:./include/linux/atomic/atomic-instrumented.h ****  *
 620:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_acquire() there.
 621:./include/linux/atomic/atomic-instrumented.h ****  *
 622:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 623:./include/linux/atomic/atomic-instrumented.h ****  */
 624:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 625:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_acquire(atomic_t *v)
 626:./include/linux/atomic/atomic-instrumented.h **** {
 627:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 628:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_acquire(v);
 629:./include/linux/atomic/atomic-instrumented.h **** }
 630:./include/linux/atomic/atomic-instrumented.h **** 
 631:./include/linux/atomic/atomic-instrumented.h **** /**
 632:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_release() - atomic decrement with release ordering
 633:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 634:./include/linux/atomic/atomic-instrumented.h ****  *
 635:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with release ordering.
 636:./include/linux/atomic/atomic-instrumented.h ****  *
 637:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_release() there.
 638:./include/linux/atomic/atomic-instrumented.h ****  *
 639:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 640:./include/linux/atomic/atomic-instrumented.h ****  */
 641:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 642:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_release(atomic_t *v)
 643:./include/linux/atomic/atomic-instrumented.h **** {
 644:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 645:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 646:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_release(v);
 647:./include/linux/atomic/atomic-instrumented.h **** }
 648:./include/linux/atomic/atomic-instrumented.h **** 
 649:./include/linux/atomic/atomic-instrumented.h **** /**
 650:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_return_relaxed() - atomic decrement with relaxed ordering
 651:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 652:./include/linux/atomic/atomic-instrumented.h ****  *
 653:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 654:./include/linux/atomic/atomic-instrumented.h ****  *
 655:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_return_relaxed() there.
 656:./include/linux/atomic/atomic-instrumented.h ****  *
 657:./include/linux/atomic/atomic-instrumented.h ****  * Return: The updated value of @v.
 658:./include/linux/atomic/atomic-instrumented.h ****  */
 659:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 660:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_return_relaxed(atomic_t *v)
ARM GAS  /tmp/ccZnep12.s 			page 88


 661:./include/linux/atomic/atomic-instrumented.h **** {
 662:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 663:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_return_relaxed(v);
 664:./include/linux/atomic/atomic-instrumented.h **** }
 665:./include/linux/atomic/atomic-instrumented.h **** 
 666:./include/linux/atomic/atomic-instrumented.h **** /**
 667:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec() - atomic decrement with full ordering
 668:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 669:./include/linux/atomic/atomic-instrumented.h ****  *
 670:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
 671:./include/linux/atomic/atomic-instrumented.h ****  *
 672:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec() there.
 673:./include/linux/atomic/atomic-instrumented.h ****  *
 674:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 675:./include/linux/atomic/atomic-instrumented.h ****  */
 676:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 677:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec(atomic_t *v)
 678:./include/linux/atomic/atomic-instrumented.h **** {
 679:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 680:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 681:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec(v);
 682:./include/linux/atomic/atomic-instrumented.h **** }
 683:./include/linux/atomic/atomic-instrumented.h **** 
 684:./include/linux/atomic/atomic-instrumented.h **** /**
 685:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_acquire() - atomic decrement with acquire ordering
 686:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 687:./include/linux/atomic/atomic-instrumented.h ****  *
 688:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
 689:./include/linux/atomic/atomic-instrumented.h ****  *
 690:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_acquire() there.
 691:./include/linux/atomic/atomic-instrumented.h ****  *
 692:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 693:./include/linux/atomic/atomic-instrumented.h ****  */
 694:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 695:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_acquire(atomic_t *v)
 696:./include/linux/atomic/atomic-instrumented.h **** {
 697:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 698:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_acquire(v);
 699:./include/linux/atomic/atomic-instrumented.h **** }
 700:./include/linux/atomic/atomic-instrumented.h **** 
 701:./include/linux/atomic/atomic-instrumented.h **** /**
 702:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_release() - atomic decrement with release ordering
 703:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 704:./include/linux/atomic/atomic-instrumented.h ****  *
 705:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with release ordering.
 706:./include/linux/atomic/atomic-instrumented.h ****  *
 707:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_release() there.
 708:./include/linux/atomic/atomic-instrumented.h ****  *
 709:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 710:./include/linux/atomic/atomic-instrumented.h ****  */
 711:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 712:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_release(atomic_t *v)
 713:./include/linux/atomic/atomic-instrumented.h **** {
 714:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 715:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 716:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_release(v);
 717:./include/linux/atomic/atomic-instrumented.h **** }
ARM GAS  /tmp/ccZnep12.s 			page 89


 718:./include/linux/atomic/atomic-instrumented.h **** 
 719:./include/linux/atomic/atomic-instrumented.h **** /**
 720:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_dec_relaxed() - atomic decrement with relaxed ordering
 721:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 722:./include/linux/atomic/atomic-instrumented.h ****  *
 723:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
 724:./include/linux/atomic/atomic-instrumented.h ****  *
 725:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_dec_relaxed() there.
 726:./include/linux/atomic/atomic-instrumented.h ****  *
 727:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 728:./include/linux/atomic/atomic-instrumented.h ****  */
 729:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 730:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_dec_relaxed(atomic_t *v)
 731:./include/linux/atomic/atomic-instrumented.h **** {
 732:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 733:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_dec_relaxed(v);
 734:./include/linux/atomic/atomic-instrumented.h **** }
 735:./include/linux/atomic/atomic-instrumented.h **** 
 736:./include/linux/atomic/atomic-instrumented.h **** /**
 737:./include/linux/atomic/atomic-instrumented.h ****  * atomic_and() - atomic bitwise AND with relaxed ordering
 738:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 739:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 740:./include/linux/atomic/atomic-instrumented.h ****  *
 741:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
 742:./include/linux/atomic/atomic-instrumented.h ****  *
 743:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_and() there.
 744:./include/linux/atomic/atomic-instrumented.h ****  *
 745:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 746:./include/linux/atomic/atomic-instrumented.h ****  */
 747:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 748:./include/linux/atomic/atomic-instrumented.h **** atomic_and(int i, atomic_t *v)
 749:./include/linux/atomic/atomic-instrumented.h **** {
 750:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 751:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_and(i, v);
 752:./include/linux/atomic/atomic-instrumented.h **** }
 753:./include/linux/atomic/atomic-instrumented.h **** 
 754:./include/linux/atomic/atomic-instrumented.h **** /**
 755:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and() - atomic bitwise AND with full ordering
 756:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 757:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 758:./include/linux/atomic/atomic-instrumented.h ****  *
 759:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with full ordering.
 760:./include/linux/atomic/atomic-instrumented.h ****  *
 761:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and() there.
 762:./include/linux/atomic/atomic-instrumented.h ****  *
 763:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 764:./include/linux/atomic/atomic-instrumented.h ****  */
 765:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 766:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and(int i, atomic_t *v)
 767:./include/linux/atomic/atomic-instrumented.h **** {
 768:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 769:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 770:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and(i, v);
 771:./include/linux/atomic/atomic-instrumented.h **** }
 772:./include/linux/atomic/atomic-instrumented.h **** 
 773:./include/linux/atomic/atomic-instrumented.h **** /**
 774:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_acquire() - atomic bitwise AND with acquire ordering
ARM GAS  /tmp/ccZnep12.s 			page 90


 775:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 776:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 777:./include/linux/atomic/atomic-instrumented.h ****  *
 778:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with acquire ordering.
 779:./include/linux/atomic/atomic-instrumented.h ****  *
 780:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_acquire() there.
 781:./include/linux/atomic/atomic-instrumented.h ****  *
 782:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 783:./include/linux/atomic/atomic-instrumented.h ****  */
 784:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 785:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_acquire(int i, atomic_t *v)
 786:./include/linux/atomic/atomic-instrumented.h **** {
 787:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 788:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_acquire(i, v);
 789:./include/linux/atomic/atomic-instrumented.h **** }
 790:./include/linux/atomic/atomic-instrumented.h **** 
 791:./include/linux/atomic/atomic-instrumented.h **** /**
 792:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_release() - atomic bitwise AND with release ordering
 793:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 794:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 795:./include/linux/atomic/atomic-instrumented.h ****  *
 796:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with release ordering.
 797:./include/linux/atomic/atomic-instrumented.h ****  *
 798:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_release() there.
 799:./include/linux/atomic/atomic-instrumented.h ****  *
 800:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 801:./include/linux/atomic/atomic-instrumented.h ****  */
 802:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 803:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_release(int i, atomic_t *v)
 804:./include/linux/atomic/atomic-instrumented.h **** {
 805:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 806:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 807:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_release(i, v);
 808:./include/linux/atomic/atomic-instrumented.h **** }
 809:./include/linux/atomic/atomic-instrumented.h **** 
 810:./include/linux/atomic/atomic-instrumented.h **** /**
 811:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_and_relaxed() - atomic bitwise AND with relaxed ordering
 812:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 813:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 814:./include/linux/atomic/atomic-instrumented.h ****  *
 815:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
 816:./include/linux/atomic/atomic-instrumented.h ****  *
 817:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_and_relaxed() there.
 818:./include/linux/atomic/atomic-instrumented.h ****  *
 819:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 820:./include/linux/atomic/atomic-instrumented.h ****  */
 821:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 822:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_and_relaxed(int i, atomic_t *v)
 823:./include/linux/atomic/atomic-instrumented.h **** {
 824:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 825:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_and_relaxed(i, v);
 826:./include/linux/atomic/atomic-instrumented.h **** }
 827:./include/linux/atomic/atomic-instrumented.h **** 
 828:./include/linux/atomic/atomic-instrumented.h **** /**
 829:./include/linux/atomic/atomic-instrumented.h ****  * atomic_andnot() - atomic bitwise AND NOT with relaxed ordering
 830:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 831:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
ARM GAS  /tmp/ccZnep12.s 			page 91


 832:./include/linux/atomic/atomic-instrumented.h ****  *
 833:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
 834:./include/linux/atomic/atomic-instrumented.h ****  *
 835:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_andnot() there.
 836:./include/linux/atomic/atomic-instrumented.h ****  *
 837:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 838:./include/linux/atomic/atomic-instrumented.h ****  */
 839:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 840:./include/linux/atomic/atomic-instrumented.h **** atomic_andnot(int i, atomic_t *v)
 841:./include/linux/atomic/atomic-instrumented.h **** {
 842:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 843:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_andnot(i, v);
 844:./include/linux/atomic/atomic-instrumented.h **** }
 845:./include/linux/atomic/atomic-instrumented.h **** 
 846:./include/linux/atomic/atomic-instrumented.h **** /**
 847:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot() - atomic bitwise AND NOT with full ordering
 848:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 849:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 850:./include/linux/atomic/atomic-instrumented.h ****  *
 851:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with full ordering.
 852:./include/linux/atomic/atomic-instrumented.h ****  *
 853:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot() there.
 854:./include/linux/atomic/atomic-instrumented.h ****  *
 855:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 856:./include/linux/atomic/atomic-instrumented.h ****  */
 857:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 858:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot(int i, atomic_t *v)
 859:./include/linux/atomic/atomic-instrumented.h **** {
 860:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 861:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 862:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot(i, v);
 863:./include/linux/atomic/atomic-instrumented.h **** }
 864:./include/linux/atomic/atomic-instrumented.h **** 
 865:./include/linux/atomic/atomic-instrumented.h **** /**
 866:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_acquire() - atomic bitwise AND NOT with acquire ordering
 867:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 868:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 869:./include/linux/atomic/atomic-instrumented.h ****  *
 870:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with acquire ordering.
 871:./include/linux/atomic/atomic-instrumented.h ****  *
 872:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_acquire() there.
 873:./include/linux/atomic/atomic-instrumented.h ****  *
 874:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 875:./include/linux/atomic/atomic-instrumented.h ****  */
 876:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 877:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_acquire(int i, atomic_t *v)
 878:./include/linux/atomic/atomic-instrumented.h **** {
 879:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 880:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_acquire(i, v);
 881:./include/linux/atomic/atomic-instrumented.h **** }
 882:./include/linux/atomic/atomic-instrumented.h **** 
 883:./include/linux/atomic/atomic-instrumented.h **** /**
 884:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_release() - atomic bitwise AND NOT with release ordering
 885:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 886:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 887:./include/linux/atomic/atomic-instrumented.h ****  *
 888:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with release ordering.
ARM GAS  /tmp/ccZnep12.s 			page 92


 889:./include/linux/atomic/atomic-instrumented.h ****  *
 890:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_release() there.
 891:./include/linux/atomic/atomic-instrumented.h ****  *
 892:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 893:./include/linux/atomic/atomic-instrumented.h ****  */
 894:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 895:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_release(int i, atomic_t *v)
 896:./include/linux/atomic/atomic-instrumented.h **** {
 897:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 898:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 899:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_release(i, v);
 900:./include/linux/atomic/atomic-instrumented.h **** }
 901:./include/linux/atomic/atomic-instrumented.h **** 
 902:./include/linux/atomic/atomic-instrumented.h **** /**
 903:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_andnot_relaxed() - atomic bitwise AND NOT with relaxed ordering
 904:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 905:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 906:./include/linux/atomic/atomic-instrumented.h ****  *
 907:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
 908:./include/linux/atomic/atomic-instrumented.h ****  *
 909:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_andnot_relaxed() there.
 910:./include/linux/atomic/atomic-instrumented.h ****  *
 911:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 912:./include/linux/atomic/atomic-instrumented.h ****  */
 913:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 914:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_andnot_relaxed(int i, atomic_t *v)
 915:./include/linux/atomic/atomic-instrumented.h **** {
 916:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 917:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_andnot_relaxed(i, v);
 918:./include/linux/atomic/atomic-instrumented.h **** }
 919:./include/linux/atomic/atomic-instrumented.h **** 
 920:./include/linux/atomic/atomic-instrumented.h **** /**
 921:./include/linux/atomic/atomic-instrumented.h ****  * atomic_or() - atomic bitwise OR with relaxed ordering
 922:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 923:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 924:./include/linux/atomic/atomic-instrumented.h ****  *
 925:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
 926:./include/linux/atomic/atomic-instrumented.h ****  *
 927:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_or() there.
 928:./include/linux/atomic/atomic-instrumented.h ****  *
 929:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
 930:./include/linux/atomic/atomic-instrumented.h ****  */
 931:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
 932:./include/linux/atomic/atomic-instrumented.h **** atomic_or(int i, atomic_t *v)
 933:./include/linux/atomic/atomic-instrumented.h **** {
 934:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 935:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_or(i, v);
 936:./include/linux/atomic/atomic-instrumented.h **** }
 937:./include/linux/atomic/atomic-instrumented.h **** 
 938:./include/linux/atomic/atomic-instrumented.h **** /**
 939:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or() - atomic bitwise OR with full ordering
 940:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 941:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 942:./include/linux/atomic/atomic-instrumented.h ****  *
 943:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with full ordering.
 944:./include/linux/atomic/atomic-instrumented.h ****  *
 945:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or() there.
ARM GAS  /tmp/ccZnep12.s 			page 93


 946:./include/linux/atomic/atomic-instrumented.h ****  *
 947:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 948:./include/linux/atomic/atomic-instrumented.h ****  */
 949:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 950:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or(int i, atomic_t *v)
 951:./include/linux/atomic/atomic-instrumented.h **** {
 952:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 953:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 954:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or(i, v);
 955:./include/linux/atomic/atomic-instrumented.h **** }
 956:./include/linux/atomic/atomic-instrumented.h **** 
 957:./include/linux/atomic/atomic-instrumented.h **** /**
 958:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_acquire() - atomic bitwise OR with acquire ordering
 959:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 960:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 961:./include/linux/atomic/atomic-instrumented.h ****  *
 962:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with acquire ordering.
 963:./include/linux/atomic/atomic-instrumented.h ****  *
 964:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_acquire() there.
 965:./include/linux/atomic/atomic-instrumented.h ****  *
 966:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 967:./include/linux/atomic/atomic-instrumented.h ****  */
 968:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 969:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_acquire(int i, atomic_t *v)
 970:./include/linux/atomic/atomic-instrumented.h **** {
 971:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 972:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_acquire(i, v);
 973:./include/linux/atomic/atomic-instrumented.h **** }
 974:./include/linux/atomic/atomic-instrumented.h **** 
 975:./include/linux/atomic/atomic-instrumented.h **** /**
 976:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_release() - atomic bitwise OR with release ordering
 977:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 978:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 979:./include/linux/atomic/atomic-instrumented.h ****  *
 980:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with release ordering.
 981:./include/linux/atomic/atomic-instrumented.h ****  *
 982:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_release() there.
 983:./include/linux/atomic/atomic-instrumented.h ****  *
 984:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
 985:./include/linux/atomic/atomic-instrumented.h ****  */
 986:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
 987:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_release(int i, atomic_t *v)
 988:./include/linux/atomic/atomic-instrumented.h **** {
 989:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
 990:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 991:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_release(i, v);
 992:./include/linux/atomic/atomic-instrumented.h **** }
 993:./include/linux/atomic/atomic-instrumented.h **** 
 994:./include/linux/atomic/atomic-instrumented.h **** /**
 995:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_or_relaxed() - atomic bitwise OR with relaxed ordering
 996:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
 997:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
 998:./include/linux/atomic/atomic-instrumented.h ****  *
 999:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1000:./include/linux/atomic/atomic-instrumented.h ****  *
1001:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_or_relaxed() there.
1002:./include/linux/atomic/atomic-instrumented.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 94


1003:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1004:./include/linux/atomic/atomic-instrumented.h ****  */
1005:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1006:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_or_relaxed(int i, atomic_t *v)
1007:./include/linux/atomic/atomic-instrumented.h **** {
1008:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1009:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_or_relaxed(i, v);
1010:./include/linux/atomic/atomic-instrumented.h **** }
1011:./include/linux/atomic/atomic-instrumented.h **** 
1012:./include/linux/atomic/atomic-instrumented.h **** /**
1013:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xor() - atomic bitwise XOR with relaxed ordering
1014:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1015:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1016:./include/linux/atomic/atomic-instrumented.h ****  *
1017:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1018:./include/linux/atomic/atomic-instrumented.h ****  *
1019:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xor() there.
1020:./include/linux/atomic/atomic-instrumented.h ****  *
1021:./include/linux/atomic/atomic-instrumented.h ****  * Return: Nothing.
1022:./include/linux/atomic/atomic-instrumented.h ****  */
1023:./include/linux/atomic/atomic-instrumented.h **** static __always_inline void
1024:./include/linux/atomic/atomic-instrumented.h **** atomic_xor(int i, atomic_t *v)
1025:./include/linux/atomic/atomic-instrumented.h **** {
1026:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1027:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_xor(i, v);
1028:./include/linux/atomic/atomic-instrumented.h **** }
1029:./include/linux/atomic/atomic-instrumented.h **** 
1030:./include/linux/atomic/atomic-instrumented.h **** /**
1031:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor() - atomic bitwise XOR with full ordering
1032:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1033:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1034:./include/linux/atomic/atomic-instrumented.h ****  *
1035:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with full ordering.
1036:./include/linux/atomic/atomic-instrumented.h ****  *
1037:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor() there.
1038:./include/linux/atomic/atomic-instrumented.h ****  *
1039:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1040:./include/linux/atomic/atomic-instrumented.h ****  */
1041:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1042:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor(int i, atomic_t *v)
1043:./include/linux/atomic/atomic-instrumented.h **** {
1044:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1045:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1046:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor(i, v);
1047:./include/linux/atomic/atomic-instrumented.h **** }
1048:./include/linux/atomic/atomic-instrumented.h **** 
1049:./include/linux/atomic/atomic-instrumented.h **** /**
1050:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_acquire() - atomic bitwise XOR with acquire ordering
1051:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1052:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1053:./include/linux/atomic/atomic-instrumented.h ****  *
1054:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with acquire ordering.
1055:./include/linux/atomic/atomic-instrumented.h ****  *
1056:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_acquire() there.
1057:./include/linux/atomic/atomic-instrumented.h ****  *
1058:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1059:./include/linux/atomic/atomic-instrumented.h ****  */
ARM GAS  /tmp/ccZnep12.s 			page 95


1060:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1061:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_acquire(int i, atomic_t *v)
1062:./include/linux/atomic/atomic-instrumented.h **** {
1063:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1064:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_acquire(i, v);
1065:./include/linux/atomic/atomic-instrumented.h **** }
1066:./include/linux/atomic/atomic-instrumented.h **** 
1067:./include/linux/atomic/atomic-instrumented.h **** /**
1068:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_release() - atomic bitwise XOR with release ordering
1069:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1070:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1071:./include/linux/atomic/atomic-instrumented.h ****  *
1072:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with release ordering.
1073:./include/linux/atomic/atomic-instrumented.h ****  *
1074:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_release() there.
1075:./include/linux/atomic/atomic-instrumented.h ****  *
1076:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1077:./include/linux/atomic/atomic-instrumented.h ****  */
1078:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1079:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_release(int i, atomic_t *v)
1080:./include/linux/atomic/atomic-instrumented.h **** {
1081:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1082:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1083:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_release(i, v);
1084:./include/linux/atomic/atomic-instrumented.h **** }
1085:./include/linux/atomic/atomic-instrumented.h **** 
1086:./include/linux/atomic/atomic-instrumented.h **** /**
1087:./include/linux/atomic/atomic-instrumented.h ****  * atomic_fetch_xor_relaxed() - atomic bitwise XOR with relaxed ordering
1088:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value
1089:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1090:./include/linux/atomic/atomic-instrumented.h ****  *
1091:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1092:./include/linux/atomic/atomic-instrumented.h ****  *
1093:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_fetch_xor_relaxed() there.
1094:./include/linux/atomic/atomic-instrumented.h ****  *
1095:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1096:./include/linux/atomic/atomic-instrumented.h ****  */
1097:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1098:./include/linux/atomic/atomic-instrumented.h **** atomic_fetch_xor_relaxed(int i, atomic_t *v)
1099:./include/linux/atomic/atomic-instrumented.h **** {
1100:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1101:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_fetch_xor_relaxed(i, v);
1102:./include/linux/atomic/atomic-instrumented.h **** }
1103:./include/linux/atomic/atomic-instrumented.h **** 
1104:./include/linux/atomic/atomic-instrumented.h **** /**
1105:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg() - atomic exchange with full ordering
1106:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1107:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1108:./include/linux/atomic/atomic-instrumented.h ****  *
1109:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with full ordering.
1110:./include/linux/atomic/atomic-instrumented.h ****  *
1111:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg() there.
1112:./include/linux/atomic/atomic-instrumented.h ****  *
1113:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1114:./include/linux/atomic/atomic-instrumented.h ****  */
1115:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1116:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg(atomic_t *v, int new)
ARM GAS  /tmp/ccZnep12.s 			page 96


1117:./include/linux/atomic/atomic-instrumented.h **** {
1118:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1119:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1120:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg(v, new);
1121:./include/linux/atomic/atomic-instrumented.h **** }
1122:./include/linux/atomic/atomic-instrumented.h **** 
1123:./include/linux/atomic/atomic-instrumented.h **** /**
1124:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_acquire() - atomic exchange with acquire ordering
1125:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1126:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1127:./include/linux/atomic/atomic-instrumented.h ****  *
1128:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with acquire ordering.
1129:./include/linux/atomic/atomic-instrumented.h ****  *
1130:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_acquire() there.
1131:./include/linux/atomic/atomic-instrumented.h ****  *
1132:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1133:./include/linux/atomic/atomic-instrumented.h ****  */
1134:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1135:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg_acquire(atomic_t *v, int new)
1136:./include/linux/atomic/atomic-instrumented.h **** {
1137:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1138:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_acquire(v, new);
1139:./include/linux/atomic/atomic-instrumented.h **** }
1140:./include/linux/atomic/atomic-instrumented.h **** 
1141:./include/linux/atomic/atomic-instrumented.h **** /**
1142:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_release() - atomic exchange with release ordering
1143:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1144:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1145:./include/linux/atomic/atomic-instrumented.h ****  *
1146:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with release ordering.
1147:./include/linux/atomic/atomic-instrumented.h ****  *
1148:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_release() there.
1149:./include/linux/atomic/atomic-instrumented.h ****  *
1150:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1151:./include/linux/atomic/atomic-instrumented.h ****  */
1152:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1153:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg_release(atomic_t *v, int new)
1154:./include/linux/atomic/atomic-instrumented.h **** {
1155:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1156:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1157:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_release(v, new);
1158:./include/linux/atomic/atomic-instrumented.h **** }
1159:./include/linux/atomic/atomic-instrumented.h **** 
1160:./include/linux/atomic/atomic-instrumented.h **** /**
1161:./include/linux/atomic/atomic-instrumented.h ****  * atomic_xchg_relaxed() - atomic exchange with relaxed ordering
1162:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1163:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1164:./include/linux/atomic/atomic-instrumented.h ****  *
1165:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to @new with relaxed ordering.
1166:./include/linux/atomic/atomic-instrumented.h ****  *
1167:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_xchg_relaxed() there.
1168:./include/linux/atomic/atomic-instrumented.h ****  *
1169:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1170:./include/linux/atomic/atomic-instrumented.h ****  */
1171:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1172:./include/linux/atomic/atomic-instrumented.h **** atomic_xchg_relaxed(atomic_t *v, int new)
1173:./include/linux/atomic/atomic-instrumented.h **** {
ARM GAS  /tmp/ccZnep12.s 			page 97


1174:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1175:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_xchg_relaxed(v, new);
1176:./include/linux/atomic/atomic-instrumented.h **** }
1177:./include/linux/atomic/atomic-instrumented.h **** 
1178:./include/linux/atomic/atomic-instrumented.h **** /**
1179:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg() - atomic compare and exchange with full ordering
1180:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1181:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1182:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1183:./include/linux/atomic/atomic-instrumented.h ****  *
1184:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
1185:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1186:./include/linux/atomic/atomic-instrumented.h ****  *
1187:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg() there.
1188:./include/linux/atomic/atomic-instrumented.h ****  *
1189:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1190:./include/linux/atomic/atomic-instrumented.h ****  */
1191:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1192:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg(atomic_t *v, int old, int new)
1193:./include/linux/atomic/atomic-instrumented.h **** {
1194:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1195:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1196:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg(v, old, new);
1197:./include/linux/atomic/atomic-instrumented.h **** }
1198:./include/linux/atomic/atomic-instrumented.h **** 
1199:./include/linux/atomic/atomic-instrumented.h **** /**
1200:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
1201:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1202:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1203:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1204:./include/linux/atomic/atomic-instrumented.h ****  *
1205:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
1206:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1207:./include/linux/atomic/atomic-instrumented.h ****  *
1208:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_acquire() there.
1209:./include/linux/atomic/atomic-instrumented.h ****  *
1210:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1211:./include/linux/atomic/atomic-instrumented.h ****  */
1212:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1213:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
1214:./include/linux/atomic/atomic-instrumented.h **** {
1215:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1216:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_acquire(v, old, new);
1217:./include/linux/atomic/atomic-instrumented.h **** }
1218:./include/linux/atomic/atomic-instrumented.h **** 
1219:./include/linux/atomic/atomic-instrumented.h **** /**
1220:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_release() - atomic compare and exchange with release ordering
1221:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1222:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1223:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1224:./include/linux/atomic/atomic-instrumented.h ****  *
1225:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
1226:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1227:./include/linux/atomic/atomic-instrumented.h ****  *
1228:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_release() there.
1229:./include/linux/atomic/atomic-instrumented.h ****  *
1230:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
ARM GAS  /tmp/ccZnep12.s 			page 98


1231:./include/linux/atomic/atomic-instrumented.h ****  */
1232:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1233:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_release(atomic_t *v, int old, int new)
1234:./include/linux/atomic/atomic-instrumented.h **** {
1235:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1236:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1237:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_release(v, old, new);
1238:./include/linux/atomic/atomic-instrumented.h **** }
1239:./include/linux/atomic/atomic-instrumented.h **** 
1240:./include/linux/atomic/atomic-instrumented.h **** /**
1241:./include/linux/atomic/atomic-instrumented.h ****  * atomic_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
1242:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1243:./include/linux/atomic/atomic-instrumented.h ****  * @old: int value to compare with
1244:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1245:./include/linux/atomic/atomic-instrumented.h ****  *
1246:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
1247:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
1248:./include/linux/atomic/atomic-instrumented.h ****  *
1249:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_cmpxchg_relaxed() there.
1250:./include/linux/atomic/atomic-instrumented.h ****  *
1251:./include/linux/atomic/atomic-instrumented.h ****  * Return: The original value of @v.
1252:./include/linux/atomic/atomic-instrumented.h ****  */
1253:./include/linux/atomic/atomic-instrumented.h **** static __always_inline int
1254:./include/linux/atomic/atomic-instrumented.h **** atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
1255:./include/linux/atomic/atomic-instrumented.h **** {
1256:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1257:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_cmpxchg_relaxed(v, old, new);
1258:./include/linux/atomic/atomic-instrumented.h **** }
1259:./include/linux/atomic/atomic-instrumented.h **** 
1260:./include/linux/atomic/atomic-instrumented.h **** /**
1261:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg() - atomic compare and exchange with full ordering
1262:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1263:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1264:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1265:./include/linux/atomic/atomic-instrumented.h ****  *
1266:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
1267:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1268:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1269:./include/linux/atomic/atomic-instrumented.h ****  *
1270:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg() there.
1271:./include/linux/atomic/atomic-instrumented.h ****  *
1272:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1273:./include/linux/atomic/atomic-instrumented.h ****  */
1274:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1275:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg(atomic_t *v, int *old, int new)
1276:./include/linux/atomic/atomic-instrumented.h **** {
1277:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1278:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1279:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1280:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg(v, old, new);
1281:./include/linux/atomic/atomic-instrumented.h **** }
1282:./include/linux/atomic/atomic-instrumented.h **** 
1283:./include/linux/atomic/atomic-instrumented.h **** /**
1284:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
1285:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1286:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1287:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
ARM GAS  /tmp/ccZnep12.s 			page 99


1288:./include/linux/atomic/atomic-instrumented.h ****  *
1289:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
1290:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1291:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1292:./include/linux/atomic/atomic-instrumented.h ****  *
1293:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_acquire() there.
1294:./include/linux/atomic/atomic-instrumented.h ****  *
1295:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1296:./include/linux/atomic/atomic-instrumented.h ****  */
1297:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1298:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
1299:./include/linux/atomic/atomic-instrumented.h **** {
1300:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1301:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1302:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_acquire(v, old, new);
1303:./include/linux/atomic/atomic-instrumented.h **** }
1304:./include/linux/atomic/atomic-instrumented.h **** 
1305:./include/linux/atomic/atomic-instrumented.h **** /**
1306:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_release() - atomic compare and exchange with release ordering
1307:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1308:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1309:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1310:./include/linux/atomic/atomic-instrumented.h ****  *
1311:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
1312:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1313:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1314:./include/linux/atomic/atomic-instrumented.h ****  *
1315:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_release() there.
1316:./include/linux/atomic/atomic-instrumented.h ****  *
1317:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1318:./include/linux/atomic/atomic-instrumented.h ****  */
1319:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1320:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
1321:./include/linux/atomic/atomic-instrumented.h **** {
1322:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_release();
1323:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1324:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1325:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_release(v, old, new);
1326:./include/linux/atomic/atomic-instrumented.h **** }
1327:./include/linux/atomic/atomic-instrumented.h **** 
1328:./include/linux/atomic/atomic-instrumented.h **** /**
1329:./include/linux/atomic/atomic-instrumented.h ****  * atomic_try_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
1330:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1331:./include/linux/atomic/atomic-instrumented.h ****  * @old: pointer to int value to compare with
1332:./include/linux/atomic/atomic-instrumented.h ****  * @new: int value to assign
1333:./include/linux/atomic/atomic-instrumented.h ****  *
1334:./include/linux/atomic/atomic-instrumented.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
1335:./include/linux/atomic/atomic-instrumented.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
1336:./include/linux/atomic/atomic-instrumented.h ****  * and relaxed ordering is provided.
1337:./include/linux/atomic/atomic-instrumented.h ****  *
1338:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_try_cmpxchg_relaxed() there.
1339:./include/linux/atomic/atomic-instrumented.h ****  *
1340:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the exchange occured, @false otherwise.
1341:./include/linux/atomic/atomic-instrumented.h ****  */
1342:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1343:./include/linux/atomic/atomic-instrumented.h **** atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
1344:./include/linux/atomic/atomic-instrumented.h **** {
ARM GAS  /tmp/ccZnep12.s 			page 100


1345:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1346:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(old, sizeof(*old));
1347:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_try_cmpxchg_relaxed(v, old, new);
1348:./include/linux/atomic/atomic-instrumented.h **** }
1349:./include/linux/atomic/atomic-instrumented.h **** 
1350:./include/linux/atomic/atomic-instrumented.h **** /**
1351:./include/linux/atomic/atomic-instrumented.h ****  * atomic_sub_and_test() - atomic subtract and test if zero with full ordering
1352:./include/linux/atomic/atomic-instrumented.h ****  * @i: int value to subtract
1353:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1354:./include/linux/atomic/atomic-instrumented.h ****  *
1355:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - @i) with full ordering.
1356:./include/linux/atomic/atomic-instrumented.h ****  *
1357:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_sub_and_test() there.
1358:./include/linux/atomic/atomic-instrumented.h ****  *
1359:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
1360:./include/linux/atomic/atomic-instrumented.h ****  */
1361:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1362:./include/linux/atomic/atomic-instrumented.h **** atomic_sub_and_test(int i, atomic_t *v)
1363:./include/linux/atomic/atomic-instrumented.h **** {
1364:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
1365:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
1366:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_sub_and_test(i, v);
1367:./include/linux/atomic/atomic-instrumented.h **** }
1368:./include/linux/atomic/atomic-instrumented.h **** 
1369:./include/linux/atomic/atomic-instrumented.h **** /**
1370:./include/linux/atomic/atomic-instrumented.h ****  * atomic_dec_and_test() - atomic decrement and test if zero with full ordering
1371:./include/linux/atomic/atomic-instrumented.h ****  * @v: pointer to atomic_t
1372:./include/linux/atomic/atomic-instrumented.h ****  *
1373:./include/linux/atomic/atomic-instrumented.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1374:./include/linux/atomic/atomic-instrumented.h ****  *
1375:./include/linux/atomic/atomic-instrumented.h ****  * Unsafe to use in noinstr code; use raw_atomic_dec_and_test() there.
1376:./include/linux/atomic/atomic-instrumented.h ****  *
1377:./include/linux/atomic/atomic-instrumented.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
1378:./include/linux/atomic/atomic-instrumented.h ****  */
1379:./include/linux/atomic/atomic-instrumented.h **** static __always_inline bool
1380:./include/linux/atomic/atomic-instrumented.h **** atomic_dec_and_test(atomic_t *v)
 1579              		.loc 5 1380 1 is_stmt 1 view .LVU502
1381:./include/linux/atomic/atomic-instrumented.h **** {
1382:./include/linux/atomic/atomic-instrumented.h **** 	kcsan_mb();
 1580              		.loc 5 1382 2 view .LVU503
 1581              		.loc 5 1382 2 view .LVU504
 1582              		.loc 5 1382 2 view .LVU505
1383:./include/linux/atomic/atomic-instrumented.h **** 	instrument_atomic_read_write(v, sizeof(*v));
 1583              		.loc 5 1383 2 view .LVU506
1384:./include/linux/atomic/atomic-instrumented.h **** 	return raw_atomic_dec_and_test(v);
 1584              		.loc 5 1384 2 view .LVU507
 1585              	.LBB274:
 1586              	.LBI274:
1005:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1006:./include/linux/atomic/atomic-arch-fallback.h **** }
1007:./include/linux/atomic/atomic-arch-fallback.h **** 
1008:./include/linux/atomic/atomic-arch-fallback.h **** /**
1009:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return() - atomic increment with full ordering
1010:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1011:./include/linux/atomic/atomic-arch-fallback.h ****  *
1012:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with full ordering.
1013:./include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 101


1014:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return() elsewhere.
1015:./include/linux/atomic/atomic-arch-fallback.h ****  *
1016:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1017:./include/linux/atomic/atomic-arch-fallback.h ****  */
1018:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1019:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return(atomic_t *v)
1020:./include/linux/atomic/atomic-arch-fallback.h **** {
1021:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return)
1022:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1023:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1024:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1025:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1026:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_inc_return_relaxed(v);
1027:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1028:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1029:./include/linux/atomic/atomic-arch-fallback.h **** #else
1030:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return(1, v);
1031:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1032:./include/linux/atomic/atomic-arch-fallback.h **** }
1033:./include/linux/atomic/atomic-arch-fallback.h **** 
1034:./include/linux/atomic/atomic-arch-fallback.h **** /**
1035:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_acquire() - atomic increment with acquire ordering
1036:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1037:./include/linux/atomic/atomic-arch-fallback.h ****  *
1038:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
1039:./include/linux/atomic/atomic-arch-fallback.h ****  *
1040:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_acquire() elsewhere.
1041:./include/linux/atomic/atomic-arch-fallback.h ****  *
1042:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1043:./include/linux/atomic/atomic-arch-fallback.h ****  */
1044:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1045:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_acquire(atomic_t *v)
1046:./include/linux/atomic/atomic-arch-fallback.h **** {
1047:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_acquire)
1048:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_acquire(v);
1049:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1050:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_inc_return_relaxed(v);
1051:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1052:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1053:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1054:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1055:./include/linux/atomic/atomic-arch-fallback.h **** #else
1056:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_acquire(1, v);
1057:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1058:./include/linux/atomic/atomic-arch-fallback.h **** }
1059:./include/linux/atomic/atomic-arch-fallback.h **** 
1060:./include/linux/atomic/atomic-arch-fallback.h **** /**
1061:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_release() - atomic increment with release ordering
1062:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1063:./include/linux/atomic/atomic-arch-fallback.h ****  *
1064:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with release ordering.
1065:./include/linux/atomic/atomic-arch-fallback.h ****  *
1066:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_release() elsewhere.
1067:./include/linux/atomic/atomic-arch-fallback.h ****  *
1068:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1069:./include/linux/atomic/atomic-arch-fallback.h ****  */
1070:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
ARM GAS  /tmp/ccZnep12.s 			page 102


1071:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_release(atomic_t *v)
1072:./include/linux/atomic/atomic-arch-fallback.h **** {
1073:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_release)
1074:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_release(v);
1075:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return_relaxed)
1076:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1077:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_relaxed(v);
1078:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1079:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1080:./include/linux/atomic/atomic-arch-fallback.h **** #else
1081:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_release(1, v);
1082:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1083:./include/linux/atomic/atomic-arch-fallback.h **** }
1084:./include/linux/atomic/atomic-arch-fallback.h **** 
1085:./include/linux/atomic/atomic-arch-fallback.h **** /**
1086:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_inc_return_relaxed() - atomic increment with relaxed ordering
1087:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1088:./include/linux/atomic/atomic-arch-fallback.h ****  *
1089:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
1090:./include/linux/atomic/atomic-arch-fallback.h ****  *
1091:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_inc_return_relaxed() elsewhere.
1092:./include/linux/atomic/atomic-arch-fallback.h ****  *
1093:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1094:./include/linux/atomic/atomic-arch-fallback.h ****  */
1095:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1096:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_inc_return_relaxed(atomic_t *v)
1097:./include/linux/atomic/atomic-arch-fallback.h **** {
1098:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_inc_return_relaxed)
1099:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return_relaxed(v);
1100:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_inc_return)
1101:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_inc_return(v);
1102:./include/linux/atomic/atomic-arch-fallback.h **** #else
1103:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_add_return_relaxed(1, v);
1104:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1105:./include/linux/atomic/atomic-arch-fallback.h **** }
1106:./include/linux/atomic/atomic-arch-fallback.h **** 
1107:./include/linux/atomic/atomic-arch-fallback.h **** /**
1108:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc() - atomic increment with full ordering
1109:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1110:./include/linux/atomic/atomic-arch-fallback.h ****  *
1111:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with full ordering.
1112:./include/linux/atomic/atomic-arch-fallback.h ****  *
1113:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc() elsewhere.
1114:./include/linux/atomic/atomic-arch-fallback.h ****  *
1115:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1116:./include/linux/atomic/atomic-arch-fallback.h ****  */
1117:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1118:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc(atomic_t *v)
1119:./include/linux/atomic/atomic-arch-fallback.h **** {
1120:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc)
1121:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1122:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1123:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1124:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1125:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_inc_relaxed(v);
1126:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1127:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
ARM GAS  /tmp/ccZnep12.s 			page 103


1128:./include/linux/atomic/atomic-arch-fallback.h **** #else
1129:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add(1, v);
1130:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1131:./include/linux/atomic/atomic-arch-fallback.h **** }
1132:./include/linux/atomic/atomic-arch-fallback.h **** 
1133:./include/linux/atomic/atomic-arch-fallback.h **** /**
1134:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_acquire() - atomic increment with acquire ordering
1135:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1136:./include/linux/atomic/atomic-arch-fallback.h ****  *
1137:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with acquire ordering.
1138:./include/linux/atomic/atomic-arch-fallback.h ****  *
1139:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_acquire() elsewhere.
1140:./include/linux/atomic/atomic-arch-fallback.h ****  *
1141:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1142:./include/linux/atomic/atomic-arch-fallback.h ****  */
1143:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1144:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_acquire(atomic_t *v)
1145:./include/linux/atomic/atomic-arch-fallback.h **** {
1146:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_acquire)
1147:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_acquire(v);
1148:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1149:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_inc_relaxed(v);
1150:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1151:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1152:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1153:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1154:./include/linux/atomic/atomic-arch-fallback.h **** #else
1155:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_acquire(1, v);
1156:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1157:./include/linux/atomic/atomic-arch-fallback.h **** }
1158:./include/linux/atomic/atomic-arch-fallback.h **** 
1159:./include/linux/atomic/atomic-arch-fallback.h **** /**
1160:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_release() - atomic increment with release ordering
1161:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1162:./include/linux/atomic/atomic-arch-fallback.h ****  *
1163:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with release ordering.
1164:./include/linux/atomic/atomic-arch-fallback.h ****  *
1165:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_release() elsewhere.
1166:./include/linux/atomic/atomic-arch-fallback.h ****  *
1167:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1168:./include/linux/atomic/atomic-arch-fallback.h ****  */
1169:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1170:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_release(atomic_t *v)
1171:./include/linux/atomic/atomic-arch-fallback.h **** {
1172:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_release)
1173:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_release(v);
1174:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc_relaxed)
1175:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1176:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_relaxed(v);
1177:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1178:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1179:./include/linux/atomic/atomic-arch-fallback.h **** #else
1180:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_release(1, v);
1181:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1182:./include/linux/atomic/atomic-arch-fallback.h **** }
1183:./include/linux/atomic/atomic-arch-fallback.h **** 
1184:./include/linux/atomic/atomic-arch-fallback.h **** /**
ARM GAS  /tmp/ccZnep12.s 			page 104


1185:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_inc_relaxed() - atomic increment with relaxed ordering
1186:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1187:./include/linux/atomic/atomic-arch-fallback.h ****  *
1188:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v + 1) with relaxed ordering.
1189:./include/linux/atomic/atomic-arch-fallback.h ****  *
1190:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_inc_relaxed() elsewhere.
1191:./include/linux/atomic/atomic-arch-fallback.h ****  *
1192:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1193:./include/linux/atomic/atomic-arch-fallback.h ****  */
1194:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1195:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_inc_relaxed(atomic_t *v)
1196:./include/linux/atomic/atomic-arch-fallback.h **** {
1197:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_inc_relaxed)
1198:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc_relaxed(v);
1199:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_inc)
1200:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_inc(v);
1201:./include/linux/atomic/atomic-arch-fallback.h **** #else
1202:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_add_relaxed(1, v);
1203:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1204:./include/linux/atomic/atomic-arch-fallback.h **** }
1205:./include/linux/atomic/atomic-arch-fallback.h **** 
1206:./include/linux/atomic/atomic-arch-fallback.h **** /**
1207:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec() - atomic decrement with relaxed ordering
1208:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1209:./include/linux/atomic/atomic-arch-fallback.h ****  *
1210:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1211:./include/linux/atomic/atomic-arch-fallback.h ****  *
1212:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec() elsewhere.
1213:./include/linux/atomic/atomic-arch-fallback.h ****  *
1214:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1215:./include/linux/atomic/atomic-arch-fallback.h ****  */
1216:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1217:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec(atomic_t *v)
1218:./include/linux/atomic/atomic-arch-fallback.h **** {
1219:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec)
1220:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_dec(v);
1221:./include/linux/atomic/atomic-arch-fallback.h **** #else
1222:./include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_sub(1, v);
1223:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1224:./include/linux/atomic/atomic-arch-fallback.h **** }
1225:./include/linux/atomic/atomic-arch-fallback.h **** 
1226:./include/linux/atomic/atomic-arch-fallback.h **** /**
1227:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return() - atomic decrement with full ordering
1228:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1229:./include/linux/atomic/atomic-arch-fallback.h ****  *
1230:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1231:./include/linux/atomic/atomic-arch-fallback.h ****  *
1232:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return() elsewhere.
1233:./include/linux/atomic/atomic-arch-fallback.h ****  *
1234:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1235:./include/linux/atomic/atomic-arch-fallback.h ****  */
1236:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1237:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return(atomic_t *v)
1238:./include/linux/atomic/atomic-arch-fallback.h **** {
1239:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return)
1240:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1241:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
ARM GAS  /tmp/ccZnep12.s 			page 105


1242:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1243:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1244:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_dec_return_relaxed(v);
1245:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1246:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1247:./include/linux/atomic/atomic-arch-fallback.h **** #else
1248:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return(1, v);
1249:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1250:./include/linux/atomic/atomic-arch-fallback.h **** }
1251:./include/linux/atomic/atomic-arch-fallback.h **** 
1252:./include/linux/atomic/atomic-arch-fallback.h **** /**
1253:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_acquire() - atomic decrement with acquire ordering
1254:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1255:./include/linux/atomic/atomic-arch-fallback.h ****  *
1256:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
1257:./include/linux/atomic/atomic-arch-fallback.h ****  *
1258:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_acquire() elsewhere.
1259:./include/linux/atomic/atomic-arch-fallback.h ****  *
1260:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1261:./include/linux/atomic/atomic-arch-fallback.h ****  */
1262:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1263:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_acquire(atomic_t *v)
1264:./include/linux/atomic/atomic-arch-fallback.h **** {
1265:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_acquire)
1266:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_acquire(v);
1267:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1268:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_dec_return_relaxed(v);
1269:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1270:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1271:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1272:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1273:./include/linux/atomic/atomic-arch-fallback.h **** #else
1274:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_acquire(1, v);
1275:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1276:./include/linux/atomic/atomic-arch-fallback.h **** }
1277:./include/linux/atomic/atomic-arch-fallback.h **** 
1278:./include/linux/atomic/atomic-arch-fallback.h **** /**
1279:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_release() - atomic decrement with release ordering
1280:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1281:./include/linux/atomic/atomic-arch-fallback.h ****  *
1282:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with release ordering.
1283:./include/linux/atomic/atomic-arch-fallback.h ****  *
1284:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_release() elsewhere.
1285:./include/linux/atomic/atomic-arch-fallback.h ****  *
1286:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1287:./include/linux/atomic/atomic-arch-fallback.h ****  */
1288:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1289:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_release(atomic_t *v)
1290:./include/linux/atomic/atomic-arch-fallback.h **** {
1291:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_release)
1292:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_release(v);
1293:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return_relaxed)
1294:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1295:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_relaxed(v);
1296:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1297:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1298:./include/linux/atomic/atomic-arch-fallback.h **** #else
ARM GAS  /tmp/ccZnep12.s 			page 106


1299:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_release(1, v);
1300:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1301:./include/linux/atomic/atomic-arch-fallback.h **** }
1302:./include/linux/atomic/atomic-arch-fallback.h **** 
1303:./include/linux/atomic/atomic-arch-fallback.h **** /**
1304:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_return_relaxed() - atomic decrement with relaxed ordering
1305:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1306:./include/linux/atomic/atomic-arch-fallback.h ****  *
1307:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1308:./include/linux/atomic/atomic-arch-fallback.h ****  *
1309:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_return_relaxed() elsewhere.
1310:./include/linux/atomic/atomic-arch-fallback.h ****  *
1311:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The updated value of @v.
1312:./include/linux/atomic/atomic-arch-fallback.h ****  */
1313:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1314:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_return_relaxed(atomic_t *v)
1315:./include/linux/atomic/atomic-arch-fallback.h **** {
1316:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_return_relaxed)
1317:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return_relaxed(v);
1318:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_dec_return)
1319:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_return(v);
1320:./include/linux/atomic/atomic-arch-fallback.h **** #else
1321:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return_relaxed(1, v);
1322:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1323:./include/linux/atomic/atomic-arch-fallback.h **** }
1324:./include/linux/atomic/atomic-arch-fallback.h **** 
1325:./include/linux/atomic/atomic-arch-fallback.h **** /**
1326:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec() - atomic decrement with full ordering
1327:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1328:./include/linux/atomic/atomic-arch-fallback.h ****  *
1329:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
1330:./include/linux/atomic/atomic-arch-fallback.h ****  *
1331:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec() elsewhere.
1332:./include/linux/atomic/atomic-arch-fallback.h ****  *
1333:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1334:./include/linux/atomic/atomic-arch-fallback.h ****  */
1335:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1336:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec(atomic_t *v)
1337:./include/linux/atomic/atomic-arch-fallback.h **** {
1338:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec)
1339:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1340:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1341:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1342:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1343:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_dec_relaxed(v);
1344:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1345:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1346:./include/linux/atomic/atomic-arch-fallback.h **** #else
1347:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub(1, v);
1348:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1349:./include/linux/atomic/atomic-arch-fallback.h **** }
1350:./include/linux/atomic/atomic-arch-fallback.h **** 
1351:./include/linux/atomic/atomic-arch-fallback.h **** /**
1352:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_acquire() - atomic decrement with acquire ordering
1353:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1354:./include/linux/atomic/atomic-arch-fallback.h ****  *
1355:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with acquire ordering.
ARM GAS  /tmp/ccZnep12.s 			page 107


1356:./include/linux/atomic/atomic-arch-fallback.h ****  *
1357:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_acquire() elsewhere.
1358:./include/linux/atomic/atomic-arch-fallback.h ****  *
1359:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1360:./include/linux/atomic/atomic-arch-fallback.h ****  */
1361:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1362:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_acquire(atomic_t *v)
1363:./include/linux/atomic/atomic-arch-fallback.h **** {
1364:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_acquire)
1365:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_acquire(v);
1366:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1367:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_dec_relaxed(v);
1368:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1369:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1370:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1371:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1372:./include/linux/atomic/atomic-arch-fallback.h **** #else
1373:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_acquire(1, v);
1374:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1375:./include/linux/atomic/atomic-arch-fallback.h **** }
1376:./include/linux/atomic/atomic-arch-fallback.h **** 
1377:./include/linux/atomic/atomic-arch-fallback.h **** /**
1378:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_release() - atomic decrement with release ordering
1379:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1380:./include/linux/atomic/atomic-arch-fallback.h ****  *
1381:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with release ordering.
1382:./include/linux/atomic/atomic-arch-fallback.h ****  *
1383:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_release() elsewhere.
1384:./include/linux/atomic/atomic-arch-fallback.h ****  *
1385:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1386:./include/linux/atomic/atomic-arch-fallback.h ****  */
1387:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1388:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_release(atomic_t *v)
1389:./include/linux/atomic/atomic-arch-fallback.h **** {
1390:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_release)
1391:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_release(v);
1392:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec_relaxed)
1393:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1394:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_relaxed(v);
1395:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1396:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1397:./include/linux/atomic/atomic-arch-fallback.h **** #else
1398:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_release(1, v);
1399:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1400:./include/linux/atomic/atomic-arch-fallback.h **** }
1401:./include/linux/atomic/atomic-arch-fallback.h **** 
1402:./include/linux/atomic/atomic-arch-fallback.h **** /**
1403:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_dec_relaxed() - atomic decrement with relaxed ordering
1404:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1405:./include/linux/atomic/atomic-arch-fallback.h ****  *
1406:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with relaxed ordering.
1407:./include/linux/atomic/atomic-arch-fallback.h ****  *
1408:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_dec_relaxed() elsewhere.
1409:./include/linux/atomic/atomic-arch-fallback.h ****  *
1410:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1411:./include/linux/atomic/atomic-arch-fallback.h ****  */
1412:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
ARM GAS  /tmp/ccZnep12.s 			page 108


1413:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_dec_relaxed(atomic_t *v)
1414:./include/linux/atomic/atomic-arch-fallback.h **** {
1415:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_dec_relaxed)
1416:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec_relaxed(v);
1417:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_dec)
1418:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_dec(v);
1419:./include/linux/atomic/atomic-arch-fallback.h **** #else
1420:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_sub_relaxed(1, v);
1421:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1422:./include/linux/atomic/atomic-arch-fallback.h **** }
1423:./include/linux/atomic/atomic-arch-fallback.h **** 
1424:./include/linux/atomic/atomic-arch-fallback.h **** /**
1425:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_and() - atomic bitwise AND with relaxed ordering
1426:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1427:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1428:./include/linux/atomic/atomic-arch-fallback.h ****  *
1429:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
1430:./include/linux/atomic/atomic-arch-fallback.h ****  *
1431:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_and() elsewhere.
1432:./include/linux/atomic/atomic-arch-fallback.h ****  *
1433:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1434:./include/linux/atomic/atomic-arch-fallback.h ****  */
1435:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1436:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_and(int i, atomic_t *v)
1437:./include/linux/atomic/atomic-arch-fallback.h **** {
1438:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_and(i, v);
1439:./include/linux/atomic/atomic-arch-fallback.h **** }
1440:./include/linux/atomic/atomic-arch-fallback.h **** 
1441:./include/linux/atomic/atomic-arch-fallback.h **** /**
1442:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and() - atomic bitwise AND with full ordering
1443:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1444:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1445:./include/linux/atomic/atomic-arch-fallback.h ****  *
1446:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with full ordering.
1447:./include/linux/atomic/atomic-arch-fallback.h ****  *
1448:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and() elsewhere.
1449:./include/linux/atomic/atomic-arch-fallback.h ****  *
1450:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1451:./include/linux/atomic/atomic-arch-fallback.h ****  */
1452:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1453:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and(int i, atomic_t *v)
1454:./include/linux/atomic/atomic-arch-fallback.h **** {
1455:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and)
1456:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1457:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1458:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1459:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1460:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_and_relaxed(i, v);
1461:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1462:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1463:./include/linux/atomic/atomic-arch-fallback.h **** #else
1464:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and"
1465:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1466:./include/linux/atomic/atomic-arch-fallback.h **** }
1467:./include/linux/atomic/atomic-arch-fallback.h **** 
1468:./include/linux/atomic/atomic-arch-fallback.h **** /**
1469:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_acquire() - atomic bitwise AND with acquire ordering
ARM GAS  /tmp/ccZnep12.s 			page 109


1470:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1471:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1472:./include/linux/atomic/atomic-arch-fallback.h ****  *
1473:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with acquire ordering.
1474:./include/linux/atomic/atomic-arch-fallback.h ****  *
1475:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_acquire() elsewhere.
1476:./include/linux/atomic/atomic-arch-fallback.h ****  *
1477:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1478:./include/linux/atomic/atomic-arch-fallback.h ****  */
1479:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1480:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_acquire(int i, atomic_t *v)
1481:./include/linux/atomic/atomic-arch-fallback.h **** {
1482:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_acquire)
1483:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_acquire(i, v);
1484:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1485:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_and_relaxed(i, v);
1486:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1487:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1488:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1489:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1490:./include/linux/atomic/atomic-arch-fallback.h **** #else
1491:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_acquire"
1492:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1493:./include/linux/atomic/atomic-arch-fallback.h **** }
1494:./include/linux/atomic/atomic-arch-fallback.h **** 
1495:./include/linux/atomic/atomic-arch-fallback.h **** /**
1496:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_release() - atomic bitwise AND with release ordering
1497:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1498:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1499:./include/linux/atomic/atomic-arch-fallback.h ****  *
1500:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with release ordering.
1501:./include/linux/atomic/atomic-arch-fallback.h ****  *
1502:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_release() elsewhere.
1503:./include/linux/atomic/atomic-arch-fallback.h ****  *
1504:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1505:./include/linux/atomic/atomic-arch-fallback.h ****  */
1506:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1507:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_release(int i, atomic_t *v)
1508:./include/linux/atomic/atomic-arch-fallback.h **** {
1509:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_release)
1510:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_release(i, v);
1511:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and_relaxed)
1512:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1513:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_relaxed(i, v);
1514:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1515:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1516:./include/linux/atomic/atomic-arch-fallback.h **** #else
1517:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_release"
1518:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1519:./include/linux/atomic/atomic-arch-fallback.h **** }
1520:./include/linux/atomic/atomic-arch-fallback.h **** 
1521:./include/linux/atomic/atomic-arch-fallback.h **** /**
1522:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_and_relaxed() - atomic bitwise AND with relaxed ordering
1523:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1524:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1525:./include/linux/atomic/atomic-arch-fallback.h ****  *
1526:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & @i) with relaxed ordering.
ARM GAS  /tmp/ccZnep12.s 			page 110


1527:./include/linux/atomic/atomic-arch-fallback.h ****  *
1528:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_and_relaxed() elsewhere.
1529:./include/linux/atomic/atomic-arch-fallback.h ****  *
1530:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1531:./include/linux/atomic/atomic-arch-fallback.h ****  */
1532:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1533:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_and_relaxed(int i, atomic_t *v)
1534:./include/linux/atomic/atomic-arch-fallback.h **** {
1535:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_and_relaxed)
1536:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and_relaxed(i, v);
1537:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_and)
1538:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_and(i, v);
1539:./include/linux/atomic/atomic-arch-fallback.h **** #else
1540:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_and_relaxed"
1541:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1542:./include/linux/atomic/atomic-arch-fallback.h **** }
1543:./include/linux/atomic/atomic-arch-fallback.h **** 
1544:./include/linux/atomic/atomic-arch-fallback.h **** /**
1545:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_andnot() - atomic bitwise AND NOT with relaxed ordering
1546:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1547:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1548:./include/linux/atomic/atomic-arch-fallback.h ****  *
1549:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
1550:./include/linux/atomic/atomic-arch-fallback.h ****  *
1551:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_andnot() elsewhere.
1552:./include/linux/atomic/atomic-arch-fallback.h ****  *
1553:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1554:./include/linux/atomic/atomic-arch-fallback.h ****  */
1555:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1556:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_andnot(int i, atomic_t *v)
1557:./include/linux/atomic/atomic-arch-fallback.h **** {
1558:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_andnot)
1559:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_andnot(i, v);
1560:./include/linux/atomic/atomic-arch-fallback.h **** #else
1561:./include/linux/atomic/atomic-arch-fallback.h **** 	raw_atomic_and(~i, v);
1562:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1563:./include/linux/atomic/atomic-arch-fallback.h **** }
1564:./include/linux/atomic/atomic-arch-fallback.h **** 
1565:./include/linux/atomic/atomic-arch-fallback.h **** /**
1566:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot() - atomic bitwise AND NOT with full ordering
1567:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1568:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1569:./include/linux/atomic/atomic-arch-fallback.h ****  *
1570:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with full ordering.
1571:./include/linux/atomic/atomic-arch-fallback.h ****  *
1572:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot() elsewhere.
1573:./include/linux/atomic/atomic-arch-fallback.h ****  *
1574:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1575:./include/linux/atomic/atomic-arch-fallback.h ****  */
1576:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1577:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot(int i, atomic_t *v)
1578:./include/linux/atomic/atomic-arch-fallback.h **** {
1579:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot)
1580:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1581:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1582:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1583:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
ARM GAS  /tmp/ccZnep12.s 			page 111


1584:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_andnot_relaxed(i, v);
1585:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1586:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1587:./include/linux/atomic/atomic-arch-fallback.h **** #else
1588:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and(~i, v);
1589:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1590:./include/linux/atomic/atomic-arch-fallback.h **** }
1591:./include/linux/atomic/atomic-arch-fallback.h **** 
1592:./include/linux/atomic/atomic-arch-fallback.h **** /**
1593:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_acquire() - atomic bitwise AND NOT with acquire ordering
1594:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1595:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1596:./include/linux/atomic/atomic-arch-fallback.h ****  *
1597:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with acquire ordering.
1598:./include/linux/atomic/atomic-arch-fallback.h ****  *
1599:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_acquire() elsewhere.
1600:./include/linux/atomic/atomic-arch-fallback.h ****  *
1601:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1602:./include/linux/atomic/atomic-arch-fallback.h ****  */
1603:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1604:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_acquire(int i, atomic_t *v)
1605:./include/linux/atomic/atomic-arch-fallback.h **** {
1606:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_acquire)
1607:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_acquire(i, v);
1608:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1609:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_andnot_relaxed(i, v);
1610:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1611:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1612:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1613:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1614:./include/linux/atomic/atomic-arch-fallback.h **** #else
1615:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_acquire(~i, v);
1616:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1617:./include/linux/atomic/atomic-arch-fallback.h **** }
1618:./include/linux/atomic/atomic-arch-fallback.h **** 
1619:./include/linux/atomic/atomic-arch-fallback.h **** /**
1620:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_release() - atomic bitwise AND NOT with release ordering
1621:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1622:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1623:./include/linux/atomic/atomic-arch-fallback.h ****  *
1624:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with release ordering.
1625:./include/linux/atomic/atomic-arch-fallback.h ****  *
1626:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_release() elsewhere.
1627:./include/linux/atomic/atomic-arch-fallback.h ****  *
1628:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1629:./include/linux/atomic/atomic-arch-fallback.h ****  */
1630:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1631:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_release(int i, atomic_t *v)
1632:./include/linux/atomic/atomic-arch-fallback.h **** {
1633:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_release)
1634:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_release(i, v);
1635:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot_relaxed)
1636:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1637:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_relaxed(i, v);
1638:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1639:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1640:./include/linux/atomic/atomic-arch-fallback.h **** #else
ARM GAS  /tmp/ccZnep12.s 			page 112


1641:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_release(~i, v);
1642:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1643:./include/linux/atomic/atomic-arch-fallback.h **** }
1644:./include/linux/atomic/atomic-arch-fallback.h **** 
1645:./include/linux/atomic/atomic-arch-fallback.h **** /**
1646:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_andnot_relaxed() - atomic bitwise AND NOT with relaxed ordering
1647:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1648:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1649:./include/linux/atomic/atomic-arch-fallback.h ****  *
1650:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v & ~@i) with relaxed ordering.
1651:./include/linux/atomic/atomic-arch-fallback.h ****  *
1652:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_andnot_relaxed() elsewhere.
1653:./include/linux/atomic/atomic-arch-fallback.h ****  *
1654:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1655:./include/linux/atomic/atomic-arch-fallback.h ****  */
1656:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1657:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
1658:./include/linux/atomic/atomic-arch-fallback.h **** {
1659:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_andnot_relaxed)
1660:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot_relaxed(i, v);
1661:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_andnot)
1662:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_andnot(i, v);
1663:./include/linux/atomic/atomic-arch-fallback.h **** #else
1664:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_fetch_and_relaxed(~i, v);
1665:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1666:./include/linux/atomic/atomic-arch-fallback.h **** }
1667:./include/linux/atomic/atomic-arch-fallback.h **** 
1668:./include/linux/atomic/atomic-arch-fallback.h **** /**
1669:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_or() - atomic bitwise OR with relaxed ordering
1670:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1671:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1672:./include/linux/atomic/atomic-arch-fallback.h ****  *
1673:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1674:./include/linux/atomic/atomic-arch-fallback.h ****  *
1675:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_or() elsewhere.
1676:./include/linux/atomic/atomic-arch-fallback.h ****  *
1677:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1678:./include/linux/atomic/atomic-arch-fallback.h ****  */
1679:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1680:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_or(int i, atomic_t *v)
1681:./include/linux/atomic/atomic-arch-fallback.h **** {
1682:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_or(i, v);
1683:./include/linux/atomic/atomic-arch-fallback.h **** }
1684:./include/linux/atomic/atomic-arch-fallback.h **** 
1685:./include/linux/atomic/atomic-arch-fallback.h **** /**
1686:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or() - atomic bitwise OR with full ordering
1687:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1688:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1689:./include/linux/atomic/atomic-arch-fallback.h ****  *
1690:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with full ordering.
1691:./include/linux/atomic/atomic-arch-fallback.h ****  *
1692:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or() elsewhere.
1693:./include/linux/atomic/atomic-arch-fallback.h ****  *
1694:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1695:./include/linux/atomic/atomic-arch-fallback.h ****  */
1696:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1697:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or(int i, atomic_t *v)
ARM GAS  /tmp/ccZnep12.s 			page 113


1698:./include/linux/atomic/atomic-arch-fallback.h **** {
1699:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or)
1700:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1701:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1702:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1703:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1704:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_or_relaxed(i, v);
1705:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1706:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1707:./include/linux/atomic/atomic-arch-fallback.h **** #else
1708:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or"
1709:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1710:./include/linux/atomic/atomic-arch-fallback.h **** }
1711:./include/linux/atomic/atomic-arch-fallback.h **** 
1712:./include/linux/atomic/atomic-arch-fallback.h **** /**
1713:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_acquire() - atomic bitwise OR with acquire ordering
1714:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1715:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1716:./include/linux/atomic/atomic-arch-fallback.h ****  *
1717:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with acquire ordering.
1718:./include/linux/atomic/atomic-arch-fallback.h ****  *
1719:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_acquire() elsewhere.
1720:./include/linux/atomic/atomic-arch-fallback.h ****  *
1721:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1722:./include/linux/atomic/atomic-arch-fallback.h ****  */
1723:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1724:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_acquire(int i, atomic_t *v)
1725:./include/linux/atomic/atomic-arch-fallback.h **** {
1726:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_acquire)
1727:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_acquire(i, v);
1728:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1729:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_or_relaxed(i, v);
1730:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1731:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1732:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1733:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1734:./include/linux/atomic/atomic-arch-fallback.h **** #else
1735:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_acquire"
1736:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1737:./include/linux/atomic/atomic-arch-fallback.h **** }
1738:./include/linux/atomic/atomic-arch-fallback.h **** 
1739:./include/linux/atomic/atomic-arch-fallback.h **** /**
1740:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_release() - atomic bitwise OR with release ordering
1741:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1742:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1743:./include/linux/atomic/atomic-arch-fallback.h ****  *
1744:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with release ordering.
1745:./include/linux/atomic/atomic-arch-fallback.h ****  *
1746:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_release() elsewhere.
1747:./include/linux/atomic/atomic-arch-fallback.h ****  *
1748:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1749:./include/linux/atomic/atomic-arch-fallback.h ****  */
1750:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1751:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_release(int i, atomic_t *v)
1752:./include/linux/atomic/atomic-arch-fallback.h **** {
1753:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_release)
1754:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_release(i, v);
ARM GAS  /tmp/ccZnep12.s 			page 114


1755:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or_relaxed)
1756:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1757:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_relaxed(i, v);
1758:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1759:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1760:./include/linux/atomic/atomic-arch-fallback.h **** #else
1761:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_release"
1762:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1763:./include/linux/atomic/atomic-arch-fallback.h **** }
1764:./include/linux/atomic/atomic-arch-fallback.h **** 
1765:./include/linux/atomic/atomic-arch-fallback.h **** /**
1766:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_or_relaxed() - atomic bitwise OR with relaxed ordering
1767:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1768:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1769:./include/linux/atomic/atomic-arch-fallback.h ****  *
1770:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v | @i) with relaxed ordering.
1771:./include/linux/atomic/atomic-arch-fallback.h ****  *
1772:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_or_relaxed() elsewhere.
1773:./include/linux/atomic/atomic-arch-fallback.h ****  *
1774:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1775:./include/linux/atomic/atomic-arch-fallback.h ****  */
1776:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1777:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_or_relaxed(int i, atomic_t *v)
1778:./include/linux/atomic/atomic-arch-fallback.h **** {
1779:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_or_relaxed)
1780:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or_relaxed(i, v);
1781:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_or)
1782:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_or(i, v);
1783:./include/linux/atomic/atomic-arch-fallback.h **** #else
1784:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_or_relaxed"
1785:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1786:./include/linux/atomic/atomic-arch-fallback.h **** }
1787:./include/linux/atomic/atomic-arch-fallback.h **** 
1788:./include/linux/atomic/atomic-arch-fallback.h **** /**
1789:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xor() - atomic bitwise XOR with relaxed ordering
1790:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1791:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1792:./include/linux/atomic/atomic-arch-fallback.h ****  *
1793:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1794:./include/linux/atomic/atomic-arch-fallback.h ****  *
1795:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xor() elsewhere.
1796:./include/linux/atomic/atomic-arch-fallback.h ****  *
1797:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: Nothing.
1798:./include/linux/atomic/atomic-arch-fallback.h ****  */
1799:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline void
1800:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xor(int i, atomic_t *v)
1801:./include/linux/atomic/atomic-arch-fallback.h **** {
1802:./include/linux/atomic/atomic-arch-fallback.h **** 	arch_atomic_xor(i, v);
1803:./include/linux/atomic/atomic-arch-fallback.h **** }
1804:./include/linux/atomic/atomic-arch-fallback.h **** 
1805:./include/linux/atomic/atomic-arch-fallback.h **** /**
1806:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor() - atomic bitwise XOR with full ordering
1807:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1808:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1809:./include/linux/atomic/atomic-arch-fallback.h ****  *
1810:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with full ordering.
1811:./include/linux/atomic/atomic-arch-fallback.h ****  *
ARM GAS  /tmp/ccZnep12.s 			page 115


1812:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor() elsewhere.
1813:./include/linux/atomic/atomic-arch-fallback.h ****  *
1814:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1815:./include/linux/atomic/atomic-arch-fallback.h ****  */
1816:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1817:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor(int i, atomic_t *v)
1818:./include/linux/atomic/atomic-arch-fallback.h **** {
1819:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor)
1820:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1821:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1822:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
1823:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1824:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_fetch_xor_relaxed(i, v);
1825:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1826:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1827:./include/linux/atomic/atomic-arch-fallback.h **** #else
1828:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor"
1829:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1830:./include/linux/atomic/atomic-arch-fallback.h **** }
1831:./include/linux/atomic/atomic-arch-fallback.h **** 
1832:./include/linux/atomic/atomic-arch-fallback.h **** /**
1833:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_acquire() - atomic bitwise XOR with acquire ordering
1834:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1835:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1836:./include/linux/atomic/atomic-arch-fallback.h ****  *
1837:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with acquire ordering.
1838:./include/linux/atomic/atomic-arch-fallback.h ****  *
1839:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_acquire() elsewhere.
1840:./include/linux/atomic/atomic-arch-fallback.h ****  *
1841:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1842:./include/linux/atomic/atomic-arch-fallback.h ****  */
1843:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1844:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_acquire(int i, atomic_t *v)
1845:./include/linux/atomic/atomic-arch-fallback.h **** {
1846:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_acquire)
1847:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_acquire(i, v);
1848:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1849:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_fetch_xor_relaxed(i, v);
1850:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1851:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1852:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1853:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1854:./include/linux/atomic/atomic-arch-fallback.h **** #else
1855:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_acquire"
1856:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1857:./include/linux/atomic/atomic-arch-fallback.h **** }
1858:./include/linux/atomic/atomic-arch-fallback.h **** 
1859:./include/linux/atomic/atomic-arch-fallback.h **** /**
1860:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_release() - atomic bitwise XOR with release ordering
1861:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1862:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1863:./include/linux/atomic/atomic-arch-fallback.h ****  *
1864:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with release ordering.
1865:./include/linux/atomic/atomic-arch-fallback.h ****  *
1866:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_release() elsewhere.
1867:./include/linux/atomic/atomic-arch-fallback.h ****  *
1868:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
ARM GAS  /tmp/ccZnep12.s 			page 116


1869:./include/linux/atomic/atomic-arch-fallback.h ****  */
1870:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1871:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_release(int i, atomic_t *v)
1872:./include/linux/atomic/atomic-arch-fallback.h **** {
1873:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_release)
1874:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_release(i, v);
1875:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor_relaxed)
1876:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1877:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_relaxed(i, v);
1878:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1879:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1880:./include/linux/atomic/atomic-arch-fallback.h **** #else
1881:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_release"
1882:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1883:./include/linux/atomic/atomic-arch-fallback.h **** }
1884:./include/linux/atomic/atomic-arch-fallback.h **** 
1885:./include/linux/atomic/atomic-arch-fallback.h **** /**
1886:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_fetch_xor_relaxed() - atomic bitwise XOR with relaxed ordering
1887:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value
1888:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1889:./include/linux/atomic/atomic-arch-fallback.h ****  *
1890:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v ^ @i) with relaxed ordering.
1891:./include/linux/atomic/atomic-arch-fallback.h ****  *
1892:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_fetch_xor_relaxed() elsewhere.
1893:./include/linux/atomic/atomic-arch-fallback.h ****  *
1894:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1895:./include/linux/atomic/atomic-arch-fallback.h ****  */
1896:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1897:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_fetch_xor_relaxed(int i, atomic_t *v)
1898:./include/linux/atomic/atomic-arch-fallback.h **** {
1899:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_fetch_xor_relaxed)
1900:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor_relaxed(i, v);
1901:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_fetch_xor)
1902:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_fetch_xor(i, v);
1903:./include/linux/atomic/atomic-arch-fallback.h **** #else
1904:./include/linux/atomic/atomic-arch-fallback.h **** #error "Unable to define raw_atomic_fetch_xor_relaxed"
1905:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1906:./include/linux/atomic/atomic-arch-fallback.h **** }
1907:./include/linux/atomic/atomic-arch-fallback.h **** 
1908:./include/linux/atomic/atomic-arch-fallback.h **** /**
1909:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg() - atomic exchange with full ordering
1910:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1911:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1912:./include/linux/atomic/atomic-arch-fallback.h ****  *
1913:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with full ordering.
1914:./include/linux/atomic/atomic-arch-fallback.h ****  *
1915:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg() elsewhere.
1916:./include/linux/atomic/atomic-arch-fallback.h ****  *
1917:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1918:./include/linux/atomic/atomic-arch-fallback.h ****  */
1919:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1920:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg(atomic_t *v, int new)
1921:./include/linux/atomic/atomic-arch-fallback.h **** {
1922:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg)
1923:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1924:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1925:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
ARM GAS  /tmp/ccZnep12.s 			page 117


1926:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
1927:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_xchg_relaxed(v, new);
1928:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
1929:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1930:./include/linux/atomic/atomic-arch-fallback.h **** #else
1931:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg(&v->counter, new);
1932:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1933:./include/linux/atomic/atomic-arch-fallback.h **** }
1934:./include/linux/atomic/atomic-arch-fallback.h **** 
1935:./include/linux/atomic/atomic-arch-fallback.h **** /**
1936:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_acquire() - atomic exchange with acquire ordering
1937:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1938:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1939:./include/linux/atomic/atomic-arch-fallback.h ****  *
1940:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with acquire ordering.
1941:./include/linux/atomic/atomic-arch-fallback.h ****  *
1942:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_acquire() elsewhere.
1943:./include/linux/atomic/atomic-arch-fallback.h ****  *
1944:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1945:./include/linux/atomic/atomic-arch-fallback.h ****  */
1946:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1947:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_acquire(atomic_t *v, int new)
1948:./include/linux/atomic/atomic-arch-fallback.h **** {
1949:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_acquire)
1950:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_acquire(v, new);
1951:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1952:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_xchg_relaxed(v, new);
1953:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
1954:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
1955:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
1956:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
1957:./include/linux/atomic/atomic-arch-fallback.h **** #else
1958:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_acquire(&v->counter, new);
1959:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1960:./include/linux/atomic/atomic-arch-fallback.h **** }
1961:./include/linux/atomic/atomic-arch-fallback.h **** 
1962:./include/linux/atomic/atomic-arch-fallback.h **** /**
1963:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_release() - atomic exchange with release ordering
1964:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1965:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1966:./include/linux/atomic/atomic-arch-fallback.h ****  *
1967:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with release ordering.
1968:./include/linux/atomic/atomic-arch-fallback.h ****  *
1969:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_release() elsewhere.
1970:./include/linux/atomic/atomic-arch-fallback.h ****  *
1971:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1972:./include/linux/atomic/atomic-arch-fallback.h ****  */
1973:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
1974:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_release(atomic_t *v, int new)
1975:./include/linux/atomic/atomic-arch-fallback.h **** {
1976:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_release)
1977:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_release(v, new);
1978:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg_relaxed)
1979:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
1980:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_relaxed(v, new);
1981:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
1982:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
ARM GAS  /tmp/ccZnep12.s 			page 118


1983:./include/linux/atomic/atomic-arch-fallback.h **** #else
1984:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_release(&v->counter, new);
1985:./include/linux/atomic/atomic-arch-fallback.h **** #endif
1986:./include/linux/atomic/atomic-arch-fallback.h **** }
1987:./include/linux/atomic/atomic-arch-fallback.h **** 
1988:./include/linux/atomic/atomic-arch-fallback.h **** /**
1989:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_xchg_relaxed() - atomic exchange with relaxed ordering
1990:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
1991:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
1992:./include/linux/atomic/atomic-arch-fallback.h ****  *
1993:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to @new with relaxed ordering.
1994:./include/linux/atomic/atomic-arch-fallback.h ****  *
1995:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_xchg_relaxed() elsewhere.
1996:./include/linux/atomic/atomic-arch-fallback.h ****  *
1997:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
1998:./include/linux/atomic/atomic-arch-fallback.h ****  */
1999:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2000:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_xchg_relaxed(atomic_t *v, int new)
2001:./include/linux/atomic/atomic-arch-fallback.h **** {
2002:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_xchg_relaxed)
2003:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg_relaxed(v, new);
2004:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_xchg)
2005:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_xchg(v, new);
2006:./include/linux/atomic/atomic-arch-fallback.h **** #else
2007:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_xchg_relaxed(&v->counter, new);
2008:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2009:./include/linux/atomic/atomic-arch-fallback.h **** }
2010:./include/linux/atomic/atomic-arch-fallback.h **** 
2011:./include/linux/atomic/atomic-arch-fallback.h **** /**
2012:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg() - atomic compare and exchange with full ordering
2013:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2014:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2015:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2016:./include/linux/atomic/atomic-arch-fallback.h ****  *
2017:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
2018:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2019:./include/linux/atomic/atomic-arch-fallback.h ****  *
2020:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg() elsewhere.
2021:./include/linux/atomic/atomic-arch-fallback.h ****  *
2022:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2023:./include/linux/atomic/atomic-arch-fallback.h ****  */
2024:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2025:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg(atomic_t *v, int old, int new)
2026:./include/linux/atomic/atomic-arch-fallback.h **** {
2027:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg)
2028:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2029:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2030:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret;
2031:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
2032:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_cmpxchg_relaxed(v, old, new);
2033:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
2034:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2035:./include/linux/atomic/atomic-arch-fallback.h **** #else
2036:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg(&v->counter, old, new);
2037:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2038:./include/linux/atomic/atomic-arch-fallback.h **** }
2039:./include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 119


2040:./include/linux/atomic/atomic-arch-fallback.h **** /**
2041:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
2042:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2043:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2044:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2045:./include/linux/atomic/atomic-arch-fallback.h ****  *
2046:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
2047:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2048:./include/linux/atomic/atomic-arch-fallback.h ****  *
2049:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_acquire() elsewhere.
2050:./include/linux/atomic/atomic-arch-fallback.h ****  *
2051:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2052:./include/linux/atomic/atomic-arch-fallback.h ****  */
2053:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2054:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
2055:./include/linux/atomic/atomic-arch-fallback.h **** {
2056:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_acquire)
2057:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_acquire(v, old, new);
2058:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2059:./include/linux/atomic/atomic-arch-fallback.h **** 	int ret = arch_atomic_cmpxchg_relaxed(v, old, new);
2060:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
2061:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2062:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2063:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2064:./include/linux/atomic/atomic-arch-fallback.h **** #else
2065:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_acquire(&v->counter, old, new);
2066:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2067:./include/linux/atomic/atomic-arch-fallback.h **** }
2068:./include/linux/atomic/atomic-arch-fallback.h **** 
2069:./include/linux/atomic/atomic-arch-fallback.h **** /**
2070:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_release() - atomic compare and exchange with release ordering
2071:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2072:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2073:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2074:./include/linux/atomic/atomic-arch-fallback.h ****  *
2075:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
2076:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2077:./include/linux/atomic/atomic-arch-fallback.h ****  *
2078:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_release() elsewhere.
2079:./include/linux/atomic/atomic-arch-fallback.h ****  *
2080:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2081:./include/linux/atomic/atomic-arch-fallback.h ****  */
2082:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2083:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_release(atomic_t *v, int old, int new)
2084:./include/linux/atomic/atomic-arch-fallback.h **** {
2085:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_release)
2086:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_release(v, old, new);
2087:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg_relaxed)
2088:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
2089:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_relaxed(v, old, new);
2090:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2091:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2092:./include/linux/atomic/atomic-arch-fallback.h **** #else
2093:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_release(&v->counter, old, new);
2094:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2095:./include/linux/atomic/atomic-arch-fallback.h **** }
2096:./include/linux/atomic/atomic-arch-fallback.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 120


2097:./include/linux/atomic/atomic-arch-fallback.h **** /**
2098:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
2099:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2100:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: int value to compare with
2101:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2102:./include/linux/atomic/atomic-arch-fallback.h ****  *
2103:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
2104:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified and relaxed ordering is provided.
2105:./include/linux/atomic/atomic-arch-fallback.h ****  *
2106:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_cmpxchg_relaxed() elsewhere.
2107:./include/linux/atomic/atomic-arch-fallback.h ****  *
2108:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: The original value of @v.
2109:./include/linux/atomic/atomic-arch-fallback.h ****  */
2110:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline int
2111:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
2112:./include/linux/atomic/atomic-arch-fallback.h **** {
2113:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_cmpxchg_relaxed)
2114:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg_relaxed(v, old, new);
2115:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_cmpxchg)
2116:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_cmpxchg(v, old, new);
2117:./include/linux/atomic/atomic-arch-fallback.h **** #else
2118:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_cmpxchg_relaxed(&v->counter, old, new);
2119:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2120:./include/linux/atomic/atomic-arch-fallback.h **** }
2121:./include/linux/atomic/atomic-arch-fallback.h **** 
2122:./include/linux/atomic/atomic-arch-fallback.h **** /**
2123:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg() - atomic compare and exchange with full ordering
2124:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2125:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2126:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2127:./include/linux/atomic/atomic-arch-fallback.h ****  *
2128:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with full ordering.
2129:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2130:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2131:./include/linux/atomic/atomic-arch-fallback.h ****  *
2132:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg() elsewhere.
2133:./include/linux/atomic/atomic-arch-fallback.h ****  *
2134:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2135:./include/linux/atomic/atomic-arch-fallback.h ****  */
2136:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2137:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
2138:./include/linux/atomic/atomic-arch-fallback.h **** {
2139:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg)
2140:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2141:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2142:./include/linux/atomic/atomic-arch-fallback.h **** 	bool ret;
2143:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
2144:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_try_cmpxchg_relaxed(v, old, new);
2145:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
2146:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2147:./include/linux/atomic/atomic-arch-fallback.h **** #else
2148:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2149:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg(v, o, new);
2150:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2151:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2152:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2153:./include/linux/atomic/atomic-arch-fallback.h **** #endif
ARM GAS  /tmp/ccZnep12.s 			page 121


2154:./include/linux/atomic/atomic-arch-fallback.h **** }
2155:./include/linux/atomic/atomic-arch-fallback.h **** 
2156:./include/linux/atomic/atomic-arch-fallback.h **** /**
2157:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_acquire() - atomic compare and exchange with acquire ordering
2158:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2159:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2160:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2161:./include/linux/atomic/atomic-arch-fallback.h ****  *
2162:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with acquire ordering.
2163:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2164:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2165:./include/linux/atomic/atomic-arch-fallback.h ****  *
2166:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_acquire() elsewhere.
2167:./include/linux/atomic/atomic-arch-fallback.h ****  *
2168:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2169:./include/linux/atomic/atomic-arch-fallback.h ****  */
2170:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2171:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
2172:./include/linux/atomic/atomic-arch-fallback.h **** {
2173:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_acquire)
2174:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_acquire(v, old, new);
2175:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2176:./include/linux/atomic/atomic-arch-fallback.h **** 	bool ret = arch_atomic_try_cmpxchg_relaxed(v, old, new);
2177:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_acquire_fence();
2178:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
2179:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2180:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2181:./include/linux/atomic/atomic-arch-fallback.h **** #else
2182:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2183:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_acquire(v, o, new);
2184:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2185:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2186:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2187:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2188:./include/linux/atomic/atomic-arch-fallback.h **** }
2189:./include/linux/atomic/atomic-arch-fallback.h **** 
2190:./include/linux/atomic/atomic-arch-fallback.h **** /**
2191:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_release() - atomic compare and exchange with release ordering
2192:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2193:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2194:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2195:./include/linux/atomic/atomic-arch-fallback.h ****  *
2196:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with release ordering.
2197:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2198:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2199:./include/linux/atomic/atomic-arch-fallback.h ****  *
2200:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_release() elsewhere.
2201:./include/linux/atomic/atomic-arch-fallback.h ****  *
2202:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2203:./include/linux/atomic/atomic-arch-fallback.h ****  */
2204:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2205:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
2206:./include/linux/atomic/atomic-arch-fallback.h **** {
2207:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_release)
2208:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_release(v, old, new);
2209:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg_relaxed)
2210:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_release_fence();
ARM GAS  /tmp/ccZnep12.s 			page 122


2211:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_relaxed(v, old, new);
2212:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2213:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2214:./include/linux/atomic/atomic-arch-fallback.h **** #else
2215:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2216:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_release(v, o, new);
2217:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2218:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2219:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2220:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2221:./include/linux/atomic/atomic-arch-fallback.h **** }
2222:./include/linux/atomic/atomic-arch-fallback.h **** 
2223:./include/linux/atomic/atomic-arch-fallback.h **** /**
2224:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_try_cmpxchg_relaxed() - atomic compare and exchange with relaxed ordering
2225:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2226:./include/linux/atomic/atomic-arch-fallback.h ****  * @old: pointer to int value to compare with
2227:./include/linux/atomic/atomic-arch-fallback.h ****  * @new: int value to assign
2228:./include/linux/atomic/atomic-arch-fallback.h ****  *
2229:./include/linux/atomic/atomic-arch-fallback.h ****  * If (@v == @old), atomically updates @v to @new with relaxed ordering.
2230:./include/linux/atomic/atomic-arch-fallback.h ****  * Otherwise, @v is not modified, @old is updated to the current value of @v,
2231:./include/linux/atomic/atomic-arch-fallback.h ****  * and relaxed ordering is provided.
2232:./include/linux/atomic/atomic-arch-fallback.h ****  *
2233:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_try_cmpxchg_relaxed() elsewhere.
2234:./include/linux/atomic/atomic-arch-fallback.h ****  *
2235:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the exchange occured, @false otherwise.
2236:./include/linux/atomic/atomic-arch-fallback.h ****  */
2237:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2238:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
2239:./include/linux/atomic/atomic-arch-fallback.h **** {
2240:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_try_cmpxchg_relaxed)
2241:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg_relaxed(v, old, new);
2242:./include/linux/atomic/atomic-arch-fallback.h **** #elif defined(arch_atomic_try_cmpxchg)
2243:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_try_cmpxchg(v, old, new);
2244:./include/linux/atomic/atomic-arch-fallback.h **** #else
2245:./include/linux/atomic/atomic-arch-fallback.h **** 	int r, o = *old;
2246:./include/linux/atomic/atomic-arch-fallback.h **** 	r = raw_atomic_cmpxchg_relaxed(v, o, new);
2247:./include/linux/atomic/atomic-arch-fallback.h **** 	if (unlikely(r != o))
2248:./include/linux/atomic/atomic-arch-fallback.h **** 		*old = r;
2249:./include/linux/atomic/atomic-arch-fallback.h **** 	return likely(r == o);
2250:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2251:./include/linux/atomic/atomic-arch-fallback.h **** }
2252:./include/linux/atomic/atomic-arch-fallback.h **** 
2253:./include/linux/atomic/atomic-arch-fallback.h **** /**
2254:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_sub_and_test() - atomic subtract and test if zero with full ordering
2255:./include/linux/atomic/atomic-arch-fallback.h ****  * @i: int value to subtract
2256:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2257:./include/linux/atomic/atomic-arch-fallback.h ****  *
2258:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - @i) with full ordering.
2259:./include/linux/atomic/atomic-arch-fallback.h ****  *
2260:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_sub_and_test() elsewhere.
2261:./include/linux/atomic/atomic-arch-fallback.h ****  *
2262:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
2263:./include/linux/atomic/atomic-arch-fallback.h ****  */
2264:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2265:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_sub_and_test(int i, atomic_t *v)
2266:./include/linux/atomic/atomic-arch-fallback.h **** {
2267:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_sub_and_test)
ARM GAS  /tmp/ccZnep12.s 			page 123


2268:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_sub_and_test(i, v);
2269:./include/linux/atomic/atomic-arch-fallback.h **** #else
2270:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_sub_return(i, v) == 0;
2271:./include/linux/atomic/atomic-arch-fallback.h **** #endif
2272:./include/linux/atomic/atomic-arch-fallback.h **** }
2273:./include/linux/atomic/atomic-arch-fallback.h **** 
2274:./include/linux/atomic/atomic-arch-fallback.h **** /**
2275:./include/linux/atomic/atomic-arch-fallback.h ****  * raw_atomic_dec_and_test() - atomic decrement and test if zero with full ordering
2276:./include/linux/atomic/atomic-arch-fallback.h ****  * @v: pointer to atomic_t
2277:./include/linux/atomic/atomic-arch-fallback.h ****  *
2278:./include/linux/atomic/atomic-arch-fallback.h ****  * Atomically updates @v to (@v - 1) with full ordering.
2279:./include/linux/atomic/atomic-arch-fallback.h ****  *
2280:./include/linux/atomic/atomic-arch-fallback.h ****  * Safe to use in noinstr code; prefer atomic_dec_and_test() elsewhere.
2281:./include/linux/atomic/atomic-arch-fallback.h ****  *
2282:./include/linux/atomic/atomic-arch-fallback.h ****  * Return: @true if the resulting value of @v is zero, @false otherwise.
2283:./include/linux/atomic/atomic-arch-fallback.h ****  */
2284:./include/linux/atomic/atomic-arch-fallback.h **** static __always_inline bool
2285:./include/linux/atomic/atomic-arch-fallback.h **** raw_atomic_dec_and_test(atomic_t *v)
 1587              		.loc 6 2285 1 view .LVU508
2286:./include/linux/atomic/atomic-arch-fallback.h **** {
2287:./include/linux/atomic/atomic-arch-fallback.h **** #if defined(arch_atomic_dec_and_test)
2288:./include/linux/atomic/atomic-arch-fallback.h **** 	return arch_atomic_dec_and_test(v);
2289:./include/linux/atomic/atomic-arch-fallback.h **** #else
2290:./include/linux/atomic/atomic-arch-fallback.h **** 	return raw_atomic_dec_return(v) == 0;
 1588              		.loc 6 2290 2 view .LVU509
 1589              	.LBB275:
 1590              	.LBI275:
1237:./include/linux/atomic/atomic-arch-fallback.h **** {
 1591              		.loc 6 1237 1 view .LVU510
1248:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 1592              		.loc 6 1248 2 view .LVU511
 1593              	.LBB276:
 1594              	.LBI276:
 790:./include/linux/atomic/atomic-arch-fallback.h **** {
 1595              		.loc 6 790 1 view .LVU512
 1596              	.LBB277:
 795:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_pre_full_fence();
 1597              		.loc 6 795 2 view .LVU513
 796:./include/linux/atomic/atomic-arch-fallback.h **** 	ret = arch_atomic_sub_return_relaxed(i, v);
 1598              		.loc 6 796 2 view .LVU514
 1599              	.LBB278:
 1600              	.LBI278:
 1601              		.file 9 "./include/asm-generic/barrier.h"
   1:./include/asm-generic/barrier.h **** /* SPDX-License-Identifier: GPL-2.0-or-later */
   2:./include/asm-generic/barrier.h **** /*
   3:./include/asm-generic/barrier.h ****  * Generic barrier definitions.
   4:./include/asm-generic/barrier.h ****  *
   5:./include/asm-generic/barrier.h ****  * It should be possible to use these on really simple architectures,
   6:./include/asm-generic/barrier.h ****  * but it serves more as a starting point for new ports.
   7:./include/asm-generic/barrier.h ****  *
   8:./include/asm-generic/barrier.h ****  * Copyright (C) 2007 Red Hat, Inc. All Rights Reserved.
   9:./include/asm-generic/barrier.h ****  * Written by David Howells (dhowells@redhat.com)
  10:./include/asm-generic/barrier.h ****  */
  11:./include/asm-generic/barrier.h **** 
  12:./include/asm-generic/barrier.h **** #include <linux/rwonce.h>
  13:./include/asm-generic/barrier.h **** 
  14:./include/asm-generic/barrier.h **** static inline void sync(void)
ARM GAS  /tmp/ccZnep12.s 			page 124


  15:./include/asm-generic/barrier.h **** {
  16:./include/asm-generic/barrier.h **** 	asm volatile("sync" : : : "memory");
  17:./include/asm-generic/barrier.h **** }
  18:./include/asm-generic/barrier.h **** 
  19:./include/asm-generic/barrier.h **** static inline void eieio(void)
  20:./include/asm-generic/barrier.h **** {
  21:./include/asm-generic/barrier.h **** 	asm volatile("eieio" : : : "memory");
  22:./include/asm-generic/barrier.h **** }
  23:./include/asm-generic/barrier.h **** 
  24:./include/asm-generic/barrier.h **** static inline void barrier(void)
 1602              		.loc 9 24 20 view .LVU515
 1603              	.LBB279:
  25:./include/asm-generic/barrier.h **** {
  26:./include/asm-generic/barrier.h **** 	asm volatile("" : : : "memory");
 1604              		.loc 9 26 2 view .LVU516
 1605              	.LBE279:
 1606              	.LBE278:
 797:./include/linux/atomic/atomic-arch-fallback.h **** 	__atomic_post_full_fence();
 1607              		.loc 6 797 2 view .LVU517
 1608              	.LVL139:
 1609              	.LBB280:
 1610              	.LBI280:
 171:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 1611              		.loc 8 171 1 view .LVU518
 1612              	.LBB281:
 1613              		.loc 8 171 1 view .LVU519
 1614              		.loc 8 171 1 view .LVU520
 1615              		.loc 8 171 1 view .LVU521
 1616              		.syntax unified
 1617              	@ 171 "./arch/arm_m/include/asm/atomic.h" 1
 1618              		@ atomic_sub_return
 1619 0016 53E8002F 	1: ldrex   r2, [r3]
 1620 001a A2F10102 	   sub r2, r2, #1
 1621 001e 43E80021 	   strex   r1, r2, [r3]
 1622 0022 91F0000F 	   teq r1, #0
 1623 0026 F6D1     	   bne 1b
 1624              	@ 0 "" 2
 1625              	.LVL140:
 1626              		.loc 8 171 1 view .LVU522
 1627              		.loc 8 171 1 is_stmt 0 view .LVU523
 1628              		.thumb
 1629              		.syntax unified
 1630              	.LBE281:
 1631              	.LBE280:
 798:./include/linux/atomic/atomic-arch-fallback.h **** 	return ret;
 1632              		.loc 6 798 2 is_stmt 1 view .LVU524
 1633              	.LBB282:
 1634              	.LBI282:
  24:./include/asm-generic/barrier.h **** {
 1635              		.loc 9 24 20 view .LVU525
 1636              	.LBB283:
 1637              		.loc 9 26 2 view .LVU526
 1638              	.LBE283:
 1639              	.LBE282:
 799:./include/linux/atomic/atomic-arch-fallback.h **** #else
 1640              		.loc 6 799 2 view .LVU527
 1641              	.LVL141:
ARM GAS  /tmp/ccZnep12.s 			page 125


 799:./include/linux/atomic/atomic-arch-fallback.h **** #else
 1642              		.loc 6 799 2 is_stmt 0 view .LVU528
 1643              	.LBE277:
 1644              	.LBE276:
 1645              	.LBE275:
 1646              	.LBE274:
 1647              	.LBE273:
 200:./fs/pipefs/pipefs.c ****         {
 1648              		.loc 1 200 12 discriminator 1 view .LVU529
 1649 0028 4AB1     		cbz	r2, .L102
 1650              	.L97:
 205:./fs/pipefs/pipefs.c ****     }
 1651              		.loc 1 205 9 is_stmt 1 view .LVU530
 1652 002a 2046     		mov	r0, r4
 1653 002c FFF7FEFF 		bl	spin_unlock
 1654              	.LVL142:
 1655              	.L96:
 207:./fs/pipefs/pipefs.c ****     kfree(dentry);
 1656              		.loc 1 207 5 view .LVU531
 1657              	.LBB284:
 1658              	.LBI284:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1659              		.loc 4 383 20 view .LVU532
 1660              	.LBB285:
 1661              		.loc 4 384 2 view .LVU533
 1662 0030 6868     		ldr	r0, [r5, #4]
 1663 0032 FFF7FEFF 		bl	__sfree__
 1664              	.LVL143:
 1665              		.loc 4 384 2 is_stmt 0 view .LVU534
 1666              	.LBE285:
 1667              	.LBE284:
 208:./fs/pipefs/pipefs.c **** }
 1668              		.loc 1 208 5 is_stmt 1 view .LVU535
 1669              	.LBB286:
 1670              	.LBI286:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 1671              		.loc 4 383 20 view .LVU536
 1672              	.LBB287:
 1673              		.loc 4 384 2 view .LVU537
 1674 0036 2846     		mov	r0, r5
 1675 0038 FFF7FEFF 		bl	__sfree__
 1676              	.LVL144:
 1677              		.loc 4 384 2 is_stmt 0 view .LVU538
 1678              	.LBE287:
 1679              	.LBE286:
 209:./fs/pipefs/pipefs.c **** static void pipefs_delete_dentry(struct pipefs_superblock *sb,struct pipefs_inode* parent_dentry_in
 1680              		.loc 1 209 1 view .LVU539
 1681 003c 38BD     		pop	{r3, r4, r5, pc}
 1682              	.LVL145:
 1683              	.L102:
 202:./fs/pipefs/pipefs.c ****             pipefs_inode_put(dentry->target_inode);
 1684              		.loc 1 202 13 is_stmt 1 view .LVU540
 202:./fs/pipefs/pipefs.c ****             pipefs_inode_put(dentry->target_inode);
 1685              		.loc 1 202 29 is_stmt 0 view .LVU541
 1686 003e AB68     		ldr	r3, [r5, #8]
 1687              	.LVL146:
 1688              	.LBB288:
ARM GAS  /tmp/ccZnep12.s 			page 126


 1689              	.LBI288:
 170:./include/linux/list.h **** }
 171:./include/linux/list.h **** 
 172:./include/linux/list.h **** 
 173:./include/linux/list.h **** /**
 174:./include/linux/list.h ****  * list_add_tail - add a new entry
 175:./include/linux/list.h ****  * @new: new entry to be added
 176:./include/linux/list.h ****  * @head: list head to add it before
 177:./include/linux/list.h ****  *
 178:./include/linux/list.h ****  * Insert a new entry before the specified head.
 179:./include/linux/list.h ****  * This is useful for implementing queues.
 180:./include/linux/list.h ****  */
 181:./include/linux/list.h **** static inline void list_add_tail(struct list_head *new, struct list_head *head)
 182:./include/linux/list.h **** {
 183:./include/linux/list.h **** 	__list_add(new, head->prev, head);
 184:./include/linux/list.h **** }
 185:./include/linux/list.h **** 
 186:./include/linux/list.h **** /*
 187:./include/linux/list.h ****  * Delete a list entry by making the prev/next entries
 188:./include/linux/list.h ****  * point to each other.
 189:./include/linux/list.h ****  *
 190:./include/linux/list.h ****  * This is only for internal list manipulation where we know
 191:./include/linux/list.h ****  * the prev/next entries already!
 192:./include/linux/list.h ****  */
 193:./include/linux/list.h **** static inline void __list_del(struct list_head * prev, struct list_head * next)
 194:./include/linux/list.h **** {
 195:./include/linux/list.h **** 	next->prev = prev;
 196:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 197:./include/linux/list.h **** }
 198:./include/linux/list.h **** 
 199:./include/linux/list.h **** /*
 200:./include/linux/list.h ****  * Delete a list entry and clear the 'prev' pointer.
 201:./include/linux/list.h ****  *
 202:./include/linux/list.h ****  * This is a special-purpose list clearing method used in the networking code
 203:./include/linux/list.h ****  * for lists allocated as per-cpu, where we don't want to incur the extra
 204:./include/linux/list.h ****  * WRITE_ONCE() overhead of a regular list_del_init(). The code that uses this
 205:./include/linux/list.h ****  * needs to check the node 'prev' pointer instead of calling list_empty().
 206:./include/linux/list.h ****  */
 207:./include/linux/list.h **** static inline void __list_del_clearprev(struct list_head *entry)
 208:./include/linux/list.h **** {
 209:./include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 210:./include/linux/list.h **** 	entry->prev = NULL;
 211:./include/linux/list.h **** }
 212:./include/linux/list.h **** 
 213:./include/linux/list.h **** static inline void __list_del_entry(struct list_head *entry)
 214:./include/linux/list.h **** {
 215:./include/linux/list.h **** 	if (!__list_del_entry_valid(entry))
 216:./include/linux/list.h **** 		return;
 217:./include/linux/list.h **** 
 218:./include/linux/list.h **** 	__list_del(entry->prev, entry->next);
 219:./include/linux/list.h **** }
 220:./include/linux/list.h **** 
 221:./include/linux/list.h **** /**
 222:./include/linux/list.h ****  * list_del - deletes entry from list.
 223:./include/linux/list.h ****  * @entry: the element to delete from the list.
 224:./include/linux/list.h ****  * Note: list_empty() on entry does not return true after this, the entry is
 225:./include/linux/list.h ****  * in an undefined state.
ARM GAS  /tmp/ccZnep12.s 			page 127


 226:./include/linux/list.h ****  */
 227:./include/linux/list.h **** static inline void list_del(struct list_head *entry)
 1690              		.loc 7 227 20 is_stmt 1 view .LVU542
 1691              	.LBB289:
 228:./include/linux/list.h **** {
 229:./include/linux/list.h **** 	__list_del_entry(entry);
 1692              		.loc 7 229 2 view .LVU543
 1693              	.LBB290:
 1694              	.LBI290:
 213:./include/linux/list.h **** {
 1695              		.loc 7 213 20 view .LVU544
 1696              	.LBB291:
 215:./include/linux/list.h **** 		return;
 1697              		.loc 7 215 2 view .LVU545
 218:./include/linux/list.h **** }
 1698              		.loc 7 218 2 view .LVU546
 1699 0040 9A69     		ldr	r2, [r3, #24]
 1700 0042 5969     		ldr	r1, [r3, #20]
 1701              	.LVL147:
 1702              	.LBB292:
 1703              	.LBI292:
 193:./include/linux/list.h **** {
 1704              		.loc 7 193 20 view .LVU547
 1705              	.LBB293:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1706              		.loc 7 195 2 view .LVU548
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1707              		.loc 7 195 13 is_stmt 0 view .LVU549
 1708 0044 4A60     		str	r2, [r1, #4]
 196:./include/linux/list.h **** }
 1709              		.loc 7 196 2 is_stmt 1 view .LVU550
 196:./include/linux/list.h **** }
 1710              		.loc 7 196 2 view .LVU551
 1711              	.LBB294:
 196:./include/linux/list.h **** }
 1712              		.loc 7 196 2 view .LVU552
 196:./include/linux/list.h **** }
 1713              		.loc 7 196 2 view .LVU553
 1714              	.LBE294:
 196:./include/linux/list.h **** }
 1715              		.loc 7 196 2 discriminator 2 view .LVU554
 196:./include/linux/list.h **** }
 1716              		.loc 7 196 2 discriminator 2 view .LVU555
 196:./include/linux/list.h **** }
 1717              		.loc 7 196 2 discriminator 2 view .LVU556
 1718 0046 1160     		str	r1, [r2]
 196:./include/linux/list.h **** }
 1719              		.loc 7 196 2 discriminator 2 view .LVU557
 196:./include/linux/list.h **** }
 1720              		.loc 7 196 2 discriminator 2 view .LVU558
 1721              	.LVL148:
 196:./include/linux/list.h **** }
 1722              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU559
 1723              	.LBE293:
 1724              	.LBE292:
 1725              	.LBE291:
 1726              	.LBE290:
ARM GAS  /tmp/ccZnep12.s 			page 128


 230:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 1727              		.loc 7 230 2 is_stmt 1 view .LVU560
 1728              		.loc 7 230 14 is_stmt 0 view .LVU561
 1729 0048 4FF48072 		mov	r2, #256
 1730 004c 5A61     		str	r2, [r3, #20]
 231:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1731              		.loc 7 231 2 is_stmt 1 view .LVU562
 1732              		.loc 7 231 14 is_stmt 0 view .LVU563
 1733 004e 4FF49172 		mov	r2, #290
 1734 0052 9A61     		str	r2, [r3, #24]
 1735              	.LVL149:
 1736              		.loc 7 231 14 view .LVU564
 1737              	.LBE289:
 1738              	.LBE288:
 203:./fs/pipefs/pipefs.c ****         }
 1739              		.loc 1 203 13 is_stmt 1 view .LVU565
 1740 0054 A868     		ldr	r0, [r5, #8]
 1741 0056 FFF7FEFF 		bl	pipefs_inode_put
 1742              	.LVL150:
 1743 005a E6E7     		b	.L97
 1744              	.LVL151:
 1745              	.L99:
 1746              	.LCFI18:
 1747              		.cfi_def_cfa_offset 0
 1748              		.cfi_restore 3
 1749              		.cfi_restore 4
 1750              		.cfi_restore 5
 1751              		.cfi_restore 14
 203:./fs/pipefs/pipefs.c ****         }
 1752              		.loc 1 203 13 is_stmt 0 view .LVU566
 1753 005c 7047     		bx	lr
 1754              		.cfi_endproc
 1755              	.LFE1049:
 1757              		.section	.text.pipefs_release_dentry,"ax",%progbits
 1758              		.align	1
 1759              		.syntax unified
 1760              		.thumb
 1761              		.thumb_func
 1763              	pipefs_release_dentry:
 1764              	.LVL152:
 1765              	.LFB1067:
 557:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *fs_dentry = dentry->d_fsdata;
 1766              		.loc 1 557 56 is_stmt 1 view -0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 0
 1769              		@ frame_needed = 0, uses_anonymous_args = 0
 557:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *fs_dentry = dentry->d_fsdata;
 1770              		.loc 1 557 56 is_stmt 0 view .LVU568
 1771 0000 08B5     		push	{r3, lr}
 1772              	.LCFI19:
 1773              		.cfi_def_cfa_offset 8
 1774              		.cfi_offset 3, -8
 1775              		.cfi_offset 14, -4
 558:./fs/pipefs/pipefs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 1776              		.loc 1 558 5 is_stmt 1 view .LVU569
 558:./fs/pipefs/pipefs.c ****     dentry_put(fs_dentry->target_inode->sb, fs_dentry);
 1777              		.loc 1 558 27 is_stmt 0 view .LVU570
ARM GAS  /tmp/ccZnep12.s 			page 129


 1778 0002 416D     		ldr	r1, [r0, #84]
 1779              	.LVL153:
 559:./fs/pipefs/pipefs.c **** }
 1780              		.loc 1 559 5 is_stmt 1 view .LVU571
 559:./fs/pipefs/pipefs.c **** }
 1781              		.loc 1 559 25 is_stmt 0 view .LVU572
 1782 0004 8B68     		ldr	r3, [r1, #8]
 559:./fs/pipefs/pipefs.c **** }
 1783              		.loc 1 559 5 view .LVU573
 1784 0006 586B     		ldr	r0, [r3, #52]
 1785              	.LVL154:
 559:./fs/pipefs/pipefs.c **** }
 1786              		.loc 1 559 5 view .LVU574
 1787 0008 FFF7FEFF 		bl	dentry_put
 1788              	.LVL155:
 560:./fs/pipefs/pipefs.c **** static int pipefs_rmdir(struct inode *	dir  ,struct dentry *dentry){
 1789              		.loc 1 560 1 view .LVU575
 1790 000c 08BD     		pop	{r3, pc}
 1791              		.cfi_endproc
 1792              	.LFE1067:
 1794              		.section	.text.pipefs_rmdir,"ax",%progbits
 1795              		.align	1
 1796              		.syntax unified
 1797              		.thumb
 1798              		.thumb_func
 1800              	pipefs_rmdir:
 1801              	.LVL156:
 1802              	.LFB1068:
 561:./fs/pipefs/pipefs.c ****     pipefs_release_dentry(dentry);
 1803              		.loc 1 561 68 is_stmt 1 view -0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 561:./fs/pipefs/pipefs.c ****     pipefs_release_dentry(dentry);
 1807              		.loc 1 561 68 is_stmt 0 view .LVU577
 1808 0000 38B5     		push	{r3, r4, r5, lr}
 1809              	.LCFI20:
 1810              		.cfi_def_cfa_offset 16
 1811              		.cfi_offset 3, -16
 1812              		.cfi_offset 4, -12
 1813              		.cfi_offset 5, -8
 1814              		.cfi_offset 14, -4
 1815 0002 0546     		mov	r5, r0
 1816 0004 0C46     		mov	r4, r1
 562:./fs/pipefs/pipefs.c ****     return simple_unlink(dir,dentry);
 1817              		.loc 1 562 5 is_stmt 1 view .LVU578
 1818 0006 0846     		mov	r0, r1
 1819              	.LVL157:
 562:./fs/pipefs/pipefs.c ****     return simple_unlink(dir,dentry);
 1820              		.loc 1 562 5 is_stmt 0 view .LVU579
 1821 0008 FFF7FEFF 		bl	pipefs_release_dentry
 1822              	.LVL158:
 563:./fs/pipefs/pipefs.c **** }
 1823              		.loc 1 563 5 is_stmt 1 view .LVU580
 563:./fs/pipefs/pipefs.c **** }
 1824              		.loc 1 563 12 is_stmt 0 view .LVU581
 1825 000c 2146     		mov	r1, r4
ARM GAS  /tmp/ccZnep12.s 			page 130


 1826 000e 2846     		mov	r0, r5
 1827 0010 FFF7FEFF 		bl	simple_unlink
 1828              	.LVL159:
 564:./fs/pipefs/pipefs.c **** 
 1829              		.loc 1 564 1 view .LVU582
 1830 0014 38BD     		pop	{r3, r4, r5, pc}
 564:./fs/pipefs/pipefs.c **** 
 1831              		.loc 1 564 1 view .LVU583
 1832              		.cfi_endproc
 1833              	.LFE1068:
 1835              		.section	.text.pipefs_delete_dentry,"ax",%progbits
 1836              		.align	1
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1841              	pipefs_delete_dentry:
 1842              	.LVL160:
 1843              	.LFB1050:
 210:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
 1844              		.loc 1 210 140 is_stmt 1 view -0
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 0
 1847              		@ frame_needed = 0, uses_anonymous_args = 0
 210:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_lock(&parent_dentry_inode->lock);
 1848              		.loc 1 210 140 is_stmt 0 view .LVU585
 1849 0000 70B5     		push	{r4, r5, r6, lr}
 1850              	.LCFI21:
 1851              		.cfi_def_cfa_offset 16
 1852              		.cfi_offset 4, -16
 1853              		.cfi_offset 5, -12
 1854              		.cfi_offset 6, -8
 1855              		.cfi_offset 14, -4
 1856 0002 0546     		mov	r5, r0
 1857 0004 1446     		mov	r4, r2
 211:./fs/pipefs/pipefs.c ****     
 1858              		.loc 1 211 5 is_stmt 1 view .LVU586
 211:./fs/pipefs/pipefs.c ****     
 1859              		.loc 1 211 7 is_stmt 0 view .LVU587
 1860 0006 0E46     		mov	r6, r1
 1861 0008 19B1     		cbz	r1, .L108
 211:./fs/pipefs/pipefs.c ****     
 1862              		.loc 1 211 37 is_stmt 1 discriminator 1 view .LVU588
 1863 000a 01F12400 		add	r0, r1, #36
 1864              	.LVL161:
 211:./fs/pipefs/pipefs.c ****     
 1865              		.loc 1 211 37 is_stmt 0 discriminator 1 view .LVU589
 1866 000e FFF7FEFF 		bl	spin_lock
 1867              	.LVL162:
 1868              	.L108:
 213:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1869              		.loc 1 213 5 is_stmt 1 view .LVU590
 213:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1870              		.loc 1 213 23 is_stmt 0 view .LVU591
 1871 0012 A268     		ldr	r2, [r4, #8]
 213:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1872              		.loc 1 213 37 view .LVU592
 1873 0014 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccZnep12.s 			page 131


 213:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1874              		.loc 1 213 46 view .LVU593
 1875 0016 03F47043 		and	r3, r3, #61440
 213:./fs/pipefs/pipefs.c ****         if(!list_empty(&delete_dentry->target_inode->dentry_list_head)){      //Â¶ÇÊûúÁõÆÂΩï‰∏ãÁöÑi
 1876              		.loc 1 213 8 view .LVU594
 1877 001a B3F5804F 		cmp	r3, #16384
 1878 001e 13D0     		beq	.L114
 1879              	.L109:
 220:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode != NULL) spin_unlock(&parent_dentry_inode->lock);
 1880              		.loc 1 220 5 is_stmt 1 view .LVU595
 1881              	.LVL163:
 1882              	.LBB295:
 1883              	.LBI295:
 227:./include/linux/list.h **** {
 1884              		.loc 7 227 20 view .LVU596
 1885              	.LBB296:
 229:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 1886              		.loc 7 229 2 view .LVU597
 1887              	.LBB297:
 1888              	.LBI297:
 213:./include/linux/list.h **** {
 1889              		.loc 7 213 20 view .LVU598
 1890              	.LBB298:
 215:./include/linux/list.h **** 		return;
 1891              		.loc 7 215 2 view .LVU599
 218:./include/linux/list.h **** }
 1892              		.loc 7 218 2 view .LVU600
 1893 0020 2369     		ldr	r3, [r4, #16]
 1894 0022 E268     		ldr	r2, [r4, #12]
 1895              	.LVL164:
 1896              	.LBB299:
 1897              	.LBI299:
 193:./include/linux/list.h **** {
 1898              		.loc 7 193 20 view .LVU601
 1899              	.LBB300:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1900              		.loc 7 195 2 view .LVU602
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 1901              		.loc 7 195 13 is_stmt 0 view .LVU603
 1902 0024 5360     		str	r3, [r2, #4]
 196:./include/linux/list.h **** }
 1903              		.loc 7 196 2 is_stmt 1 view .LVU604
 196:./include/linux/list.h **** }
 1904              		.loc 7 196 2 view .LVU605
 1905              	.LBB301:
 196:./include/linux/list.h **** }
 1906              		.loc 7 196 2 view .LVU606
 196:./include/linux/list.h **** }
 1907              		.loc 7 196 2 view .LVU607
 1908              	.LBE301:
 196:./include/linux/list.h **** }
 1909              		.loc 7 196 2 discriminator 2 view .LVU608
 196:./include/linux/list.h **** }
 1910              		.loc 7 196 2 discriminator 2 view .LVU609
 196:./include/linux/list.h **** }
 1911              		.loc 7 196 2 discriminator 2 view .LVU610
 1912 0026 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccZnep12.s 			page 132


 196:./include/linux/list.h **** }
 1913              		.loc 7 196 2 discriminator 2 view .LVU611
 196:./include/linux/list.h **** }
 1914              		.loc 7 196 2 discriminator 2 view .LVU612
 1915              	.LVL165:
 196:./include/linux/list.h **** }
 1916              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU613
 1917              	.LBE300:
 1918              	.LBE299:
 1919              	.LBE298:
 1920              	.LBE297:
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1921              		.loc 7 230 2 is_stmt 1 view .LVU614
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 1922              		.loc 7 230 14 is_stmt 0 view .LVU615
 1923 0028 4FF48073 		mov	r3, #256
 1924 002c E360     		str	r3, [r4, #12]
 1925              		.loc 7 231 2 is_stmt 1 view .LVU616
 1926              		.loc 7 231 14 is_stmt 0 view .LVU617
 1927 002e 4FF49173 		mov	r3, #290
 1928 0032 2361     		str	r3, [r4, #16]
 1929              	.LVL166:
 1930              		.loc 7 231 14 view .LVU618
 1931              	.LBE296:
 1932              	.LBE295:
 221:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 1933              		.loc 1 221 5 is_stmt 1 view .LVU619
 221:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 1934              		.loc 1 221 7 is_stmt 0 view .LVU620
 1935 0034 1EB1     		cbz	r6, .L112
 221:./fs/pipefs/pipefs.c ****     dentry_put(sb,delete_dentry);
 1936              		.loc 1 221 37 is_stmt 1 discriminator 1 view .LVU621
 1937 0036 06F12400 		add	r0, r6, #36
 1938 003a FFF7FEFF 		bl	spin_unlock
 1939              	.LVL167:
 1940              	.L112:
 222:./fs/pipefs/pipefs.c **** }
 1941              		.loc 1 222 5 view .LVU622
 1942 003e 2146     		mov	r1, r4
 1943 0040 2846     		mov	r0, r5
 1944 0042 FFF7FEFF 		bl	dentry_put
 1945              	.LVL168:
 1946              	.L107:
 223:./fs/pipefs/pipefs.c **** static struct pipefs_superblock* pipefs_superblock_create(void) //ÂàõÂª∫superblock
 1947              		.loc 1 223 1 is_stmt 0 view .LVU623
 1948 0046 70BD     		pop	{r4, r5, r6, pc}
 1949              	.LVL169:
 1950              	.L114:
 214:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 1951              		.loc 1 214 9 is_stmt 1 view .LVU624
 214:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 1952              		.loc 1 214 24 is_stmt 0 view .LVU625
 1953 0048 02F11C01 		add	r1, r2, #28
 1954              	.LVL170:
 1955              	.LBB302:
 1956              	.LBI302:
 232:./include/linux/list.h **** }
ARM GAS  /tmp/ccZnep12.s 			page 133


 233:./include/linux/list.h **** 
 234:./include/linux/list.h **** /**
 235:./include/linux/list.h ****  * list_replace - replace old entry by new one
 236:./include/linux/list.h ****  * @old : the element to be replaced
 237:./include/linux/list.h ****  * @new : the new element to insert
 238:./include/linux/list.h ****  *
 239:./include/linux/list.h ****  * If @old was empty, it will be overwritten.
 240:./include/linux/list.h ****  */
 241:./include/linux/list.h **** static inline void list_replace(struct list_head *old,
 242:./include/linux/list.h **** 				struct list_head *new)
 243:./include/linux/list.h **** {
 244:./include/linux/list.h **** 	new->next = old->next;
 245:./include/linux/list.h **** 	new->next->prev = new;
 246:./include/linux/list.h **** 	new->prev = old->prev;
 247:./include/linux/list.h **** 	new->prev->next = new;
 248:./include/linux/list.h **** }
 249:./include/linux/list.h **** 
 250:./include/linux/list.h **** /**
 251:./include/linux/list.h ****  * list_replace_init - replace old entry by new one and initialize the old one
 252:./include/linux/list.h ****  * @old : the element to be replaced
 253:./include/linux/list.h ****  * @new : the new element to insert
 254:./include/linux/list.h ****  *
 255:./include/linux/list.h ****  * If @old was empty, it will be overwritten.
 256:./include/linux/list.h ****  */
 257:./include/linux/list.h **** static inline void list_replace_init(struct list_head *old,
 258:./include/linux/list.h **** 				     struct list_head *new)
 259:./include/linux/list.h **** {
 260:./include/linux/list.h **** 	list_replace(old, new);
 261:./include/linux/list.h **** 	INIT_LIST_HEAD(old);
 262:./include/linux/list.h **** }
 263:./include/linux/list.h **** 
 264:./include/linux/list.h **** /**
 265:./include/linux/list.h ****  * list_swap - replace entry1 with entry2 and re-add entry1 at entry2's position
 266:./include/linux/list.h ****  * @entry1: the location to place entry2
 267:./include/linux/list.h ****  * @entry2: the location to place entry1
 268:./include/linux/list.h ****  */
 269:./include/linux/list.h **** static inline void list_swap(struct list_head *entry1,
 270:./include/linux/list.h **** 			     struct list_head *entry2)
 271:./include/linux/list.h **** {
 272:./include/linux/list.h **** 	struct list_head *pos = entry2->prev;
 273:./include/linux/list.h **** 
 274:./include/linux/list.h **** 	list_del(entry2);
 275:./include/linux/list.h **** 	list_replace(entry1, entry2);
 276:./include/linux/list.h **** 	if (pos == entry1)
 277:./include/linux/list.h **** 		pos = entry2;
 278:./include/linux/list.h **** 	list_add(entry1, pos);
 279:./include/linux/list.h **** }
 280:./include/linux/list.h **** 
 281:./include/linux/list.h **** /**
 282:./include/linux/list.h ****  * list_del_init - deletes entry from list and reinitialize it.
 283:./include/linux/list.h ****  * @entry: the element to delete from the list.
 284:./include/linux/list.h ****  */
 285:./include/linux/list.h **** static inline void list_del_init(struct list_head *entry)
 286:./include/linux/list.h **** {
 287:./include/linux/list.h **** 	__list_del_entry(entry);
 288:./include/linux/list.h **** 	INIT_LIST_HEAD(entry);
 289:./include/linux/list.h **** }
ARM GAS  /tmp/ccZnep12.s 			page 134


 290:./include/linux/list.h **** 
 291:./include/linux/list.h **** /**
 292:./include/linux/list.h ****  * list_move - delete from one list and add as another's head
 293:./include/linux/list.h ****  * @list: the entry to move
 294:./include/linux/list.h ****  * @head: the head that will precede our entry
 295:./include/linux/list.h ****  */
 296:./include/linux/list.h **** static inline void list_move(struct list_head *list, struct list_head *head)
 297:./include/linux/list.h **** {
 298:./include/linux/list.h **** 	__list_del_entry(list);
 299:./include/linux/list.h **** 	list_add(list, head);
 300:./include/linux/list.h **** }
 301:./include/linux/list.h **** 
 302:./include/linux/list.h **** /**
 303:./include/linux/list.h ****  * list_move_tail - delete from one list and add as another's tail
 304:./include/linux/list.h ****  * @list: the entry to move
 305:./include/linux/list.h ****  * @head: the head that will follow our entry
 306:./include/linux/list.h ****  */
 307:./include/linux/list.h **** static inline void list_move_tail(struct list_head *list,
 308:./include/linux/list.h **** 				  struct list_head *head)
 309:./include/linux/list.h **** {
 310:./include/linux/list.h **** 	__list_del_entry(list);
 311:./include/linux/list.h **** 	list_add_tail(list, head);
 312:./include/linux/list.h **** }
 313:./include/linux/list.h **** 
 314:./include/linux/list.h **** /**
 315:./include/linux/list.h ****  * list_bulk_move_tail - move a subsection of a list to its tail
 316:./include/linux/list.h ****  * @head: the head that will follow our entry
 317:./include/linux/list.h ****  * @first: first entry to move
 318:./include/linux/list.h ****  * @last: last entry to move, can be the same as first
 319:./include/linux/list.h ****  *
 320:./include/linux/list.h ****  * Move all entries between @first and including @last before @head.
 321:./include/linux/list.h ****  * All three entries must belong to the same linked list.
 322:./include/linux/list.h ****  */
 323:./include/linux/list.h **** static inline void list_bulk_move_tail(struct list_head *head,
 324:./include/linux/list.h **** 				       struct list_head *first,
 325:./include/linux/list.h **** 				       struct list_head *last)
 326:./include/linux/list.h **** {
 327:./include/linux/list.h **** 	first->prev->next = last->next;
 328:./include/linux/list.h **** 	last->next->prev = first->prev;
 329:./include/linux/list.h **** 
 330:./include/linux/list.h **** 	head->prev->next = first;
 331:./include/linux/list.h **** 	first->prev = head->prev;
 332:./include/linux/list.h **** 
 333:./include/linux/list.h **** 	last->next = head;
 334:./include/linux/list.h **** 	head->prev = last;
 335:./include/linux/list.h **** }
 336:./include/linux/list.h **** 
 337:./include/linux/list.h **** /**
 338:./include/linux/list.h ****  * list_is_first -- tests whether @list is the first entry in list @head
 339:./include/linux/list.h ****  * @list: the entry to test
 340:./include/linux/list.h ****  * @head: the head of the list
 341:./include/linux/list.h ****  */
 342:./include/linux/list.h **** static inline int list_is_first(const struct list_head *list, const struct list_head *head)
 343:./include/linux/list.h **** {
 344:./include/linux/list.h **** 	return list->prev == head;
 345:./include/linux/list.h **** }
 346:./include/linux/list.h **** 
ARM GAS  /tmp/ccZnep12.s 			page 135


 347:./include/linux/list.h **** /**
 348:./include/linux/list.h ****  * list_is_last - tests whether @list is the last entry in list @head
 349:./include/linux/list.h ****  * @list: the entry to test
 350:./include/linux/list.h ****  * @head: the head of the list
 351:./include/linux/list.h ****  */
 352:./include/linux/list.h **** static inline int list_is_last(const struct list_head *list, const struct list_head *head)
 353:./include/linux/list.h **** {
 354:./include/linux/list.h **** 	return list->next == head;
 355:./include/linux/list.h **** }
 356:./include/linux/list.h **** 
 357:./include/linux/list.h **** /**
 358:./include/linux/list.h ****  * list_is_head - tests whether @list is the list @head
 359:./include/linux/list.h ****  * @list: the entry to test
 360:./include/linux/list.h ****  * @head: the head of the list
 361:./include/linux/list.h ****  */
 362:./include/linux/list.h **** static inline int list_is_head(const struct list_head *list, const struct list_head *head)
 363:./include/linux/list.h **** {
 364:./include/linux/list.h **** 	return list == head;
 365:./include/linux/list.h **** }
 366:./include/linux/list.h **** 
 367:./include/linux/list.h **** /**
 368:./include/linux/list.h ****  * list_empty - tests whether a list is empty
 369:./include/linux/list.h ****  * @head: the list to test.
 370:./include/linux/list.h ****  */
 371:./include/linux/list.h **** static inline int list_empty(const struct list_head *head)
 1957              		.loc 7 371 19 is_stmt 1 view .LVU626
 372:./include/linux/list.h **** {
 373:./include/linux/list.h **** 	return READ_ONCE(head->next) == head;
 1958              		.loc 7 373 2 view .LVU627
 1959              	.LBB303:
 1960              		.loc 7 373 9 view .LVU628
 1961              	.LBB304:
 1962              		.loc 7 373 9 view .LVU629
 1963              		.loc 7 373 9 view .LVU630
 1964              	.LBE304:
 1965              		.loc 7 373 9 discriminator 2 view .LVU631
 1966              		.loc 7 373 9 discriminator 2 view .LVU632
 1967 004c D369     		ldr	r3, [r2, #28]
 1968              	.LVL171:
 1969              		.loc 7 373 9 is_stmt 0 discriminator 2 view .LVU633
 1970              	.LBE303:
 1971              	.LBE302:
 214:./fs/pipefs/pipefs.c ****             if(parent_dentry_inode != NULL) 
 1972              		.loc 1 214 11 discriminator 1 view .LVU634
 1973 004e 9942     		cmp	r1, r3
 1974 0050 E6D0     		beq	.L109
 215:./fs/pipefs/pipefs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 1975              		.loc 1 215 13 is_stmt 1 view .LVU635
 215:./fs/pipefs/pipefs.c ****                 spin_unlock(&parent_dentry_inode->lock);
 1976              		.loc 1 215 15 is_stmt 0 view .LVU636
 1977 0052 002E     		cmp	r6, #0
 1978 0054 F7D0     		beq	.L107
 216:./fs/pipefs/pipefs.c ****             return;
 1979              		.loc 1 216 17 is_stmt 1 view .LVU637
 1980 0056 06F12400 		add	r0, r6, #36
 1981 005a FFF7FEFF 		bl	spin_unlock
 1982              	.LVL172:
ARM GAS  /tmp/ccZnep12.s 			page 136


 217:./fs/pipefs/pipefs.c ****         }
 1983              		.loc 1 217 13 view .LVU638
 1984 005e F2E7     		b	.L107
 1985              		.cfi_endproc
 1986              	.LFE1050:
 1988              		.section	.text.pipefs_unlink,"ax",%progbits
 1989              		.align	1
 1990              		.syntax unified
 1991              		.thumb
 1992              		.thumb_func
 1994              	pipefs_unlink:
 1995              	.LVL173:
 1996              	.LFB1065:
 523:./fs/pipefs/pipefs.c ****     struct pipefs_inode *parent_inode = (struct pipefs_inode *)dir->i_private;
 1997              		.loc 1 523 1 view -0
 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 0
 2000              		@ frame_needed = 0, uses_anonymous_args = 0
 523:./fs/pipefs/pipefs.c ****     struct pipefs_inode *parent_inode = (struct pipefs_inode *)dir->i_private;
 2001              		.loc 1 523 1 is_stmt 0 view .LVU640
 2002 0000 08B5     		push	{r3, lr}
 2003              	.LCFI22:
 2004              		.cfi_def_cfa_offset 8
 2005              		.cfi_offset 3, -8
 2006              		.cfi_offset 14, -4
 524:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *delete_dentry = (struct pipefs_dentry *)dentry->d_fsdata;
 2007              		.loc 1 524 5 is_stmt 1 view .LVU641
 524:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *delete_dentry = (struct pipefs_dentry *)dentry->d_fsdata;
 2008              		.loc 1 524 26 is_stmt 0 view .LVU642
 2009 0002 836D     		ldr	r3, [r0, #88]
 2010              	.LVL174:
 525:./fs/pipefs/pipefs.c ****     pipefs_delete_dentry(parent_inode->sb, parent_inode, delete_dentry);
 2011              		.loc 1 525 5 is_stmt 1 view .LVU643
 526:./fs/pipefs/pipefs.c ****     return 0;
 2012              		.loc 1 526 5 view .LVU644
 2013 0004 4A6D     		ldr	r2, [r1, #84]
 2014 0006 1946     		mov	r1, r3
 2015              	.LVL175:
 526:./fs/pipefs/pipefs.c ****     return 0;
 2016              		.loc 1 526 5 is_stmt 0 view .LVU645
 2017 0008 586B     		ldr	r0, [r3, #52]
 2018              	.LVL176:
 526:./fs/pipefs/pipefs.c ****     return 0;
 2019              		.loc 1 526 5 view .LVU646
 2020 000a FFF7FEFF 		bl	pipefs_delete_dentry
 2021              	.LVL177:
 527:./fs/pipefs/pipefs.c **** }
 2022              		.loc 1 527 5 is_stmt 1 view .LVU647
 528:./fs/pipefs/pipefs.c **** 
 2023              		.loc 1 528 1 is_stmt 0 view .LVU648
 2024 000e 0020     		movs	r0, #0
 2025 0010 08BD     		pop	{r3, pc}
 2026              		.cfi_endproc
 2027              	.LFE1065:
 2029              		.section	.text.pipefs_create_dentry,"ax",%progbits
 2030              		.align	1
 2031              		.syntax unified
ARM GAS  /tmp/ccZnep12.s 			page 137


 2032              		.thumb
 2033              		.thumb_func
 2035              	pipefs_create_dentry:
 2036              	.LVL178:
 2037              	.LFB1045:
 141:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 2038              		.loc 1 141 1 is_stmt 1 view -0
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 0
 2041              		@ frame_needed = 0, uses_anonymous_args = 0
 141:./fs/pipefs/pipefs.c ****     if(parent_dentry_inode == NULL || name == NULL || target_inode == NULL) return NULL;
 2042              		.loc 1 141 1 is_stmt 0 view .LVU650
 2043 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2044              	.LCFI23:
 2045              		.cfi_def_cfa_offset 24
 2046              		.cfi_offset 4, -24
 2047              		.cfi_offset 5, -20
 2048              		.cfi_offset 6, -16
 2049              		.cfi_offset 7, -12
 2050              		.cfi_offset 8, -8
 2051              		.cfi_offset 14, -4
 142:./fs/pipefs/pipefs.c **** 
 2052              		.loc 1 142 5 is_stmt 1 view .LVU651
 142:./fs/pipefs/pipefs.c **** 
 2053              		.loc 1 142 7 is_stmt 0 view .LVU652
 2054 0004 8046     		mov	r8, r0
 2055 0006 0028     		cmp	r0, #0
 2056 0008 47D0     		beq	.L120
 2057 000a 0E46     		mov	r6, r1
 2058 000c 1546     		mov	r5, r2
 142:./fs/pipefs/pipefs.c **** 
 2059              		.loc 1 142 36 discriminator 2 view .LVU653
 2060 000e 002A     		cmp	r2, #0
 2061 0010 45D0     		beq	.L121
 142:./fs/pipefs/pipefs.c **** 
 2062              		.loc 1 142 52 discriminator 4 view .LVU654
 2063 0012 0029     		cmp	r1, #0
 2064 0014 45D0     		beq	.L122
 144:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL)return NULL;
 2065              		.loc 1 144 5 is_stmt 1 view .LVU655
 2066              	.LVL179:
 2067              	.LBB305:
 2068              	.LBI305:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 2069              		.loc 4 379 21 view .LVU656
 2070              	.LBB306:
 380:./include/linux/slab.h **** }
 2071              		.loc 4 380 2 view .LVU657
 380:./include/linux/slab.h **** }
 2072              		.loc 4 380 9 is_stmt 0 view .LVU658
 2073 0016 4FF44C61 		mov	r1, #3264
 2074              	.LVL180:
 380:./include/linux/slab.h **** }
 2075              		.loc 4 380 9 view .LVU659
 2076 001a 1420     		movs	r0, #20
 2077              	.LVL181:
 380:./include/linux/slab.h **** }
ARM GAS  /tmp/ccZnep12.s 			page 138


 2078              		.loc 4 380 9 view .LVU660
 2079 001c FFF7FEFF 		bl	__smalloc__
 2080              	.LVL182:
 380:./include/linux/slab.h **** }
 2081              		.loc 4 380 9 view .LVU661
 2082              	.LBE306:
 2083              	.LBE305:
 145:./fs/pipefs/pipefs.c ****     new_dentry->magic = MAGIC;
 2084              		.loc 1 145 5 is_stmt 1 view .LVU662
 145:./fs/pipefs/pipefs.c ****     new_dentry->magic = MAGIC;
 2085              		.loc 1 145 7 is_stmt 0 view .LVU663
 2086 0020 0446     		mov	r4, r0
 2087 0022 90B3     		cbz	r0, .L117
 146:./fs/pipefs/pipefs.c ****     new_dentry->name = NULL;
 2088              		.loc 1 146 5 is_stmt 1 view .LVU664
 146:./fs/pipefs/pipefs.c ****     new_dentry->name = NULL;
 2089              		.loc 1 146 23 is_stmt 0 view .LVU665
 2090 0024 204B     		ldr	r3, .L125
 2091 0026 0360     		str	r3, [r0]
 147:./fs/pipefs/pipefs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 2092              		.loc 1 147 5 is_stmt 1 view .LVU666
 147:./fs/pipefs/pipefs.c ****     new_dentry->name = kmalloc(strlen(name) + 1,GFP_KERNEL);
 2093              		.loc 1 147 22 is_stmt 0 view .LVU667
 2094 0028 0023     		movs	r3, #0
 2095 002a 4360     		str	r3, [r0, #4]
 148:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2096              		.loc 1 148 5 is_stmt 1 view .LVU668
 148:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2097              		.loc 1 148 32 is_stmt 0 view .LVU669
 2098 002c 2846     		mov	r0, r5
 2099              	.LVL183:
 148:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2100              		.loc 1 148 32 view .LVU670
 2101 002e FFF7FEFF 		bl	strlen
 2102              	.LVL184:
 2103              	.LBB307:
 2104              	.LBI307:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 2105              		.loc 4 379 21 is_stmt 1 view .LVU671
 2106              	.LBB308:
 380:./include/linux/slab.h **** }
 2107              		.loc 4 380 2 view .LVU672
 380:./include/linux/slab.h **** }
 2108              		.loc 4 380 9 is_stmt 0 view .LVU673
 2109 0032 4FF44C61 		mov	r1, #3264
 2110 0036 0130     		adds	r0, r0, #1
 2111              	.LVL185:
 380:./include/linux/slab.h **** }
 2112              		.loc 4 380 9 view .LVU674
 2113 0038 FFF7FEFF 		bl	__smalloc__
 2114              	.LVL186:
 380:./include/linux/slab.h **** }
 2115              		.loc 4 380 9 view .LVU675
 2116 003c 0746     		mov	r7, r0
 2117              	.LVL187:
 380:./include/linux/slab.h **** }
 2118              		.loc 4 380 9 view .LVU676
ARM GAS  /tmp/ccZnep12.s 			page 139


 2119              	.LBE308:
 2120              	.LBE307:
 148:./fs/pipefs/pipefs.c ****     if(new_dentry->name  == NULL) {
 2121              		.loc 1 148 22 discriminator 2 view .LVU677
 2122 003e 6060     		str	r0, [r4, #4]
 149:./fs/pipefs/pipefs.c ****         kfree(new_dentry);
 2123              		.loc 1 149 5 is_stmt 1 view .LVU678
 149:./fs/pipefs/pipefs.c ****         kfree(new_dentry);
 2124              		.loc 1 149 7 is_stmt 0 view .LVU679
 2125 0040 30B3     		cbz	r0, .L124
 153:./fs/pipefs/pipefs.c ****     new_dentry->target_inode = target_inode;
 2126              		.loc 1 153 5 is_stmt 1 view .LVU680
 2127 0042 2946     		mov	r1, r5
 2128 0044 FFF7FEFF 		bl	strcpy
 2129              	.LVL188:
 154:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 2130              		.loc 1 154 5 view .LVU681
 154:./fs/pipefs/pipefs.c ****     INIT_LIST_HEAD(&new_dentry->list_node);
 2131              		.loc 1 154 30 is_stmt 0 view .LVU682
 2132 0048 A660     		str	r6, [r4, #8]
 155:./fs/pipefs/pipefs.c ****     
 2133              		.loc 1 155 5 is_stmt 1 view .LVU683
 2134 004a 04F10C05 		add	r5, r4, #12
 2135              	.LVL189:
 2136              	.LBB309:
 2137              	.LBI309:
  35:./include/linux/list.h **** {
 2138              		.loc 7 35 20 view .LVU684
 2139              	.LBB310:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2140              		.loc 7 37 2 view .LVU685
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2141              		.loc 7 37 2 view .LVU686
 2142              	.LBB311:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2143              		.loc 7 37 2 view .LVU687
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2144              		.loc 7 37 2 view .LVU688
 2145              	.LBE311:
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2146              		.loc 7 37 2 discriminator 2 view .LVU689
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2147              		.loc 7 37 2 discriminator 2 view .LVU690
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2148              		.loc 7 37 2 discriminator 2 view .LVU691
 2149 004e E560     		str	r5, [r4, #12]
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2150              		.loc 7 37 2 discriminator 2 view .LVU692
  37:./include/linux/list.h **** 	WRITE_ONCE(list->prev, list);
 2151              		.loc 7 37 2 discriminator 2 view .LVU693
  38:./include/linux/list.h **** }
 2152              		.loc 7 38 2 view .LVU694
  38:./include/linux/list.h **** }
 2153              		.loc 7 38 2 view .LVU695
 2154              	.LBB312:
  38:./include/linux/list.h **** }
 2155              		.loc 7 38 2 view .LVU696
ARM GAS  /tmp/ccZnep12.s 			page 140


  38:./include/linux/list.h **** }
 2156              		.loc 7 38 2 view .LVU697
 2157              	.LBE312:
  38:./include/linux/list.h **** }
 2158              		.loc 7 38 2 discriminator 2 view .LVU698
  38:./include/linux/list.h **** }
 2159              		.loc 7 38 2 discriminator 2 view .LVU699
  38:./include/linux/list.h **** }
 2160              		.loc 7 38 2 discriminator 2 view .LVU700
 2161 0050 2561     		str	r5, [r4, #16]
  38:./include/linux/list.h **** }
 2162              		.loc 7 38 2 discriminator 2 view .LVU701
  38:./include/linux/list.h **** }
 2163              		.loc 7 38 2 discriminator 2 view .LVU702
 2164              	.LVL190:
  38:./include/linux/list.h **** }
 2165              		.loc 7 38 2 is_stmt 0 discriminator 2 view .LVU703
 2166              	.LBE310:
 2167              	.LBE309:
 158:./fs/pipefs/pipefs.c ****     
 2168              		.loc 1 158 5 is_stmt 1 view .LVU704
 2169 0052 06F10C01 		add	r1, r6, #12
 2170              	.LVL191:
 2171              	.LBB313:
 2172              	.LBI313:
 433:./include/linux/atomic/atomic-instrumented.h **** {
 2173              		.loc 5 433 1 view .LVU705
 435:./include/linux/atomic/atomic-instrumented.h **** 	raw_atomic_inc(v);
 2174              		.loc 5 435 2 view .LVU706
 436:./include/linux/atomic/atomic-instrumented.h **** }
 2175              		.loc 5 436 2 view .LVU707
 2176              	.LBB314:
 2177              	.LBI314:
 999:./include/linux/atomic/atomic-arch-fallback.h **** {
 2178              		.loc 6 999 1 view .LVU708
1004:./include/linux/atomic/atomic-arch-fallback.h **** #endif
 2179              		.loc 6 1004 2 view .LVU709
 2180              	.LBB315:
 2181              	.LBI315:
 550:./include/linux/atomic/atomic-arch-fallback.h **** {
 2182              		.loc 6 550 1 view .LVU710
 552:./include/linux/atomic/atomic-arch-fallback.h **** }
 2183              		.loc 6 552 2 view .LVU711
 2184              	.LBB316:
 2185              	.LBI316:
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2186              		.loc 8 170 1 view .LVU712
 2187              	.LBB317:
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2188              		.loc 8 170 1 view .LVU713
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2189              		.loc 8 170 1 view .LVU714
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2190              		.loc 8 170 1 view .LVU715
 2191              		.syntax unified
 2192              	@ 170 "./arch/arm_m/include/asm/atomic.h" 1
 2193              		@ atomic_add
ARM GAS  /tmp/ccZnep12.s 			page 141


 2194 0056 51E8003F 	1: ldrex   r3, [r1]
 2195 005a 03F10103 	   add r3, r3, #1
 2196 005e 41E80032 	   strex   r2, r3, [r1]
 2197 0062 92F0000F 	   teq r2, #0
 2198 0066 F6D1     	   bne 1b
 2199              	@ 0 "" 2
 2200              	.LVL192:
 170:./arch/arm_m/include/asm/atomic.h **** ATOMIC_OPS(sub, -=, sub)
 2201              		.loc 8 170 1 is_stmt 0 view .LVU716
 2202              		.thumb
 2203              		.syntax unified
 2204              	.LBE317:
 2205              	.LBE316:
 2206              	.LBE315:
 2207              	.LBE314:
 2208              	.LBE313:
 161:./fs/pipefs/pipefs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 2209              		.loc 1 161 5 is_stmt 1 view .LVU717
 2210 0068 08F12406 		add	r6, r8, #36
 2211              	.LVL193:
 161:./fs/pipefs/pipefs.c ****     list_add    (&new_dentry->list_node,&parent_dentry_inode->dentry_list_head);
 2212              		.loc 1 161 5 is_stmt 0 view .LVU718
 2213 006c 3046     		mov	r0, r6
 2214 006e FFF7FEFF 		bl	spin_lock
 2215              	.LVL194:
 162:./fs/pipefs/pipefs.c ****     spin_unlock(&parent_dentry_inode->lock);
 2216              		.loc 1 162 5 is_stmt 1 view .LVU719
 2217 0072 08F11C02 		add	r2, r8, #28
 2218              	.LVL195:
 2219              	.LBB318:
 2220              	.LBI318:
 167:./include/linux/list.h **** {
 2221              		.loc 7 167 20 view .LVU720
 2222              	.LBB319:
 169:./include/linux/list.h **** }
 2223              		.loc 7 169 2 view .LVU721
 2224 0076 D8F81C30 		ldr	r3, [r8, #28]
 2225              	.LVL196:
 2226              	.LBB320:
 2227              	.LBI320:
 146:./include/linux/list.h **** 			      struct list_head *prev,
 2228              		.loc 7 146 20 view .LVU722
 2229              	.LBB321:
 150:./include/linux/list.h **** 		return;
 2230              		.loc 7 150 2 view .LVU723
 153:./include/linux/list.h **** 	new->next = next;
 2231              		.loc 7 153 2 view .LVU724
 153:./include/linux/list.h **** 	new->next = next;
 2232              		.loc 7 153 13 is_stmt 0 view .LVU725
 2233 007a 5D60     		str	r5, [r3, #4]
 154:./include/linux/list.h **** 	new->prev = prev;
 2234              		.loc 7 154 2 is_stmt 1 view .LVU726
 154:./include/linux/list.h **** 	new->prev = prev;
 2235              		.loc 7 154 12 is_stmt 0 view .LVU727
 2236 007c E360     		str	r3, [r4, #12]
 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 2237              		.loc 7 155 2 is_stmt 1 view .LVU728
ARM GAS  /tmp/ccZnep12.s 			page 142


 155:./include/linux/list.h **** 	WRITE_ONCE(prev->next, new);
 2238              		.loc 7 155 12 is_stmt 0 view .LVU729
 2239 007e 2261     		str	r2, [r4, #16]
 156:./include/linux/list.h **** }
 2240              		.loc 7 156 2 is_stmt 1 view .LVU730
 156:./include/linux/list.h **** }
 2241              		.loc 7 156 2 view .LVU731
 2242              	.LBB322:
 156:./include/linux/list.h **** }
 2243              		.loc 7 156 2 view .LVU732
 156:./include/linux/list.h **** }
 2244              		.loc 7 156 2 view .LVU733
 2245              	.LBE322:
 156:./include/linux/list.h **** }
 2246              		.loc 7 156 2 discriminator 2 view .LVU734
 156:./include/linux/list.h **** }
 2247              		.loc 7 156 2 discriminator 2 view .LVU735
 156:./include/linux/list.h **** }
 2248              		.loc 7 156 2 discriminator 2 view .LVU736
 2249 0080 C8F81C50 		str	r5, [r8, #28]
 156:./include/linux/list.h **** }
 2250              		.loc 7 156 2 discriminator 3 view .LVU737
 156:./include/linux/list.h **** }
 2251              		.loc 7 156 2 discriminator 3 view .LVU738
 2252              	.LVL197:
 156:./include/linux/list.h **** }
 2253              		.loc 7 156 2 is_stmt 0 discriminator 3 view .LVU739
 2254              	.LBE321:
 2255              	.LBE320:
 2256              	.LBE319:
 2257              	.LBE318:
 163:./fs/pipefs/pipefs.c ****     return new_dentry;
 2258              		.loc 1 163 5 is_stmt 1 view .LVU740
 2259 0084 3046     		mov	r0, r6
 2260 0086 FFF7FEFF 		bl	spin_unlock
 2261              	.LVL198:
 164:./fs/pipefs/pipefs.c **** }
 2262              		.loc 1 164 5 view .LVU741
 2263              	.L117:
 165:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_inode( struct pipefs_superblock *sb,struct pipefs_inode*
 2264              		.loc 1 165 1 is_stmt 0 view .LVU742
 2265 008a 2046     		mov	r0, r4
 2266 008c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2267              	.LVL199:
 2268              	.L124:
 150:./fs/pipefs/pipefs.c ****         return NULL;
 2269              		.loc 1 150 9 is_stmt 1 view .LVU743
 2270              	.LBB323:
 2271              	.LBI323:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 2272              		.loc 4 383 20 view .LVU744
 2273              	.LBB324:
 2274              		.loc 4 384 2 view .LVU745
 2275 0090 2046     		mov	r0, r4
 2276 0092 FFF7FEFF 		bl	__sfree__
 2277              	.LVL200:
 2278              		.loc 4 384 2 is_stmt 0 view .LVU746
ARM GAS  /tmp/ccZnep12.s 			page 143


 2279              	.LBE324:
 2280              	.LBE323:
 151:./fs/pipefs/pipefs.c ****     }
 2281              		.loc 1 151 9 is_stmt 1 view .LVU747
 151:./fs/pipefs/pipefs.c ****     }
 2282              		.loc 1 151 16 is_stmt 0 view .LVU748
 2283 0096 3C46     		mov	r4, r7
 2284              	.LVL201:
 151:./fs/pipefs/pipefs.c ****     }
 2285              		.loc 1 151 16 view .LVU749
 2286 0098 F7E7     		b	.L117
 2287              	.LVL202:
 2288              	.L120:
 142:./fs/pipefs/pipefs.c **** 
 2289              		.loc 1 142 84 discriminator 5 view .LVU750
 2290 009a 0446     		mov	r4, r0
 2291 009c F5E7     		b	.L117
 2292              	.L121:
 142:./fs/pipefs/pipefs.c **** 
 2293              		.loc 1 142 84 discriminator 5 view .LVU751
 2294 009e 1446     		mov	r4, r2
 2295 00a0 F3E7     		b	.L117
 2296              	.L122:
 142:./fs/pipefs/pipefs.c **** 
 2297              		.loc 1 142 84 discriminator 5 view .LVU752
 2298 00a2 0C46     		mov	r4, r1
 2299 00a4 F1E7     		b	.L117
 2300              	.L126:
 2301 00a6 00BF     		.align	2
 2302              	.L125:
 2303 00a8 4E61BC00 		.word	12345678
 2304              		.cfi_endproc
 2305              	.LFE1045:
 2307              		.section	.text.pipefs_create_inode,"ax",%progbits
 2308              		.align	1
 2309              		.syntax unified
 2310              		.thumb
 2311              		.thumb_func
 2313              	pipefs_create_inode:
 2314              	.LVL203:
 2315              	.LFB1046:
 167:./fs/pipefs/pipefs.c ****     struct pipefs_inode * new_inode = pipefs_create_empty_inode(sb,fop,major);
 2316              		.loc 1 167 1 is_stmt 1 view -0
 2317              		.cfi_startproc
 2318              		@ args = 4, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 167:./fs/pipefs/pipefs.c ****     struct pipefs_inode * new_inode = pipefs_create_empty_inode(sb,fop,major);
 2320              		.loc 1 167 1 is_stmt 0 view .LVU754
 2321 0000 70B5     		push	{r4, r5, r6, lr}
 2322              	.LCFI24:
 2323              		.cfi_def_cfa_offset 16
 2324              		.cfi_offset 4, -16
 2325              		.cfi_offset 5, -12
 2326              		.cfi_offset 6, -8
 2327              		.cfi_offset 14, -4
 2328 0002 0646     		mov	r6, r0
 2329 0004 0C46     		mov	r4, r1
ARM GAS  /tmp/ccZnep12.s 			page 144


 2330 0006 1146     		mov	r1, r2
 2331              	.LVL204:
 168:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 2332              		.loc 1 168 5 is_stmt 1 view .LVU755
 168:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 2333              		.loc 1 168 39 is_stmt 0 view .LVU756
 2334 0008 1A46     		mov	r2, r3
 2335              	.LVL205:
 168:./fs/pipefs/pipefs.c ****     if(new_inode == NULL){
 2336              		.loc 1 168 39 view .LVU757
 2337 000a FFF7FEFF 		bl	pipefs_create_empty_inode
 2338              	.LVL206:
 169:./fs/pipefs/pipefs.c ****         return NULL;
 2339              		.loc 1 169 5 is_stmt 1 view .LVU758
 169:./fs/pipefs/pipefs.c ****         return NULL;
 2340              		.loc 1 169 7 is_stmt 0 view .LVU759
 2341 000e 0546     		mov	r5, r0
 2342 0010 E8B1     		cbz	r0, .L129
 172:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
 2343              		.loc 1 172 5 is_stmt 1 view .LVU760
 172:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
 2344              		.loc 1 172 40 is_stmt 0 view .LVU761
 2345 0012 049A     		ldr	r2, [sp, #16]
 2346 0014 0146     		mov	r1, r0
 2347 0016 2046     		mov	r0, r4
 2348              	.LVL207:
 172:./fs/pipefs/pipefs.c ****     if(new_dentry == NULL){
 2349              		.loc 1 172 40 view .LVU762
 2350 0018 FFF7FEFF 		bl	pipefs_create_dentry
 2351              	.LVL208:
 173:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 2352              		.loc 1 173 5 is_stmt 1 view .LVU763
 173:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 2353              		.loc 1 173 7 is_stmt 0 view .LVU764
 2354 001c 0446     		mov	r4, r0
 2355              	.LVL209:
 173:./fs/pipefs/pipefs.c ****         spin_lock(&sb->lock);
 2356              		.loc 1 173 7 view .LVU765
 2357 001e 08B1     		cbz	r0, .L131
 2358              	.LVL210:
 2359              	.L127:
 181:./fs/pipefs/pipefs.c **** static struct pipefs_dentry* pipefs_create_file(struct pipefs_superblock *sb,struct pipefs_inode* p
 2360              		.loc 1 181 1 view .LVU766
 2361 0020 2046     		mov	r0, r4
 2362 0022 70BD     		pop	{r4, r5, r6, pc}
 2363              	.LVL211:
 2364              	.L131:
 174:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 2365              		.loc 1 174 9 is_stmt 1 view .LVU767
 2366 0024 0436     		adds	r6, r6, #4
 2367              	.LVL212:
 174:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 2368              		.loc 1 174 9 is_stmt 0 view .LVU768
 2369 0026 3046     		mov	r0, r6
 2370              	.LVL213:
 174:./fs/pipefs/pipefs.c ****         list_del(&new_inode->list_node);
 2371              		.loc 1 174 9 view .LVU769
ARM GAS  /tmp/ccZnep12.s 			page 145


 2372 0028 FFF7FEFF 		bl	spin_lock
 2373              	.LVL214:
 175:./fs/pipefs/pipefs.c ****         spin_unlock(&sb->lock);
 2374              		.loc 1 175 9 is_stmt 1 view .LVU770
 2375              	.LBB325:
 2376              	.LBI325:
 227:./include/linux/list.h **** {
 2377              		.loc 7 227 20 view .LVU771
 2378              	.LBB326:
 229:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 2379              		.loc 7 229 2 view .LVU772
 2380              	.LBB327:
 2381              	.LBI327:
 213:./include/linux/list.h **** {
 2382              		.loc 7 213 20 view .LVU773
 2383              	.LBB328:
 215:./include/linux/list.h **** 		return;
 2384              		.loc 7 215 2 view .LVU774
 218:./include/linux/list.h **** }
 2385              		.loc 7 218 2 view .LVU775
 2386 002c AB69     		ldr	r3, [r5, #24]
 2387 002e 6A69     		ldr	r2, [r5, #20]
 2388              	.LVL215:
 2389              	.LBB329:
 2390              	.LBI329:
 193:./include/linux/list.h **** {
 2391              		.loc 7 193 20 view .LVU776
 2392              	.LBB330:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2393              		.loc 7 195 2 view .LVU777
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2394              		.loc 7 195 13 is_stmt 0 view .LVU778
 2395 0030 5360     		str	r3, [r2, #4]
 196:./include/linux/list.h **** }
 2396              		.loc 7 196 2 is_stmt 1 view .LVU779
 196:./include/linux/list.h **** }
 2397              		.loc 7 196 2 view .LVU780
 2398              	.LBB331:
 196:./include/linux/list.h **** }
 2399              		.loc 7 196 2 view .LVU781
 196:./include/linux/list.h **** }
 2400              		.loc 7 196 2 view .LVU782
 2401              	.LBE331:
 196:./include/linux/list.h **** }
 2402              		.loc 7 196 2 discriminator 2 view .LVU783
 196:./include/linux/list.h **** }
 2403              		.loc 7 196 2 discriminator 2 view .LVU784
 196:./include/linux/list.h **** }
 2404              		.loc 7 196 2 discriminator 2 view .LVU785
 2405 0032 1A60     		str	r2, [r3]
 196:./include/linux/list.h **** }
 2406              		.loc 7 196 2 discriminator 2 view .LVU786
 196:./include/linux/list.h **** }
 2407              		.loc 7 196 2 discriminator 2 view .LVU787
 2408              	.LVL216:
 196:./include/linux/list.h **** }
 2409              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU788
ARM GAS  /tmp/ccZnep12.s 			page 146


 2410              	.LBE330:
 2411              	.LBE329:
 2412              	.LBE328:
 2413              	.LBE327:
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2414              		.loc 7 230 2 is_stmt 1 view .LVU789
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2415              		.loc 7 230 14 is_stmt 0 view .LVU790
 2416 0034 4FF48073 		mov	r3, #256
 2417 0038 6B61     		str	r3, [r5, #20]
 231:./include/linux/list.h **** }
 2418              		.loc 7 231 2 is_stmt 1 view .LVU791
 231:./include/linux/list.h **** }
 2419              		.loc 7 231 14 is_stmt 0 view .LVU792
 2420 003a 4FF49173 		mov	r3, #290
 2421 003e AB61     		str	r3, [r5, #24]
 2422              	.LVL217:
 231:./include/linux/list.h **** }
 2423              		.loc 7 231 14 view .LVU793
 2424              	.LBE326:
 2425              	.LBE325:
 176:./fs/pipefs/pipefs.c ****         pipefs_inode_put(new_inode);
 2426              		.loc 1 176 9 is_stmt 1 view .LVU794
 2427 0040 3046     		mov	r0, r6
 2428 0042 FFF7FEFF 		bl	spin_unlock
 2429              	.LVL218:
 177:./fs/pipefs/pipefs.c ****         return NULL;
 2430              		.loc 1 177 9 view .LVU795
 2431 0046 2846     		mov	r0, r5
 2432 0048 FFF7FEFF 		bl	pipefs_inode_put
 2433              	.LVL219:
 178:./fs/pipefs/pipefs.c ****     }
 2434              		.loc 1 178 9 view .LVU796
 178:./fs/pipefs/pipefs.c ****     }
 2435              		.loc 1 178 16 is_stmt 0 view .LVU797
 2436 004c E8E7     		b	.L127
 2437              	.LVL220:
 2438              	.L129:
 170:./fs/pipefs/pipefs.c ****     }   
 2439              		.loc 1 170 16 view .LVU798
 2440 004e 0446     		mov	r4, r0
 2441              	.LVL221:
 170:./fs/pipefs/pipefs.c ****     }   
 2442              		.loc 1 170 16 view .LVU799
 2443 0050 E6E7     		b	.L127
 2444              		.cfi_endproc
 2445              	.LFE1046:
 2447              		.section	.text.pipefs_create_dir,"ax",%progbits
 2448              		.align	1
 2449              		.syntax unified
 2450              		.thumb
 2451              		.thumb_func
 2453              	pipefs_create_dir:
 2454              	.LVL222:
 2455              	.LFB1048:
 188:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry =  pipefs_create_inode(sb,parent_dentry_inode,&pipefs_file_fops,0,
 2456              		.loc 1 188 1 is_stmt 1 view -0
ARM GAS  /tmp/ccZnep12.s 			page 147


 2457              		.cfi_startproc
 2458              		@ args = 0, pretend = 0, frame = 0
 2459              		@ frame_needed = 0, uses_anonymous_args = 0
 188:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* dentry =  pipefs_create_inode(sb,parent_dentry_inode,&pipefs_file_fops,0,
 2460              		.loc 1 188 1 is_stmt 0 view .LVU801
 2461 0000 00B5     		push	{lr}
 2462              	.LCFI25:
 2463              		.cfi_def_cfa_offset 4
 2464              		.cfi_offset 14, -4
 2465 0002 83B0     		sub	sp, sp, #12
 2466              	.LCFI26:
 2467              		.cfi_def_cfa_offset 16
 189:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 2468              		.loc 1 189 5 is_stmt 1 view .LVU802
 189:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 2469              		.loc 1 189 37 is_stmt 0 view .LVU803
 2470 0004 0092     		str	r2, [sp]
 2471 0006 0023     		movs	r3, #0
 2472 0008 054A     		ldr	r2, .L135
 2473              	.LVL223:
 189:./fs/pipefs/pipefs.c ****     if(dentry == NULL) return NULL;
 2474              		.loc 1 189 37 view .LVU804
 2475 000a FFF7FEFF 		bl	pipefs_create_inode
 2476              	.LVL224:
 190:./fs/pipefs/pipefs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 2477              		.loc 1 190 5 is_stmt 1 view .LVU805
 190:./fs/pipefs/pipefs.c ****     dentry->target_inode->i_mode = S_IFDIR | 0755;
 2478              		.loc 1 190 7 is_stmt 0 view .LVU806
 2479 000e 18B1     		cbz	r0, .L132
 191:./fs/pipefs/pipefs.c ****     return dentry;
 2480              		.loc 1 191 5 is_stmt 1 view .LVU807
 191:./fs/pipefs/pipefs.c ****     return dentry;
 2481              		.loc 1 191 11 is_stmt 0 view .LVU808
 2482 0010 8368     		ldr	r3, [r0, #8]
 191:./fs/pipefs/pipefs.c ****     return dentry;
 2483              		.loc 1 191 34 view .LVU809
 2484 0012 44F2ED12 		movw	r2, #16877
 2485 0016 5A60     		str	r2, [r3, #4]
 192:./fs/pipefs/pipefs.c **** }
 2486              		.loc 1 192 5 is_stmt 1 view .LVU810
 2487              	.L132:
 193:./fs/pipefs/pipefs.c **** static void dentry_put(struct pipefs_superblock *sb,struct pipefs_dentry* dentry)
 2488              		.loc 1 193 1 is_stmt 0 view .LVU811
 2489 0018 03B0     		add	sp, sp, #12
 2490              	.LCFI27:
 2491              		.cfi_def_cfa_offset 4
 2492              		@ sp needed
 2493 001a 5DF804FB 		ldr	pc, [sp], #4
 2494              	.L136:
 2495 001e 00BF     		.align	2
 2496              	.L135:
 2497 0020 00000000 		.word	pipefs_file_fops
 2498              		.cfi_endproc
 2499              	.LFE1048:
 2501              		.section	.text.pipefs_mkdir,"ax",%progbits
 2502              		.align	1
 2503              		.syntax unified
ARM GAS  /tmp/ccZnep12.s 			page 148


 2504              		.thumb
 2505              		.thumb_func
 2507              	pipefs_mkdir:
 2508              	.LVL225:
 2509              	.LFB1066:
 532:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2510              		.loc 1 532 1 is_stmt 1 view -0
 2511              		.cfi_startproc
 2512              		@ args = 0, pretend = 0, frame = 0
 2513              		@ frame_needed = 0, uses_anonymous_args = 0
 532:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2514              		.loc 1 532 1 is_stmt 0 view .LVU813
 2515 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2516              	.LCFI28:
 2517              		.cfi_def_cfa_offset 24
 2518              		.cfi_offset 4, -24
 2519              		.cfi_offset 5, -20
 2520              		.cfi_offset 6, -16
 2521              		.cfi_offset 7, -12
 2522              		.cfi_offset 8, -8
 2523              		.cfi_offset 14, -4
 2524 0004 0D46     		mov	r5, r1
 2525 0006 1446     		mov	r4, r2
 2526 0008 9846     		mov	r8, r3
 533:./fs/pipefs/pipefs.c **** 
 2527              		.loc 1 533 5 is_stmt 1 view .LVU814
 533:./fs/pipefs/pipefs.c **** 
 2528              		.loc 1 533 23 is_stmt 0 view .LVU815
 2529 000a 1046     		mov	r0, r2
 2530              	.LVL226:
 533:./fs/pipefs/pipefs.c **** 
 2531              		.loc 1 533 23 view .LVU816
 2532 000c FFF7FEFF 		bl	d_getname
 2533              	.LVL227:
 533:./fs/pipefs/pipefs.c **** 
 2534              		.loc 1 533 23 view .LVU817
 2535 0010 0646     		mov	r6, r0
 2536              	.LVL228:
 535:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2537              		.loc 1 535 5 is_stmt 1 view .LVU818
 535:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2538              		.loc 1 535 26 is_stmt 0 view .LVU819
 2539 0012 AF6D     		ldr	r7, [r5, #88]
 2540              	.LVL229:
 536:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2541              		.loc 1 536 5 is_stmt 1 view .LVU820
 536:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2542              		.loc 1 536 34 is_stmt 0 view .LVU821
 2543 0014 0146     		mov	r1, r0
 2544 0016 3846     		mov	r0, r7
 2545              	.LVL230:
 536:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2546              		.loc 1 536 34 view .LVU822
 2547 0018 FFF7FEFF 		bl	pipefs_lookup
 2548              	.LVL231:
 537:./fs/pipefs/pipefs.c ****         file =  pipefs_create_dir(dinode->sb,dinode,file_name);
 2549              		.loc 1 537 5 is_stmt 1 view .LVU823
ARM GAS  /tmp/ccZnep12.s 			page 149


 537:./fs/pipefs/pipefs.c ****         file =  pipefs_create_dir(dinode->sb,dinode,file_name);
 2550              		.loc 1 537 7 is_stmt 0 view .LVU824
 2551 001c 0146     		mov	r1, r0
 2552 001e A8B1     		cbz	r0, .L144
 2553              	.L138:
 2554              	.LVL232:
 543:./fs/pipefs/pipefs.c ****     
 2555              		.loc 1 543 5 is_stmt 1 view .LVU825
 543:./fs/pipefs/pipefs.c ****     
 2556              		.loc 1 543 9 is_stmt 0 view .LVU826
 2557 0020 8A68     		ldr	r2, [r1, #8]
 543:./fs/pipefs/pipefs.c ****     
 2558              		.loc 1 543 42 view .LVU827
 2559 0022 C8F30803 		ubfx	r3, r8, #0, #9
 2560 0026 43F40043 		orr	r3, r3, #32768
 543:./fs/pipefs/pipefs.c ****     
 2561              		.loc 1 543 32 view .LVU828
 2562 002a 5360     		str	r3, [r2, #4]
 545:./fs/pipefs/pipefs.c ****      return -1;
 2563              		.loc 1 545 5 is_stmt 1 view .LVU829
 545:./fs/pipefs/pipefs.c ****      return -1;
 2564              		.loc 1 545 9 is_stmt 0 view .LVU830
 2565 002c 2046     		mov	r0, r4
 2566 002e FFF7FEFF 		bl	pipefs_get_dentry
 2567              	.LVL233:
 545:./fs/pipefs/pipefs.c ****      return -1;
 2568              		.loc 1 545 7 discriminator 1 view .LVU831
 2569 0032 B0B1     		cbz	r0, .L141
 548:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2570              		.loc 1 548 5 is_stmt 1 view .LVU832
 548:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2571              		.loc 1 548 37 is_stmt 0 view .LVU833
 2572 0034 E968     		ldr	r1, [r5, #12]
 2573 0036 3846     		mov	r0, r7
 2574 0038 FFF7FEFF 		bl	pipefs_get_inode
 2575              	.LVL234:
 549:./fs/pipefs/pipefs.c ****         return -1;
 2576              		.loc 1 549 5 is_stmt 1 view .LVU834
 549:./fs/pipefs/pipefs.c ****         return -1;
 2577              		.loc 1 549 7 is_stmt 0 view .LVU835
 2578 003c 0146     		mov	r1, r0
 2579 003e 98B1     		cbz	r0, .L142
 552:./fs/pipefs/pipefs.c ****    return 0;
 2580              		.loc 1 552 5 is_stmt 1 view .LVU836
 2581 0040 2046     		mov	r0, r4
 2582              	.LVL235:
 552:./fs/pipefs/pipefs.c ****    return 0;
 2583              		.loc 1 552 5 is_stmt 0 view .LVU837
 2584 0042 FFF7FEFF 		bl	d_add
 2585              	.LVL236:
 553:./fs/pipefs/pipefs.c **** }
 2586              		.loc 1 553 4 is_stmt 1 view .LVU838
 553:./fs/pipefs/pipefs.c **** }
 2587              		.loc 1 553 11 is_stmt 0 view .LVU839
 2588 0046 0020     		movs	r0, #0
 2589              	.LVL237:
 2590              	.L137:
ARM GAS  /tmp/ccZnep12.s 			page 150


 554:./fs/pipefs/pipefs.c **** 
 2591              		.loc 1 554 1 view .LVU840
 2592 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2593              	.LVL238:
 2594              	.L144:
 538:./fs/pipefs/pipefs.c ****     }
 2595              		.loc 1 538 9 is_stmt 1 view .LVU841
 538:./fs/pipefs/pipefs.c ****     }
 2596              		.loc 1 538 17 is_stmt 0 view .LVU842
 2597 004c 3246     		mov	r2, r6
 2598 004e 3946     		mov	r1, r7
 2599 0050 786B     		ldr	r0, [r7, #52]
 2600              	.LVL239:
 538:./fs/pipefs/pipefs.c ****     }
 2601              		.loc 1 538 17 view .LVU843
 2602 0052 FFF7FEFF 		bl	pipefs_create_dir
 2603              	.LVL240:
 540:./fs/pipefs/pipefs.c ****         return -1;
 2604              		.loc 1 540 5 is_stmt 1 view .LVU844
 540:./fs/pipefs/pipefs.c ****         return -1;
 2605              		.loc 1 540 8 is_stmt 0 view .LVU845
 2606 0056 0146     		mov	r1, r0
 2607 0058 0028     		cmp	r0, #0
 2608 005a E1D1     		bne	.L138
 541:./fs/pipefs/pipefs.c ****     }
 2609              		.loc 1 541 16 view .LVU846
 2610 005c 4FF0FF30 		mov	r0, #-1
 2611              	.LVL241:
 541:./fs/pipefs/pipefs.c ****     }
 2612              		.loc 1 541 16 view .LVU847
 2613 0060 F2E7     		b	.L137
 2614              	.LVL242:
 2615              	.L141:
 546:./fs/pipefs/pipefs.c ****     }  
 2616              		.loc 1 546 13 view .LVU848
 2617 0062 4FF0FF30 		mov	r0, #-1
 2618 0066 EFE7     		b	.L137
 2619              	.LVL243:
 2620              	.L142:
 550:./fs/pipefs/pipefs.c **** 
 2621              		.loc 1 550 16 view .LVU849
 2622 0068 4FF0FF30 		mov	r0, #-1
 2623              	.LVL244:
 550:./fs/pipefs/pipefs.c **** 
 2624              		.loc 1 550 16 view .LVU850
 2625 006c ECE7     		b	.L137
 2626              		.cfi_endproc
 2627              	.LFE1066:
 2629              		.section	.text.pipefs_create_file,"ax",%progbits
 2630              		.align	1
 2631              		.syntax unified
 2632              		.thumb
 2633              		.thumb_func
 2635              	pipefs_create_file:
 2636              	.LVL245:
 2637              	.LFB1047:
 183:./fs/pipefs/pipefs.c ****     return pipefs_create_inode(sb,parent_dentry_inode,fop,major,name);
ARM GAS  /tmp/ccZnep12.s 			page 151


 2638              		.loc 1 183 1 is_stmt 1 view -0
 2639              		.cfi_startproc
 2640              		@ args = 4, pretend = 0, frame = 0
 2641              		@ frame_needed = 0, uses_anonymous_args = 0
 183:./fs/pipefs/pipefs.c ****     return pipefs_create_inode(sb,parent_dentry_inode,fop,major,name);
 2642              		.loc 1 183 1 is_stmt 0 view .LVU852
 2643 0000 10B5     		push	{r4, lr}
 2644              	.LCFI29:
 2645              		.cfi_def_cfa_offset 8
 2646              		.cfi_offset 4, -8
 2647              		.cfi_offset 14, -4
 2648 0002 82B0     		sub	sp, sp, #8
 2649              	.LCFI30:
 2650              		.cfi_def_cfa_offset 16
 184:./fs/pipefs/pipefs.c **** }
 2651              		.loc 1 184 5 is_stmt 1 view .LVU853
 184:./fs/pipefs/pipefs.c **** }
 2652              		.loc 1 184 12 is_stmt 0 view .LVU854
 2653 0004 049C     		ldr	r4, [sp, #16]
 2654 0006 0094     		str	r4, [sp]
 2655 0008 FFF7FEFF 		bl	pipefs_create_inode
 2656              	.LVL246:
 185:./fs/pipefs/pipefs.c **** 
 2657              		.loc 1 185 1 view .LVU855
 2658 000c 02B0     		add	sp, sp, #8
 2659              	.LCFI31:
 2660              		.cfi_def_cfa_offset 8
 2661              		@ sp needed
 2662 000e 10BD     		pop	{r4, pc}
 185:./fs/pipefs/pipefs.c **** 
 2663              		.loc 1 185 1 view .LVU856
 2664              		.cfi_endproc
 2665              	.LFE1047:
 2667              		.section	.text.pipefs_create,"ax",%progbits
 2668              		.align	1
 2669              		.syntax unified
 2670              		.thumb
 2671              		.thumb_func
 2673              	pipefs_create:
 2674              	.LVL247:
 2675              	.LFB1062:
 464:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2676              		.loc 1 464 1 is_stmt 1 view -0
 2677              		.cfi_startproc
 2678              		@ args = 4, pretend = 0, frame = 0
 2679              		@ frame_needed = 0, uses_anonymous_args = 0
 464:./fs/pipefs/pipefs.c ****     char *file_name = d_getname(dentry);
 2680              		.loc 1 464 1 is_stmt 0 view .LVU858
 2681 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2682              	.LCFI32:
 2683              		.cfi_def_cfa_offset 24
 2684              		.cfi_offset 4, -24
 2685              		.cfi_offset 5, -20
 2686              		.cfi_offset 6, -16
 2687              		.cfi_offset 7, -12
 2688              		.cfi_offset 8, -8
 2689              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZnep12.s 			page 152


 2690 0004 82B0     		sub	sp, sp, #8
 2691              	.LCFI33:
 2692              		.cfi_def_cfa_offset 32
 2693 0006 0D46     		mov	r5, r1
 2694 0008 1446     		mov	r4, r2
 2695 000a 9846     		mov	r8, r3
 465:./fs/pipefs/pipefs.c **** 
 2696              		.loc 1 465 5 is_stmt 1 view .LVU859
 465:./fs/pipefs/pipefs.c **** 
 2697              		.loc 1 465 23 is_stmt 0 view .LVU860
 2698 000c 1046     		mov	r0, r2
 2699              	.LVL248:
 465:./fs/pipefs/pipefs.c **** 
 2700              		.loc 1 465 23 view .LVU861
 2701 000e FFF7FEFF 		bl	d_getname
 2702              	.LVL249:
 465:./fs/pipefs/pipefs.c **** 
 2703              		.loc 1 465 23 view .LVU862
 2704 0012 0646     		mov	r6, r0
 2705              	.LVL250:
 467:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2706              		.loc 1 467 5 is_stmt 1 view .LVU863
 467:./fs/pipefs/pipefs.c ****     struct pipefs_dentry* file = pipefs_lookup(dinode,file_name);
 2707              		.loc 1 467 26 is_stmt 0 view .LVU864
 2708 0014 AF6D     		ldr	r7, [r5, #88]
 2709              	.LVL251:
 468:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2710              		.loc 1 468 5 is_stmt 1 view .LVU865
 468:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2711              		.loc 1 468 34 is_stmt 0 view .LVU866
 2712 0016 0146     		mov	r1, r0
 2713 0018 3846     		mov	r0, r7
 2714              	.LVL252:
 468:./fs/pipefs/pipefs.c ****     if(file == NULL){
 2715              		.loc 1 468 34 view .LVU867
 2716 001a FFF7FEFF 		bl	pipefs_lookup
 2717              	.LVL253:
 469:./fs/pipefs/pipefs.c ****         file =  pipefs_create_file(dinode->sb,dinode,&pipefs_file_fops,10,file_name);
 2718              		.loc 1 469 5 is_stmt 1 view .LVU868
 469:./fs/pipefs/pipefs.c ****         file =  pipefs_create_file(dinode->sb,dinode,&pipefs_file_fops,10,file_name);
 2719              		.loc 1 469 7 is_stmt 0 view .LVU869
 2720 001e 0146     		mov	r1, r0
 2721 0020 B0B1     		cbz	r0, .L154
 2722              	.L148:
 2723              	.LVL254:
 475:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2724              		.loc 1 475 5 is_stmt 1 view .LVU870
 475:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2725              		.loc 1 475 9 is_stmt 0 view .LVU871
 2726 0022 8A68     		ldr	r2, [r1, #8]
 475:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2727              		.loc 1 475 42 view .LVU872
 2728 0024 C8F30803 		ubfx	r3, r8, #0, #9
 2729 0028 43F40043 		orr	r3, r3, #32768
 475:./fs/pipefs/pipefs.c ****     if( pipefs_get_dentry(dentry,file) == NULL){     //ÊûÑÂª∫dentry    
 2730              		.loc 1 475 32 view .LVU873
 2731 002c 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccZnep12.s 			page 153


 476:./fs/pipefs/pipefs.c ****      return -1;
 2732              		.loc 1 476 5 is_stmt 1 view .LVU874
 476:./fs/pipefs/pipefs.c ****      return -1;
 2733              		.loc 1 476 9 is_stmt 0 view .LVU875
 2734 002e 2046     		mov	r0, r4
 2735 0030 FFF7FEFF 		bl	pipefs_get_dentry
 2736              	.LVL255:
 476:./fs/pipefs/pipefs.c ****      return -1;
 2737              		.loc 1 476 7 discriminator 1 view .LVU876
 2738 0034 C8B1     		cbz	r0, .L151
 480:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2739              		.loc 1 480 5 is_stmt 1 view .LVU877
 480:./fs/pipefs/pipefs.c ****     if(new_file_inode == NULL)
 2740              		.loc 1 480 37 is_stmt 0 view .LVU878
 2741 0036 E968     		ldr	r1, [r5, #12]
 2742 0038 3846     		mov	r0, r7
 2743 003a FFF7FEFF 		bl	pipefs_get_inode
 2744              	.LVL256:
 481:./fs/pipefs/pipefs.c ****         return -1;
 2745              		.loc 1 481 5 is_stmt 1 view .LVU879
 481:./fs/pipefs/pipefs.c ****         return -1;
 2746              		.loc 1 481 7 is_stmt 0 view .LVU880
 2747 003e 0146     		mov	r1, r0
 2748 0040 B0B1     		cbz	r0, .L152
 484:./fs/pipefs/pipefs.c ****    return 0;
 2749              		.loc 1 484 5 is_stmt 1 view .LVU881
 2750 0042 2046     		mov	r0, r4
 2751              	.LVL257:
 484:./fs/pipefs/pipefs.c ****    return 0;
 2752              		.loc 1 484 5 is_stmt 0 view .LVU882
 2753 0044 FFF7FEFF 		bl	d_add
 2754              	.LVL258:
 485:./fs/pipefs/pipefs.c **** } 
 2755              		.loc 1 485 4 is_stmt 1 view .LVU883
 485:./fs/pipefs/pipefs.c **** } 
 2756              		.loc 1 485 11 is_stmt 0 view .LVU884
 2757 0048 0020     		movs	r0, #0
 2758              	.LVL259:
 2759              	.L147:
 486:./fs/pipefs/pipefs.c **** 
 2760              		.loc 1 486 1 view .LVU885
 2761 004a 02B0     		add	sp, sp, #8
 2762              	.LCFI34:
 2763              		.cfi_remember_state
 2764              		.cfi_def_cfa_offset 24
 2765              		@ sp needed
 2766 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2767              	.LVL260:
 2768              	.L154:
 2769              	.LCFI35:
 2770              		.cfi_restore_state
 470:./fs/pipefs/pipefs.c ****     }
 2771              		.loc 1 470 9 is_stmt 1 view .LVU886
 470:./fs/pipefs/pipefs.c ****     }
 2772              		.loc 1 470 17 is_stmt 0 view .LVU887
 2773 0050 786B     		ldr	r0, [r7, #52]
 2774              	.LVL261:
ARM GAS  /tmp/ccZnep12.s 			page 154


 470:./fs/pipefs/pipefs.c ****     }
 2775              		.loc 1 470 17 view .LVU888
 2776 0052 0096     		str	r6, [sp]
 2777 0054 0A23     		movs	r3, #10
 2778 0056 084A     		ldr	r2, .L155
 2779 0058 3946     		mov	r1, r7
 2780              	.LVL262:
 470:./fs/pipefs/pipefs.c ****     }
 2781              		.loc 1 470 17 view .LVU889
 2782 005a FFF7FEFF 		bl	pipefs_create_file
 2783              	.LVL263:
 472:./fs/pipefs/pipefs.c ****         return -1;
 2784              		.loc 1 472 5 is_stmt 1 view .LVU890
 472:./fs/pipefs/pipefs.c ****         return -1;
 2785              		.loc 1 472 8 is_stmt 0 view .LVU891
 2786 005e 0146     		mov	r1, r0
 2787 0060 0028     		cmp	r0, #0
 2788 0062 DED1     		bne	.L148
 473:./fs/pipefs/pipefs.c ****     }
 2789              		.loc 1 473 16 view .LVU892
 2790 0064 4FF0FF30 		mov	r0, #-1
 2791              	.LVL264:
 473:./fs/pipefs/pipefs.c ****     }
 2792              		.loc 1 473 16 view .LVU893
 2793 0068 EFE7     		b	.L147
 2794              	.LVL265:
 2795              	.L151:
 477:./fs/pipefs/pipefs.c ****     }  
 2796              		.loc 1 477 13 view .LVU894
 2797 006a 4FF0FF30 		mov	r0, #-1
 2798 006e ECE7     		b	.L147
 2799              	.LVL266:
 2800              	.L152:
 482:./fs/pipefs/pipefs.c **** 
 2801              		.loc 1 482 16 view .LVU895
 2802 0070 4FF0FF30 		mov	r0, #-1
 2803              	.LVL267:
 482:./fs/pipefs/pipefs.c **** 
 2804              		.loc 1 482 16 view .LVU896
 2805 0074 E9E7     		b	.L147
 2806              	.L156:
 2807 0076 00BF     		.align	2
 2808              	.L155:
 2809 0078 00000000 		.word	pipefs_file_fops
 2810              		.cfi_endproc
 2811              	.LFE1062:
 2813              		.section	.text.pipefs_link,"ax",%progbits
 2814              		.align	1
 2815              		.syntax unified
 2816              		.thumb
 2817              		.thumb_func
 2819              	pipefs_link:
 2820              	.LVL268:
 2821              	.LFB1064:
 509:./fs/pipefs/pipefs.c ****     struct pipefs_inode *old_inode = (struct pipefs_inode *)old_dentry->d_inode->i_private;
 2822              		.loc 1 509 1 is_stmt 1 view -0
 2823              		.cfi_startproc
ARM GAS  /tmp/ccZnep12.s 			page 155


 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 509:./fs/pipefs/pipefs.c ****     struct pipefs_inode *old_inode = (struct pipefs_inode *)old_dentry->d_inode->i_private;
 2826              		.loc 1 509 1 is_stmt 0 view .LVU898
 2827 0000 38B5     		push	{r3, r4, r5, lr}
 2828              	.LCFI36:
 2829              		.cfi_def_cfa_offset 16
 2830              		.cfi_offset 3, -16
 2831              		.cfi_offset 4, -12
 2832              		.cfi_offset 5, -8
 2833              		.cfi_offset 14, -4
 2834 0002 0D46     		mov	r5, r1
 2835 0004 1446     		mov	r4, r2
 510:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private;
 2836              		.loc 1 510 5 is_stmt 1 view .LVU899
 510:./fs/pipefs/pipefs.c ****     struct pipefs_inode *dir_inode = (struct pipefs_inode *)dir->i_private;
 2837              		.loc 1 510 71 is_stmt 0 view .LVU900
 2838 0006 836C     		ldr	r3, [r0, #72]
 2839              	.LVL269:
 511:./fs/pipefs/pipefs.c ****     struct pipefs_dentry *new_dentry = pipefs_create_dentry(dir_inode, old_inode, dentry->d_name.na
 2840              		.loc 1 511 5 is_stmt 1 view .LVU901
 512:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2841              		.loc 1 512 5 view .LVU902
 512:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2842              		.loc 1 512 40 is_stmt 0 view .LVU903
 2843 0008 9269     		ldr	r2, [r2, #24]
 2844              	.LVL270:
 512:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2845              		.loc 1 512 40 view .LVU904
 2846 000a 996D     		ldr	r1, [r3, #88]
 2847              	.LVL271:
 512:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2848              		.loc 1 512 40 view .LVU905
 2849 000c A86D     		ldr	r0, [r5, #88]
 2850              	.LVL272:
 512:./fs/pipefs/pipefs.c ****     if (new_dentry == NULL) {
 2851              		.loc 1 512 40 view .LVU906
 2852 000e FFF7FEFF 		bl	pipefs_create_dentry
 2853              	.LVL273:
 513:./fs/pipefs/pipefs.c ****         return -ENOMEM;
 2854              		.loc 1 513 5 is_stmt 1 view .LVU907
 513:./fs/pipefs/pipefs.c ****         return -ENOMEM;
 2855              		.loc 1 513 8 is_stmt 0 view .LVU908
 2856 0012 58B1     		cbz	r0, .L159
 2857 0014 0146     		mov	r1, r0
 516:./fs/pipefs/pipefs.c ****     dentry->d_sb = dir->i_sb;
 2858              		.loc 1 516 5 is_stmt 1 view .LVU909
 2859 0016 2046     		mov	r0, r4
 2860              	.LVL274:
 516:./fs/pipefs/pipefs.c ****     dentry->d_sb = dir->i_sb;
 2861              		.loc 1 516 5 is_stmt 0 view .LVU910
 2862 0018 FFF7FEFF 		bl	pipefs_get_dentry
 2863              	.LVL275:
 517:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
 2864              		.loc 1 517 5 is_stmt 1 view .LVU911
 517:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
 2865              		.loc 1 517 23 is_stmt 0 view .LVU912
ARM GAS  /tmp/ccZnep12.s 			page 156


 2866 001c EB68     		ldr	r3, [r5, #12]
 517:./fs/pipefs/pipefs.c ****     d_add(dentry,dentry->d_inode);
 2867              		.loc 1 517 18 view .LVU913
 2868 001e 2365     		str	r3, [r4, #80]
 518:./fs/pipefs/pipefs.c ****     return 0;
 2869              		.loc 1 518 5 is_stmt 1 view .LVU914
 2870 0020 A16C     		ldr	r1, [r4, #72]
 2871 0022 2046     		mov	r0, r4
 2872 0024 FFF7FEFF 		bl	d_add
 2873              	.LVL276:
 519:./fs/pipefs/pipefs.c **** }
 2874              		.loc 1 519 5 view .LVU915
 519:./fs/pipefs/pipefs.c **** }
 2875              		.loc 1 519 12 is_stmt 0 view .LVU916
 2876 0028 0020     		movs	r0, #0
 2877              	.L157:
 520:./fs/pipefs/pipefs.c **** 
 2878              		.loc 1 520 1 view .LVU917
 2879 002a 38BD     		pop	{r3, r4, r5, pc}
 2880              	.LVL277:
 2881              	.L159:
 514:./fs/pipefs/pipefs.c ****     }
 2882              		.loc 1 514 16 view .LVU918
 2883 002c 6FF00B00 		mvn	r0, #11
 2884              	.LVL278:
 514:./fs/pipefs/pipefs.c ****     }
 2885              		.loc 1 514 16 view .LVU919
 2886 0030 FBE7     		b	.L157
 2887              		.cfi_endproc
 2888              	.LFE1064:
 2890              		.section	.text.pipefs_destroy_inode,"ax",%progbits
 2891              		.align	1
 2892              		.syntax unified
 2893              		.thumb
 2894              		.thumb_func
 2896              	pipefs_destroy_inode:
 2897              	.LVL279:
 2898              	.LFB1059:
 412:./fs/pipefs/pipefs.c ****     if(node == NULL) return;
 2899              		.loc 1 412 1 is_stmt 1 view -0
 2900              		.cfi_startproc
 2901              		@ args = 0, pretend = 0, frame = 0
 2902              		@ frame_needed = 0, uses_anonymous_args = 0
 413:./fs/pipefs/pipefs.c ****     if(node->i_private != NULL) {
 2903              		.loc 1 413 5 view .LVU921
 413:./fs/pipefs/pipefs.c ****     if(node->i_private != NULL) {
 2904              		.loc 1 413 7 is_stmt 0 view .LVU922
 2905 0000 78B1     		cbz	r0, .L164
 412:./fs/pipefs/pipefs.c ****     if(node == NULL) return;
 2906              		.loc 1 412 1 view .LVU923
 2907 0002 08B5     		push	{r3, lr}
 2908              	.LCFI37:
 2909              		.cfi_def_cfa_offset 8
 2910              		.cfi_offset 3, -8
 2911              		.cfi_offset 14, -4
 414:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 2912              		.loc 1 414 5 is_stmt 1 view .LVU924
ARM GAS  /tmp/ccZnep12.s 			page 157


 414:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 2913              		.loc 1 414 12 is_stmt 0 view .LVU925
 2914 0004 806D     		ldr	r0, [r0, #88]
 2915              	.LVL280:
 414:./fs/pipefs/pipefs.c ****         struct pipefs_inode * pipe_node = node->i_private;
 2916              		.loc 1 414 7 view .LVU926
 2917 0006 58B1     		cbz	r0, .L161
 2918              	.LBB332:
 415:./fs/pipefs/pipefs.c ****         list_del(&pipe_node->list_node);
 2919              		.loc 1 415 9 is_stmt 1 view .LVU927
 2920              	.LVL281:
 416:./fs/pipefs/pipefs.c ****         kfree(pipe_node);        
 2921              		.loc 1 416 9 view .LVU928
 2922              	.LBB333:
 2923              	.LBI333:
 227:./include/linux/list.h **** {
 2924              		.loc 7 227 20 view .LVU929
 2925              	.LBB334:
 229:./include/linux/list.h **** 	entry->next = LIST_POISON1;
 2926              		.loc 7 229 2 view .LVU930
 2927              	.LBB335:
 2928              	.LBI335:
 213:./include/linux/list.h **** {
 2929              		.loc 7 213 20 view .LVU931
 2930              	.LBB336:
 215:./include/linux/list.h **** 		return;
 2931              		.loc 7 215 2 view .LVU932
 218:./include/linux/list.h **** }
 2932              		.loc 7 218 2 view .LVU933
 2933 0008 8369     		ldr	r3, [r0, #24]
 2934 000a 4269     		ldr	r2, [r0, #20]
 2935              	.LVL282:
 2936              	.LBB337:
 2937              	.LBI337:
 193:./include/linux/list.h **** {
 2938              		.loc 7 193 20 view .LVU934
 2939              	.LBB338:
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2940              		.loc 7 195 2 view .LVU935
 195:./include/linux/list.h **** 	WRITE_ONCE(prev->next, next);
 2941              		.loc 7 195 13 is_stmt 0 view .LVU936
 2942 000c 5360     		str	r3, [r2, #4]
 196:./include/linux/list.h **** }
 2943              		.loc 7 196 2 is_stmt 1 view .LVU937
 196:./include/linux/list.h **** }
 2944              		.loc 7 196 2 view .LVU938
 2945              	.LBB339:
 196:./include/linux/list.h **** }
 2946              		.loc 7 196 2 view .LVU939
 196:./include/linux/list.h **** }
 2947              		.loc 7 196 2 view .LVU940
 2948              	.LBE339:
 196:./include/linux/list.h **** }
 2949              		.loc 7 196 2 discriminator 2 view .LVU941
 196:./include/linux/list.h **** }
 2950              		.loc 7 196 2 discriminator 2 view .LVU942
 196:./include/linux/list.h **** }
ARM GAS  /tmp/ccZnep12.s 			page 158


 2951              		.loc 7 196 2 discriminator 2 view .LVU943
 2952 000e 1A60     		str	r2, [r3]
 196:./include/linux/list.h **** }
 2953              		.loc 7 196 2 discriminator 2 view .LVU944
 196:./include/linux/list.h **** }
 2954              		.loc 7 196 2 discriminator 2 view .LVU945
 2955              	.LVL283:
 196:./include/linux/list.h **** }
 2956              		.loc 7 196 2 is_stmt 0 discriminator 2 view .LVU946
 2957              	.LBE338:
 2958              	.LBE337:
 2959              	.LBE336:
 2960              	.LBE335:
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2961              		.loc 7 230 2 is_stmt 1 view .LVU947
 230:./include/linux/list.h **** 	entry->prev = LIST_POISON2;
 2962              		.loc 7 230 14 is_stmt 0 view .LVU948
 2963 0010 4FF48073 		mov	r3, #256
 2964 0014 4361     		str	r3, [r0, #20]
 231:./include/linux/list.h **** }
 2965              		.loc 7 231 2 is_stmt 1 view .LVU949
 231:./include/linux/list.h **** }
 2966              		.loc 7 231 14 is_stmt 0 view .LVU950
 2967 0016 4FF49173 		mov	r3, #290
 2968 001a 8361     		str	r3, [r0, #24]
 2969              	.LVL284:
 231:./include/linux/list.h **** }
 2970              		.loc 7 231 14 view .LVU951
 2971              	.LBE334:
 2972              	.LBE333:
 417:./fs/pipefs/pipefs.c ****     }
 2973              		.loc 1 417 9 is_stmt 1 view .LVU952
 2974              	.LBB340:
 2975              	.LBI340:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 2976              		.loc 4 383 20 view .LVU953
 2977              	.LBB341:
 2978              		.loc 4 384 2 view .LVU954
 2979 001c FFF7FEFF 		bl	__sfree__
 2980              	.LVL285:
 2981              	.L161:
 2982              		.loc 4 384 2 is_stmt 0 view .LVU955
 2983              	.LBE341:
 2984              	.LBE340:
 2985              	.LBE332:
 419:./fs/pipefs/pipefs.c **** 
 2986              		.loc 1 419 1 view .LVU956
 2987 0020 08BD     		pop	{r3, pc}
 2988              	.LVL286:
 2989              	.L164:
 2990              	.LCFI38:
 2991              		.cfi_def_cfa_offset 0
 2992              		.cfi_restore 3
 2993              		.cfi_restore 14
 419:./fs/pipefs/pipefs.c **** 
 2994              		.loc 1 419 1 view .LVU957
 2995 0022 7047     		bx	lr
ARM GAS  /tmp/ccZnep12.s 			page 159


 2996              		.cfi_endproc
 2997              	.LFE1059:
 2999              		.section	.text.pipefs_alloc_inode,"ax",%progbits
 3000              		.align	1
 3001              		.syntax unified
 3002              		.thumb
 3003              		.thumb_func
 3005              	pipefs_alloc_inode:
 3006              	.LVL287:
 3007              	.LFB1058:
 396:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *supb = sb->s_fs_info;
 3008              		.loc 1 396 1 is_stmt 1 view -0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 0
 3011              		@ frame_needed = 0, uses_anonymous_args = 0
 396:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *supb = sb->s_fs_info;
 3012              		.loc 1 396 1 is_stmt 0 view .LVU959
 3013 0000 38B5     		push	{r3, r4, r5, lr}
 3014              	.LCFI39:
 3015              		.cfi_def_cfa_offset 16
 3016              		.cfi_offset 3, -16
 3017              		.cfi_offset 4, -12
 3018              		.cfi_offset 5, -8
 3019              		.cfi_offset 14, -4
 3020 0002 0446     		mov	r4, r0
 397:./fs/pipefs/pipefs.c ****     if(supb->magic != MAGIC) return NULL;
 3021              		.loc 1 397 5 is_stmt 1 view .LVU960
 397:./fs/pipefs/pipefs.c ****     if(supb->magic != MAGIC) return NULL;
 3022              		.loc 1 397 31 is_stmt 0 view .LVU961
 3023 0004 C06A     		ldr	r0, [r0, #44]
 3024              	.LVL288:
 398:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3025              		.loc 1 398 5 is_stmt 1 view .LVU962
 398:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3026              		.loc 1 398 12 is_stmt 0 view .LVU963
 3027 0006 0268     		ldr	r2, [r0]
 398:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3028              		.loc 1 398 7 view .LVU964
 3029 0008 0B4B     		ldr	r3, .L172
 3030 000a 9A42     		cmp	r2, r3
 3031 000c 0ED1     		bne	.L169
 399:./fs/pipefs/pipefs.c ****      if(inode == NULL) return NULL;
 3032              		.loc 1 399 6 is_stmt 1 view .LVU965
 399:./fs/pipefs/pipefs.c ****      if(inode == NULL) return NULL;
 3033              		.loc 1 399 36 is_stmt 0 view .LVU966
 3034 000e 0A22     		movs	r2, #10
 3035 0010 0A49     		ldr	r1, .L172+4
 3036 0012 FFF7FEFF 		bl	pipefs_create_empty_inode
 3037              	.LVL289:
 400:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3038              		.loc 1 400 6 is_stmt 1 view .LVU967
 400:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3039              		.loc 1 400 8 is_stmt 0 view .LVU968
 3040 0016 0546     		mov	r5, r0
 3041 0018 58B1     		cbz	r0, .L170
 401:./fs/pipefs/pipefs.c ****      if(out_inode == NULL){
 3042              		.loc 1 401 6 is_stmt 1 view .LVU969
ARM GAS  /tmp/ccZnep12.s 			page 160


 401:./fs/pipefs/pipefs.c ****      if(out_inode == NULL){
 3043              		.loc 1 401 32 is_stmt 0 view .LVU970
 3044 001a 2146     		mov	r1, r4
 3045 001c FFF7FEFF 		bl	pipefs_get_inode
 3046              	.LVL290:
 402:./fs/pipefs/pipefs.c ****         kfree(inode);
 3047              		.loc 1 402 6 is_stmt 1 view .LVU971
 402:./fs/pipefs/pipefs.c ****         kfree(inode);
 3048              		.loc 1 402 8 is_stmt 0 view .LVU972
 3049 0020 0446     		mov	r4, r0
 3050              	.LVL291:
 402:./fs/pipefs/pipefs.c ****         kfree(inode);
 3051              		.loc 1 402 8 view .LVU973
 3052 0022 20B9     		cbnz	r0, .L167
 403:./fs/pipefs/pipefs.c ****         return NULL;
 3053              		.loc 1 403 9 is_stmt 1 view .LVU974
 3054              	.LVL292:
 3055              	.LBB342:
 3056              	.LBI342:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3057              		.loc 4 383 20 view .LVU975
 3058              	.LBB343:
 3059              		.loc 4 384 2 view .LVU976
 3060 0024 2846     		mov	r0, r5
 3061              	.LVL293:
 3062              		.loc 4 384 2 is_stmt 0 view .LVU977
 3063 0026 FFF7FEFF 		bl	__sfree__
 3064              	.LVL294:
 3065              		.loc 4 384 2 view .LVU978
 3066              	.LBE343:
 3067              	.LBE342:
 404:./fs/pipefs/pipefs.c ****      }
 3068              		.loc 1 404 9 is_stmt 1 view .LVU979
 404:./fs/pipefs/pipefs.c ****      }
 3069              		.loc 1 404 16 is_stmt 0 view .LVU980
 3070 002a 00E0     		b	.L167
 3071              	.LVL295:
 3072              	.L169:
 398:./fs/pipefs/pipefs.c ****      struct pipefs_inode * inode = pipefs_create_empty_inode(supb,&pipefs_file_fops,10); //Êñá‰ª∂Á≥
 3073              		.loc 1 398 37 discriminator 1 view .LVU981
 3074 002c 0024     		movs	r4, #0
 3075              	.LVL296:
 3076              	.L167:
 407:./fs/pipefs/pipefs.c **** 
 3077              		.loc 1 407 1 view .LVU982
 3078 002e 2046     		mov	r0, r4
 3079 0030 38BD     		pop	{r3, r4, r5, pc}
 3080              	.LVL297:
 3081              	.L170:
 400:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3082              		.loc 1 400 31 discriminator 1 view .LVU983
 3083 0032 0446     		mov	r4, r0
 3084              	.LVL298:
 400:./fs/pipefs/pipefs.c ****      struct inode *out_inode = pipefs_get_inode(inode,sb);
 3085              		.loc 1 400 31 discriminator 1 view .LVU984
 3086 0034 FBE7     		b	.L167
 3087              	.L173:
ARM GAS  /tmp/ccZnep12.s 			page 161


 3088 0036 00BF     		.align	2
 3089              	.L172:
 3090 0038 4E61BC00 		.word	12345678
 3091 003c 00000000 		.word	pipefs_file_fops
 3092              		.cfi_endproc
 3093              	.LFE1058:
 3095              		.section	.text.pipefs_superblock_destory,"ax",%progbits
 3096              		.align	1
 3097              		.syntax unified
 3098              		.thumb
 3099              		.thumb_func
 3101              	pipefs_superblock_destory:
 3102              	.LVL299:
 3103              	.LFB1052:
 245:./fs/pipefs/pipefs.c ****     if(sb!= NULL) {
 3104              		.loc 1 245 68 is_stmt 1 view -0
 3105              		.cfi_startproc
 3106              		@ args = 0, pretend = 0, frame = 0
 3107              		@ frame_needed = 0, uses_anonymous_args = 0
 246:./fs/pipefs/pipefs.c ****         struct pipefs_inode * root_inode = sb->rootinode;
 3108              		.loc 1 246 5 view .LVU986
 246:./fs/pipefs/pipefs.c ****         struct pipefs_inode * root_inode = sb->rootinode;
 3109              		.loc 1 246 7 is_stmt 0 view .LVU987
 3110 0000 50B1     		cbz	r0, .L178
 245:./fs/pipefs/pipefs.c ****     if(sb!= NULL) {
 3111              		.loc 1 245 68 view .LVU988
 3112 0002 10B5     		push	{r4, lr}
 3113              	.LCFI40:
 3114              		.cfi_def_cfa_offset 8
 3115              		.cfi_offset 4, -8
 3116              		.cfi_offset 14, -4
 3117 0004 0446     		mov	r4, r0
 3118              	.LBB344:
 247:./fs/pipefs/pipefs.c ****         if(!root_inode){
 3119              		.loc 1 247 9 is_stmt 1 view .LVU989
 247:./fs/pipefs/pipefs.c ****         if(!root_inode){
 3120              		.loc 1 247 31 is_stmt 0 view .LVU990
 3121 0006 4069     		ldr	r0, [r0, #20]
 3122              	.LVL300:
 248:./fs/pipefs/pipefs.c ****             kfree(root_inode);
 3123              		.loc 1 248 9 is_stmt 1 view .LVU991
 248:./fs/pipefs/pipefs.c ****             kfree(root_inode);
 3124              		.loc 1 248 11 is_stmt 0 view .LVU992
 3125 0008 18B1     		cbz	r0, .L181
 3126              	.LVL301:
 3127              	.L176:
 251:./fs/pipefs/pipefs.c ****     }
 3128              		.loc 1 251 9 is_stmt 1 view .LVU993
 3129              	.LBB345:
 3130              	.LBI345:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3131              		.loc 4 383 20 view .LVU994
 3132              	.LBB346:
 3133              		.loc 4 384 2 view .LVU995
 3134 000a 2046     		mov	r0, r4
 3135 000c FFF7FEFF 		bl	__sfree__
 3136              	.LVL302:
ARM GAS  /tmp/ccZnep12.s 			page 162


 3137              		.loc 4 384 2 is_stmt 0 view .LVU996
 3138              	.LBE346:
 3139              	.LBE345:
 3140              	.LBE344:
 253:./fs/pipefs/pipefs.c **** 
 3141              		.loc 1 253 1 view .LVU997
 3142 0010 10BD     		pop	{r4, pc}
 3143              	.LVL303:
 3144              	.L181:
 3145              	.LBB349:
 249:./fs/pipefs/pipefs.c ****         }
 3146              		.loc 1 249 13 is_stmt 1 view .LVU998
 3147              	.LBB347:
 3148              	.LBI347:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3149              		.loc 4 383 20 view .LVU999
 3150              	.LBB348:
 3151              		.loc 4 384 2 view .LVU1000
 3152 0012 FFF7FEFF 		bl	__sfree__
 3153              	.LVL304:
 385:./include/linux/slab.h **** }
 3154              		.loc 4 385 1 is_stmt 0 view .LVU1001
 3155 0016 F8E7     		b	.L176
 3156              	.LVL305:
 3157              	.L178:
 3158              	.LCFI41:
 3159              		.cfi_def_cfa_offset 0
 3160              		.cfi_restore 4
 3161              		.cfi_restore 14
 3162              		.loc 4 385 1 view .LVU1002
 3163 0018 7047     		bx	lr
 3164              	.LBE348:
 3165              	.LBE347:
 3166              	.LBE349:
 3167              		.cfi_endproc
 3168              	.LFE1052:
 3170              		.section	.rodata.pipefs_mount.str1.4,"aMS",%progbits,1
 3171              		.align	2
 3172              	.LC1:
 3173 0000 726F6F74 		.ascii	"root\000"
 3173      00
 3174              		.section	.text.pipefs_mount,"ax",%progbits
 3175              		.align	1
 3176              		.syntax unified
 3177              		.thumb
 3178              		.thumb_func
 3180              	pipefs_mount:
 3181              	.LVL306:
 3182              	.LFB1054:
 308:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *fs_superblock= pipefs_superblock_create();
 3183              		.loc 1 308 1 is_stmt 1 view -0
 3184              		.cfi_startproc
 3185              		@ args = 0, pretend = 0, frame = 0
 3186              		@ frame_needed = 0, uses_anonymous_args = 0
 308:./fs/pipefs/pipefs.c ****     struct pipefs_superblock *fs_superblock= pipefs_superblock_create();
 3187              		.loc 1 308 1 is_stmt 0 view .LVU1004
 3188 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccZnep12.s 			page 163


 3189              	.LCFI42:
 3190              		.cfi_def_cfa_offset 24
 3191              		.cfi_offset 3, -24
 3192              		.cfi_offset 4, -20
 3193              		.cfi_offset 5, -16
 3194              		.cfi_offset 6, -12
 3195              		.cfi_offset 7, -8
 3196              		.cfi_offset 14, -4
 309:./fs/pipefs/pipefs.c ****     if (fs_superblock == NULL){
 3197              		.loc 1 309 5 is_stmt 1 view .LVU1005
 309:./fs/pipefs/pipefs.c ****     if (fs_superblock == NULL){
 3198              		.loc 1 309 46 is_stmt 0 view .LVU1006
 3199 0002 FFF7FEFF 		bl	pipefs_superblock_create
 3200              	.LVL307:
 310:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3201              		.loc 1 310 5 is_stmt 1 view .LVU1007
 310:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3202              		.loc 1 310 8 is_stmt 0 view .LVU1008
 3203 0006 0028     		cmp	r0, #0
 3204 0008 49D0     		beq	.L188
 3205 000a 0646     		mov	r6, r0
 313:./fs/pipefs/pipefs.c ****     if(root == NULL){
 3206              		.loc 1 313 5 is_stmt 1 view .LVU1009
 313:./fs/pipefs/pipefs.c ****     if(root == NULL){
 3207              		.loc 1 313 28 is_stmt 0 view .LVU1010
 3208 000c 2549     		ldr	r1, .L194
 3209 000e 0020     		movs	r0, #0
 3210              	.LVL308:
 313:./fs/pipefs/pipefs.c ****     if(root == NULL){
 3211              		.loc 1 313 28 view .LVU1011
 3212 0010 FFF7FEFF 		bl	__d_alloc
 3213              	.LVL309:
 314:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3214              		.loc 1 314 5 is_stmt 1 view .LVU1012
 314:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3215              		.loc 1 314 7 is_stmt 0 view .LVU1013
 3216 0014 0446     		mov	r4, r0
 3217 0016 D8B1     		cbz	r0, .L190
 320:./fs/pipefs/pipefs.c ****     if(dentry == NULL){
 3218              		.loc 1 320 5 is_stmt 1 view .LVU1014
 3219              	.LVL310:
 3220              	.LBB350:
 3221              	.LBI350:
 379:./include/linux/slab.h **** 	return __smalloc__((u32)size,flags);
 3222              		.loc 4 379 21 view .LVU1015
 3223              	.LBB351:
 380:./include/linux/slab.h **** }
 3224              		.loc 4 380 2 view .LVU1016
 380:./include/linux/slab.h **** }
 3225              		.loc 4 380 9 is_stmt 0 view .LVU1017
 3226 0018 4FF44C61 		mov	r1, #3264
 3227 001c 1420     		movs	r0, #20
 3228              	.LVL311:
 380:./include/linux/slab.h **** }
 3229              		.loc 4 380 9 view .LVU1018
 3230 001e FFF7FEFF 		bl	__smalloc__
 3231              	.LVL312:
ARM GAS  /tmp/ccZnep12.s 			page 164


 380:./include/linux/slab.h **** }
 3232              		.loc 4 380 9 view .LVU1019
 3233              	.LBE351:
 3234              	.LBE350:
 321:./fs/pipefs/pipefs.c ****        
 3235              		.loc 1 321 5 is_stmt 1 view .LVU1020
 321:./fs/pipefs/pipefs.c ****        
 3236              		.loc 1 321 7 is_stmt 0 view .LVU1021
 3237 0022 0546     		mov	r5, r0
 3238 0024 D0B1     		cbz	r0, .L191
 326:./fs/pipefs/pipefs.c ****     dentry->target_inode = fs_superblock->rootinode;
 3239              		.loc 1 326 5 is_stmt 1 view .LVU1022
 326:./fs/pipefs/pipefs.c ****     dentry->target_inode = fs_superblock->rootinode;
 3240              		.loc 1 326 18 is_stmt 0 view .LVU1023
 3241 0026 0021     		movs	r1, #0
 3242 0028 4160     		str	r1, [r0, #4]
 327:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 3243              		.loc 1 327 5 is_stmt 1 view .LVU1024
 327:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 3244              		.loc 1 327 41 is_stmt 0 view .LVU1025
 3245 002a 7369     		ldr	r3, [r6, #20]
 327:./fs/pipefs/pipefs.c ****     dentry->magic =MAGIC;
 3246              		.loc 1 327 26 view .LVU1026
 3247 002c 8360     		str	r3, [r0, #8]
 328:./fs/pipefs/pipefs.c ****     root->d_fsdata = dentry;
 3248              		.loc 1 328 5 is_stmt 1 view .LVU1027
 328:./fs/pipefs/pipefs.c ****     root->d_fsdata = dentry;
 3249              		.loc 1 328 19 is_stmt 0 view .LVU1028
 3250 002e 1E4B     		ldr	r3, .L194+4
 3251 0030 0360     		str	r3, [r0]
 329:./fs/pipefs/pipefs.c ****     struct inode * root_inode = pipefs_get_inode(dentry->target_inode,NULL);
 3252              		.loc 1 329 5 is_stmt 1 view .LVU1029
 329:./fs/pipefs/pipefs.c ****     struct inode * root_inode = pipefs_get_inode(dentry->target_inode,NULL);
 3253              		.loc 1 329 20 is_stmt 0 view .LVU1030
 3254 0032 6065     		str	r0, [r4, #84]
 330:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 3255              		.loc 1 330 5 is_stmt 1 view .LVU1031
 330:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 3256              		.loc 1 330 33 is_stmt 0 view .LVU1032
 3257 0034 8068     		ldr	r0, [r0, #8]
 3258              	.LVL313:
 330:./fs/pipefs/pipefs.c ****     if(root_inode == NULL){
 3259              		.loc 1 330 33 view .LVU1033
 3260 0036 FFF7FEFF 		bl	pipefs_get_inode
 3261              	.LVL314:
 331:./fs/pipefs/pipefs.c ****         kfree(dentry);
 3262              		.loc 1 331 5 is_stmt 1 view .LVU1034
 331:./fs/pipefs/pipefs.c ****         kfree(dentry);
 3263              		.loc 1 331 7 is_stmt 0 view .LVU1035
 3264 003a 0746     		mov	r7, r0
 3265 003c A0B1     		cbz	r0, .L192
 337:./fs/pipefs/pipefs.c **** 
 3266              		.loc 1 337 5 is_stmt 1 view .LVU1036
 337:./fs/pipefs/pipefs.c **** 
 3267              		.loc 1 337 19 is_stmt 0 view .LVU1037
 3268 003e A064     		str	r0, [r4, #72]
 339:./fs/pipefs/pipefs.c ****     if(sb == NULL){
ARM GAS  /tmp/ccZnep12.s 			page 165


 3269              		.loc 1 339 5 is_stmt 1 view .LVU1038
 339:./fs/pipefs/pipefs.c ****     if(sb == NULL){
 3270              		.loc 1 339 29 is_stmt 0 view .LVU1039
 3271 0040 3046     		mov	r0, r6
 3272              	.LVL315:
 339:./fs/pipefs/pipefs.c ****     if(sb == NULL){
 3273              		.loc 1 339 29 view .LVU1040
 3274 0042 FFF7FEFF 		bl	pipefs_get_vfs_superblock
 3275              	.LVL316:
 340:./fs/pipefs/pipefs.c ****         kfree(root);
 3276              		.loc 1 340 5 is_stmt 1 view .LVU1041
 340:./fs/pipefs/pipefs.c ****         kfree(root);
 3277              		.loc 1 340 7 is_stmt 0 view .LVU1042
 3278 0046 D8B1     		cbz	r0, .L193
 347:./fs/pipefs/pipefs.c ****     root->d_sb = sb;
 3279              		.loc 1 347 5 is_stmt 1 view .LVU1043
 347:./fs/pipefs/pipefs.c ****     root->d_sb = sb;
 3280              		.loc 1 347 16 is_stmt 0 view .LVU1044
 3281 0048 4461     		str	r4, [r0, #20]
 348:./fs/pipefs/pipefs.c **** 
 3282              		.loc 1 348 5 is_stmt 1 view .LVU1045
 348:./fs/pipefs/pipefs.c **** 
 3283              		.loc 1 348 16 is_stmt 0 view .LVU1046
 3284 004a 2065     		str	r0, [r4, #80]
 350:./fs/pipefs/pipefs.c **** }
 3285              		.loc 1 350 5 is_stmt 1 view .LVU1047
 3286              	.LVL317:
 3287              	.L182:
 351:./fs/pipefs/pipefs.c **** 
 3288              		.loc 1 351 1 is_stmt 0 view .LVU1048
 3289 004c 2046     		mov	r0, r4
 3290 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3291              	.LVL318:
 3292              	.L190:
 315:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);   
 3293              		.loc 1 315 9 is_stmt 1 view .LVU1049
 3294 0050 3046     		mov	r0, r6
 3295              	.LVL319:
 315:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);   
 3296              		.loc 1 315 9 is_stmt 0 view .LVU1050
 3297 0052 FFF7FEFF 		bl	pipefs_superblock_destory
 3298              	.LVL320:
 316:./fs/pipefs/pipefs.c ****     }
 3299              		.loc 1 316 9 is_stmt 1 view .LVU1051
 316:./fs/pipefs/pipefs.c ****     }
 3300              		.loc 1 316 16 is_stmt 0 view .LVU1052
 3301 0056 6FF00B04 		mvn	r4, #11
 3302              	.LVL321:
 316:./fs/pipefs/pipefs.c ****     }
 3303              		.loc 1 316 16 view .LVU1053
 3304 005a F7E7     		b	.L182
 3305              	.LVL322:
 3306              	.L191:
 323:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3307              		.loc 1 323 9 is_stmt 1 view .LVU1054
 3308              	.LBB352:
 3309              	.LBI352:
ARM GAS  /tmp/ccZnep12.s 			page 166


 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3310              		.loc 4 383 20 view .LVU1055
 3311              	.LBB353:
 384:./include/linux/slab.h **** }
 3312              		.loc 4 384 2 view .LVU1056
 3313 005c 2046     		mov	r0, r4
 3314              	.LVL323:
 384:./include/linux/slab.h **** }
 3315              		.loc 4 384 2 is_stmt 0 view .LVU1057
 3316 005e FFF7FEFF 		bl	__sfree__
 3317              	.LVL324:
 384:./include/linux/slab.h **** }
 3318              		.loc 4 384 2 view .LVU1058
 3319              	.LBE353:
 3320              	.LBE352:
 324:./fs/pipefs/pipefs.c ****     }
 3321              		.loc 1 324 9 is_stmt 1 view .LVU1059
 324:./fs/pipefs/pipefs.c ****     }
 3322              		.loc 1 324 16 is_stmt 0 view .LVU1060
 3323 0062 6FF00B04 		mvn	r4, #11
 3324              	.LVL325:
 324:./fs/pipefs/pipefs.c ****     }
 3325              		.loc 1 324 16 view .LVU1061
 3326 0066 F1E7     		b	.L182
 3327              	.LVL326:
 3328              	.L192:
 332:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3329              		.loc 1 332 9 is_stmt 1 view .LVU1062
 3330              	.LBB354:
 3331              	.LBI354:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3332              		.loc 4 383 20 view .LVU1063
 3333              	.LBB355:
 384:./include/linux/slab.h **** }
 3334              		.loc 4 384 2 view .LVU1064
 3335 0068 2846     		mov	r0, r5
 3336              	.LVL327:
 384:./include/linux/slab.h **** }
 3337              		.loc 4 384 2 is_stmt 0 view .LVU1065
 3338 006a FFF7FEFF 		bl	__sfree__
 3339              	.LVL328:
 384:./include/linux/slab.h **** }
 3340              		.loc 4 384 2 view .LVU1066
 3341              	.LBE355:
 3342              	.LBE354:
 333:./fs/pipefs/pipefs.c ****         kfree(root);
 3343              		.loc 1 333 9 is_stmt 1 view .LVU1067
 3344 006e 3046     		mov	r0, r6
 3345 0070 FFF7FEFF 		bl	pipefs_superblock_destory
 3346              	.LVL329:
 334:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);        
 3347              		.loc 1 334 9 view .LVU1068
 3348              	.LBB356:
 3349              	.LBI356:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3350              		.loc 4 383 20 view .LVU1069
 3351              	.LBB357:
ARM GAS  /tmp/ccZnep12.s 			page 167


 384:./include/linux/slab.h **** }
 3352              		.loc 4 384 2 view .LVU1070
 3353 0074 2046     		mov	r0, r4
 3354 0076 FFF7FEFF 		bl	__sfree__
 3355              	.LVL330:
 384:./include/linux/slab.h **** }
 3356              		.loc 4 384 2 is_stmt 0 view .LVU1071
 3357              	.LBE357:
 3358              	.LBE356:
 335:./fs/pipefs/pipefs.c ****     } 
 3359              		.loc 1 335 9 is_stmt 1 view .LVU1072
 335:./fs/pipefs/pipefs.c ****     } 
 3360              		.loc 1 335 16 is_stmt 0 view .LVU1073
 3361 007a 6FF00B04 		mvn	r4, #11
 3362              	.LVL331:
 335:./fs/pipefs/pipefs.c ****     } 
 3363              		.loc 1 335 16 view .LVU1074
 3364 007e E5E7     		b	.L182
 3365              	.LVL332:
 3366              	.L193:
 341:./fs/pipefs/pipefs.c ****         kfree(dentry);
 3367              		.loc 1 341 9 is_stmt 1 view .LVU1075
 3368              	.LBB358:
 3369              	.LBI358:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3370              		.loc 4 383 20 view .LVU1076
 3371              	.LBB359:
 384:./include/linux/slab.h **** }
 3372              		.loc 4 384 2 view .LVU1077
 3373 0080 2046     		mov	r0, r4
 3374              	.LVL333:
 384:./include/linux/slab.h **** }
 3375              		.loc 4 384 2 is_stmt 0 view .LVU1078
 3376 0082 FFF7FEFF 		bl	__sfree__
 3377              	.LVL334:
 384:./include/linux/slab.h **** }
 3378              		.loc 4 384 2 view .LVU1079
 3379              	.LBE359:
 3380              	.LBE358:
 342:./fs/pipefs/pipefs.c ****         inode_put(root_inode);
 3381              		.loc 1 342 9 is_stmt 1 view .LVU1080
 3382              	.LBB360:
 3383              	.LBI360:
 383:./include/linux/slab.h **** 	__sfree__((void*)ptr);
 3384              		.loc 4 383 20 view .LVU1081
 3385              	.LBB361:
 384:./include/linux/slab.h **** }
 3386              		.loc 4 384 2 view .LVU1082
 3387 0086 2846     		mov	r0, r5
 3388 0088 FFF7FEFF 		bl	__sfree__
 3389              	.LVL335:
 384:./include/linux/slab.h **** }
 3390              		.loc 4 384 2 is_stmt 0 view .LVU1083
 3391              	.LBE361:
 3392              	.LBE360:
 343:./fs/pipefs/pipefs.c ****         pipefs_superblock_destory(fs_superblock);
 3393              		.loc 1 343 9 is_stmt 1 view .LVU1084
ARM GAS  /tmp/ccZnep12.s 			page 168


 3394 008c 3846     		mov	r0, r7
 3395 008e FFF7FEFF 		bl	inode_put
 3396              	.LVL336:
 344:./fs/pipefs/pipefs.c ****         return ERR_PTR(-ENOMEM);       
 3397              		.loc 1 344 9 view .LVU1085
 3398 0092 3046     		mov	r0, r6
 3399 0094 FFF7FEFF 		bl	pipefs_superblock_destory
 3400              	.LVL337:
 345:./fs/pipefs/pipefs.c ****     }
 3401              		.loc 1 345 9 view .LVU1086
 345:./fs/pipefs/pipefs.c ****     }
 3402              		.loc 1 345 16 is_stmt 0 view .LVU1087
 3403 0098 6FF00B04 		mvn	r4, #11
 3404              	.LVL338:
 345:./fs/pipefs/pipefs.c ****     }
 3405              		.loc 1 345 16 view .LVU1088
 3406 009c D6E7     		b	.L182
 3407              	.LVL339:
 3408              	.L188:
 311:./fs/pipefs/pipefs.c ****     }
 3409              		.loc 1 311 16 view .LVU1089
 3410 009e 6FF00B04 		mvn	r4, #11
 3411 00a2 D3E7     		b	.L182
 3412              	.L195:
 3413              		.align	2
 3414              	.L194:
 3415 00a4 00000000 		.word	.LC1
 3416 00a8 4E61BC00 		.word	12345678
 3417              		.cfi_endproc
 3418              	.LFE1054:
 3420              		.section	.text.pipe_buffer_read,"ax",%progbits
 3421              		.align	1
 3422              		.global	pipe_buffer_read
 3423              		.syntax unified
 3424              		.thumb
 3425              		.thumb_func
 3427              	pipe_buffer_read:
 3428              	.LVL340:
 3429              	.LFB1037:
  31:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3430              		.loc 1 31 1 is_stmt 1 view -0
 3431              		.cfi_startproc
 3432              		@ args = 0, pretend = 0, frame = 0
 3433              		@ frame_needed = 0, uses_anonymous_args = 0
  31:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3434              		.loc 1 31 1 is_stmt 0 view .LVU1091
 3435 0000 70B5     		push	{r4, r5, r6, lr}
 3436              	.LCFI43:
 3437              		.cfi_def_cfa_offset 16
 3438              		.cfi_offset 4, -16
 3439              		.cfi_offset 5, -12
 3440              		.cfi_offset 6, -8
 3441              		.cfi_offset 14, -4
 3442 0002 0446     		mov	r4, r0
 3443 0004 0D46     		mov	r5, r1
  32:./fs/pipefs/pipefs.c **** 
 3444              		.loc 1 32 5 is_stmt 1 view .LVU1092
ARM GAS  /tmp/ccZnep12.s 			page 169


 3445 0006 00F20C46 		addw	r6, r0, #1036
 3446 000a 3046     		mov	r0, r6
 3447              	.LVL341:
  32:./fs/pipefs/pipefs.c **** 
 3448              		.loc 1 32 5 is_stmt 0 view .LVU1093
 3449 000c FFF7FEFF 		bl	spin_lock
 3450              	.LVL342:
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3451              		.loc 1 34 5 is_stmt 1 view .LVU1094
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3452              		.loc 1 34 12 is_stmt 0 view .LVU1095
 3453 0010 D4F80424 		ldr	r2, [r4, #1028]
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3454              		.loc 1 34 25 view .LVU1096
 3455 0014 D4F80834 		ldr	r3, [r4, #1032]
  34:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3456              		.loc 1 34 8 view .LVU1097
 3457 0018 9A42     		cmp	r2, r3
 3458 001a 11D0     		beq	.L200
  39:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
 3459              		.loc 1 39 5 is_stmt 1 view .LVU1098
  39:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
 3460              		.loc 1 39 26 is_stmt 0 view .LVU1099
 3461 001c E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
  39:./fs/pipefs/pipefs.c ****     buf->tail = (buf->tail + 1) % buf->size;
 3462              		.loc 1 39 13 view .LVU1100
 3463 001e 2B70     		strb	r3, [r5]
  40:./fs/pipefs/pipefs.c **** 
 3464              		.loc 1 40 5 is_stmt 1 view .LVU1101
  40:./fs/pipefs/pipefs.c **** 
 3465              		.loc 1 40 21 is_stmt 0 view .LVU1102
 3466 0020 D4F80834 		ldr	r3, [r4, #1032]
  40:./fs/pipefs/pipefs.c **** 
 3467              		.loc 1 40 28 view .LVU1103
 3468 0024 0133     		adds	r3, r3, #1
  40:./fs/pipefs/pipefs.c **** 
 3469              		.loc 1 40 38 view .LVU1104
 3470 0026 D4F80024 		ldr	r2, [r4, #1024]
  40:./fs/pipefs/pipefs.c **** 
 3471              		.loc 1 40 33 view .LVU1105
 3472 002a B3FBF2F1 		udiv	r1, r3, r2
 3473 002e 02FB1133 		mls	r3, r2, r1, r3
  40:./fs/pipefs/pipefs.c **** 
 3474              		.loc 1 40 15 view .LVU1106
 3475 0032 C4F80834 		str	r3, [r4, #1032]
  42:./fs/pipefs/pipefs.c ****     return 0;
 3476              		.loc 1 42 5 is_stmt 1 view .LVU1107
 3477 0036 3046     		mov	r0, r6
 3478 0038 FFF7FEFF 		bl	spin_unlock
 3479              	.LVL343:
  43:./fs/pipefs/pipefs.c **** }
 3480              		.loc 1 43 5 view .LVU1108
  43:./fs/pipefs/pipefs.c **** }
 3481              		.loc 1 43 12 is_stmt 0 view .LVU1109
 3482 003c 0020     		movs	r0, #0
 3483              	.L196:
  44:./fs/pipefs/pipefs.c **** 
ARM GAS  /tmp/ccZnep12.s 			page 170


 3484              		.loc 1 44 1 view .LVU1110
 3485 003e 70BD     		pop	{r4, r5, r6, pc}
 3486              	.LVL344:
 3487              	.L200:
  35:./fs/pipefs/pipefs.c ****         return -1; // Buffer empty
 3488              		.loc 1 35 9 is_stmt 1 view .LVU1111
 3489 0040 3046     		mov	r0, r6
 3490 0042 FFF7FEFF 		bl	spin_unlock
 3491              	.LVL345:
  36:./fs/pipefs/pipefs.c ****     }
 3492              		.loc 1 36 9 view .LVU1112
  36:./fs/pipefs/pipefs.c ****     }
 3493              		.loc 1 36 16 is_stmt 0 view .LVU1113
 3494 0046 4FF0FF30 		mov	r0, #-1
 3495 004a F8E7     		b	.L196
 3496              		.cfi_endproc
 3497              	.LFE1037:
 3499              		.section	.text.pipefs_read,"ax",%progbits
 3500              		.align	1
 3501              		.syntax unified
 3502              		.thumb
 3503              		.thumb_func
 3505              	pipefs_read:
 3506              	.LVL346:
 3507              	.LFB1041:
  81:./fs/pipefs/pipefs.c ****     for(int i = 0;i < size;i++)
 3508              		.loc 1 81 1 is_stmt 1 view -0
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 0
 3511              		@ frame_needed = 0, uses_anonymous_args = 0
  81:./fs/pipefs/pipefs.c ****     for(int i = 0;i < size;i++)
 3512              		.loc 1 81 1 is_stmt 0 view .LVU1115
 3513 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3514              	.LCFI44:
 3515              		.cfi_def_cfa_offset 24
 3516              		.cfi_offset 4, -24
 3517              		.cfi_offset 5, -20
 3518              		.cfi_offset 6, -16
 3519              		.cfi_offset 7, -12
 3520              		.cfi_offset 8, -8
 3521              		.cfi_offset 14, -4
 3522 0004 0646     		mov	r6, r0
 3523 0006 0D46     		mov	r5, r1
 3524 0008 9046     		mov	r8, r2
  82:./fs/pipefs/pipefs.c ****     {
 3525              		.loc 1 82 5 is_stmt 1 view .LVU1116
 3526              	.LBB362:
  82:./fs/pipefs/pipefs.c ****     {
 3527              		.loc 1 82 9 view .LVU1117
 3528              	.LVL347:
  82:./fs/pipefs/pipefs.c ****     {
 3529              		.loc 1 82 13 is_stmt 0 view .LVU1118
 3530 000a 0027     		movs	r7, #0
  82:./fs/pipefs/pipefs.c ****     {
 3531              		.loc 1 82 5 view .LVU1119
 3532 000c 0BE0     		b	.L202
 3533              	.LVL348:
ARM GAS  /tmp/ccZnep12.s 			page 171


 3534              	.L203:
  85:./fs/pipefs/pipefs.c ****         }
 3535              		.loc 1 85 13 is_stmt 1 view .LVU1120
 3536 000e 0120     		movs	r0, #1
 3537 0010 FFF7FEFF 		bl	__delay
 3538              	.LVL349:
 3539              	.L204:
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3540              		.loc 1 84 99 view .LVU1121
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3541              		.loc 1 84 61 is_stmt 0 view .LVU1122
 3542 0014 F36A     		ldr	r3, [r6, #44]
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3543              		.loc 1 84 70 view .LVU1123
 3544 0016 9B6D     		ldr	r3, [r3, #88]
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3545              		.loc 1 84 16 view .LVU1124
 3546 0018 2919     		adds	r1, r5, r4
 3547 001a 986B     		ldr	r0, [r3, #56]
 3548 001c FFF7FEFF 		bl	pipe_buffer_read
 3549              	.LVL350:
  84:./fs/pipefs/pipefs.c ****             __delay(1);
 3550              		.loc 1 84 99 discriminator 1 view .LVU1125
 3551 0020 0028     		cmp	r0, #0
 3552 0022 F4DB     		blt	.L203
  82:./fs/pipefs/pipefs.c ****     {
 3553              		.loc 1 82 29 is_stmt 1 discriminator 2 view .LVU1126
 3554 0024 0137     		adds	r7, r7, #1
 3555              	.LVL351:
 3556              	.L202:
  82:./fs/pipefs/pipefs.c ****     {
 3557              		.loc 1 82 21 discriminator 1 view .LVU1127
 3558 0026 3C46     		mov	r4, r7
 3559 0028 4745     		cmp	r7, r8
 3560 002a F3D3     		bcc	.L204
 3561              	.LBE362:
  88:./fs/pipefs/pipefs.c **** }
 3562              		.loc 1 88 5 view .LVU1128
  89:./fs/pipefs/pipefs.c **** 
 3563              		.loc 1 89 1 is_stmt 0 view .LVU1129
 3564 002c 0020     		movs	r0, #0
 3565 002e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
  89:./fs/pipefs/pipefs.c **** 
 3566              		.loc 1 89 1 view .LVU1130
 3567              		.cfi_endproc
 3568              	.LFE1041:
 3570              		.section	.text.pipe_buffer_write,"ax",%progbits
 3571              		.align	1
 3572              		.global	pipe_buffer_write
 3573              		.syntax unified
 3574              		.thumb
 3575              		.thumb_func
 3577              	pipe_buffer_write:
 3578              	.LVL352:
 3579              	.LFB1038:
  47:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3580              		.loc 1 47 1 is_stmt 1 view -0
ARM GAS  /tmp/ccZnep12.s 			page 172


 3581              		.cfi_startproc
 3582              		@ args = 0, pretend = 0, frame = 0
 3583              		@ frame_needed = 0, uses_anonymous_args = 0
  47:./fs/pipefs/pipefs.c ****     spin_lock(&buf->lock);
 3584              		.loc 1 47 1 is_stmt 0 view .LVU1132
 3585 0000 70B5     		push	{r4, r5, r6, lr}
 3586              	.LCFI45:
 3587              		.cfi_def_cfa_offset 16
 3588              		.cfi_offset 4, -16
 3589              		.cfi_offset 5, -12
 3590              		.cfi_offset 6, -8
 3591              		.cfi_offset 14, -4
 3592 0002 0446     		mov	r4, r0
 3593 0004 0D46     		mov	r5, r1
  48:./fs/pipefs/pipefs.c **** 
 3594              		.loc 1 48 5 is_stmt 1 view .LVU1133
 3595 0006 00F20C46 		addw	r6, r0, #1036
 3596 000a 3046     		mov	r0, r6
 3597              	.LVL353:
  48:./fs/pipefs/pipefs.c **** 
 3598              		.loc 1 48 5 is_stmt 0 view .LVU1134
 3599 000c FFF7FEFF 		bl	spin_lock
 3600              	.LVL354:
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3601              		.loc 1 50 5 is_stmt 1 view .LVU1135
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3602              		.loc 1 50 13 is_stmt 0 view .LVU1136
 3603 0010 D4F80414 		ldr	r1, [r4, #1028]
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3604              		.loc 1 50 20 view .LVU1137
 3605 0014 4B1C     		adds	r3, r1, #1
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3606              		.loc 1 50 30 view .LVU1138
 3607 0016 D4F80024 		ldr	r2, [r4, #1024]
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3608              		.loc 1 50 25 view .LVU1139
 3609 001a B3FBF2F0 		udiv	r0, r3, r2
 3610 001e 02FB1033 		mls	r3, r2, r0, r3
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3611              		.loc 1 50 43 view .LVU1140
 3612 0022 D4F80824 		ldr	r2, [r4, #1032]
  50:./fs/pipefs/pipefs.c ****         spin_unlock(&buf->lock);
 3613              		.loc 1 50 8 view .LVU1141
 3614 0026 9342     		cmp	r3, r2
 3615 0028 07D0     		beq	.L210
  55:./fs/pipefs/pipefs.c ****     buf->head = (buf->head + 1) % buf->size;
 3616              		.loc 1 55 5 is_stmt 1 view .LVU1142
  55:./fs/pipefs/pipefs.c ****     buf->head = (buf->head + 1) % buf->size;
 3617              		.loc 1 55 28 is_stmt 0 view .LVU1143
 3618 002a 6554     		strb	r5, [r4, r1]
  56:./fs/pipefs/pipefs.c **** 
 3619              		.loc 1 56 5 is_stmt 1 view .LVU1144
  56:./fs/pipefs/pipefs.c **** 
 3620              		.loc 1 56 15 is_stmt 0 view .LVU1145
 3621 002c C4F80434 		str	r3, [r4, #1028]
  58:./fs/pipefs/pipefs.c ****     return 0;
 3622              		.loc 1 58 5 is_stmt 1 view .LVU1146
ARM GAS  /tmp/ccZnep12.s 			page 173


 3623 0030 3046     		mov	r0, r6
 3624 0032 FFF7FEFF 		bl	spin_unlock
 3625              	.LVL355:
  59:./fs/pipefs/pipefs.c **** }
 3626              		.loc 1 59 5 view .LVU1147
  59:./fs/pipefs/pipefs.c **** }
 3627              		.loc 1 59 12 is_stmt 0 view .LVU1148
 3628 0036 0020     		movs	r0, #0
 3629              	.L206:
  60:./fs/pipefs/pipefs.c **** 
 3630              		.loc 1 60 1 view .LVU1149
 3631 0038 70BD     		pop	{r4, r5, r6, pc}
 3632              	.LVL356:
 3633              	.L210:
  51:./fs/pipefs/pipefs.c ****         return -1; // Buffer full
 3634              		.loc 1 51 9 is_stmt 1 view .LVU1150
 3635 003a 3046     		mov	r0, r6
 3636 003c FFF7FEFF 		bl	spin_unlock
 3637              	.LVL357:
  52:./fs/pipefs/pipefs.c ****     }
 3638              		.loc 1 52 9 view .LVU1151
  52:./fs/pipefs/pipefs.c ****     }
 3639              		.loc 1 52 16 is_stmt 0 view .LVU1152
 3640 0040 4FF0FF30 		mov	r0, #-1
 3641 0044 F8E7     		b	.L206
 3642              		.cfi_endproc
 3643              	.LFE1038:
 3645              		.section	.text.pipefs_write,"ax",%progbits
 3646              		.align	1
 3647              		.syntax unified
 3648              		.thumb
 3649              		.thumb_func
 3651              	pipefs_write:
 3652              	.LVL358:
 3653              	.LFB1042:
  91:./fs/pipefs/pipefs.c ****     int i;
 3654              		.loc 1 91 92 is_stmt 1 view -0
 3655              		.cfi_startproc
 3656              		@ args = 0, pretend = 0, frame = 0
 3657              		@ frame_needed = 0, uses_anonymous_args = 0
  91:./fs/pipefs/pipefs.c ****     int i;
 3658              		.loc 1 91 92 is_stmt 0 view .LVU1154
 3659 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3660              	.LCFI46:
 3661              		.cfi_def_cfa_offset 24
 3662              		.cfi_offset 4, -24
 3663              		.cfi_offset 5, -20
 3664              		.cfi_offset 6, -16
 3665              		.cfi_offset 7, -12
 3666              		.cfi_offset 8, -8
 3667              		.cfi_offset 14, -4
 3668 0004 0646     		mov	r6, r0
 3669 0006 0D46     		mov	r5, r1
 3670 0008 9046     		mov	r8, r2
  92:./fs/pipefs/pipefs.c ****     for(i = 0;i < size;i++)
 3671              		.loc 1 92 5 is_stmt 1 view .LVU1155
  93:./fs/pipefs/pipefs.c ****     {
ARM GAS  /tmp/ccZnep12.s 			page 174


 3672              		.loc 1 93 5 view .LVU1156
 3673              	.LVL359:
  93:./fs/pipefs/pipefs.c ****     {
 3674              		.loc 1 93 11 is_stmt 0 view .LVU1157
 3675 000a 0027     		movs	r7, #0
  93:./fs/pipefs/pipefs.c ****     {
 3676              		.loc 1 93 5 view .LVU1158
 3677 000c 0BE0     		b	.L212
 3678              	.LVL360:
 3679              	.L213:
  96:./fs/pipefs/pipefs.c ****         }
 3680              		.loc 1 96 13 is_stmt 1 view .LVU1159
 3681 000e 0120     		movs	r0, #1
 3682 0010 FFF7FEFF 		bl	__delay
 3683              	.LVL361:
 3684              	.L214:
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3685              		.loc 1 95 99 view .LVU1160
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3686              		.loc 1 95 62 is_stmt 0 view .LVU1161
 3687 0014 F36A     		ldr	r3, [r6, #44]
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3688              		.loc 1 95 71 view .LVU1162
 3689 0016 9B6D     		ldr	r3, [r3, #88]
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3690              		.loc 1 95 16 view .LVU1163
 3691 0018 295D     		ldrb	r1, [r5, r4]	@ zero_extendqisi2
 3692 001a 986B     		ldr	r0, [r3, #56]
 3693 001c FFF7FEFF 		bl	pipe_buffer_write
 3694              	.LVL362:
  95:./fs/pipefs/pipefs.c ****             __delay(1);
 3695              		.loc 1 95 99 discriminator 1 view .LVU1164
 3696 0020 0028     		cmp	r0, #0
 3697 0022 F4DB     		blt	.L213
  93:./fs/pipefs/pipefs.c ****     {
 3698              		.loc 1 93 25 is_stmt 1 discriminator 2 view .LVU1165
 3699 0024 0137     		adds	r7, r7, #1
 3700              	.LVL363:
 3701              	.L212:
  93:./fs/pipefs/pipefs.c ****     {
 3702              		.loc 1 93 17 discriminator 1 view .LVU1166
 3703 0026 3C46     		mov	r4, r7
 3704 0028 4745     		cmp	r7, r8
 3705 002a F3D3     		bcc	.L214
  99:./fs/pipefs/pipefs.c **** }
 3706              		.loc 1 99 5 view .LVU1167
 100:./fs/pipefs/pipefs.c **** 
 3707              		.loc 1 100 1 is_stmt 0 view .LVU1168
 3708 002c 0020     		movs	r0, #0
 3709 002e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 100:./fs/pipefs/pipefs.c **** 
 3710              		.loc 1 100 1 view .LVU1169
 3711              		.cfi_endproc
 3712              	.LFE1042:
 3714              		.section	.fsinitcall,"aw"
 3715              		.align	2
 3718              	_initcall_pipefs_ops_init:
ARM GAS  /tmp/ccZnep12.s 			page 175


 3719 0000 00000000 		.word	pipefs_ops_init
 3720              		.section	.rodata.str1.4,"aMS",%progbits,1
 3721              		.align	2
 3722              	.LC2:
 3723 0000 70697065 		.ascii	"pipefs\000"
 3723      667300
 3724              		.section	.data.fs_type,"aw"
 3725              		.align	2
 3728              	fs_type:
 3729 0000 00000000 		.word	.LC2
 3730 0004 00000000 		.word	0
 3731 0008 00000000 		.word	0
 3732 000c 00000000 		.space	4
 3733 0010 00000000 		.word	pipefs_mount
 3734 0014 00000000 		.word	pipefs_kill_sb
 3735 0018 00000000 		.word	0
 3736 001c 00000000 		.space	8
 3736      00000000 
 3737              		.section	.data.pipefs_inode_operation,"aw"
 3738              		.align	2
 3741              	pipefs_inode_operation:
 3742 0000 00000000 		.word	pipefs_vfs_lookup
 3743 0004 00000000 		.space	16
 3743      00000000 
 3743      00000000 
 3743      00000000 
 3744 0014 00000000 		.word	pipefs_create
 3745 0018 00000000 		.word	pipefs_link
 3746 001c 00000000 		.word	pipefs_unlink
 3747 0020 00000000 		.space	4
 3748 0024 00000000 		.word	pipefs_mkdir
 3749 0028 00000000 		.word	pipefs_rmdir
 3750 002c 00000000 		.space	8
 3750      00000000 
 3751 0034 00000000 		.word	pipefs_setattr
 3752 0038 00000000 		.word	pipefs_getattr
 3753 003c 00000000 		.space	40
 3753      00000000 
 3753      00000000 
 3753      00000000 
 3753      00000000 
 3754              		.section	.data.pipefs_dentry_operation,"aw"
 3755              		.align	7
 3758              	pipefs_dentry_operation:
 3759 0000 00000000 		.space	24
 3759      00000000 
 3759      00000000 
 3759      00000000 
 3759      00000000 
 3760 0018 00000000 		.word	pipefs_release_dentry
 3761 001c 00000000 		.space	100
 3761      00000000 
 3761      00000000 
 3761      00000000 
 3761      00000000 
 3762              		.section	.data.pipefs_super_operation,"aw"
 3763              		.align	2
ARM GAS  /tmp/ccZnep12.s 			page 176


 3766              	pipefs_super_operation:
 3767 0000 00000000 		.word	pipefs_alloc_inode
 3768 0004 00000000 		.word	pipefs_destroy_inode
 3769 0008 00000000 		.word	0
 3770 000c 00000000 		.word	0
 3771 0010 00000000 		.word	0
 3772 0014 00000000 		.word	0
 3773 0018 00000000 		.space	4
 3774 001c 00000000 		.word	pipefs_kill_sb
 3775 0020 00000000 		.word	0
 3776 0024 00000000 		.space	16
 3776      00000000 
 3776      00000000 
 3776      00000000 
 3777 0034 00000000 		.word	pipefs_statfs
 3778 0038 00000000 		.space	36
 3778      00000000 
 3778      00000000 
 3778      00000000 
 3778      00000000 
 3779              		.section	.data.pipefs_file_fops,"aw"
 3780              		.align	2
 3783              	pipefs_file_fops:
 3784 0000 00000000 		.word	0
 3785 0004 00000000 		.space	8
 3785      00000000 
 3786 000c 00000000 		.word	pipefs_read
 3787 0010 00000000 		.word	pipefs_write
 3788 0014 00000000 		.space	32
 3788      00000000 
 3788      00000000 
 3788      00000000 
 3788      00000000 
 3789 0034 00000000 		.word	pipefs_open
 3790 0038 00000000 		.space	4
 3791 003c 00000000 		.word	pipefs_release
 3792 0040 00000000 		.space	72
 3792      00000000 
 3792      00000000 
 3792      00000000 
 3792      00000000 
 3793              		.text
 3794              	.Letext0:
 3795              		.file 10 "./include/asm-generic/int-l64.h"
 3796              		.file 11 "./include/asm-generic/posix_types.h"
 3797              		.file 12 "./include/uapi/linux/types.h"
 3798              		.file 13 "./include/linux/types.h"
 3799              		.file 14 "./include/linux/init.h"
 3800              		.file 15 "./include/linux/time64.h"
 3801              		.file 16 "./include/linux/uidgid_types.h"
 3802              		.file 17 "./include/linux/stat.h"
 3803              		.file 18 "./include/linux/errseq.h"
 3804              		.file 19 "./arch/arm_m/include/asm/sched.h"
 3805              		.file 20 "./include/linux/sched.h"
 3806              		.file 21 "./include/linux/lockdep_types.h"
 3807              		.file 22 "./include/linux/spinlock_types_raw.h"
 3808              		.file 23 "./include/linux/spinlock_types.h"
ARM GAS  /tmp/ccZnep12.s 			page 177


 3809              		.file 24 "./include/linux/rbtree_types.h"
 3810              		.file 25 "./include/linux/projid.h"
 3811              		.file 26 "./include/linux/fs.h"
 3812              		.file 27 "./include/linux/mnt_idmapping.h"
 3813              		.file 28 "./include/linux/mutex.h"
 3814              		.file 29 "./include/linux/uio.h"
 3815              		.file 30 "./include/linux/migrate_mode.h"
 3816              		.file 31 "./include/linux/wait.h"
 3817              		.file 32 "./include/linux/pipe_fs_i.h"
 3818              		.file 33 "./include/linux/xarray.h"
 3819              		.file 34 "./include/linux/rw_hint.h"
 3820              		.file 35 "./include/linux/stddef.h"
 3821              		.file 36 "./include/linux/gfp_types.h"
 3822              		.file 37 "./include/linux/reciprocal_div.h"
 3823              		.file 38 "./include/linux/mm_type.h"
 3824              		.file 39 "./include/linux/bvec.h"
 3825              		.file 40 "./include/linux/blk_types.h"
 3826              		.file 41 "./include/linux/blkdev.h"
 3827              		.file 42 "./include/linux/bio.h"
 3828              		.file 43 "./include/linux/mempool_super_haper.h"
 3829              		.file 44 "./include/linux/mempool.h"
 3830              		.file 45 "./include/linux/workqueue_types.h"
 3831              		.file 46 "./include/linux/blk-mq.h"
 3832              		.file 47 "./include/linux/dcache.h"
 3833              		.file 48 "./include/uapi/linux/pr.h"
 3834              		.file 49 "./include/linux/pr.h"
 3835              		.file 50 "./include/linux/hdreg.h"
 3836              		.file 51 "./include/linux/lockref.h"
 3837              		.file 52 "./include/linux/path.h"
 3838              		.file 53 "./include/linux/statfs.h"
 3839              		.file 54 "./include/linux/string.h"
 3840              		.file 55 "./arch/arm_m/include/asm/string.h"
 3841              		.file 56 "./include/linux/time.h"
 3842              		.file 57 "./include/linux/printk.h"
 3843              		.file 58 "./include/linux/instrumented.h"
 3844              		.file 59 "./include/linux/err.h"
 3845              		.file 60 "./include/linux/kcsan-checks.h"
 3846              		.file 61 "./include/linux/kasan-checks.h"
ARM GAS  /tmp/ccZnep12.s 			page 178


DEFINED SYMBOLS
                            *ABS*:00000000 pipefs.c
     /tmp/ccZnep12.s:21     .text.__spin_init:00000000 $t
     /tmp/ccZnep12.s:26     .text.__spin_init:00000000 __spin_init
     /tmp/ccZnep12.s:46     .text.__spin_unlock:00000000 $t
     /tmp/ccZnep12.s:51     .text.__spin_unlock:00000000 __spin_unlock
     /tmp/ccZnep12.s:69     .text.spin_lock_init:00000000 $t
     /tmp/ccZnep12.s:74     .text.spin_lock_init:00000000 spin_lock_init
     /tmp/ccZnep12.s:97     .text.spin_unlock:00000000 $t
     /tmp/ccZnep12.s:102    .text.spin_unlock:00000000 spin_unlock
     /tmp/ccZnep12.s:124    .text.pipefs_statfs:00000000 $t
     /tmp/ccZnep12.s:129    .text.pipefs_statfs:00000000 pipefs_statfs
     /tmp/ccZnep12.s:174    .text.pipefs_statfs:0000001c $d
     /tmp/ccZnep12.s:179    .text.pipefs_get_dentry:00000000 $t
     /tmp/ccZnep12.s:184    .text.pipefs_get_dentry:00000000 pipefs_get_dentry
     /tmp/ccZnep12.s:214    .text.pipefs_setattr:00000000 $t
     /tmp/ccZnep12.s:219    .text.pipefs_setattr:00000000 pipefs_setattr
     /tmp/ccZnep12.s:251    .text.__spin_lock:00000000 $t
     /tmp/ccZnep12.s:256    .text.__spin_lock:00000000 __spin_lock
     /tmp/ccZnep12.s:306    .text.spin_lock:00000000 $t
     /tmp/ccZnep12.s:311    .text.spin_lock:00000000 spin_lock
     /tmp/ccZnep12.s:371    .init.text:00000000 $t
     /tmp/ccZnep12.s:376    .init.text:00000000 pipefs_ops_init
     /tmp/ccZnep12.s:398    .init.text:0000000c $d
     /tmp/ccZnep12.s:3728   .data.fs_type:00000000 fs_type
     /tmp/ccZnep12.s:403    .text.pipefs_kill_sb:00000000 $t
     /tmp/ccZnep12.s:408    .text.pipefs_kill_sb:00000000 pipefs_kill_sb
     /tmp/ccZnep12.s:430    .rodata.pipefs_release.str1.4:00000000 $d
     /tmp/ccZnep12.s:434    .text.pipefs_release:00000000 $t
     /tmp/ccZnep12.s:439    .text.pipefs_release:00000000 pipefs_release
     /tmp/ccZnep12.s:465    .text.pipefs_release:0000000c $d
     /tmp/ccZnep12.s:470    .text.pipefs_open:00000000 $t
     /tmp/ccZnep12.s:475    .text.pipefs_open:00000000 pipefs_open
     /tmp/ccZnep12.s:540    .text.pipefs_create_empty_inode:00000000 $t
     /tmp/ccZnep12.s:545    .text.pipefs_create_empty_inode:00000000 pipefs_create_empty_inode
     /tmp/ccZnep12.s:785    .text.pipefs_create_empty_inode:00000068 $d
     /tmp/ccZnep12.s:790    .text.pipefs_get_inode:00000000 $t
     /tmp/ccZnep12.s:795    .text.pipefs_get_inode:00000000 pipefs_get_inode
     /tmp/ccZnep12.s:849    .text.pipefs_get_inode:00000020 $d
     /tmp/ccZnep12.s:3741   .data.pipefs_inode_operation:00000000 pipefs_inode_operation
     /tmp/ccZnep12.s:854    .text.pipefs_getattr:00000000 $t
     /tmp/ccZnep12.s:859    .text.pipefs_getattr:00000000 pipefs_getattr
     /tmp/ccZnep12.s:1002   .text.pipefs_getattr:0000007c $d
     /tmp/ccZnep12.s:1007   .text.pipefs_lookup:00000000 $t
     /tmp/ccZnep12.s:1012   .text.pipefs_lookup:00000000 pipefs_lookup
     /tmp/ccZnep12.s:1126   .text.pipefs_vfs_lookup:00000000 $t
     /tmp/ccZnep12.s:1131   .text.pipefs_vfs_lookup:00000000 pipefs_vfs_lookup
     /tmp/ccZnep12.s:1214   .text.pipefs_get_vfs_superblock:00000000 $t
     /tmp/ccZnep12.s:1219   .text.pipefs_get_vfs_superblock:00000000 pipefs_get_vfs_superblock
     /tmp/ccZnep12.s:1267   .text.pipefs_get_vfs_superblock:0000001c $d
     /tmp/ccZnep12.s:3758   .data.pipefs_dentry_operation:00000000 pipefs_dentry_operation
     /tmp/ccZnep12.s:3766   .data.pipefs_super_operation:00000000 pipefs_super_operation
     /tmp/ccZnep12.s:1273   .text.pipefs_superblock_create:00000000 $t
     /tmp/ccZnep12.s:1278   .text.pipefs_superblock_create:00000000 pipefs_superblock_create
     /tmp/ccZnep12.s:1482   .text.pipefs_superblock_create:00000068 $d
     /tmp/ccZnep12.s:3783   .data.pipefs_file_fops:00000000 pipefs_file_fops
     /tmp/ccZnep12.s:1488   .text.pipefs_inode_put:00000000 $t
ARM GAS  /tmp/ccZnep12.s 			page 179


     /tmp/ccZnep12.s:1493   .text.pipefs_inode_put:00000000 pipefs_inode_put
     /tmp/ccZnep12.s:1535   .text.dentry_put:00000000 $t
     /tmp/ccZnep12.s:1540   .text.dentry_put:00000000 dentry_put
     /tmp/ccZnep12.s:1758   .text.pipefs_release_dentry:00000000 $t
     /tmp/ccZnep12.s:1763   .text.pipefs_release_dentry:00000000 pipefs_release_dentry
     /tmp/ccZnep12.s:1795   .text.pipefs_rmdir:00000000 $t
     /tmp/ccZnep12.s:1800   .text.pipefs_rmdir:00000000 pipefs_rmdir
     /tmp/ccZnep12.s:1836   .text.pipefs_delete_dentry:00000000 $t
     /tmp/ccZnep12.s:1841   .text.pipefs_delete_dentry:00000000 pipefs_delete_dentry
     /tmp/ccZnep12.s:1989   .text.pipefs_unlink:00000000 $t
     /tmp/ccZnep12.s:1994   .text.pipefs_unlink:00000000 pipefs_unlink
     /tmp/ccZnep12.s:2030   .text.pipefs_create_dentry:00000000 $t
     /tmp/ccZnep12.s:2035   .text.pipefs_create_dentry:00000000 pipefs_create_dentry
     /tmp/ccZnep12.s:2303   .text.pipefs_create_dentry:000000a8 $d
     /tmp/ccZnep12.s:2308   .text.pipefs_create_inode:00000000 $t
     /tmp/ccZnep12.s:2313   .text.pipefs_create_inode:00000000 pipefs_create_inode
     /tmp/ccZnep12.s:2448   .text.pipefs_create_dir:00000000 $t
     /tmp/ccZnep12.s:2453   .text.pipefs_create_dir:00000000 pipefs_create_dir
     /tmp/ccZnep12.s:2497   .text.pipefs_create_dir:00000020 $d
     /tmp/ccZnep12.s:2502   .text.pipefs_mkdir:00000000 $t
     /tmp/ccZnep12.s:2507   .text.pipefs_mkdir:00000000 pipefs_mkdir
     /tmp/ccZnep12.s:2630   .text.pipefs_create_file:00000000 $t
     /tmp/ccZnep12.s:2635   .text.pipefs_create_file:00000000 pipefs_create_file
     /tmp/ccZnep12.s:2668   .text.pipefs_create:00000000 $t
     /tmp/ccZnep12.s:2673   .text.pipefs_create:00000000 pipefs_create
     /tmp/ccZnep12.s:2809   .text.pipefs_create:00000078 $d
     /tmp/ccZnep12.s:2814   .text.pipefs_link:00000000 $t
     /tmp/ccZnep12.s:2819   .text.pipefs_link:00000000 pipefs_link
     /tmp/ccZnep12.s:2891   .text.pipefs_destroy_inode:00000000 $t
     /tmp/ccZnep12.s:2896   .text.pipefs_destroy_inode:00000000 pipefs_destroy_inode
     /tmp/ccZnep12.s:3000   .text.pipefs_alloc_inode:00000000 $t
     /tmp/ccZnep12.s:3005   .text.pipefs_alloc_inode:00000000 pipefs_alloc_inode
     /tmp/ccZnep12.s:3090   .text.pipefs_alloc_inode:00000038 $d
     /tmp/ccZnep12.s:3096   .text.pipefs_superblock_destory:00000000 $t
     /tmp/ccZnep12.s:3101   .text.pipefs_superblock_destory:00000000 pipefs_superblock_destory
     /tmp/ccZnep12.s:3171   .rodata.pipefs_mount.str1.4:00000000 $d
     /tmp/ccZnep12.s:3175   .text.pipefs_mount:00000000 $t
     /tmp/ccZnep12.s:3180   .text.pipefs_mount:00000000 pipefs_mount
     /tmp/ccZnep12.s:3415   .text.pipefs_mount:000000a4 $d
     /tmp/ccZnep12.s:3421   .text.pipe_buffer_read:00000000 $t
     /tmp/ccZnep12.s:3427   .text.pipe_buffer_read:00000000 pipe_buffer_read
     /tmp/ccZnep12.s:3500   .text.pipefs_read:00000000 $t
     /tmp/ccZnep12.s:3505   .text.pipefs_read:00000000 pipefs_read
     /tmp/ccZnep12.s:3571   .text.pipe_buffer_write:00000000 $t
     /tmp/ccZnep12.s:3577   .text.pipe_buffer_write:00000000 pipe_buffer_write
     /tmp/ccZnep12.s:3646   .text.pipefs_write:00000000 $t
     /tmp/ccZnep12.s:3651   .text.pipefs_write:00000000 pipefs_write
     /tmp/ccZnep12.s:3715   .fsinitcall:00000000 $d
     /tmp/ccZnep12.s:3718   .fsinitcall:00000000 _initcall_pipefs_ops_init
     /tmp/ccZnep12.s:3721   .rodata.str1.4:00000000 $d
     /tmp/ccZnep12.s:3725   .data.fs_type:00000000 $d
     /tmp/ccZnep12.s:3738   .data.pipefs_inode_operation:00000000 $d
     /tmp/ccZnep12.s:3755   .data.pipefs_dentry_operation:00000000 $d
     /tmp/ccZnep12.s:3763   .data.pipefs_super_operation:00000000 $d
     /tmp/ccZnep12.s:3780   .data.pipefs_file_fops:00000000 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccZnep12.s 			page 180


stop_all_scheduler
start_all_scheduler
get_current_task
__delay
register_filesystem
put_super
printk
__smalloc__
new_inode
ktime_get
HZ
strcmp
d_add
alloc_super
__sfree__
simple_unlink
strlen
strcpy
d_getname
__d_alloc
inode_put
