ARM GAS  /tmp/ccCHVNBc.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"fdt_overlay.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./lib/fdt/fdt_overlay.c"
  20              		.section	.rodata.overlay_get_target_phandle.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 74617267 		.ascii	"target\000"
  23      657400
  24              		.section	.text.overlay_get_target_phandle,"ax",%progbits
  25              		.align	1
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  30              	overlay_get_target_phandle:
  31              	.LVL0:
  32              	.LFB75:
   1:./lib/fdt/fdt_overlay.c **** // SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause)
   2:./lib/fdt/fdt_overlay.c **** /*
   3:./lib/fdt/fdt_overlay.c ****  * libfdt - Flat Device Tree manipulation
   4:./lib/fdt/fdt_overlay.c ****  * Copyright (C) 2016 Free Electrons
   5:./lib/fdt/fdt_overlay.c ****  * Copyright (C) 2016 NextThing Co.
   6:./lib/fdt/fdt_overlay.c ****  */
   7:./lib/fdt/fdt_overlay.c **** #include <linux/libfdt_env.h>
   8:./lib/fdt/fdt_overlay.c **** 
   9:./lib/fdt/fdt_overlay.c **** #include <linux/fdt.h>
  10:./lib/fdt/fdt_overlay.c **** #include <linux/libfdt.h>
  11:./lib/fdt/fdt_overlay.c **** 
  12:./lib/fdt/fdt_overlay.c **** 
  13:./lib/fdt/fdt_overlay.c **** #include "libfdt_internal.h"
  14:./lib/fdt/fdt_overlay.c **** 
  15:./lib/fdt/fdt_overlay.c **** /**
  16:./lib/fdt/fdt_overlay.c ****  * overlay_get_target_phandle - retrieves the target phandle of a fragment
  17:./lib/fdt/fdt_overlay.c ****  * @fdto: pointer to the device tree overlay blob
  18:./lib/fdt/fdt_overlay.c ****  * @fragment: node offset of the fragment in the overlay
  19:./lib/fdt/fdt_overlay.c ****  *
  20:./lib/fdt/fdt_overlay.c ****  * overlay_get_target_phandle() retrieves the target phandle of an
  21:./lib/fdt/fdt_overlay.c ****  * overlay fragment when that fragment uses a phandle (target
  22:./lib/fdt/fdt_overlay.c ****  * property) instead of a path (target-path property).
  23:./lib/fdt/fdt_overlay.c ****  *
  24:./lib/fdt/fdt_overlay.c ****  * returns:
  25:./lib/fdt/fdt_overlay.c ****  *      the phandle pointed by the target property
ARM GAS  /tmp/ccCHVNBc.s 			page 2


  26:./lib/fdt/fdt_overlay.c ****  *      0, if the phandle was not found
  27:./lib/fdt/fdt_overlay.c ****  *	-1, if the phandle was malformed
  28:./lib/fdt/fdt_overlay.c ****  */
  29:./lib/fdt/fdt_overlay.c **** static uint32_t overlay_get_target_phandle(const void *fdto, int fragment)
  30:./lib/fdt/fdt_overlay.c **** {
  33              		.loc 1 30 1 view -0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              		.loc 1 30 1 is_stmt 0 view .LVU1
  38 0000 00B5     		push	{lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 14, -4
  42 0002 83B0     		sub	sp, sp, #12
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 16
  31:./lib/fdt/fdt_overlay.c **** 	const fdt32_t *val;
  45              		.loc 1 31 2 is_stmt 1 view .LVU2
  32:./lib/fdt/fdt_overlay.c **** 	int len;
  46              		.loc 1 32 2 view .LVU3
  33:./lib/fdt/fdt_overlay.c **** 
  34:./lib/fdt/fdt_overlay.c **** 	val = fdt_getprop(fdto, fragment, "target", &len);
  47              		.loc 1 34 2 view .LVU4
  48              		.loc 1 34 8 is_stmt 0 view .LVU5
  49 0004 01AB     		add	r3, sp, #4
  50 0006 104A     		ldr	r2, .L8
  51 0008 FFF7FEFF 		bl	fdt_getprop
  52              	.LVL1:
  35:./lib/fdt/fdt_overlay.c **** 	if (!val)
  53              		.loc 1 35 2 is_stmt 1 view .LVU6
  54              		.loc 1 35 5 is_stmt 0 view .LVU7
  55 000c A0B1     		cbz	r0, .L3
  36:./lib/fdt/fdt_overlay.c **** 		return 0;
  37:./lib/fdt/fdt_overlay.c **** 
  38:./lib/fdt/fdt_overlay.c **** 	if ((len != sizeof(*val)) || (fdt32_to_cpu(*val) == (uint32_t)-1))
  56              		.loc 1 38 2 is_stmt 1 view .LVU8
  57              		.loc 1 38 11 is_stmt 0 view .LVU9
  58 000e 019B     		ldr	r3, [sp, #4]
  59              		.loc 1 38 5 view .LVU10
  60 0010 042B     		cmp	r3, #4
  61 0012 13D1     		bne	.L4
  62              		.loc 1 38 32 discriminator 1 view .LVU11
  63 0014 0368     		ldr	r3, [r0]
  64              	.LVL2:
  65              	.LBB60:
  66              	.LBI60:
  67              		.file 2 "./include/linux/libfdt_env.h"
   1:./include/linux/libfdt_env.h **** /* SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause) */
   2:./include/linux/libfdt_env.h **** #ifndef LIBFDT_ENV_H
   3:./include/linux/libfdt_env.h **** #define LIBFDT_ENV_H
   4:./include/linux/libfdt_env.h **** /*
   5:./include/linux/libfdt_env.h ****  * libfdt - Flat Device Tree manipulation
   6:./include/linux/libfdt_env.h ****  * Copyright (C) 2006 David Gibson, IBM Corporation.
   7:./include/linux/libfdt_env.h ****  * Copyright 2012 Kim Phillips, Freescale Semiconductor.
   8:./include/linux/libfdt_env.h ****  */
   9:./include/linux/libfdt_env.h **** 
ARM GAS  /tmp/ccCHVNBc.s 			page 3


  10:./include/linux/libfdt_env.h **** #include <linux/types.h>
  11:./include/linux/libfdt_env.h **** #include <linux/stddef.h>
  12:./include/linux/libfdt_env.h **** #include <linux/string.h>
  13:./include/linux/libfdt_env.h **** #include <linux/limits.h>
  14:./include/linux/libfdt_env.h **** 
  15:./include/linux/libfdt_env.h **** 
  16:./include/linux/libfdt_env.h **** #ifdef __CHECKER__
  17:./include/linux/libfdt_env.h **** #define FDT_FORCE __attribute__((force))
  18:./include/linux/libfdt_env.h **** #define FDT_BITWISE __attribute__((bitwise))
  19:./include/linux/libfdt_env.h **** #else
  20:./include/linux/libfdt_env.h **** #define FDT_FORCE
  21:./include/linux/libfdt_env.h **** #define FDT_BITWISE
  22:./include/linux/libfdt_env.h **** #endif
  23:./include/linux/libfdt_env.h **** 
  24:./include/linux/libfdt_env.h **** typedef uint16_t FDT_BITWISE fdt16_t;
  25:./include/linux/libfdt_env.h **** typedef uint32_t FDT_BITWISE fdt32_t;
  26:./include/linux/libfdt_env.h **** typedef uint64_t FDT_BITWISE fdt64_t;
  27:./include/linux/libfdt_env.h **** 
  28:./include/linux/libfdt_env.h **** #define EXTRACT_BYTE(x, n)	((unsigned long long)((uint8_t *)&x)[n])
  29:./include/linux/libfdt_env.h **** 
  30:./include/linux/libfdt_env.h **** #define CPU_TO_FDT16(x) ((EXTRACT_BYTE(x, 0) << 8) | EXTRACT_BYTE(x, 1))
  31:./include/linux/libfdt_env.h **** #define CPU_TO_FDT32(x) ((EXTRACT_BYTE(x, 0) << 24) | (EXTRACT_BYTE(x, 1) << 16) | \
  32:./include/linux/libfdt_env.h **** 			 (EXTRACT_BYTE(x, 2) << 8) | EXTRACT_BYTE(x, 3))
  33:./include/linux/libfdt_env.h **** #define CPU_TO_FDT64(x) ((EXTRACT_BYTE(x, 0) << 56) | (EXTRACT_BYTE(x, 1) << 48) | \
  34:./include/linux/libfdt_env.h **** 			 (EXTRACT_BYTE(x, 2) << 40) | (EXTRACT_BYTE(x, 3) << 32) | \
  35:./include/linux/libfdt_env.h **** 			 (EXTRACT_BYTE(x, 4) << 24) | (EXTRACT_BYTE(x, 5) << 16) | \
  36:./include/linux/libfdt_env.h **** 			 (EXTRACT_BYTE(x, 6) << 8) | EXTRACT_BYTE(x, 7))
  37:./include/linux/libfdt_env.h **** 
  38:./include/linux/libfdt_env.h **** 
  39:./include/linux/libfdt_env.h **** // #define CPU_TO_FDT16(x) x
  40:./include/linux/libfdt_env.h **** // #define CPU_TO_FDT32(x) x
  41:./include/linux/libfdt_env.h **** // #define CPU_TO_FDT64(x) x
  42:./include/linux/libfdt_env.h **** 
  43:./include/linux/libfdt_env.h **** 
  44:./include/linux/libfdt_env.h **** static inline uint16_t fdt16_to_cpu(fdt16_t x)
  45:./include/linux/libfdt_env.h **** {
  46:./include/linux/libfdt_env.h **** 	return (FDT_FORCE uint16_t)CPU_TO_FDT16(x);
  47:./include/linux/libfdt_env.h **** }
  48:./include/linux/libfdt_env.h **** static inline fdt16_t cpu_to_fdt16(uint16_t x)
  49:./include/linux/libfdt_env.h **** {
  50:./include/linux/libfdt_env.h **** 	return (FDT_FORCE fdt16_t)CPU_TO_FDT16(x);
  51:./include/linux/libfdt_env.h **** }
  52:./include/linux/libfdt_env.h **** 
  53:./include/linux/libfdt_env.h **** static inline uint32_t fdt32_to_cpu(fdt32_t x)
  68              		.loc 2 53 24 is_stmt 1 view .LVU12
  69              	.LBB61:
  54:./include/linux/libfdt_env.h **** {
  55:./include/linux/libfdt_env.h **** 	return (FDT_FORCE uint32_t)CPU_TO_FDT32(x);
  70              		.loc 2 55 2 view .LVU13
  71              		.loc 2 55 29 is_stmt 0 view .LVU14
  72 0016 C3F30720 		ubfx	r0, r3, #8, #8
  73              	.LVL3:
  74              		.loc 2 55 29 view .LVU15
  75 001a 0004     		lsls	r0, r0, #16
  76 001c 40EA0360 		orr	r0, r0, r3, lsl #24
  77 0020 C3F30742 		ubfx	r2, r3, #16, #8
  78 0024 40EA0220 		orr	r0, r0, r2, lsl #8
ARM GAS  /tmp/ccCHVNBc.s 			page 4


  79              		.loc 2 55 9 view .LVU16
  80 0028 40EA1360 		orr	r0, r0, r3, lsr #24
  81              	.LVL4:
  82              		.loc 2 55 9 view .LVU17
  83              	.LBE61:
  84              	.LBE60:
  85              		.loc 1 38 28 discriminator 1 view .LVU18
  86 002c B0F1FF3F 		cmp	r0, #-1
  87 0030 07D0     		beq	.L7
  88              	.L1:
  39:./lib/fdt/fdt_overlay.c **** 		return (uint32_t)-1;
  40:./lib/fdt/fdt_overlay.c **** 
  41:./lib/fdt/fdt_overlay.c **** 	return fdt32_to_cpu(*val);
  42:./lib/fdt/fdt_overlay.c **** }
  89              		.loc 1 42 1 view .LVU19
  90 0032 03B0     		add	sp, sp, #12
  91              	.LCFI2:
  92              		.cfi_remember_state
  93              		.cfi_def_cfa_offset 4
  94              		@ sp needed
  95 0034 5DF804FB 		ldr	pc, [sp], #4
  96              	.LVL5:
  97              	.L3:
  98              	.LCFI3:
  99              		.cfi_restore_state
  36:./lib/fdt/fdt_overlay.c **** 
 100              		.loc 1 36 10 view .LVU20
 101 0038 0020     		movs	r0, #0
 102              	.LVL6:
  36:./lib/fdt/fdt_overlay.c **** 
 103              		.loc 1 36 10 view .LVU21
 104 003a FAE7     		b	.L1
 105              	.LVL7:
 106              	.L4:
  39:./lib/fdt/fdt_overlay.c **** 		return (uint32_t)-1;
 107              		.loc 1 39 10 view .LVU22
 108 003c 4FF0FF30 		mov	r0, #-1
 109              	.LVL8:
  39:./lib/fdt/fdt_overlay.c **** 		return (uint32_t)-1;
 110              		.loc 1 39 10 view .LVU23
 111 0040 F7E7     		b	.L1
 112              	.L7:
 113 0042 4FF0FF30 		mov	r0, #-1
 114 0046 F4E7     		b	.L1
 115              	.L9:
 116              		.align	2
 117              	.L8:
 118 0048 00000000 		.word	.LC0
 119              		.cfi_endproc
 120              	.LFE75:
 122              		.section	.text.overlay_phandle_add_offset,"ax",%progbits
 123              		.align	1
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 128              	overlay_phandle_add_offset:
 129              	.LVL9:
ARM GAS  /tmp/ccCHVNBc.s 			page 5


 130              	.LFB77:
  43:./lib/fdt/fdt_overlay.c **** 
  44:./lib/fdt/fdt_overlay.c **** int fdt_overlay_target_offset(const void *fdt, const void *fdto,
  45:./lib/fdt/fdt_overlay.c **** 			      int fragment_offset, char const **pathp)
  46:./lib/fdt/fdt_overlay.c **** {
  47:./lib/fdt/fdt_overlay.c **** 	uint32_t phandle;
  48:./lib/fdt/fdt_overlay.c **** 	const char *path = NULL;
  49:./lib/fdt/fdt_overlay.c **** 	int path_len = 0, ret;
  50:./lib/fdt/fdt_overlay.c **** 
  51:./lib/fdt/fdt_overlay.c **** 	/* Try first to do a phandle based lookup */
  52:./lib/fdt/fdt_overlay.c **** 	phandle = overlay_get_target_phandle(fdto, fragment_offset);
  53:./lib/fdt/fdt_overlay.c **** 	if (phandle == (uint32_t)-1)
  54:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_BADPHANDLE;
  55:./lib/fdt/fdt_overlay.c **** 
  56:./lib/fdt/fdt_overlay.c **** 	/* no phandle, try path */
  57:./lib/fdt/fdt_overlay.c **** 	if (!phandle) {
  58:./lib/fdt/fdt_overlay.c **** 		/* And then a path based lookup */
  59:./lib/fdt/fdt_overlay.c **** 		path = fdt_getprop(fdto, fragment_offset, "target-path", &path_len);
  60:./lib/fdt/fdt_overlay.c **** 		if (path)
  61:./lib/fdt/fdt_overlay.c **** 			ret = fdt_path_offset(fdt, path);
  62:./lib/fdt/fdt_overlay.c **** 		else
  63:./lib/fdt/fdt_overlay.c **** 			ret = path_len;
  64:./lib/fdt/fdt_overlay.c **** 	} else
  65:./lib/fdt/fdt_overlay.c **** 		ret = fdt_node_offset_by_phandle(fdt, phandle);
  66:./lib/fdt/fdt_overlay.c **** 
  67:./lib/fdt/fdt_overlay.c **** 	/*
  68:./lib/fdt/fdt_overlay.c **** 	* If we haven't found either a target or a
  69:./lib/fdt/fdt_overlay.c **** 	* target-path property in a node that contains a
  70:./lib/fdt/fdt_overlay.c **** 	* __overlay__ subnode (we wouldn't be called
  71:./lib/fdt/fdt_overlay.c **** 	* otherwise), consider it a improperly written
  72:./lib/fdt/fdt_overlay.c **** 	* overlay
  73:./lib/fdt/fdt_overlay.c **** 	*/
  74:./lib/fdt/fdt_overlay.c **** 	if (ret < 0 && path_len == -FDT_ERR_NOTFOUND)
  75:./lib/fdt/fdt_overlay.c **** 		ret = -FDT_ERR_BADOVERLAY;
  76:./lib/fdt/fdt_overlay.c **** 
  77:./lib/fdt/fdt_overlay.c **** 	/* return on error */
  78:./lib/fdt/fdt_overlay.c **** 	if (ret < 0)
  79:./lib/fdt/fdt_overlay.c **** 		return ret;
  80:./lib/fdt/fdt_overlay.c **** 
  81:./lib/fdt/fdt_overlay.c **** 	/* return pointer to path (if available) */
  82:./lib/fdt/fdt_overlay.c **** 	if (pathp)
  83:./lib/fdt/fdt_overlay.c **** 		*pathp = path ? path : NULL;
  84:./lib/fdt/fdt_overlay.c **** 
  85:./lib/fdt/fdt_overlay.c **** 	return ret;
  86:./lib/fdt/fdt_overlay.c **** }
  87:./lib/fdt/fdt_overlay.c **** 
  88:./lib/fdt/fdt_overlay.c **** /**
  89:./lib/fdt/fdt_overlay.c ****  * overlay_phandle_add_offset - Increases a phandle by an offset
  90:./lib/fdt/fdt_overlay.c ****  * @fdt: Base device tree blob
  91:./lib/fdt/fdt_overlay.c ****  * @node: Device tree overlay blob
  92:./lib/fdt/fdt_overlay.c ****  * @name: Name of the property to modify (phandle or linux,phandle)
  93:./lib/fdt/fdt_overlay.c ****  * @delta: offset to apply
  94:./lib/fdt/fdt_overlay.c ****  *
  95:./lib/fdt/fdt_overlay.c ****  * overlay_phandle_add_offset() increments a node phandle by a given
  96:./lib/fdt/fdt_overlay.c ****  * offset.
  97:./lib/fdt/fdt_overlay.c ****  *
  98:./lib/fdt/fdt_overlay.c ****  * returns:
ARM GAS  /tmp/ccCHVNBc.s 			page 6


  99:./lib/fdt/fdt_overlay.c ****  *      0 on success.
 100:./lib/fdt/fdt_overlay.c ****  *      Negative error code on error
 101:./lib/fdt/fdt_overlay.c ****  */
 102:./lib/fdt/fdt_overlay.c **** static int overlay_phandle_add_offset(void *fdt, int node,
 103:./lib/fdt/fdt_overlay.c **** 				      const char *name, uint32_t delta)
 104:./lib/fdt/fdt_overlay.c **** {
 131              		.loc 1 104 1 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 8
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		.loc 1 104 1 is_stmt 0 view .LVU25
 136 0000 10B5     		push	{r4, lr}
 137              	.LCFI4:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 4, -8
 140              		.cfi_offset 14, -4
 141 0002 82B0     		sub	sp, sp, #8
 142              	.LCFI5:
 143              		.cfi_def_cfa_offset 16
 144 0004 1C46     		mov	r4, r3
 105:./lib/fdt/fdt_overlay.c **** 	fdt32_t *valp, val;
 145              		.loc 1 105 2 is_stmt 1 view .LVU26
 106:./lib/fdt/fdt_overlay.c **** 	int len;
 146              		.loc 1 106 2 view .LVU27
 107:./lib/fdt/fdt_overlay.c **** 
 108:./lib/fdt/fdt_overlay.c **** 	valp = fdt_getprop_w(fdt, node, name, &len);
 147              		.loc 1 108 2 view .LVU28
 148              	.LVL10:
 149              	.LBB62:
 150              	.LBI62:
 151              		.file 3 "./include/linux/libfdt.h"
   1:./include/linux/libfdt.h **** /* SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause) */
   2:./include/linux/libfdt.h **** #ifndef LIBFDT_H
   3:./include/linux/libfdt.h **** #define LIBFDT_H
   4:./include/linux/libfdt.h **** /*
   5:./include/linux/libfdt.h ****  * libfdt - Flat Device Tree manipulation
   6:./include/linux/libfdt.h ****  * Copyright (C) 2006 David Gibson, IBM Corporation.
   7:./include/linux/libfdt.h ****  */
   8:./include/linux/libfdt.h **** 
   9:./include/linux/libfdt.h **** #include <linux/libfdt_env.h>
  10:./include/linux/libfdt.h **** #include <linux/fdt.h>
  11:./include/linux/libfdt.h **** 
  12:./include/linux/libfdt.h **** #ifdef __cplusplus
  13:./include/linux/libfdt.h **** extern "C" {
  14:./include/linux/libfdt.h **** #endif
  15:./include/linux/libfdt.h **** 
  16:./include/linux/libfdt.h **** 
  17:./include/linux/libfdt.h **** extern const uint8_t __dtb_file_start_address[];
  18:./include/linux/libfdt.h **** extern const uint8_t __dtb_file_end_address[];
  19:./include/linux/libfdt.h **** 
  20:./include/linux/libfdt.h **** #define FDT_FIRST_SUPPORTED_VERSION	0x02
  21:./include/linux/libfdt.h **** #define FDT_LAST_COMPATIBLE_VERSION	0x10
  22:./include/linux/libfdt.h **** #define FDT_LAST_SUPPORTED_VERSION	0x11
  23:./include/linux/libfdt.h **** 
  24:./include/linux/libfdt.h **** /* Error codes: informative error codes */
  25:./include/linux/libfdt.h **** #define FDT_ERR_NOTFOUND	1
  26:./include/linux/libfdt.h **** 	/* FDT_ERR_NOTFOUND: The requested node or property does not exist */
ARM GAS  /tmp/ccCHVNBc.s 			page 7


  27:./include/linux/libfdt.h **** #define FDT_ERR_EXISTS		2
  28:./include/linux/libfdt.h **** 	/* FDT_ERR_EXISTS: Attempted to create a node or property which
  29:./include/linux/libfdt.h **** 	 * already exists */
  30:./include/linux/libfdt.h **** #define FDT_ERR_NOSPACE		3
  31:./include/linux/libfdt.h **** 	/* FDT_ERR_NOSPACE: Operation needed to expand the device
  32:./include/linux/libfdt.h **** 	 * tree, but its buffer did not have sufficient space to
  33:./include/linux/libfdt.h **** 	 * contain the expanded tree. Use fdt_open_into() to move the
  34:./include/linux/libfdt.h **** 	 * device tree to a buffer with more space. */
  35:./include/linux/libfdt.h **** 
  36:./include/linux/libfdt.h **** /* Error codes: codes for bad parameters */
  37:./include/linux/libfdt.h **** #define FDT_ERR_BADOFFSET	4
  38:./include/linux/libfdt.h **** 	/* FDT_ERR_BADOFFSET: Function was passed a structure block
  39:./include/linux/libfdt.h **** 	 * offset which is out-of-bounds, or which points to an
  40:./include/linux/libfdt.h **** 	 * unsuitable part of the structure for the operation. */
  41:./include/linux/libfdt.h **** #define FDT_ERR_BADPATH		5
  42:./include/linux/libfdt.h **** 	/* FDT_ERR_BADPATH: Function was passed a badly formatted path
  43:./include/linux/libfdt.h **** 	 * (e.g. missing a leading / for a function which requires an
  44:./include/linux/libfdt.h **** 	 * absolute path) */
  45:./include/linux/libfdt.h **** #define FDT_ERR_BADPHANDLE	6
  46:./include/linux/libfdt.h **** 	/* FDT_ERR_BADPHANDLE: Function was passed an invalid phandle.
  47:./include/linux/libfdt.h **** 	 * This can be caused either by an invalid phandle property
  48:./include/linux/libfdt.h **** 	 * length, or the phandle value was either 0 or -1, which are
  49:./include/linux/libfdt.h **** 	 * not permitted. */
  50:./include/linux/libfdt.h **** #define FDT_ERR_BADSTATE	7
  51:./include/linux/libfdt.h **** 	/* FDT_ERR_BADSTATE: Function was passed an incomplete device
  52:./include/linux/libfdt.h **** 	 * tree created by the sequential-write functions, which is
  53:./include/linux/libfdt.h **** 	 * not sufficiently complete for the requested operation. */
  54:./include/linux/libfdt.h **** 
  55:./include/linux/libfdt.h **** /* Error codes: codes for bad device tree blobs */
  56:./include/linux/libfdt.h **** #define FDT_ERR_TRUNCATED	8
  57:./include/linux/libfdt.h **** 	/* FDT_ERR_TRUNCATED: FDT or a sub-block is improperly
  58:./include/linux/libfdt.h **** 	 * terminated (overflows, goes outside allowed bounds, or
  59:./include/linux/libfdt.h **** 	 * isn't properly terminated).  */
  60:./include/linux/libfdt.h **** #define FDT_ERR_BADMAGIC	9
  61:./include/linux/libfdt.h **** 	/* FDT_ERR_BADMAGIC: Given "device tree" appears not to be a
  62:./include/linux/libfdt.h **** 	 * device tree at all - it is missing the flattened device
  63:./include/linux/libfdt.h **** 	 * tree magic number. */
  64:./include/linux/libfdt.h **** #define FDT_ERR_BADVERSION	10
  65:./include/linux/libfdt.h **** 	/* FDT_ERR_BADVERSION: Given device tree has a version which
  66:./include/linux/libfdt.h **** 	 * can't be handled by the requested operation.  For
  67:./include/linux/libfdt.h **** 	 * read-write functions, this may mean that fdt_open_into() is
  68:./include/linux/libfdt.h **** 	 * required to convert the tree to the expected version. */
  69:./include/linux/libfdt.h **** #define FDT_ERR_BADSTRUCTURE	11
  70:./include/linux/libfdt.h **** 	/* FDT_ERR_BADSTRUCTURE: Given device tree has a corrupt
  71:./include/linux/libfdt.h **** 	 * structure block or other serious error (e.g. misnested
  72:./include/linux/libfdt.h **** 	 * nodes, or subnodes preceding properties). */
  73:./include/linux/libfdt.h **** #define FDT_ERR_BADLAYOUT	12
  74:./include/linux/libfdt.h **** 	/* FDT_ERR_BADLAYOUT: For read-write functions, the given
  75:./include/linux/libfdt.h **** 	 * device tree has it's sub-blocks in an order that the
  76:./include/linux/libfdt.h **** 	 * function can't handle (memory reserve map, then structure,
  77:./include/linux/libfdt.h **** 	 * then strings).  Use fdt_open_into() to reorganize the tree
  78:./include/linux/libfdt.h **** 	 * into a form suitable for the read-write operations. */
  79:./include/linux/libfdt.h **** 
  80:./include/linux/libfdt.h **** /* "Can't happen" error indicating a bug in libfdt */
  81:./include/linux/libfdt.h **** #define FDT_ERR_INTERNAL	13
  82:./include/linux/libfdt.h **** 	/* FDT_ERR_INTERNAL: libfdt has failed an internal assertion.
  83:./include/linux/libfdt.h **** 	 * Should never be returned, if it is, it indicates a bug in
ARM GAS  /tmp/ccCHVNBc.s 			page 8


  84:./include/linux/libfdt.h **** 	 * libfdt itself. */
  85:./include/linux/libfdt.h **** 
  86:./include/linux/libfdt.h **** /* Errors in device tree content */
  87:./include/linux/libfdt.h **** #define FDT_ERR_BADNCELLS	14
  88:./include/linux/libfdt.h **** 	/* FDT_ERR_BADNCELLS: Device tree has a #address-cells, #size-cells
  89:./include/linux/libfdt.h **** 	 * or similar property with a bad format or value */
  90:./include/linux/libfdt.h **** 
  91:./include/linux/libfdt.h **** #define FDT_ERR_BADVALUE	15
  92:./include/linux/libfdt.h **** 	/* FDT_ERR_BADVALUE: Device tree has a property with an unexpected
  93:./include/linux/libfdt.h **** 	 * value. For example: a property expected to contain a string list
  94:./include/linux/libfdt.h **** 	 * is not NUL-terminated within the length of its value. */
  95:./include/linux/libfdt.h **** 
  96:./include/linux/libfdt.h **** #define FDT_ERR_BADOVERLAY	16
  97:./include/linux/libfdt.h **** 	/* FDT_ERR_BADOVERLAY: The device tree overlay, while
  98:./include/linux/libfdt.h **** 	 * correctly structured, cannot be applied due to some
  99:./include/linux/libfdt.h **** 	 * unexpected or missing value, property or node. */
 100:./include/linux/libfdt.h **** 
 101:./include/linux/libfdt.h **** #define FDT_ERR_NOPHANDLES	17
 102:./include/linux/libfdt.h **** 	/* FDT_ERR_NOPHANDLES: The device tree doesn't have any
 103:./include/linux/libfdt.h **** 	 * phandle available anymore without causing an overflow */
 104:./include/linux/libfdt.h **** 
 105:./include/linux/libfdt.h **** #define FDT_ERR_BADFLAGS	18
 106:./include/linux/libfdt.h **** 	/* FDT_ERR_BADFLAGS: The function was passed a flags field that
 107:./include/linux/libfdt.h **** 	 * contains invalid flags or an invalid combination of flags. */
 108:./include/linux/libfdt.h **** 
 109:./include/linux/libfdt.h **** #define FDT_ERR_ALIGNMENT	19
 110:./include/linux/libfdt.h **** 	/* FDT_ERR_ALIGNMENT: The device tree base address is not 8-byte
 111:./include/linux/libfdt.h **** 	 * aligned. */
 112:./include/linux/libfdt.h **** 
 113:./include/linux/libfdt.h **** #define FDT_ERR_MAX		19
 114:./include/linux/libfdt.h **** 
 115:./include/linux/libfdt.h **** /* constants */
 116:./include/linux/libfdt.h **** #define FDT_MAX_PHANDLE 0xfffffffe
 117:./include/linux/libfdt.h **** 	/* Valid values for phandles range from 1 to 2^32-2. */
 118:./include/linux/libfdt.h **** 
 119:./include/linux/libfdt.h **** /**********************************************************************/
 120:./include/linux/libfdt.h **** /* Low-level functions (you probably don't need these)                */
 121:./include/linux/libfdt.h **** /**********************************************************************/
 122:./include/linux/libfdt.h **** 
 123:./include/linux/libfdt.h **** #ifndef SWIG /* This function is not useful in Python */
 124:./include/linux/libfdt.h **** const void *fdt_offset_ptr(const void *fdt, int offset, unsigned int checklen);
 125:./include/linux/libfdt.h **** #endif
 126:./include/linux/libfdt.h **** static inline void *fdt_offset_ptr_w(void *fdt, int offset, int checklen)
 127:./include/linux/libfdt.h **** {
 128:./include/linux/libfdt.h **** 	return (void *)(uintptr_t)fdt_offset_ptr(fdt, offset, checklen);
 129:./include/linux/libfdt.h **** }
 130:./include/linux/libfdt.h **** 
 131:./include/linux/libfdt.h **** uint32_t fdt_next_tag(const void *fdt, int offset, int *nextoffset);
 132:./include/linux/libfdt.h **** 
 133:./include/linux/libfdt.h **** /*
 134:./include/linux/libfdt.h ****  * External helpers to access words from a device tree blob. They're built
 135:./include/linux/libfdt.h ****  * to work even with unaligned pointers on platforms (such as ARMv5) that don't
 136:./include/linux/libfdt.h ****  * like unaligned loads and stores.
 137:./include/linux/libfdt.h ****  */
 138:./include/linux/libfdt.h **** static inline uint16_t fdt16_ld(const fdt16_t *p)
 139:./include/linux/libfdt.h **** {
 140:./include/linux/libfdt.h **** 	const uint8_t *bp = (const uint8_t *)p;
ARM GAS  /tmp/ccCHVNBc.s 			page 9


 141:./include/linux/libfdt.h **** 
 142:./include/linux/libfdt.h **** 	return ((uint16_t)bp[0] << 8) | bp[1];
 143:./include/linux/libfdt.h **** }
 144:./include/linux/libfdt.h **** 
 145:./include/linux/libfdt.h **** static inline uint32_t fdt32_ld(const fdt32_t *p)
 146:./include/linux/libfdt.h **** {
 147:./include/linux/libfdt.h **** 	const uint8_t *bp = (const uint8_t *)p;
 148:./include/linux/libfdt.h **** 
 149:./include/linux/libfdt.h **** 	return ((uint32_t)bp[0] << 24)
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[1] << 16)
 151:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 152:./include/linux/libfdt.h **** 		| bp[3];
 153:./include/linux/libfdt.h **** }
 154:./include/linux/libfdt.h **** 
 155:./include/linux/libfdt.h **** static inline void fdt32_st(void *property, uint32_t value)
 156:./include/linux/libfdt.h **** {
 157:./include/linux/libfdt.h **** 	uint8_t *bp = (uint8_t *)property;
 158:./include/linux/libfdt.h **** 
 159:./include/linux/libfdt.h **** 	bp[0] = value >> 24;
 160:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 161:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 162:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 163:./include/linux/libfdt.h **** }
 164:./include/linux/libfdt.h **** 
 165:./include/linux/libfdt.h **** static inline uint64_t fdt64_ld(const fdt64_t *p)
 166:./include/linux/libfdt.h **** {
 167:./include/linux/libfdt.h **** 	const uint8_t *bp = (const uint8_t *)p;
 168:./include/linux/libfdt.h **** 
 169:./include/linux/libfdt.h **** 	return ((uint64_t)bp[0] << 56)
 170:./include/linux/libfdt.h **** 		| ((uint64_t)bp[1] << 48)
 171:./include/linux/libfdt.h **** 		| ((uint64_t)bp[2] << 40)
 172:./include/linux/libfdt.h **** 		| ((uint64_t)bp[3] << 32)
 173:./include/linux/libfdt.h **** 		| ((uint64_t)bp[4] << 24)
 174:./include/linux/libfdt.h **** 		| ((uint64_t)bp[5] << 16)
 175:./include/linux/libfdt.h **** 		| ((uint64_t)bp[6] << 8)
 176:./include/linux/libfdt.h **** 		| bp[7];
 177:./include/linux/libfdt.h **** }
 178:./include/linux/libfdt.h **** 
 179:./include/linux/libfdt.h **** static inline void fdt64_st(void *property, uint64_t value)
 180:./include/linux/libfdt.h **** {
 181:./include/linux/libfdt.h **** 	uint8_t *bp = (uint8_t *)property;
 182:./include/linux/libfdt.h **** 
 183:./include/linux/libfdt.h **** 	bp[0] = value >> 56;
 184:./include/linux/libfdt.h **** 	bp[1] = (value >> 48) & 0xff;
 185:./include/linux/libfdt.h **** 	bp[2] = (value >> 40) & 0xff;
 186:./include/linux/libfdt.h **** 	bp[3] = (value >> 32) & 0xff;
 187:./include/linux/libfdt.h **** 	bp[4] = (value >> 24) & 0xff;
 188:./include/linux/libfdt.h **** 	bp[5] = (value >> 16) & 0xff;
 189:./include/linux/libfdt.h **** 	bp[6] = (value >> 8) & 0xff;
 190:./include/linux/libfdt.h **** 	bp[7] = value & 0xff;
 191:./include/linux/libfdt.h **** }
 192:./include/linux/libfdt.h **** 
 193:./include/linux/libfdt.h **** /**********************************************************************/
 194:./include/linux/libfdt.h **** /* Traversal functions                                                */
 195:./include/linux/libfdt.h **** /**********************************************************************/
 196:./include/linux/libfdt.h **** 
 197:./include/linux/libfdt.h **** int fdt_next_node(const void *fdt, int offset, int *depth);
ARM GAS  /tmp/ccCHVNBc.s 			page 10


 198:./include/linux/libfdt.h **** 
 199:./include/linux/libfdt.h **** /**
 200:./include/linux/libfdt.h ****  * fdt_first_subnode() - get offset of first direct subnode
 201:./include/linux/libfdt.h ****  * @fdt:	FDT blob
 202:./include/linux/libfdt.h ****  * @offset:	Offset of node to check
 203:./include/linux/libfdt.h ****  *
 204:./include/linux/libfdt.h ****  * Return: offset of first subnode, or -FDT_ERR_NOTFOUND if there is none
 205:./include/linux/libfdt.h ****  */
 206:./include/linux/libfdt.h **** int fdt_first_subnode(const void *fdt, int offset);
 207:./include/linux/libfdt.h **** 
 208:./include/linux/libfdt.h **** /**
 209:./include/linux/libfdt.h ****  * fdt_next_subnode() - get offset of next direct subnode
 210:./include/linux/libfdt.h ****  * @fdt:	FDT blob
 211:./include/linux/libfdt.h ****  * @offset:	Offset of previous subnode
 212:./include/linux/libfdt.h ****  *
 213:./include/linux/libfdt.h ****  * After first calling fdt_first_subnode(), call this function repeatedly to
 214:./include/linux/libfdt.h ****  * get direct subnodes of a parent node.
 215:./include/linux/libfdt.h ****  *
 216:./include/linux/libfdt.h ****  * Return: offset of next subnode, or -FDT_ERR_NOTFOUND if there are no more
 217:./include/linux/libfdt.h ****  *         subnodes
 218:./include/linux/libfdt.h ****  */
 219:./include/linux/libfdt.h **** int fdt_next_subnode(const void *fdt, int offset);
 220:./include/linux/libfdt.h **** 
 221:./include/linux/libfdt.h **** /**
 222:./include/linux/libfdt.h ****  * fdt_for_each_subnode - iterate over all subnodes of a parent
 223:./include/linux/libfdt.h ****  *
 224:./include/linux/libfdt.h ****  * @node:	child node (int, lvalue)
 225:./include/linux/libfdt.h ****  * @fdt:	FDT blob (const void *)
 226:./include/linux/libfdt.h ****  * @parent:	parent node (int)
 227:./include/linux/libfdt.h ****  *
 228:./include/linux/libfdt.h ****  * This is actually a wrapper around a for loop and would be used like so:
 229:./include/linux/libfdt.h ****  *
 230:./include/linux/libfdt.h ****  *	fdt_for_each_subnode(node, fdt, parent) {
 231:./include/linux/libfdt.h ****  *		Use node
 232:./include/linux/libfdt.h ****  *		...
 233:./include/linux/libfdt.h ****  *	}
 234:./include/linux/libfdt.h ****  *
 235:./include/linux/libfdt.h ****  *	if ((node < 0) && (node != -FDT_ERR_NOTFOUND)) {
 236:./include/linux/libfdt.h ****  *		Error handling
 237:./include/linux/libfdt.h ****  *	}
 238:./include/linux/libfdt.h ****  *
 239:./include/linux/libfdt.h ****  * Note that this is implemented as a macro and @node is used as
 240:./include/linux/libfdt.h ****  * iterator in the loop. The parent variable be constant or even a
 241:./include/linux/libfdt.h ****  * literal.
 242:./include/linux/libfdt.h ****  */
 243:./include/linux/libfdt.h **** #define fdt_for_each_subnode(node, fdt, parent)		\
 244:./include/linux/libfdt.h **** 	for (node = fdt_first_subnode(fdt, parent);	\
 245:./include/linux/libfdt.h **** 	     node >= 0;					\
 246:./include/linux/libfdt.h **** 	     node = fdt_next_subnode(fdt, node))
 247:./include/linux/libfdt.h **** 
 248:./include/linux/libfdt.h **** /**********************************************************************/
 249:./include/linux/libfdt.h **** /* General functions                                                  */
 250:./include/linux/libfdt.h **** /**********************************************************************/
 251:./include/linux/libfdt.h **** #define fdt_get_header(fdt, field) \
 252:./include/linux/libfdt.h **** 	(fdt32_ld(&((const struct fdt_header *)(fdt))->field))
 253:./include/linux/libfdt.h **** #define fdt_magic(fdt)			(fdt_get_header(fdt, magic))
 254:./include/linux/libfdt.h **** #define fdt_totalsize(fdt)		(fdt_get_header(fdt, totalsize))
ARM GAS  /tmp/ccCHVNBc.s 			page 11


 255:./include/linux/libfdt.h **** #define fdt_off_dt_struct(fdt)		(fdt_get_header(fdt, off_dt_struct))
 256:./include/linux/libfdt.h **** #define fdt_off_dt_strings(fdt)		(fdt_get_header(fdt, off_dt_strings))
 257:./include/linux/libfdt.h **** #define fdt_off_mem_rsvmap(fdt)		(fdt_get_header(fdt, off_mem_rsvmap))
 258:./include/linux/libfdt.h **** #define fdt_version(fdt)		(fdt_get_header(fdt, version))
 259:./include/linux/libfdt.h **** #define fdt_last_comp_version(fdt)	(fdt_get_header(fdt, last_comp_version))
 260:./include/linux/libfdt.h **** #define fdt_boot_cpuid_phys(fdt)	(fdt_get_header(fdt, boot_cpuid_phys))
 261:./include/linux/libfdt.h **** #define fdt_size_dt_strings(fdt)	(fdt_get_header(fdt, size_dt_strings))
 262:./include/linux/libfdt.h **** #define fdt_size_dt_struct(fdt)		(fdt_get_header(fdt, size_dt_struct))
 263:./include/linux/libfdt.h **** 
 264:./include/linux/libfdt.h **** #define fdt_set_hdr_(name) \
 265:./include/linux/libfdt.h **** 	static inline void fdt_set_##name(void *fdt, uint32_t val) \
 266:./include/linux/libfdt.h **** 	{ \
 267:./include/linux/libfdt.h **** 		struct fdt_header *fdth = (struct fdt_header *)fdt; \
 268:./include/linux/libfdt.h **** 		fdth->name = cpu_to_fdt32(val); \
 269:./include/linux/libfdt.h **** 	}
 270:./include/linux/libfdt.h **** fdt_set_hdr_(magic)
 271:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 272:./include/linux/libfdt.h **** fdt_set_hdr_(off_dt_struct)
 273:./include/linux/libfdt.h **** fdt_set_hdr_(off_dt_strings)
 274:./include/linux/libfdt.h **** fdt_set_hdr_(off_mem_rsvmap)
 275:./include/linux/libfdt.h **** fdt_set_hdr_(version)
 276:./include/linux/libfdt.h **** fdt_set_hdr_(last_comp_version)
 277:./include/linux/libfdt.h **** fdt_set_hdr_(boot_cpuid_phys)
 278:./include/linux/libfdt.h **** fdt_set_hdr_(size_dt_strings)
 279:./include/linux/libfdt.h **** fdt_set_hdr_(size_dt_struct)
 280:./include/linux/libfdt.h **** #undef fdt_set_hdr_
 281:./include/linux/libfdt.h **** 
 282:./include/linux/libfdt.h **** /**
 283:./include/linux/libfdt.h ****  * fdt_header_size - return the size of the tree's header
 284:./include/linux/libfdt.h ****  * @fdt: pointer to a flattened device tree
 285:./include/linux/libfdt.h ****  *
 286:./include/linux/libfdt.h ****  * Return: size of DTB header in bytes
 287:./include/linux/libfdt.h ****  */
 288:./include/linux/libfdt.h **** size_t fdt_header_size(const void *fdt);
 289:./include/linux/libfdt.h **** 
 290:./include/linux/libfdt.h **** /**
 291:./include/linux/libfdt.h ****  * fdt_header_size_ - internal function to get header size from a version number
 292:./include/linux/libfdt.h ****  * @version: device tree version number
 293:./include/linux/libfdt.h ****  *
 294:./include/linux/libfdt.h ****  * Return: size of DTB header in bytes
 295:./include/linux/libfdt.h ****  */
 296:./include/linux/libfdt.h **** size_t fdt_header_size_(uint32_t version);
 297:./include/linux/libfdt.h **** 
 298:./include/linux/libfdt.h **** /**
 299:./include/linux/libfdt.h ****  * fdt_check_header - sanity check a device tree header
 300:./include/linux/libfdt.h ****  * @fdt: pointer to data which might be a flattened device tree
 301:./include/linux/libfdt.h ****  *
 302:./include/linux/libfdt.h ****  * fdt_check_header() checks that the given buffer contains what
 303:./include/linux/libfdt.h ****  * appears to be a flattened device tree, and that the header contains
 304:./include/linux/libfdt.h ****  * valid information (to the extent that can be determined from the
 305:./include/linux/libfdt.h ****  * header alone).
 306:./include/linux/libfdt.h ****  *
 307:./include/linux/libfdt.h ****  * returns:
 308:./include/linux/libfdt.h ****  *     0, if the buffer appears to contain a valid device tree
 309:./include/linux/libfdt.h ****  *     -FDT_ERR_BADMAGIC,
 310:./include/linux/libfdt.h ****  *     -FDT_ERR_BADVERSION,
 311:./include/linux/libfdt.h ****  *     -FDT_ERR_BADSTATE,
ARM GAS  /tmp/ccCHVNBc.s 			page 12


 312:./include/linux/libfdt.h ****  *     -FDT_ERR_TRUNCATED, standard meanings, as above
 313:./include/linux/libfdt.h ****  */
 314:./include/linux/libfdt.h **** int fdt_check_header(const void *fdt);
 315:./include/linux/libfdt.h **** 
 316:./include/linux/libfdt.h **** /**
 317:./include/linux/libfdt.h ****  * fdt_move - move a device tree around in memory
 318:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree to move
 319:./include/linux/libfdt.h ****  * @buf: pointer to memory where the device is to be moved
 320:./include/linux/libfdt.h ****  * @bufsize: size of the memory space at buf
 321:./include/linux/libfdt.h ****  *
 322:./include/linux/libfdt.h ****  * fdt_move() relocates, if possible, the device tree blob located at
 323:./include/linux/libfdt.h ****  * fdt to the buffer at buf of size bufsize.  The buffer may overlap
 324:./include/linux/libfdt.h ****  * with the existing device tree blob at fdt.  Therefore,
 325:./include/linux/libfdt.h ****  *     fdt_move(fdt, fdt, fdt_totalsize(fdt))
 326:./include/linux/libfdt.h ****  * should always succeed.
 327:./include/linux/libfdt.h ****  *
 328:./include/linux/libfdt.h ****  * returns:
 329:./include/linux/libfdt.h ****  *     0, on success
 330:./include/linux/libfdt.h ****  *     -FDT_ERR_NOSPACE, bufsize is insufficient to contain the device tree
 331:./include/linux/libfdt.h ****  *     -FDT_ERR_BADMAGIC,
 332:./include/linux/libfdt.h ****  *     -FDT_ERR_BADVERSION,
 333:./include/linux/libfdt.h ****  *     -FDT_ERR_BADSTATE, standard meanings
 334:./include/linux/libfdt.h ****  */
 335:./include/linux/libfdt.h **** int fdt_move(const void *fdt, void *buf, int bufsize);
 336:./include/linux/libfdt.h **** 
 337:./include/linux/libfdt.h **** /**********************************************************************/
 338:./include/linux/libfdt.h **** /* Read-only functions                                                */
 339:./include/linux/libfdt.h **** /**********************************************************************/
 340:./include/linux/libfdt.h **** 
 341:./include/linux/libfdt.h **** int fdt_check_full(const void *fdt, size_t bufsize);
 342:./include/linux/libfdt.h **** 
 343:./include/linux/libfdt.h **** /**
 344:./include/linux/libfdt.h ****  * fdt_get_string - retrieve a string from the strings block of a device tree
 345:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 346:./include/linux/libfdt.h ****  * @stroffset: offset of the string within the strings block (native endian)
 347:./include/linux/libfdt.h ****  * @lenp: optional pointer to return the string's length
 348:./include/linux/libfdt.h ****  *
 349:./include/linux/libfdt.h ****  * fdt_get_string() retrieves a pointer to a single string from the
 350:./include/linux/libfdt.h ****  * strings block of the device tree blob at fdt, and optionally also
 351:./include/linux/libfdt.h ****  * returns the string's length in *lenp.
 352:./include/linux/libfdt.h ****  *
 353:./include/linux/libfdt.h ****  * returns:
 354:./include/linux/libfdt.h ****  *     a pointer to the string, on success
 355:./include/linux/libfdt.h ****  *     NULL, if stroffset is out of bounds, or doesn't point to a valid string
 356:./include/linux/libfdt.h ****  */
 357:./include/linux/libfdt.h **** const char *fdt_get_string(const void *fdt, int stroffset, int *lenp);
 358:./include/linux/libfdt.h **** 
 359:./include/linux/libfdt.h **** /**
 360:./include/linux/libfdt.h ****  * fdt_string - retrieve a string from the strings block of a device tree
 361:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 362:./include/linux/libfdt.h ****  * @stroffset: offset of the string within the strings block (native endian)
 363:./include/linux/libfdt.h ****  *
 364:./include/linux/libfdt.h ****  * fdt_string() retrieves a pointer to a single string from the
 365:./include/linux/libfdt.h ****  * strings block of the device tree blob at fdt.
 366:./include/linux/libfdt.h ****  *
 367:./include/linux/libfdt.h ****  * returns:
 368:./include/linux/libfdt.h ****  *     a pointer to the string, on success
ARM GAS  /tmp/ccCHVNBc.s 			page 13


 369:./include/linux/libfdt.h ****  *     NULL, if stroffset is out of bounds, or doesn't point to a valid string
 370:./include/linux/libfdt.h ****  */
 371:./include/linux/libfdt.h **** const char *fdt_string(const void *fdt, int stroffset);
 372:./include/linux/libfdt.h **** 
 373:./include/linux/libfdt.h **** /**
 374:./include/linux/libfdt.h ****  * fdt_find_max_phandle - find and return the highest phandle in a tree
 375:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 376:./include/linux/libfdt.h ****  * @phandle: return location for the highest phandle value found in the tree
 377:./include/linux/libfdt.h ****  *
 378:./include/linux/libfdt.h ****  * fdt_find_max_phandle() finds the highest phandle value in the given device
 379:./include/linux/libfdt.h ****  * tree. The value returned in @phandle is only valid if the function returns
 380:./include/linux/libfdt.h ****  * success.
 381:./include/linux/libfdt.h ****  *
 382:./include/linux/libfdt.h ****  * returns:
 383:./include/linux/libfdt.h ****  *     0 on success or a negative error code on failure
 384:./include/linux/libfdt.h ****  */
 385:./include/linux/libfdt.h **** int fdt_find_max_phandle(const void *fdt, uint32_t *phandle);
 386:./include/linux/libfdt.h **** 
 387:./include/linux/libfdt.h **** /**
 388:./include/linux/libfdt.h ****  * fdt_get_max_phandle - retrieves the highest phandle in a tree
 389:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 390:./include/linux/libfdt.h ****  *
 391:./include/linux/libfdt.h ****  * fdt_get_max_phandle retrieves the highest phandle in the given
 392:./include/linux/libfdt.h ****  * device tree. This will ignore badly formatted phandles, or phandles
 393:./include/linux/libfdt.h ****  * with a value of 0 or -1.
 394:./include/linux/libfdt.h ****  *
 395:./include/linux/libfdt.h ****  * This function is deprecated in favour of fdt_find_max_phandle().
 396:./include/linux/libfdt.h ****  *
 397:./include/linux/libfdt.h ****  * returns:
 398:./include/linux/libfdt.h ****  *      the highest phandle on success
 399:./include/linux/libfdt.h ****  *      0, if no phandle was found in the device tree
 400:./include/linux/libfdt.h ****  *      -1, if an error occurred
 401:./include/linux/libfdt.h ****  */
 402:./include/linux/libfdt.h **** static inline uint32_t fdt_get_max_phandle(const void *fdt)
 403:./include/linux/libfdt.h **** {
 404:./include/linux/libfdt.h **** 	uint32_t phandle;
 405:./include/linux/libfdt.h **** 	int err;
 406:./include/linux/libfdt.h **** 
 407:./include/linux/libfdt.h **** 	err = fdt_find_max_phandle(fdt, &phandle);
 408:./include/linux/libfdt.h **** 	if (err < 0)
 409:./include/linux/libfdt.h **** 		return (uint32_t)-1;
 410:./include/linux/libfdt.h **** 
 411:./include/linux/libfdt.h **** 	return phandle;
 412:./include/linux/libfdt.h **** }
 413:./include/linux/libfdt.h **** 
 414:./include/linux/libfdt.h **** /**
 415:./include/linux/libfdt.h ****  * fdt_generate_phandle - return a new, unused phandle for a device tree blob
 416:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 417:./include/linux/libfdt.h ****  * @phandle: return location for the new phandle
 418:./include/linux/libfdt.h ****  *
 419:./include/linux/libfdt.h ****  * Walks the device tree blob and looks for the highest phandle value. On
 420:./include/linux/libfdt.h ****  * success, the new, unused phandle value (one higher than the previously
 421:./include/linux/libfdt.h ****  * highest phandle value in the device tree blob) will be returned in the
 422:./include/linux/libfdt.h ****  * @phandle parameter.
 423:./include/linux/libfdt.h ****  *
 424:./include/linux/libfdt.h ****  * Return: 0 on success or a negative error-code on failure
 425:./include/linux/libfdt.h ****  */
ARM GAS  /tmp/ccCHVNBc.s 			page 14


 426:./include/linux/libfdt.h **** int fdt_generate_phandle(const void *fdt, uint32_t *phandle);
 427:./include/linux/libfdt.h **** 
 428:./include/linux/libfdt.h **** /**
 429:./include/linux/libfdt.h ****  * fdt_num_mem_rsv - retrieve the number of memory reserve map entries
 430:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 431:./include/linux/libfdt.h ****  *
 432:./include/linux/libfdt.h ****  * Returns the number of entries in the device tree blob's memory
 433:./include/linux/libfdt.h ****  * reservation map.  This does not include the terminating 0,0 entry
 434:./include/linux/libfdt.h ****  * or any other (0,0) entries reserved for expansion.
 435:./include/linux/libfdt.h ****  *
 436:./include/linux/libfdt.h ****  * returns:
 437:./include/linux/libfdt.h ****  *     the number of entries
 438:./include/linux/libfdt.h ****  */
 439:./include/linux/libfdt.h **** int fdt_num_mem_rsv(const void *fdt);
 440:./include/linux/libfdt.h **** 
 441:./include/linux/libfdt.h **** /**
 442:./include/linux/libfdt.h ****  * fdt_get_mem_rsv - retrieve one memory reserve map entry
 443:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 444:./include/linux/libfdt.h ****  * @n: index of reserve map entry
 445:./include/linux/libfdt.h ****  * @address: pointer to 64-bit variable to hold the start address
 446:./include/linux/libfdt.h ****  * @size: pointer to 64-bit variable to hold the size of the entry
 447:./include/linux/libfdt.h ****  *
 448:./include/linux/libfdt.h ****  * On success, @address and @size will contain the address and size of
 449:./include/linux/libfdt.h ****  * the n-th reserve map entry from the device tree blob, in
 450:./include/linux/libfdt.h ****  * native-endian format.
 451:./include/linux/libfdt.h ****  *
 452:./include/linux/libfdt.h ****  * returns:
 453:./include/linux/libfdt.h ****  *     0, on success
 454:./include/linux/libfdt.h ****  *     -FDT_ERR_BADMAGIC,
 455:./include/linux/libfdt.h ****  *     -FDT_ERR_BADVERSION,
 456:./include/linux/libfdt.h ****  *     -FDT_ERR_BADSTATE, standard meanings
 457:./include/linux/libfdt.h ****  */
 458:./include/linux/libfdt.h **** int fdt_get_mem_rsv(const void *fdt, int n, uint64_t *address, uint64_t *size);
 459:./include/linux/libfdt.h **** 
 460:./include/linux/libfdt.h **** /**
 461:./include/linux/libfdt.h ****  * fdt_subnode_offset_namelen - find a subnode based on substring
 462:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 463:./include/linux/libfdt.h ****  * @parentoffset: structure block offset of a node
 464:./include/linux/libfdt.h ****  * @name: name of the subnode to locate
 465:./include/linux/libfdt.h ****  * @namelen: number of characters of name to consider
 466:./include/linux/libfdt.h ****  *
 467:./include/linux/libfdt.h ****  * Identical to fdt_subnode_offset(), but only examine the first
 468:./include/linux/libfdt.h ****  * namelen characters of name for matching the subnode name.  This is
 469:./include/linux/libfdt.h ****  * useful for finding subnodes based on a portion of a larger string,
 470:./include/linux/libfdt.h ****  * such as a full path.
 471:./include/linux/libfdt.h ****  *
 472:./include/linux/libfdt.h ****  * Return: offset of the subnode or -FDT_ERR_NOTFOUND if name not found.
 473:./include/linux/libfdt.h ****  */
 474:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
 475:./include/linux/libfdt.h **** int fdt_subnode_offset_namelen(const void *fdt, int parentoffset,
 476:./include/linux/libfdt.h **** 			       const char *name, int namelen);
 477:./include/linux/libfdt.h **** #endif
 478:./include/linux/libfdt.h **** /**
 479:./include/linux/libfdt.h ****  * fdt_subnode_offset - find a subnode of a given node
 480:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 481:./include/linux/libfdt.h ****  * @parentoffset: structure block offset of a node
 482:./include/linux/libfdt.h ****  * @name: name of the subnode to locate
ARM GAS  /tmp/ccCHVNBc.s 			page 15


 483:./include/linux/libfdt.h ****  *
 484:./include/linux/libfdt.h ****  * fdt_subnode_offset() finds a subnode of the node at structure block
 485:./include/linux/libfdt.h ****  * offset parentoffset with the given name.  name may include a unit
 486:./include/linux/libfdt.h ****  * address, in which case fdt_subnode_offset() will find the subnode
 487:./include/linux/libfdt.h ****  * with that unit address, or the unit address may be omitted, in
 488:./include/linux/libfdt.h ****  * which case fdt_subnode_offset() will find an arbitrary subnode
 489:./include/linux/libfdt.h ****  * whose name excluding unit address matches the given name.
 490:./include/linux/libfdt.h ****  *
 491:./include/linux/libfdt.h ****  * returns:
 492:./include/linux/libfdt.h ****  *	structure block offset of the requested subnode (>=0), on success
 493:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, if the requested subnode does not exist
 494:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, if parentoffset did not point to an FDT_BEGIN_NODE
 495:./include/linux/libfdt.h ****  *		tag
 496:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
 497:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
 498:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
 499:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
 500:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings.
 501:./include/linux/libfdt.h ****  */
 502:./include/linux/libfdt.h **** int fdt_subnode_offset(const void *fdt, int parentoffset, const char *name);
 503:./include/linux/libfdt.h **** 
 504:./include/linux/libfdt.h **** /**
 505:./include/linux/libfdt.h ****  * fdt_path_offset_namelen - find a tree node by its full path
 506:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 507:./include/linux/libfdt.h ****  * @path: full path of the node to locate
 508:./include/linux/libfdt.h ****  * @namelen: number of characters of path to consider
 509:./include/linux/libfdt.h ****  *
 510:./include/linux/libfdt.h ****  * Identical to fdt_path_offset(), but only consider the first namelen
 511:./include/linux/libfdt.h ****  * characters of path as the path name.
 512:./include/linux/libfdt.h ****  *
 513:./include/linux/libfdt.h ****  * Return: offset of the node or negative libfdt error value otherwise
 514:./include/linux/libfdt.h ****  */
 515:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
 516:./include/linux/libfdt.h **** int fdt_path_offset_namelen(const void *fdt, const char *path, int namelen);
 517:./include/linux/libfdt.h **** #endif
 518:./include/linux/libfdt.h **** 
 519:./include/linux/libfdt.h **** /**
 520:./include/linux/libfdt.h ****  * fdt_path_offset - find a tree node by its full path
 521:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 522:./include/linux/libfdt.h ****  * @path: full path of the node to locate
 523:./include/linux/libfdt.h ****  *
 524:./include/linux/libfdt.h ****  * fdt_path_offset() finds a node of a given path in the device tree.
 525:./include/linux/libfdt.h ****  * Each path component may omit the unit address portion, but the
 526:./include/linux/libfdt.h ****  * results of this are undefined if any such path component is
 527:./include/linux/libfdt.h ****  * ambiguous (that is if there are multiple nodes at the relevant
 528:./include/linux/libfdt.h ****  * level matching the given component, differentiated only by unit
 529:./include/linux/libfdt.h ****  * address).
 530:./include/linux/libfdt.h ****  *
 531:./include/linux/libfdt.h ****  * If the path is not absolute (i.e. does not begin with '/'), the
 532:./include/linux/libfdt.h ****  * first component is treated as an alias.  That is, the property by
 533:./include/linux/libfdt.h ****  * that name is looked up in the /aliases node, and the value of that
 534:./include/linux/libfdt.h ****  * property used in place of that first component.
 535:./include/linux/libfdt.h ****  *
 536:./include/linux/libfdt.h ****  * For example, for this small fragment
 537:./include/linux/libfdt.h ****  *
 538:./include/linux/libfdt.h ****  * / {
 539:./include/linux/libfdt.h ****  *     aliases {
ARM GAS  /tmp/ccCHVNBc.s 			page 16


 540:./include/linux/libfdt.h ****  *         i2c2 = &foo; // RHS compiles to "/soc@0/i2c@30a40000/eeprom@52"
 541:./include/linux/libfdt.h ****  *     };
 542:./include/linux/libfdt.h ****  *     soc@0 {
 543:./include/linux/libfdt.h ****  *         foo: i2c@30a40000 {
 544:./include/linux/libfdt.h ****  *             bar: eeprom@52 {
 545:./include/linux/libfdt.h ****  *             };
 546:./include/linux/libfdt.h ****  *         };
 547:./include/linux/libfdt.h ****  *     };
 548:./include/linux/libfdt.h ****  * };
 549:./include/linux/libfdt.h ****  *
 550:./include/linux/libfdt.h ****  * these would be equivalent:
 551:./include/linux/libfdt.h ****  *
 552:./include/linux/libfdt.h ****  *   /soc@0/i2c@30a40000/eeprom@52
 553:./include/linux/libfdt.h ****  *   i2c2/eeprom@52
 554:./include/linux/libfdt.h ****  *
 555:./include/linux/libfdt.h ****  * returns:
 556:./include/linux/libfdt.h ****  *	structure block offset of the node with the requested path (>=0), on
 557:./include/linux/libfdt.h ****  *		success
 558:./include/linux/libfdt.h ****  *	-FDT_ERR_BADPATH, given path does not begin with '/' and the first
 559:./include/linux/libfdt.h ****  *		component is not a valid alias
 560:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, if the requested node does not exist
 561:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
 562:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
 563:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
 564:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
 565:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings.
 566:./include/linux/libfdt.h ****  */
 567:./include/linux/libfdt.h **** int fdt_path_offset(const void *fdt, const char *path);
 568:./include/linux/libfdt.h **** 
 569:./include/linux/libfdt.h **** /**
 570:./include/linux/libfdt.h ****  * fdt_get_name - retrieve the name of a given node
 571:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 572:./include/linux/libfdt.h ****  * @nodeoffset: structure block offset of the starting node
 573:./include/linux/libfdt.h ****  * @lenp: pointer to an integer variable (will be overwritten) or NULL
 574:./include/linux/libfdt.h ****  *
 575:./include/linux/libfdt.h ****  * fdt_get_name() retrieves the name (including unit address) of the
 576:./include/linux/libfdt.h ****  * device tree node at structure block offset nodeoffset.  If lenp is
 577:./include/linux/libfdt.h ****  * non-NULL, the length of this name is also returned, in the integer
 578:./include/linux/libfdt.h ****  * pointed to by lenp.
 579:./include/linux/libfdt.h ****  *
 580:./include/linux/libfdt.h ****  * returns:
 581:./include/linux/libfdt.h ****  *	pointer to the node's name, on success
 582:./include/linux/libfdt.h ****  *		If lenp is non-NULL, *lenp contains the length of that name
 583:./include/linux/libfdt.h ****  *			(>=0)
 584:./include/linux/libfdt.h ****  *	NULL, on error
 585:./include/linux/libfdt.h ****  *		if lenp is non-NULL *lenp contains an error code (<0):
 586:./include/linux/libfdt.h ****  *		-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE
 587:./include/linux/libfdt.h ****  *			tag
 588:./include/linux/libfdt.h ****  *		-FDT_ERR_BADMAGIC,
 589:./include/linux/libfdt.h ****  *		-FDT_ERR_BADVERSION,
 590:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTATE, standard meanings
 591:./include/linux/libfdt.h ****  */
 592:./include/linux/libfdt.h **** const char *fdt_get_name(const void *fdt, int nodeoffset, int *lenp);
 593:./include/linux/libfdt.h **** 
 594:./include/linux/libfdt.h **** /**
 595:./include/linux/libfdt.h ****  * fdt_first_property_offset - find the offset of a node's first property
 596:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
ARM GAS  /tmp/ccCHVNBc.s 			page 17


 597:./include/linux/libfdt.h ****  * @nodeoffset: structure block offset of a node
 598:./include/linux/libfdt.h ****  *
 599:./include/linux/libfdt.h ****  * fdt_first_property_offset() finds the first property of the node at
 600:./include/linux/libfdt.h ****  * the given structure block offset.
 601:./include/linux/libfdt.h ****  *
 602:./include/linux/libfdt.h ****  * returns:
 603:./include/linux/libfdt.h ****  *	structure block offset of the property (>=0), on success
 604:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, if the requested node has no properties
 605:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, if nodeoffset did not point to an FDT_BEGIN_NODE tag
 606:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
 607:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
 608:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
 609:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
 610:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings.
 611:./include/linux/libfdt.h ****  */
 612:./include/linux/libfdt.h **** int fdt_first_property_offset(const void *fdt, int nodeoffset);
 613:./include/linux/libfdt.h **** 
 614:./include/linux/libfdt.h **** /**
 615:./include/linux/libfdt.h ****  * fdt_next_property_offset - step through a node's properties
 616:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 617:./include/linux/libfdt.h ****  * @offset: structure block offset of a property
 618:./include/linux/libfdt.h ****  *
 619:./include/linux/libfdt.h ****  * fdt_next_property_offset() finds the property immediately after the
 620:./include/linux/libfdt.h ****  * one at the given structure block offset.  This will be a property
 621:./include/linux/libfdt.h ****  * of the same node as the given property.
 622:./include/linux/libfdt.h ****  *
 623:./include/linux/libfdt.h ****  * returns:
 624:./include/linux/libfdt.h ****  *	structure block offset of the next property (>=0), on success
 625:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, if the given property is the last in its node
 626:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, if nodeoffset did not point to an FDT_PROP tag
 627:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
 628:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
 629:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
 630:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
 631:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings.
 632:./include/linux/libfdt.h ****  */
 633:./include/linux/libfdt.h **** int fdt_next_property_offset(const void *fdt, int offset);
 634:./include/linux/libfdt.h **** 
 635:./include/linux/libfdt.h **** /**
 636:./include/linux/libfdt.h ****  * fdt_for_each_property_offset - iterate over all properties of a node
 637:./include/linux/libfdt.h ****  *
 638:./include/linux/libfdt.h ****  * @property:	property offset (int, lvalue)
 639:./include/linux/libfdt.h ****  * @fdt:	FDT blob (const void *)
 640:./include/linux/libfdt.h ****  * @node:	node offset (int)
 641:./include/linux/libfdt.h ****  *
 642:./include/linux/libfdt.h ****  * This is actually a wrapper around a for loop and would be used like so:
 643:./include/linux/libfdt.h ****  *
 644:./include/linux/libfdt.h ****  *	fdt_for_each_property_offset(property, fdt, node) {
 645:./include/linux/libfdt.h ****  *		Use property
 646:./include/linux/libfdt.h ****  *		...
 647:./include/linux/libfdt.h ****  *	}
 648:./include/linux/libfdt.h ****  *
 649:./include/linux/libfdt.h ****  *	if ((property < 0) && (property != -FDT_ERR_NOTFOUND)) {
 650:./include/linux/libfdt.h ****  *		Error handling
 651:./include/linux/libfdt.h ****  *	}
 652:./include/linux/libfdt.h ****  *
 653:./include/linux/libfdt.h ****  * Note that this is implemented as a macro and property is used as
ARM GAS  /tmp/ccCHVNBc.s 			page 18


 654:./include/linux/libfdt.h ****  * iterator in the loop. The node variable can be constant or even a
 655:./include/linux/libfdt.h ****  * literal.
 656:./include/linux/libfdt.h ****  */
 657:./include/linux/libfdt.h **** #define fdt_for_each_property_offset(property, fdt, node)	\
 658:./include/linux/libfdt.h **** 	for (property = fdt_first_property_offset(fdt, node);	\
 659:./include/linux/libfdt.h **** 	     property >= 0;					\
 660:./include/linux/libfdt.h **** 	     property = fdt_next_property_offset(fdt, property))
 661:./include/linux/libfdt.h **** 
 662:./include/linux/libfdt.h **** /**
 663:./include/linux/libfdt.h ****  * fdt_get_property_by_offset - retrieve the property at a given offset
 664:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 665:./include/linux/libfdt.h ****  * @offset: offset of the property to retrieve
 666:./include/linux/libfdt.h ****  * @lenp: pointer to an integer variable (will be overwritten) or NULL
 667:./include/linux/libfdt.h ****  *
 668:./include/linux/libfdt.h ****  * fdt_get_property_by_offset() retrieves a pointer to the
 669:./include/linux/libfdt.h ****  * fdt_property structure within the device tree blob at the given
 670:./include/linux/libfdt.h ****  * offset.  If lenp is non-NULL, the length of the property value is
 671:./include/linux/libfdt.h ****  * also returned, in the integer pointed to by lenp.
 672:./include/linux/libfdt.h ****  *
 673:./include/linux/libfdt.h ****  * Note that this code only works on device tree versions >= 16. fdt_getprop()
 674:./include/linux/libfdt.h ****  * works on all versions.
 675:./include/linux/libfdt.h ****  *
 676:./include/linux/libfdt.h ****  * returns:
 677:./include/linux/libfdt.h ****  *	pointer to the structure representing the property
 678:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains the length of the property
 679:./include/linux/libfdt.h ****  *		value (>=0)
 680:./include/linux/libfdt.h ****  *	NULL, on error
 681:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains an error code (<0):
 682:./include/linux/libfdt.h ****  *		-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_PROP tag
 683:./include/linux/libfdt.h ****  *		-FDT_ERR_BADMAGIC,
 684:./include/linux/libfdt.h ****  *		-FDT_ERR_BADVERSION,
 685:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTATE,
 686:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTRUCTURE,
 687:./include/linux/libfdt.h ****  *		-FDT_ERR_TRUNCATED, standard meanings
 688:./include/linux/libfdt.h ****  */
 689:./include/linux/libfdt.h **** const struct fdt_property *fdt_get_property_by_offset(const void *fdt,
 690:./include/linux/libfdt.h **** 						      int offset,
 691:./include/linux/libfdt.h **** 						      int *lenp);
 692:./include/linux/libfdt.h **** static inline struct fdt_property *fdt_get_property_by_offset_w(void *fdt,
 693:./include/linux/libfdt.h **** 								int offset,
 694:./include/linux/libfdt.h **** 								int *lenp)
 695:./include/linux/libfdt.h **** {
 696:./include/linux/libfdt.h **** 	return (struct fdt_property *)(uintptr_t)
 697:./include/linux/libfdt.h **** 		fdt_get_property_by_offset(fdt, offset, lenp);
 698:./include/linux/libfdt.h **** }
 699:./include/linux/libfdt.h **** 
 700:./include/linux/libfdt.h **** /**
 701:./include/linux/libfdt.h ****  * fdt_get_property_namelen - find a property based on substring
 702:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 703:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to find
 704:./include/linux/libfdt.h ****  * @name: name of the property to find
 705:./include/linux/libfdt.h ****  * @namelen: number of characters of name to consider
 706:./include/linux/libfdt.h ****  * @lenp: pointer to an integer variable (will be overwritten) or NULL
 707:./include/linux/libfdt.h ****  *
 708:./include/linux/libfdt.h ****  * Identical to fdt_get_property(), but only examine the first namelen
 709:./include/linux/libfdt.h ****  * characters of name for matching the property name.
 710:./include/linux/libfdt.h ****  *
ARM GAS  /tmp/ccCHVNBc.s 			page 19


 711:./include/linux/libfdt.h ****  * Return: pointer to the structure representing the property, or NULL
 712:./include/linux/libfdt.h ****  *         if not found
 713:./include/linux/libfdt.h ****  */
 714:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
 715:./include/linux/libfdt.h **** const struct fdt_property *fdt_get_property_namelen(const void *fdt,
 716:./include/linux/libfdt.h **** 						    int nodeoffset,
 717:./include/linux/libfdt.h **** 						    const char *name,
 718:./include/linux/libfdt.h **** 						    int namelen, int *lenp);
 719:./include/linux/libfdt.h **** static inline struct fdt_property *
 720:./include/linux/libfdt.h **** fdt_get_property_namelen_w(void *fdt, int nodeoffset, const char *name,
 721:./include/linux/libfdt.h **** 			   int namelen, int *lenp)
 722:./include/linux/libfdt.h **** {
 723:./include/linux/libfdt.h **** 	return (struct fdt_property *)(uintptr_t)fdt_get_property_namelen(
 724:./include/linux/libfdt.h **** 		fdt, nodeoffset, name, namelen, lenp);
 725:./include/linux/libfdt.h **** }
 726:./include/linux/libfdt.h **** #endif
 727:./include/linux/libfdt.h **** 
 728:./include/linux/libfdt.h **** /**
 729:./include/linux/libfdt.h ****  * fdt_get_property - find a given property in a given node
 730:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 731:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to find
 732:./include/linux/libfdt.h ****  * @name: name of the property to find
 733:./include/linux/libfdt.h ****  * @lenp: pointer to an integer variable (will be overwritten) or NULL
 734:./include/linux/libfdt.h ****  *
 735:./include/linux/libfdt.h ****  * fdt_get_property() retrieves a pointer to the fdt_property
 736:./include/linux/libfdt.h ****  * structure within the device tree blob corresponding to the property
 737:./include/linux/libfdt.h ****  * named 'name' of the node at offset nodeoffset.  If lenp is
 738:./include/linux/libfdt.h ****  * non-NULL, the length of the property value is also returned, in the
 739:./include/linux/libfdt.h ****  * integer pointed to by lenp.
 740:./include/linux/libfdt.h ****  *
 741:./include/linux/libfdt.h ****  * returns:
 742:./include/linux/libfdt.h ****  *	pointer to the structure representing the property
 743:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains the length of the property
 744:./include/linux/libfdt.h ****  *		value (>=0)
 745:./include/linux/libfdt.h ****  *	NULL, on error
 746:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains an error code (<0):
 747:./include/linux/libfdt.h ****  *		-FDT_ERR_NOTFOUND, node does not have named property
 748:./include/linux/libfdt.h ****  *		-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE
 749:./include/linux/libfdt.h ****  *			tag
 750:./include/linux/libfdt.h ****  *		-FDT_ERR_BADMAGIC,
 751:./include/linux/libfdt.h ****  *		-FDT_ERR_BADVERSION,
 752:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTATE,
 753:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTRUCTURE,
 754:./include/linux/libfdt.h ****  *		-FDT_ERR_TRUNCATED, standard meanings
 755:./include/linux/libfdt.h ****  */
 756:./include/linux/libfdt.h **** const struct fdt_property *fdt_get_property(const void *fdt, int nodeoffset,
 757:./include/linux/libfdt.h **** 					    const char *name, int *lenp);
 758:./include/linux/libfdt.h **** static inline struct fdt_property *fdt_get_property_w(void *fdt, int nodeoffset,
 759:./include/linux/libfdt.h **** 						      const char *name,
 760:./include/linux/libfdt.h **** 						      int *lenp)
 761:./include/linux/libfdt.h **** {
 762:./include/linux/libfdt.h **** 	return (struct fdt_property *)(uintptr_t)
 763:./include/linux/libfdt.h **** 		fdt_get_property(fdt, nodeoffset, name, lenp);
 764:./include/linux/libfdt.h **** }
 765:./include/linux/libfdt.h **** 
 766:./include/linux/libfdt.h **** /**
 767:./include/linux/libfdt.h ****  * fdt_getprop_by_offset - retrieve the value of a property at a given offset
ARM GAS  /tmp/ccCHVNBc.s 			page 20


 768:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 769:./include/linux/libfdt.h ****  * @offset: offset of the property to read
 770:./include/linux/libfdt.h ****  * @namep: pointer to a string variable (will be overwritten) or NULL
 771:./include/linux/libfdt.h ****  * @lenp: pointer to an integer variable (will be overwritten) or NULL
 772:./include/linux/libfdt.h ****  *
 773:./include/linux/libfdt.h ****  * fdt_getprop_by_offset() retrieves a pointer to the value of the
 774:./include/linux/libfdt.h ****  * property at structure block offset 'offset' (this will be a pointer
 775:./include/linux/libfdt.h ****  * to within the device blob itself, not a copy of the value).  If
 776:./include/linux/libfdt.h ****  * lenp is non-NULL, the length of the property value is also
 777:./include/linux/libfdt.h ****  * returned, in the integer pointed to by lenp.  If namep is non-NULL,
 778:./include/linux/libfdt.h ****  * the property's name will also be returned in the char * pointed to
 779:./include/linux/libfdt.h ****  * by namep (this will be a pointer to within the device tree's string
 780:./include/linux/libfdt.h ****  * block, not a new copy of the name).
 781:./include/linux/libfdt.h ****  *
 782:./include/linux/libfdt.h ****  * returns:
 783:./include/linux/libfdt.h ****  *	pointer to the property's value
 784:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains the length of the property
 785:./include/linux/libfdt.h ****  *		value (>=0)
 786:./include/linux/libfdt.h ****  *		if namep is non-NULL *namep contains a pointer to the property
 787:./include/linux/libfdt.h ****  *		name.
 788:./include/linux/libfdt.h ****  *	NULL, on error
 789:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains an error code (<0):
 790:./include/linux/libfdt.h ****  *		-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_PROP tag
 791:./include/linux/libfdt.h ****  *		-FDT_ERR_BADMAGIC,
 792:./include/linux/libfdt.h ****  *		-FDT_ERR_BADVERSION,
 793:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTATE,
 794:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTRUCTURE,
 795:./include/linux/libfdt.h ****  *		-FDT_ERR_TRUNCATED, standard meanings
 796:./include/linux/libfdt.h ****  */
 797:./include/linux/libfdt.h **** #ifndef SWIG /* This function is not useful in Python */
 798:./include/linux/libfdt.h **** const void *fdt_getprop_by_offset(const void *fdt, int offset,
 799:./include/linux/libfdt.h **** 				  const char **namep, int *lenp);
 800:./include/linux/libfdt.h **** #endif
 801:./include/linux/libfdt.h **** 
 802:./include/linux/libfdt.h **** /**
 803:./include/linux/libfdt.h ****  * fdt_getprop_namelen - get property value based on substring
 804:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 805:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to find
 806:./include/linux/libfdt.h ****  * @name: name of the property to find
 807:./include/linux/libfdt.h ****  * @namelen: number of characters of name to consider
 808:./include/linux/libfdt.h ****  * @lenp: pointer to an integer variable (will be overwritten) or NULL
 809:./include/linux/libfdt.h ****  *
 810:./include/linux/libfdt.h ****  * Identical to fdt_getprop(), but only examine the first namelen
 811:./include/linux/libfdt.h ****  * characters of name for matching the property name.
 812:./include/linux/libfdt.h ****  *
 813:./include/linux/libfdt.h ****  * Return: pointer to the property's value or NULL on error
 814:./include/linux/libfdt.h ****  */
 815:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
 816:./include/linux/libfdt.h **** const void *fdt_getprop_namelen(const void *fdt, int nodeoffset,
 817:./include/linux/libfdt.h **** 				const char *name, int namelen, int *lenp);
 818:./include/linux/libfdt.h **** static inline void *fdt_getprop_namelen_w(void *fdt, int nodeoffset,
 819:./include/linux/libfdt.h **** 					  const char *name, int namelen,
 820:./include/linux/libfdt.h **** 					  int *lenp)
 821:./include/linux/libfdt.h **** {
 822:./include/linux/libfdt.h **** 	return (void *)(uintptr_t)fdt_getprop_namelen(fdt, nodeoffset, name,
 823:./include/linux/libfdt.h **** 						      namelen, lenp);
 824:./include/linux/libfdt.h **** }
ARM GAS  /tmp/ccCHVNBc.s 			page 21


 825:./include/linux/libfdt.h **** #endif
 826:./include/linux/libfdt.h **** 
 827:./include/linux/libfdt.h **** /**
 828:./include/linux/libfdt.h ****  * fdt_getprop - retrieve the value of a given property
 829:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 830:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to find
 831:./include/linux/libfdt.h ****  * @name: name of the property to find
 832:./include/linux/libfdt.h ****  * @lenp: pointer to an integer variable (will be overwritten) or NULL
 833:./include/linux/libfdt.h ****  *
 834:./include/linux/libfdt.h ****  * fdt_getprop() retrieves a pointer to the value of the property
 835:./include/linux/libfdt.h ****  * named @name of the node at offset @nodeoffset (this will be a
 836:./include/linux/libfdt.h ****  * pointer to within the device blob itself, not a copy of the value).
 837:./include/linux/libfdt.h ****  * If @lenp is non-NULL, the length of the property value is also
 838:./include/linux/libfdt.h ****  * returned, in the integer pointed to by @lenp.
 839:./include/linux/libfdt.h ****  *
 840:./include/linux/libfdt.h ****  * returns:
 841:./include/linux/libfdt.h ****  *	pointer to the property's value
 842:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains the length of the property
 843:./include/linux/libfdt.h ****  *		value (>=0)
 844:./include/linux/libfdt.h ****  *	NULL, on error
 845:./include/linux/libfdt.h ****  *		if lenp is non-NULL, *lenp contains an error code (<0):
 846:./include/linux/libfdt.h ****  *		-FDT_ERR_NOTFOUND, node does not have named property
 847:./include/linux/libfdt.h ****  *		-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE
 848:./include/linux/libfdt.h ****  *			tag
 849:./include/linux/libfdt.h ****  *		-FDT_ERR_BADMAGIC,
 850:./include/linux/libfdt.h ****  *		-FDT_ERR_BADVERSION,
 851:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTATE,
 852:./include/linux/libfdt.h ****  *		-FDT_ERR_BADSTRUCTURE,
 853:./include/linux/libfdt.h ****  *		-FDT_ERR_TRUNCATED, standard meanings
 854:./include/linux/libfdt.h ****  */
 855:./include/linux/libfdt.h **** const void *fdt_getprop(const void *fdt, int nodeoffset,
 856:./include/linux/libfdt.h **** 			const char *name, int *lenp);
 857:./include/linux/libfdt.h **** static inline void *fdt_getprop_w(void *fdt, int nodeoffset,
 152              		.loc 3 857 21 view .LVU29
 153              	.LBB63:
 858:./include/linux/libfdt.h **** 				  const char *name, int *lenp)
 859:./include/linux/libfdt.h **** {
 860:./include/linux/libfdt.h **** 	return (void *)(uintptr_t)fdt_getprop(fdt, nodeoffset, name, lenp);
 154              		.loc 3 860 2 view .LVU30
 155              		.loc 3 860 28 is_stmt 0 view .LVU31
 156 0006 01AB     		add	r3, sp, #4
 157              	.LVL11:
 158              		.loc 3 860 28 view .LVU32
 159 0008 FFF7FEFF 		bl	fdt_getprop
 160              	.LVL12:
 161              		.loc 3 860 28 view .LVU33
 162              	.LBE63:
 163              	.LBE62:
 109:./lib/fdt/fdt_overlay.c **** 	if (!valp)
 164              		.loc 1 109 2 is_stmt 1 view .LVU34
 165              		.loc 1 109 5 is_stmt 0 view .LVU35
 166 000c D8B1     		cbz	r0, .L17
 110:./lib/fdt/fdt_overlay.c **** 		return len;
 111:./lib/fdt/fdt_overlay.c **** 
 112:./lib/fdt/fdt_overlay.c **** 	if (len != sizeof(val))
 167              		.loc 1 112 2 is_stmt 1 view .LVU36
 168              		.loc 1 112 10 is_stmt 0 view .LVU37
ARM GAS  /tmp/ccCHVNBc.s 			page 22


 169 000e 019B     		ldr	r3, [sp, #4]
 170              		.loc 1 112 5 view .LVU38
 171 0010 042B     		cmp	r3, #4
 172 0012 1AD1     		bne	.L13
 113:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_BADPHANDLE;
 114:./lib/fdt/fdt_overlay.c **** 
 115:./lib/fdt/fdt_overlay.c **** 	val = fdt32_ld(valp);
 173              		.loc 1 115 2 is_stmt 1 view .LVU39
 174              	.LVL13:
 175              	.LBB64:
 176              	.LBI64:
 145:./include/linux/libfdt.h **** {
 177              		.loc 3 145 24 view .LVU40
 178              	.LBB65:
 147:./include/linux/libfdt.h **** 
 179              		.loc 3 147 2 view .LVU41
 149:./include/linux/libfdt.h **** 		| ((uint32_t)bp[1] << 16)
 180              		.loc 3 149 2 view .LVU42
 149:./include/linux/libfdt.h **** 		| ((uint32_t)bp[1] << 16)
 181              		.loc 3 149 22 is_stmt 0 view .LVU43
 182 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 183              		.loc 3 150 18 view .LVU44
 184 0016 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 185              		.loc 3 150 22 view .LVU45
 186 0018 1204     		lsls	r2, r2, #16
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 187              		.loc 3 150 3 view .LVU46
 188 001a 42EA0362 		orr	r2, r2, r3, lsl #24
 151:./include/linux/libfdt.h **** 		| bp[3];
 189              		.loc 3 151 18 view .LVU47
 190 001e 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 151:./include/linux/libfdt.h **** 		| bp[3];
 191              		.loc 3 151 3 view .LVU48
 192 0020 42EA0322 		orr	r2, r2, r3, lsl #8
 152:./include/linux/libfdt.h **** }
 193              		.loc 3 152 7 view .LVU49
 194 0024 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 152:./include/linux/libfdt.h **** }
 195              		.loc 3 152 3 view .LVU50
 196 0026 1A43     		orrs	r2, r2, r3
 197              	.LVL14:
 152:./include/linux/libfdt.h **** }
 198              		.loc 3 152 3 view .LVU51
 199              	.LBE65:
 200              	.LBE64:
 116:./lib/fdt/fdt_overlay.c **** 	if (val + delta < val || val + delta == (uint32_t)-1)
 201              		.loc 1 116 2 is_stmt 1 view .LVU52
 202              		.loc 1 116 5 is_stmt 0 view .LVU53
 203 0028 A318     		adds	r3, r4, r2
 204 002a 11D2     		bcs	.L14
 205              		.loc 1 116 24 discriminator 1 view .LVU54
 206 002c B3F1FF3F 		cmp	r3, #-1
 207 0030 11D0     		beq	.L15
 117:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_NOPHANDLES;
 118:./lib/fdt/fdt_overlay.c **** 
ARM GAS  /tmp/ccCHVNBc.s 			page 23


 119:./lib/fdt/fdt_overlay.c **** 	fdt32_st(valp, val + delta);
 208              		.loc 1 119 2 is_stmt 1 view .LVU55
 209              	.LVL15:
 210              	.LBB66:
 211              	.LBI66:
 155:./include/linux/libfdt.h **** {
 212              		.loc 3 155 20 view .LVU56
 213              	.LBB67:
 157:./include/linux/libfdt.h **** 
 214              		.loc 3 157 2 view .LVU57
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 215              		.loc 3 159 2 view .LVU58
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 216              		.loc 3 159 16 is_stmt 0 view .LVU59
 217 0032 1A0E     		lsrs	r2, r3, #24
 218              	.LVL16:
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 219              		.loc 3 159 8 view .LVU60
 220 0034 0270     		strb	r2, [r0]
 221              	.LVL17:
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 222              		.loc 3 160 2 is_stmt 1 view .LVU61
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 223              		.loc 3 160 17 is_stmt 0 view .LVU62
 224 0036 1A0C     		lsrs	r2, r3, #16
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 225              		.loc 3 160 8 view .LVU63
 226 0038 4270     		strb	r2, [r0, #1]
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 227              		.loc 3 161 2 is_stmt 1 view .LVU64
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 228              		.loc 3 161 17 is_stmt 0 view .LVU65
 229 003a 1A0A     		lsrs	r2, r3, #8
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 230              		.loc 3 161 8 view .LVU66
 231 003c 8270     		strb	r2, [r0, #2]
 162:./include/linux/libfdt.h **** }
 232              		.loc 3 162 2 is_stmt 1 view .LVU67
 162:./include/linux/libfdt.h **** }
 233              		.loc 3 162 8 is_stmt 0 view .LVU68
 234 003e C370     		strb	r3, [r0, #3]
 235              	.LVL18:
 162:./include/linux/libfdt.h **** }
 236              		.loc 3 162 8 view .LVU69
 237              	.LBE67:
 238              	.LBE66:
 120:./lib/fdt/fdt_overlay.c **** 	return 0;
 239              		.loc 1 120 2 is_stmt 1 view .LVU70
 240              		.loc 1 120 9 is_stmt 0 view .LVU71
 241 0040 0020     		movs	r0, #0
 242              	.LVL19:
 243              	.L10:
 121:./lib/fdt/fdt_overlay.c **** }
 244              		.loc 1 121 1 view .LVU72
 245 0042 02B0     		add	sp, sp, #8
 246              	.LCFI6:
 247              		.cfi_remember_state
ARM GAS  /tmp/ccCHVNBc.s 			page 24


 248              		.cfi_def_cfa_offset 8
 249              		@ sp needed
 250 0044 10BD     		pop	{r4, pc}
 251              	.LVL20:
 252              	.L17:
 253              	.LCFI7:
 254              		.cfi_restore_state
 110:./lib/fdt/fdt_overlay.c **** 
 255              		.loc 1 110 3 is_stmt 1 view .LVU73
 110:./lib/fdt/fdt_overlay.c **** 
 256              		.loc 1 110 10 is_stmt 0 view .LVU74
 257 0046 0198     		ldr	r0, [sp, #4]
 258              	.LVL21:
 110:./lib/fdt/fdt_overlay.c **** 
 259              		.loc 1 110 10 view .LVU75
 260 0048 FBE7     		b	.L10
 261              	.LVL22:
 262              	.L13:
 113:./lib/fdt/fdt_overlay.c **** 
 263              		.loc 1 113 10 view .LVU76
 264 004a 6FF00500 		mvn	r0, #5
 265              	.LVL23:
 113:./lib/fdt/fdt_overlay.c **** 
 266              		.loc 1 113 10 view .LVU77
 267 004e F8E7     		b	.L10
 268              	.LVL24:
 269              	.L14:
 117:./lib/fdt/fdt_overlay.c **** 
 270              		.loc 1 117 10 view .LVU78
 271 0050 6FF01000 		mvn	r0, #16
 272              	.LVL25:
 117:./lib/fdt/fdt_overlay.c **** 
 273              		.loc 1 117 10 view .LVU79
 274 0054 F5E7     		b	.L10
 275              	.LVL26:
 276              	.L15:
 117:./lib/fdt/fdt_overlay.c **** 
 277              		.loc 1 117 10 view .LVU80
 278 0056 6FF01000 		mvn	r0, #16
 279              	.LVL27:
 117:./lib/fdt/fdt_overlay.c **** 
 280              		.loc 1 117 10 view .LVU81
 281 005a F2E7     		b	.L10
 282              		.cfi_endproc
 283              	.LFE77:
 285              		.section	.rodata.overlay_adjust_node_phandles.str1.4,"aMS",%progbits,1
 286              		.align	2
 287              	.LC1:
 288 0000 7068616E 		.ascii	"phandle\000"
 288      646C6500 
 289              		.align	2
 290              	.LC2:
 291 0008 6C696E75 		.ascii	"linux,phandle\000"
 291      782C7068 
 291      616E646C 
 291      6500
 292              		.section	.text.overlay_adjust_node_phandles,"ax",%progbits
ARM GAS  /tmp/ccCHVNBc.s 			page 25


 293              		.align	1
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 298              	overlay_adjust_node_phandles:
 299              	.LVL28:
 300              	.LFB78:
 122:./lib/fdt/fdt_overlay.c **** 
 123:./lib/fdt/fdt_overlay.c **** /**
 124:./lib/fdt/fdt_overlay.c ****  * overlay_adjust_node_phandles - Offsets the phandles of a node
 125:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 126:./lib/fdt/fdt_overlay.c ****  * @node: Offset of the node we want to adjust
 127:./lib/fdt/fdt_overlay.c ****  * @delta: Offset to shift the phandles of
 128:./lib/fdt/fdt_overlay.c ****  *
 129:./lib/fdt/fdt_overlay.c ****  * overlay_adjust_node_phandles() adds a constant to all the phandles
 130:./lib/fdt/fdt_overlay.c ****  * of a given node. This is mainly use as part of the overlay
 131:./lib/fdt/fdt_overlay.c ****  * application process, when we want to update all the overlay
 132:./lib/fdt/fdt_overlay.c ****  * phandles to not conflict with the overlays of the base device tree.
 133:./lib/fdt/fdt_overlay.c ****  *
 134:./lib/fdt/fdt_overlay.c ****  * returns:
 135:./lib/fdt/fdt_overlay.c ****  *      0 on success
 136:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 137:./lib/fdt/fdt_overlay.c ****  */
 138:./lib/fdt/fdt_overlay.c **** static int overlay_adjust_node_phandles(void *fdto, int node,
 139:./lib/fdt/fdt_overlay.c **** 					uint32_t delta)
 140:./lib/fdt/fdt_overlay.c **** {
 301              		.loc 1 140 1 is_stmt 1 view -0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		.loc 1 140 1 is_stmt 0 view .LVU83
 306 0000 70B5     		push	{r4, r5, r6, lr}
 307              	.LCFI8:
 308              		.cfi_def_cfa_offset 16
 309              		.cfi_offset 4, -16
 310              		.cfi_offset 5, -12
 311              		.cfi_offset 6, -8
 312              		.cfi_offset 14, -4
 313 0002 0546     		mov	r5, r0
 314 0004 0E46     		mov	r6, r1
 315 0006 1446     		mov	r4, r2
 141:./lib/fdt/fdt_overlay.c **** 	int child;
 316              		.loc 1 141 2 is_stmt 1 view .LVU84
 142:./lib/fdt/fdt_overlay.c **** 	int ret;
 317              		.loc 1 142 2 view .LVU85
 143:./lib/fdt/fdt_overlay.c **** 
 144:./lib/fdt/fdt_overlay.c **** 	ret = overlay_phandle_add_offset(fdto, node, "phandle", delta);
 318              		.loc 1 144 2 view .LVU86
 319              		.loc 1 144 8 is_stmt 0 view .LVU87
 320 0008 1346     		mov	r3, r2
 321 000a 134A     		ldr	r2, .L25
 322              	.LVL29:
 323              		.loc 1 144 8 view .LVU88
 324 000c FFF7FEFF 		bl	overlay_phandle_add_offset
 325              	.LVL30:
 145:./lib/fdt/fdt_overlay.c **** 	if (ret && ret != -FDT_ERR_NOTFOUND)
 326              		.loc 1 145 2 is_stmt 1 view .LVU89
ARM GAS  /tmp/ccCHVNBc.s 			page 26


 327              		.loc 1 145 10 is_stmt 0 view .LVU90
 328 0010 431C     		adds	r3, r0, #1
 329              		.loc 1 145 5 view .LVU91
 330 0012 012B     		cmp	r3, #1
 331 0014 00D9     		bls	.L23
 332              	.LVL31:
 333              	.L18:
 146:./lib/fdt/fdt_overlay.c **** 		return ret;
 147:./lib/fdt/fdt_overlay.c **** 
 148:./lib/fdt/fdt_overlay.c **** 	ret = overlay_phandle_add_offset(fdto, node, "linux,phandle", delta);
 149:./lib/fdt/fdt_overlay.c **** 	if (ret && ret != -FDT_ERR_NOTFOUND)
 150:./lib/fdt/fdt_overlay.c **** 		return ret;
 151:./lib/fdt/fdt_overlay.c **** 
 152:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_subnode(child, fdto, node) {
 153:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
 154:./lib/fdt/fdt_overlay.c **** 		if (ret)
 155:./lib/fdt/fdt_overlay.c **** 			return ret;
 156:./lib/fdt/fdt_overlay.c **** 	}
 157:./lib/fdt/fdt_overlay.c **** 
 158:./lib/fdt/fdt_overlay.c **** 	return 0;
 159:./lib/fdt/fdt_overlay.c **** }
 334              		.loc 1 159 1 view .LVU92
 335 0016 70BD     		pop	{r4, r5, r6, pc}
 336              	.LVL32:
 337              	.L23:
 148:./lib/fdt/fdt_overlay.c **** 	if (ret && ret != -FDT_ERR_NOTFOUND)
 338              		.loc 1 148 2 is_stmt 1 view .LVU93
 148:./lib/fdt/fdt_overlay.c **** 	if (ret && ret != -FDT_ERR_NOTFOUND)
 339              		.loc 1 148 8 is_stmt 0 view .LVU94
 340 0018 2346     		mov	r3, r4
 341 001a 104A     		ldr	r2, .L25+4
 342 001c 3146     		mov	r1, r6
 343 001e 2846     		mov	r0, r5
 344              	.LVL33:
 148:./lib/fdt/fdt_overlay.c **** 	if (ret && ret != -FDT_ERR_NOTFOUND)
 345              		.loc 1 148 8 view .LVU95
 346 0020 FFF7FEFF 		bl	overlay_phandle_add_offset
 347              	.LVL34:
 149:./lib/fdt/fdt_overlay.c **** 		return ret;
 348              		.loc 1 149 2 is_stmt 1 view .LVU96
 149:./lib/fdt/fdt_overlay.c **** 		return ret;
 349              		.loc 1 149 10 is_stmt 0 view .LVU97
 350 0024 431C     		adds	r3, r0, #1
 149:./lib/fdt/fdt_overlay.c **** 		return ret;
 351              		.loc 1 149 5 view .LVU98
 352 0026 012B     		cmp	r3, #1
 353 0028 F5D8     		bhi	.L18
 152:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
 354              		.loc 1 152 2 is_stmt 1 view .LVU99
 355 002a 3146     		mov	r1, r6
 356 002c 2846     		mov	r0, r5
 357              	.LVL35:
 152:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
 358              		.loc 1 152 2 is_stmt 0 view .LVU100
 359 002e FFF7FEFF 		bl	fdt_first_subnode
 360              	.LVL36:
 152:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
ARM GAS  /tmp/ccCHVNBc.s 			page 27


 361              		.loc 1 152 2 view .LVU101
 362 0032 0646     		mov	r6, r0
 363              	.LVL37:
 364              	.L20:
 152:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
 365              		.loc 1 152 2 is_stmt 1 discriminator 1 view .LVU102
 366 0034 002E     		cmp	r6, #0
 367 0036 0CDB     		blt	.L24
 153:./lib/fdt/fdt_overlay.c **** 		if (ret)
 368              		.loc 1 153 3 view .LVU103
 153:./lib/fdt/fdt_overlay.c **** 		if (ret)
 369              		.loc 1 153 9 is_stmt 0 view .LVU104
 370 0038 2246     		mov	r2, r4
 371 003a 3146     		mov	r1, r6
 372 003c 2846     		mov	r0, r5
 373              	.LVL38:
 153:./lib/fdt/fdt_overlay.c **** 		if (ret)
 374              		.loc 1 153 9 view .LVU105
 375 003e FFF7DFFF 		bl	overlay_adjust_node_phandles
 376              	.LVL39:
 154:./lib/fdt/fdt_overlay.c **** 			return ret;
 377              		.loc 1 154 3 is_stmt 1 view .LVU106
 154:./lib/fdt/fdt_overlay.c **** 			return ret;
 378              		.loc 1 154 6 is_stmt 0 view .LVU107
 379 0042 0028     		cmp	r0, #0
 380 0044 E7D1     		bne	.L18
 152:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
 381              		.loc 1 152 2 is_stmt 1 discriminator 2 view .LVU108
 382 0046 3146     		mov	r1, r6
 383 0048 2846     		mov	r0, r5
 384              	.LVL40:
 152:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
 385              		.loc 1 152 2 is_stmt 0 discriminator 2 view .LVU109
 386 004a FFF7FEFF 		bl	fdt_next_subnode
 387              	.LVL41:
 388 004e 0646     		mov	r6, r0
 389              	.LVL42:
 152:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_node_phandles(fdto, child, delta);
 390              		.loc 1 152 2 discriminator 2 view .LVU110
 391 0050 F0E7     		b	.L20
 392              	.LVL43:
 393              	.L24:
 158:./lib/fdt/fdt_overlay.c **** }
 394              		.loc 1 158 9 view .LVU111
 395 0052 0020     		movs	r0, #0
 396              	.LVL44:
 158:./lib/fdt/fdt_overlay.c **** }
 397              		.loc 1 158 9 view .LVU112
 398 0054 DFE7     		b	.L18
 399              	.L26:
 400 0056 00BF     		.align	2
 401              	.L25:
 402 0058 00000000 		.word	.LC1
 403 005c 08000000 		.word	.LC2
 404              		.cfi_endproc
 405              	.LFE78:
 407              		.section	.text.overlay_adjust_local_phandles,"ax",%progbits
ARM GAS  /tmp/ccCHVNBc.s 			page 28


 408              		.align	1
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 413              	overlay_adjust_local_phandles:
 414              	.LVL45:
 415              	.LFB79:
 160:./lib/fdt/fdt_overlay.c **** 
 161:./lib/fdt/fdt_overlay.c **** /**
 162:./lib/fdt/fdt_overlay.c ****  * overlay_adjust_local_phandles - Adjust the phandles of a whole overlay
 163:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 164:./lib/fdt/fdt_overlay.c ****  * @delta: Offset to shift the phandles of
 165:./lib/fdt/fdt_overlay.c ****  *
 166:./lib/fdt/fdt_overlay.c ****  * overlay_adjust_local_phandles() adds a constant to all the
 167:./lib/fdt/fdt_overlay.c ****  * phandles of an overlay. This is mainly use as part of the overlay
 168:./lib/fdt/fdt_overlay.c ****  * application process, when we want to update all the overlay
 169:./lib/fdt/fdt_overlay.c ****  * phandles to not conflict with the overlays of the base device tree.
 170:./lib/fdt/fdt_overlay.c ****  *
 171:./lib/fdt/fdt_overlay.c ****  * returns:
 172:./lib/fdt/fdt_overlay.c ****  *      0 on success
 173:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 174:./lib/fdt/fdt_overlay.c ****  */
 175:./lib/fdt/fdt_overlay.c **** static int overlay_adjust_local_phandles(void *fdto, uint32_t delta)
 176:./lib/fdt/fdt_overlay.c **** {
 416              		.loc 1 176 1 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		.loc 1 176 1 is_stmt 0 view .LVU114
 421 0000 08B5     		push	{r3, lr}
 422              	.LCFI9:
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 3, -8
 425              		.cfi_offset 14, -4
 426 0002 0A46     		mov	r2, r1
 177:./lib/fdt/fdt_overlay.c **** 	/*
 178:./lib/fdt/fdt_overlay.c **** 	 * Start adjusting the phandles from the overlay root
 179:./lib/fdt/fdt_overlay.c **** 	 */
 180:./lib/fdt/fdt_overlay.c **** 	return overlay_adjust_node_phandles(fdto, 0, delta);
 427              		.loc 1 180 2 is_stmt 1 view .LVU115
 428              		.loc 1 180 9 is_stmt 0 view .LVU116
 429 0004 0021     		movs	r1, #0
 430              	.LVL46:
 431              		.loc 1 180 9 view .LVU117
 432 0006 FFF7FEFF 		bl	overlay_adjust_node_phandles
 433              	.LVL47:
 181:./lib/fdt/fdt_overlay.c **** }
 434              		.loc 1 181 1 view .LVU118
 435 000a 08BD     		pop	{r3, pc}
 436              		.cfi_endproc
 437              	.LFE79:
 439              		.section	.text.overlay_update_local_node_references,"ax",%progbits
 440              		.align	1
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 445              	overlay_update_local_node_references:
ARM GAS  /tmp/ccCHVNBc.s 			page 29


 446              	.LVL48:
 447              	.LFB80:
 182:./lib/fdt/fdt_overlay.c **** 
 183:./lib/fdt/fdt_overlay.c **** /**
 184:./lib/fdt/fdt_overlay.c ****  * overlay_update_local_node_references - Adjust the overlay references
 185:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 186:./lib/fdt/fdt_overlay.c ****  * @tree_node: Node offset of the node to operate on
 187:./lib/fdt/fdt_overlay.c ****  * @fixup_node: Node offset of the matching local fixups node
 188:./lib/fdt/fdt_overlay.c ****  * @delta: Offset to shift the phandles of
 189:./lib/fdt/fdt_overlay.c ****  *
 190:./lib/fdt/fdt_overlay.c ****  * overlay_update_local_nodes_references() update the phandles
 191:./lib/fdt/fdt_overlay.c ****  * pointing to a node within the device tree overlay by adding a
 192:./lib/fdt/fdt_overlay.c ****  * constant delta.
 193:./lib/fdt/fdt_overlay.c ****  *
 194:./lib/fdt/fdt_overlay.c ****  * This is mainly used as part of a device tree application process,
 195:./lib/fdt/fdt_overlay.c ****  * where you want the device tree overlays phandles to not conflict
 196:./lib/fdt/fdt_overlay.c ****  * with the ones from the base device tree before merging them.
 197:./lib/fdt/fdt_overlay.c ****  *
 198:./lib/fdt/fdt_overlay.c ****  * returns:
 199:./lib/fdt/fdt_overlay.c ****  *      0 on success
 200:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 201:./lib/fdt/fdt_overlay.c ****  */
 202:./lib/fdt/fdt_overlay.c **** static int overlay_update_local_node_references(void *fdto,
 203:./lib/fdt/fdt_overlay.c **** 						int tree_node,
 204:./lib/fdt/fdt_overlay.c **** 						int fixup_node,
 205:./lib/fdt/fdt_overlay.c **** 						uint32_t delta)
 206:./lib/fdt/fdt_overlay.c **** {
 448              		.loc 1 206 1 is_stmt 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 16
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		.loc 1 206 1 is_stmt 0 view .LVU120
 453 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 454              	.LCFI10:
 455              		.cfi_def_cfa_offset 32
 456              		.cfi_offset 4, -32
 457              		.cfi_offset 5, -28
 458              		.cfi_offset 6, -24
 459              		.cfi_offset 7, -20
 460              		.cfi_offset 8, -16
 461              		.cfi_offset 9, -12
 462              		.cfi_offset 10, -8
 463              		.cfi_offset 14, -4
 464 0004 84B0     		sub	sp, sp, #16
 465              	.LCFI11:
 466              		.cfi_def_cfa_offset 48
 467 0006 8046     		mov	r8, r0
 468 0008 8946     		mov	r9, r1
 469 000a 9246     		mov	r10, r2
 470 000c 1E46     		mov	r6, r3
 207:./lib/fdt/fdt_overlay.c **** 	int fixup_prop;
 471              		.loc 1 207 2 is_stmt 1 view .LVU121
 208:./lib/fdt/fdt_overlay.c **** 	int fixup_child;
 472              		.loc 1 208 2 view .LVU122
 209:./lib/fdt/fdt_overlay.c **** 	int ret;
 473              		.loc 1 209 2 view .LVU123
 210:./lib/fdt/fdt_overlay.c **** 
ARM GAS  /tmp/ccCHVNBc.s 			page 30


 211:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_property_offset(fixup_prop, fdto, fixup_node) {
 474              		.loc 1 211 2 view .LVU124
 475 000e 1146     		mov	r1, r2
 476              	.LVL49:
 477              		.loc 1 211 2 is_stmt 0 view .LVU125
 478 0010 FFF7FEFF 		bl	fdt_first_property_offset
 479              	.LVL50:
 480              		.loc 1 211 2 view .LVU126
 481 0014 0746     		mov	r7, r0
 482              	.LVL51:
 483              		.loc 1 211 2 view .LVU127
 484 0016 34E0     		b	.L30
 485              	.LVL52:
 486              	.L43:
 487              	.LBB68:
 212:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 213:./lib/fdt/fdt_overlay.c **** 		const char *name;
 214:./lib/fdt/fdt_overlay.c **** 		char *tree_val;
 215:./lib/fdt/fdt_overlay.c **** 		int fixup_len;
 216:./lib/fdt/fdt_overlay.c **** 		int tree_len;
 217:./lib/fdt/fdt_overlay.c **** 		int i;
 218:./lib/fdt/fdt_overlay.c **** 
 219:./lib/fdt/fdt_overlay.c **** 		fixup_val = fdt_getprop_by_offset(fdto, fixup_prop,
 220:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 221:./lib/fdt/fdt_overlay.c **** 		if (!fixup_val)
 222:./lib/fdt/fdt_overlay.c **** 			return fixup_len;
 488              		.loc 1 222 4 is_stmt 1 view .LVU128
 489              		.loc 1 222 11 is_stmt 0 view .LVU129
 490 0018 0299     		ldr	r1, [sp, #8]
 491              	.LVL53:
 492              	.L29:
 493              		.loc 1 222 11 view .LVU130
 494              	.LBE68:
 223:./lib/fdt/fdt_overlay.c **** 
 224:./lib/fdt/fdt_overlay.c **** 		if (fixup_len % sizeof(uint32_t))
 225:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 226:./lib/fdt/fdt_overlay.c **** 		fixup_len /= sizeof(uint32_t);
 227:./lib/fdt/fdt_overlay.c **** 
 228:./lib/fdt/fdt_overlay.c **** 		tree_val = fdt_getprop_w(fdto, tree_node, name, &tree_len);
 229:./lib/fdt/fdt_overlay.c **** 		if (!tree_val) {
 230:./lib/fdt/fdt_overlay.c **** 			if (tree_len == -FDT_ERR_NOTFOUND)
 231:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 232:./lib/fdt/fdt_overlay.c **** 
 233:./lib/fdt/fdt_overlay.c **** 			return tree_len;
 234:./lib/fdt/fdt_overlay.c **** 		}
 235:./lib/fdt/fdt_overlay.c **** 
 236:./lib/fdt/fdt_overlay.c **** 		for (i = 0; i < fixup_len; i++) {
 237:./lib/fdt/fdt_overlay.c **** 			fdt32_t *refp;
 238:./lib/fdt/fdt_overlay.c **** 
 239:./lib/fdt/fdt_overlay.c **** 			refp = (fdt32_t *)(tree_val + fdt32_ld_(fixup_val + i));
 240:./lib/fdt/fdt_overlay.c **** 
 241:./lib/fdt/fdt_overlay.c **** 			/*
 242:./lib/fdt/fdt_overlay.c **** 			 * phandles to fixup can be unaligned, so use
 243:./lib/fdt/fdt_overlay.c **** 			 * fdt32_{ld,st}() to read/write them.
 244:./lib/fdt/fdt_overlay.c **** 			 */
 245:./lib/fdt/fdt_overlay.c **** 			fdt32_st(refp, fdt32_ld(refp) + delta);
 246:./lib/fdt/fdt_overlay.c **** 		}
ARM GAS  /tmp/ccCHVNBc.s 			page 31


 247:./lib/fdt/fdt_overlay.c **** 	}
 248:./lib/fdt/fdt_overlay.c **** 
 249:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_subnode(fixup_child, fdto, fixup_node) {
 250:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child,
 251:./lib/fdt/fdt_overlay.c **** 							    NULL);
 252:./lib/fdt/fdt_overlay.c **** 		int tree_child;
 253:./lib/fdt/fdt_overlay.c **** 
 254:./lib/fdt/fdt_overlay.c **** 		tree_child = fdt_subnode_offset(fdto, tree_node,
 255:./lib/fdt/fdt_overlay.c **** 						fixup_child_name);
 256:./lib/fdt/fdt_overlay.c **** 		if (tree_child == -FDT_ERR_NOTFOUND)
 257:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 258:./lib/fdt/fdt_overlay.c **** 		if (tree_child < 0)
 259:./lib/fdt/fdt_overlay.c **** 			return tree_child;
 260:./lib/fdt/fdt_overlay.c **** 
 261:./lib/fdt/fdt_overlay.c **** 		ret = overlay_update_local_node_references(fdto,
 262:./lib/fdt/fdt_overlay.c **** 							   tree_child,
 263:./lib/fdt/fdt_overlay.c **** 							   fixup_child,
 264:./lib/fdt/fdt_overlay.c **** 							   delta);
 265:./lib/fdt/fdt_overlay.c **** 		if (ret)
 266:./lib/fdt/fdt_overlay.c **** 			return ret;
 267:./lib/fdt/fdt_overlay.c **** 	}
 268:./lib/fdt/fdt_overlay.c **** 
 269:./lib/fdt/fdt_overlay.c **** 	return 0;
 270:./lib/fdt/fdt_overlay.c **** }
 495              		.loc 1 270 1 view .LVU131
 496 001a 0846     		mov	r0, r1
 497 001c 04B0     		add	sp, sp, #16
 498              	.LCFI12:
 499              		.cfi_remember_state
 500              		.cfi_def_cfa_offset 32
 501              		@ sp needed
 502 001e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 503              	.LVL54:
 504              	.L34:
 505              	.LCFI13:
 506              		.cfi_restore_state
 507              	.LBB80:
 508              	.LBB69:
 237:./lib/fdt/fdt_overlay.c **** 
 509              		.loc 1 237 4 is_stmt 1 view .LVU132
 239:./lib/fdt/fdt_overlay.c **** 
 510              		.loc 1 239 4 view .LVU133
 511              	.LBB70:
 512              	.LBI70:
 513              		.file 4 "./lib/fdt/libfdt_internal.h"
   1:./lib/fdt/libfdt_internal.h **** /* SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-2-Clause) */
   2:./lib/fdt/libfdt_internal.h **** #ifndef LIBFDT_INTERNAL_H
   3:./lib/fdt/libfdt_internal.h **** #define LIBFDT_INTERNAL_H
   4:./lib/fdt/libfdt_internal.h **** /*
   5:./lib/fdt/libfdt_internal.h ****  * libfdt - Flat Device Tree manipulation
   6:./lib/fdt/libfdt_internal.h ****  * Copyright (C) 2006 David Gibson, IBM Corporation.
   7:./lib/fdt/libfdt_internal.h ****  */
   8:./lib/fdt/libfdt_internal.h **** #include <linux/fdt.h>
   9:./lib/fdt/libfdt_internal.h **** #include <linux/string.h>
  10:./lib/fdt/libfdt_internal.h **** 
  11:./lib/fdt/libfdt_internal.h **** #define FDT_ALIGN(x, a)		(((x) + (a) - 1) & ~((a) - 1))
  12:./lib/fdt/libfdt_internal.h **** #define FDT_TAGALIGN(x)		(FDT_ALIGN((x), FDT_TAGSIZE))
ARM GAS  /tmp/ccCHVNBc.s 			page 32


  13:./lib/fdt/libfdt_internal.h **** 
  14:./lib/fdt/libfdt_internal.h **** int32_t fdt_ro_probe_(const void *fdt);
  15:./lib/fdt/libfdt_internal.h **** #define FDT_RO_PROBE(fdt)					\
  16:./lib/fdt/libfdt_internal.h **** 	{							\
  17:./lib/fdt/libfdt_internal.h **** 		int32_t totalsize_;				\
  18:./lib/fdt/libfdt_internal.h **** 		if ((totalsize_ = fdt_ro_probe_(fdt)) < 0)	\
  19:./lib/fdt/libfdt_internal.h **** 			return totalsize_;			\
  20:./lib/fdt/libfdt_internal.h **** 	}
  21:./lib/fdt/libfdt_internal.h **** 
  22:./lib/fdt/libfdt_internal.h **** int fdt_check_node_offset_(const void *fdt, int offset);
  23:./lib/fdt/libfdt_internal.h **** int fdt_check_prop_offset_(const void *fdt, int offset);
  24:./lib/fdt/libfdt_internal.h **** 
  25:./lib/fdt/libfdt_internal.h **** const char *fdt_find_string_len_(const char *strtab, int tabsize, const char *s,
  26:./lib/fdt/libfdt_internal.h **** 				 int s_len);
  27:./lib/fdt/libfdt_internal.h **** static inline const char *fdt_find_string_(const char *strtab, int tabsize,
  28:./lib/fdt/libfdt_internal.h **** 					   const char *s)
  29:./lib/fdt/libfdt_internal.h **** {
  30:./lib/fdt/libfdt_internal.h **** 	return fdt_find_string_len_(strtab, tabsize, s, strlen(s));
  31:./lib/fdt/libfdt_internal.h **** }
  32:./lib/fdt/libfdt_internal.h **** 
  33:./lib/fdt/libfdt_internal.h **** int fdt_node_end_offset_(void *fdt, int nodeoffset);
  34:./lib/fdt/libfdt_internal.h **** 
  35:./lib/fdt/libfdt_internal.h **** static inline const void *fdt_offset_ptr_(const void *fdt, int offset)
  36:./lib/fdt/libfdt_internal.h **** {
  37:./lib/fdt/libfdt_internal.h **** 	return (const char *)fdt + fdt_off_dt_struct(fdt) + offset;
  38:./lib/fdt/libfdt_internal.h **** }
  39:./lib/fdt/libfdt_internal.h **** 
  40:./lib/fdt/libfdt_internal.h **** static inline void *fdt_offset_ptr_w_(void *fdt, int offset)
  41:./lib/fdt/libfdt_internal.h **** {
  42:./lib/fdt/libfdt_internal.h **** 	return (void *)(uintptr_t)fdt_offset_ptr_(fdt, offset);
  43:./lib/fdt/libfdt_internal.h **** }
  44:./lib/fdt/libfdt_internal.h **** 
  45:./lib/fdt/libfdt_internal.h **** static inline const struct fdt_reserve_entry *fdt_mem_rsv_(const void *fdt, int n)
  46:./lib/fdt/libfdt_internal.h **** {
  47:./lib/fdt/libfdt_internal.h **** 	const struct fdt_reserve_entry *rsv_table =
  48:./lib/fdt/libfdt_internal.h **** 		(const struct fdt_reserve_entry *)
  49:./lib/fdt/libfdt_internal.h **** 		((const char *)fdt + fdt_off_mem_rsvmap(fdt));
  50:./lib/fdt/libfdt_internal.h **** 
  51:./lib/fdt/libfdt_internal.h **** 	return rsv_table + n;
  52:./lib/fdt/libfdt_internal.h **** }
  53:./lib/fdt/libfdt_internal.h **** static inline struct fdt_reserve_entry *fdt_mem_rsv_w_(void *fdt, int n)
  54:./lib/fdt/libfdt_internal.h **** {
  55:./lib/fdt/libfdt_internal.h **** 	return (void *)(uintptr_t)fdt_mem_rsv_(fdt, n);
  56:./lib/fdt/libfdt_internal.h **** }
  57:./lib/fdt/libfdt_internal.h **** 
  58:./lib/fdt/libfdt_internal.h **** /*
  59:./lib/fdt/libfdt_internal.h ****  * Internal helpers to access structural elements of the device tree
  60:./lib/fdt/libfdt_internal.h ****  * blob (rather than for example reading integers from within property
  61:./lib/fdt/libfdt_internal.h ****  * values).  We assume that we are either given a naturally aligned
  62:./lib/fdt/libfdt_internal.h ****  * address for the platform or if we are not, we are on a platform
  63:./lib/fdt/libfdt_internal.h ****  * where unaligned memory reads will be handled in a graceful manner.
  64:./lib/fdt/libfdt_internal.h ****  * If not the external helpers fdtXX_ld() from libfdt.h can be used
  65:./lib/fdt/libfdt_internal.h ****  * instead.
  66:./lib/fdt/libfdt_internal.h ****  */
  67:./lib/fdt/libfdt_internal.h **** static inline uint32_t fdt32_ld_(const fdt32_t *p)
 514              		.loc 4 67 24 view .LVU134
 515              	.LBB71:
ARM GAS  /tmp/ccCHVNBc.s 			page 33


  68:./lib/fdt/libfdt_internal.h **** {
  69:./lib/fdt/libfdt_internal.h **** 	return fdt32_to_cpu(*p);
 516              		.loc 4 69 2 view .LVU135
 517              		.loc 4 69 9 is_stmt 0 view .LVU136
 518 0022 55F82420 		ldr	r2, [r5, r4, lsl #2]
 519              	.LVL55:
 520              	.LBB72:
 521              	.LBI72:
  53:./include/linux/libfdt_env.h **** {
 522              		.loc 2 53 24 is_stmt 1 view .LVU137
 523              	.LBB73:
 524              		.loc 2 55 2 view .LVU138
 525              		.loc 2 55 29 is_stmt 0 view .LVU139
 526 0026 C2F30723 		ubfx	r3, r2, #8, #8
 527 002a 1B04     		lsls	r3, r3, #16
 528 002c 43EA0263 		orr	r3, r3, r2, lsl #24
 529 0030 C2F30740 		ubfx	r0, r2, #16, #8
 530 0034 43EA0023 		orr	r3, r3, r0, lsl #8
 531              		.loc 2 55 9 view .LVU140
 532 0038 43EA1263 		orr	r3, r3, r2, lsr #24
 533              	.LVL56:
 534              		.loc 2 55 9 view .LVU141
 535              	.LBE73:
 536              	.LBE72:
 537              	.LBE71:
 538              	.LBE70:
 239:./lib/fdt/fdt_overlay.c **** 
 539              		.loc 1 239 9 discriminator 1 view .LVU142
 540 003c CA18     		adds	r2, r1, r3
 541              	.LVL57:
 245:./lib/fdt/fdt_overlay.c **** 		}
 542              		.loc 1 245 4 is_stmt 1 view .LVU143
 543              	.LBB74:
 544              	.LBI74:
 145:./include/linux/libfdt.h **** {
 545              		.loc 3 145 24 view .LVU144
 546              	.LBB75:
 147:./include/linux/libfdt.h **** 
 547              		.loc 3 147 2 view .LVU145
 149:./include/linux/libfdt.h **** 		| ((uint32_t)bp[1] << 16)
 548              		.loc 3 149 2 view .LVU146
 149:./include/linux/libfdt.h **** 		| ((uint32_t)bp[1] << 16)
 549              		.loc 3 149 22 is_stmt 0 view .LVU147
 550 003e C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 551              		.loc 3 150 18 view .LVU148
 552 0040 92F801C0 		ldrb	ip, [r2, #1]	@ zero_extendqisi2
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 553              		.loc 3 150 22 view .LVU149
 554 0044 4FEA0C4C 		lsl	ip, ip, #16
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 555              		.loc 3 150 3 view .LVU150
 556 0048 4CEA006C 		orr	ip, ip, r0, lsl #24
 151:./include/linux/libfdt.h **** 		| bp[3];
 557              		.loc 3 151 18 view .LVU151
 558 004c 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 151:./include/linux/libfdt.h **** 		| bp[3];
ARM GAS  /tmp/ccCHVNBc.s 			page 34


 559              		.loc 3 151 3 view .LVU152
 560 004e 4CEA002C 		orr	ip, ip, r0, lsl #8
 152:./include/linux/libfdt.h **** }
 561              		.loc 3 152 7 view .LVU153
 562 0052 D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 152:./include/linux/libfdt.h **** }
 563              		.loc 3 152 3 view .LVU154
 564 0054 4CEA000C 		orr	ip, ip, r0
 565              	.LVL58:
 152:./include/linux/libfdt.h **** }
 566              		.loc 3 152 3 view .LVU155
 567              	.LBE75:
 568              	.LBE74:
 245:./lib/fdt/fdt_overlay.c **** 		}
 569              		.loc 1 245 4 discriminator 1 view .LVU156
 570 0058 B444     		add	ip, ip, r6
 571              	.LVL59:
 572              	.LBB76:
 573              	.LBI76:
 155:./include/linux/libfdt.h **** {
 574              		.loc 3 155 20 is_stmt 1 view .LVU157
 575              	.LBB77:
 157:./include/linux/libfdt.h **** 
 576              		.loc 3 157 2 view .LVU158
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 577              		.loc 3 159 2 view .LVU159
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 578              		.loc 3 159 16 is_stmt 0 view .LVU160
 579 005a 4FEA1C60 		lsr	r0, ip, #24
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 580              		.loc 3 159 8 view .LVU161
 581 005e C854     		strb	r0, [r1, r3]
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 582              		.loc 3 160 2 is_stmt 1 view .LVU162
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 583              		.loc 3 160 17 is_stmt 0 view .LVU163
 584 0060 4FEA1C43 		lsr	r3, ip, #16
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 585              		.loc 3 160 8 view .LVU164
 586 0064 5370     		strb	r3, [r2, #1]
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 587              		.loc 3 161 2 is_stmt 1 view .LVU165
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 588              		.loc 3 161 17 is_stmt 0 view .LVU166
 589 0066 4FEA1C23 		lsr	r3, ip, #8
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 590              		.loc 3 161 8 view .LVU167
 591 006a 9370     		strb	r3, [r2, #2]
 162:./include/linux/libfdt.h **** }
 592              		.loc 3 162 2 is_stmt 1 view .LVU168
 162:./include/linux/libfdt.h **** }
 593              		.loc 3 162 8 is_stmt 0 view .LVU169
 594 006c 82F803C0 		strb	ip, [r2, #3]
 595              	.LVL60:
 162:./include/linux/libfdt.h **** }
 596              		.loc 3 162 8 view .LVU170
 597              	.LBE77:
ARM GAS  /tmp/ccCHVNBc.s 			page 35


 598              	.LBE76:
 599              	.LBE69:
 236:./lib/fdt/fdt_overlay.c **** 			fdt32_t *refp;
 600              		.loc 1 236 31 is_stmt 1 discriminator 3 view .LVU171
 601 0070 0134     		adds	r4, r4, #1
 602              	.LVL61:
 603              	.L33:
 236:./lib/fdt/fdt_overlay.c **** 			fdt32_t *refp;
 604              		.loc 1 236 17 discriminator 1 view .LVU172
 605 0072 029B     		ldr	r3, [sp, #8]
 606 0074 A342     		cmp	r3, r4
 607 0076 D4DC     		bgt	.L34
 608              	.LBE80:
 211:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 609              		.loc 1 211 2 discriminator 2 view .LVU173
 610 0078 3946     		mov	r1, r7
 611              	.LVL62:
 211:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 612              		.loc 1 211 2 is_stmt 0 discriminator 2 view .LVU174
 613 007a 4046     		mov	r0, r8
 614 007c FFF7FEFF 		bl	fdt_next_property_offset
 615              	.LVL63:
 616 0080 0746     		mov	r7, r0
 617              	.LVL64:
 618              	.L30:
 211:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 619              		.loc 1 211 2 is_stmt 1 discriminator 1 view .LVU175
 620 0082 002F     		cmp	r7, #0
 621 0084 21DB     		blt	.L42
 622              	.LBB81:
 212:./lib/fdt/fdt_overlay.c **** 		const char *name;
 623              		.loc 1 212 3 view .LVU176
 213:./lib/fdt/fdt_overlay.c **** 		char *tree_val;
 624              		.loc 1 213 3 view .LVU177
 214:./lib/fdt/fdt_overlay.c **** 		int fixup_len;
 625              		.loc 1 214 3 view .LVU178
 215:./lib/fdt/fdt_overlay.c **** 		int tree_len;
 626              		.loc 1 215 3 view .LVU179
 216:./lib/fdt/fdt_overlay.c **** 		int i;
 627              		.loc 1 216 3 view .LVU180
 217:./lib/fdt/fdt_overlay.c **** 
 628              		.loc 1 217 3 view .LVU181
 219:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 629              		.loc 1 219 3 view .LVU182
 219:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 630              		.loc 1 219 15 is_stmt 0 view .LVU183
 631 0086 02AB     		add	r3, sp, #8
 632 0088 01AA     		add	r2, sp, #4
 633 008a 3946     		mov	r1, r7
 634 008c 4046     		mov	r0, r8
 635              	.LVL65:
 219:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 636              		.loc 1 219 15 view .LVU184
 637 008e FFF7FEFF 		bl	fdt_getprop_by_offset
 638              	.LVL66:
 221:./lib/fdt/fdt_overlay.c **** 			return fixup_len;
 639              		.loc 1 221 3 is_stmt 1 view .LVU185
ARM GAS  /tmp/ccCHVNBc.s 			page 36


 221:./lib/fdt/fdt_overlay.c **** 			return fixup_len;
 640              		.loc 1 221 6 is_stmt 0 view .LVU186
 641 0092 0546     		mov	r5, r0
 642 0094 0028     		cmp	r0, #0
 643 0096 BFD0     		beq	.L43
 224:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 644              		.loc 1 224 3 is_stmt 1 view .LVU187
 224:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 645              		.loc 1 224 17 is_stmt 0 view .LVU188
 646 0098 029B     		ldr	r3, [sp, #8]
 224:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 647              		.loc 1 224 6 view .LVU189
 648 009a 13F00304 		ands	r4, r3, #3
 649 009e 11D1     		bne	.L39
 226:./lib/fdt/fdt_overlay.c **** 
 650              		.loc 1 226 3 is_stmt 1 view .LVU190
 226:./lib/fdt/fdt_overlay.c **** 
 651              		.loc 1 226 13 is_stmt 0 view .LVU191
 652 00a0 9B08     		lsrs	r3, r3, #2
 653 00a2 0293     		str	r3, [sp, #8]
 228:./lib/fdt/fdt_overlay.c **** 		if (!tree_val) {
 654              		.loc 1 228 3 is_stmt 1 view .LVU192
 655              	.LVL67:
 656              	.LBB78:
 657              	.LBI78:
 857:./include/linux/libfdt.h **** 				  const char *name, int *lenp)
 658              		.loc 3 857 21 view .LVU193
 659              	.LBB79:
 660              		.loc 3 860 2 view .LVU194
 661              		.loc 3 860 28 is_stmt 0 view .LVU195
 662 00a4 03AB     		add	r3, sp, #12
 663              	.LVL68:
 664              		.loc 3 860 28 view .LVU196
 665 00a6 019A     		ldr	r2, [sp, #4]
 666 00a8 4946     		mov	r1, r9
 667 00aa 4046     		mov	r0, r8
 668              	.LVL69:
 669              		.loc 3 860 28 view .LVU197
 670 00ac FFF7FEFF 		bl	fdt_getprop
 671              	.LVL70:
 672              		.loc 3 860 28 view .LVU198
 673              	.LBE79:
 674              	.LBE78:
 229:./lib/fdt/fdt_overlay.c **** 			if (tree_len == -FDT_ERR_NOTFOUND)
 675              		.loc 1 229 3 is_stmt 1 view .LVU199
 229:./lib/fdt/fdt_overlay.c **** 			if (tree_len == -FDT_ERR_NOTFOUND)
 676              		.loc 1 229 6 is_stmt 0 view .LVU200
 677 00b0 0146     		mov	r1, r0
 678 00b2 0028     		cmp	r0, #0
 679 00b4 DDD1     		bne	.L33
 230:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 680              		.loc 1 230 4 is_stmt 1 view .LVU201
 230:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 681              		.loc 1 230 17 is_stmt 0 view .LVU202
 682 00b6 0399     		ldr	r1, [sp, #12]
 230:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 683              		.loc 1 230 7 view .LVU203
ARM GAS  /tmp/ccCHVNBc.s 			page 37


 684 00b8 B1F1FF3F 		cmp	r1, #-1
 685 00bc ADD1     		bne	.L29
 231:./lib/fdt/fdt_overlay.c **** 
 686              		.loc 1 231 12 view .LVU204
 687 00be 6FF00F01 		mvn	r1, #15
 688 00c2 AAE7     		b	.L29
 689              	.LVL71:
 690              	.L39:
 225:./lib/fdt/fdt_overlay.c **** 		fixup_len /= sizeof(uint32_t);
 691              		.loc 1 225 11 view .LVU205
 692 00c4 6FF00F01 		mvn	r1, #15
 693 00c8 A7E7     		b	.L29
 694              	.LVL72:
 695              	.L42:
 225:./lib/fdt/fdt_overlay.c **** 		fixup_len /= sizeof(uint32_t);
 696              		.loc 1 225 11 view .LVU206
 697              	.LBE81:
 249:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child,
 698              		.loc 1 249 2 is_stmt 1 view .LVU207
 699 00ca 5146     		mov	r1, r10
 700 00cc 4046     		mov	r0, r8
 701              	.LVL73:
 249:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child,
 702              		.loc 1 249 2 is_stmt 0 view .LVU208
 703 00ce FFF7FEFF 		bl	fdt_first_subnode
 704              	.LVL74:
 705 00d2 0446     		mov	r4, r0
 706              	.LVL75:
 249:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child,
 707              		.loc 1 249 2 view .LVU209
 708 00d4 04E0     		b	.L37
 709              	.LVL76:
 710              	.L45:
 249:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child,
 711              		.loc 1 249 2 is_stmt 1 discriminator 2 view .LVU210
 712 00d6 2146     		mov	r1, r4
 713 00d8 4046     		mov	r0, r8
 714              	.LVL77:
 249:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child,
 715              		.loc 1 249 2 is_stmt 0 discriminator 2 view .LVU211
 716 00da FFF7FEFF 		bl	fdt_next_subnode
 717              	.LVL78:
 718 00de 0446     		mov	r4, r0
 719              	.LVL79:
 720              	.L37:
 249:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child,
 721              		.loc 1 249 2 is_stmt 1 discriminator 1 view .LVU212
 722 00e0 002C     		cmp	r4, #0
 723 00e2 18DB     		blt	.L44
 724              	.LBB82:
 250:./lib/fdt/fdt_overlay.c **** 							    NULL);
 725              		.loc 1 250 3 view .LVU213
 250:./lib/fdt/fdt_overlay.c **** 							    NULL);
 726              		.loc 1 250 34 is_stmt 0 view .LVU214
 727 00e4 0022     		movs	r2, #0
 728 00e6 2146     		mov	r1, r4
 729 00e8 4046     		mov	r0, r8
ARM GAS  /tmp/ccCHVNBc.s 			page 38


 730              	.LVL80:
 250:./lib/fdt/fdt_overlay.c **** 							    NULL);
 731              		.loc 1 250 34 view .LVU215
 732 00ea FFF7FEFF 		bl	fdt_get_name
 733              	.LVL81:
 250:./lib/fdt/fdt_overlay.c **** 							    NULL);
 734              		.loc 1 250 34 view .LVU216
 735 00ee 0246     		mov	r2, r0
 736              	.LVL82:
 252:./lib/fdt/fdt_overlay.c **** 
 737              		.loc 1 252 3 is_stmt 1 view .LVU217
 254:./lib/fdt/fdt_overlay.c **** 						fixup_child_name);
 738              		.loc 1 254 3 view .LVU218
 254:./lib/fdt/fdt_overlay.c **** 						fixup_child_name);
 739              		.loc 1 254 16 is_stmt 0 view .LVU219
 740 00f0 4946     		mov	r1, r9
 741 00f2 4046     		mov	r0, r8
 742              	.LVL83:
 254:./lib/fdt/fdt_overlay.c **** 						fixup_child_name);
 743              		.loc 1 254 16 view .LVU220
 744 00f4 FFF7FEFF 		bl	fdt_subnode_offset
 745              	.LVL84:
 254:./lib/fdt/fdt_overlay.c **** 						fixup_child_name);
 746              		.loc 1 254 16 view .LVU221
 747 00f8 0146     		mov	r1, r0
 748              	.LVL85:
 256:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 749              		.loc 1 256 3 is_stmt 1 view .LVU222
 256:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 750              		.loc 1 256 6 is_stmt 0 view .LVU223
 751 00fa B0F1FF3F 		cmp	r0, #-1
 752 00fe 0CD0     		beq	.L40
 258:./lib/fdt/fdt_overlay.c **** 			return tree_child;
 753              		.loc 1 258 3 is_stmt 1 view .LVU224
 258:./lib/fdt/fdt_overlay.c **** 			return tree_child;
 754              		.loc 1 258 6 is_stmt 0 view .LVU225
 755 0100 0028     		cmp	r0, #0
 756 0102 8ADB     		blt	.L29
 261:./lib/fdt/fdt_overlay.c **** 							   tree_child,
 757              		.loc 1 261 3 is_stmt 1 view .LVU226
 261:./lib/fdt/fdt_overlay.c **** 							   tree_child,
 758              		.loc 1 261 9 is_stmt 0 view .LVU227
 759 0104 3346     		mov	r3, r6
 760 0106 2246     		mov	r2, r4
 761 0108 4046     		mov	r0, r8
 762              	.LVL86:
 261:./lib/fdt/fdt_overlay.c **** 							   tree_child,
 763              		.loc 1 261 9 view .LVU228
 764 010a FFF779FF 		bl	overlay_update_local_node_references
 765              	.LVL87:
 265:./lib/fdt/fdt_overlay.c **** 			return ret;
 766              		.loc 1 265 3 is_stmt 1 view .LVU229
 265:./lib/fdt/fdt_overlay.c **** 			return ret;
 767              		.loc 1 265 6 is_stmt 0 view .LVU230
 768 010e 0146     		mov	r1, r0
 769 0110 0028     		cmp	r0, #0
 770 0112 E0D0     		beq	.L45
ARM GAS  /tmp/ccCHVNBc.s 			page 39


 771 0114 81E7     		b	.L29
 772              	.LVL88:
 773              	.L44:
 265:./lib/fdt/fdt_overlay.c **** 			return ret;
 774              		.loc 1 265 6 view .LVU231
 775              	.LBE82:
 269:./lib/fdt/fdt_overlay.c **** }
 776              		.loc 1 269 9 view .LVU232
 777 0116 0021     		movs	r1, #0
 778 0118 7FE7     		b	.L29
 779              	.LVL89:
 780              	.L40:
 781              	.LBB83:
 257:./lib/fdt/fdt_overlay.c **** 		if (tree_child < 0)
 782              		.loc 1 257 11 view .LVU233
 783 011a 6FF00F01 		mvn	r1, #15
 784 011e 7CE7     		b	.L29
 785              	.LBE83:
 786              		.cfi_endproc
 787              	.LFE80:
 789              		.section	.rodata.overlay_update_local_references.str1.4,"aMS",%progbits,1
 790              		.align	2
 791              	.LC3:
 792 0000 2F5F5F6C 		.ascii	"/__local_fixups__\000"
 792      6F63616C 
 792      5F666978 
 792      7570735F 
 792      5F00
 793              		.section	.text.overlay_update_local_references,"ax",%progbits
 794              		.align	1
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 799              	overlay_update_local_references:
 800              	.LVL90:
 801              	.LFB81:
 271:./lib/fdt/fdt_overlay.c **** 
 272:./lib/fdt/fdt_overlay.c **** /**
 273:./lib/fdt/fdt_overlay.c ****  * overlay_update_local_references - Adjust the overlay references
 274:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 275:./lib/fdt/fdt_overlay.c ****  * @delta: Offset to shift the phandles of
 276:./lib/fdt/fdt_overlay.c ****  *
 277:./lib/fdt/fdt_overlay.c ****  * overlay_update_local_references() update all the phandles pointing
 278:./lib/fdt/fdt_overlay.c ****  * to a node within the device tree overlay by adding a constant
 279:./lib/fdt/fdt_overlay.c ****  * delta to not conflict with the base overlay.
 280:./lib/fdt/fdt_overlay.c ****  *
 281:./lib/fdt/fdt_overlay.c ****  * This is mainly used as part of a device tree application process,
 282:./lib/fdt/fdt_overlay.c ****  * where you want the device tree overlays phandles to not conflict
 283:./lib/fdt/fdt_overlay.c ****  * with the ones from the base device tree before merging them.
 284:./lib/fdt/fdt_overlay.c ****  *
 285:./lib/fdt/fdt_overlay.c ****  * returns:
 286:./lib/fdt/fdt_overlay.c ****  *      0 on success
 287:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 288:./lib/fdt/fdt_overlay.c ****  */
 289:./lib/fdt/fdt_overlay.c **** static int overlay_update_local_references(void *fdto, uint32_t delta)
 290:./lib/fdt/fdt_overlay.c **** {
 802              		.loc 1 290 1 is_stmt 1 view -0
ARM GAS  /tmp/ccCHVNBc.s 			page 40


 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              		.loc 1 290 1 is_stmt 0 view .LVU235
 807 0000 38B5     		push	{r3, r4, r5, lr}
 808              	.LCFI14:
 809              		.cfi_def_cfa_offset 16
 810              		.cfi_offset 3, -16
 811              		.cfi_offset 4, -12
 812              		.cfi_offset 5, -8
 813              		.cfi_offset 14, -4
 814 0002 0446     		mov	r4, r0
 815 0004 0D46     		mov	r5, r1
 291:./lib/fdt/fdt_overlay.c **** 	int fixups;
 816              		.loc 1 291 2 is_stmt 1 view .LVU236
 292:./lib/fdt/fdt_overlay.c **** 
 293:./lib/fdt/fdt_overlay.c **** 	fixups = fdt_path_offset(fdto, "/__local_fixups__");
 817              		.loc 1 293 2 view .LVU237
 818              		.loc 1 293 11 is_stmt 0 view .LVU238
 819 0006 0849     		ldr	r1, .L50
 820              	.LVL91:
 821              		.loc 1 293 11 view .LVU239
 822 0008 FFF7FEFF 		bl	fdt_path_offset
 823              	.LVL92:
 294:./lib/fdt/fdt_overlay.c **** 	if (fixups < 0) {
 824              		.loc 1 294 2 is_stmt 1 view .LVU240
 825              		.loc 1 294 5 is_stmt 0 view .LVU241
 826 000c 0028     		cmp	r0, #0
 827              		.loc 1 294 5 view .LVU242
 828 000e 04DA     		bge	.L47
 295:./lib/fdt/fdt_overlay.c **** 		/* There's no local phandles to adjust, bail out */
 296:./lib/fdt/fdt_overlay.c **** 		if (fixups == -FDT_ERR_NOTFOUND)
 829              		.loc 1 296 3 is_stmt 1 view .LVU243
 830              		.loc 1 296 6 is_stmt 0 view .LVU244
 831 0010 B0F1FF3F 		cmp	r0, #-1
 832 0014 07D1     		bne	.L46
 297:./lib/fdt/fdt_overlay.c **** 			return 0;
 833              		.loc 1 297 11 view .LVU245
 834 0016 0020     		movs	r0, #0
 835              	.LVL93:
 836              		.loc 1 297 11 view .LVU246
 837 0018 05E0     		b	.L46
 838              	.LVL94:
 839              	.L47:
 298:./lib/fdt/fdt_overlay.c **** 
 299:./lib/fdt/fdt_overlay.c **** 		return fixups;
 300:./lib/fdt/fdt_overlay.c **** 	}
 301:./lib/fdt/fdt_overlay.c **** 
 302:./lib/fdt/fdt_overlay.c **** 	/*
 303:./lib/fdt/fdt_overlay.c **** 	 * Update our local references from the root of the tree
 304:./lib/fdt/fdt_overlay.c **** 	 */
 305:./lib/fdt/fdt_overlay.c **** 	return overlay_update_local_node_references(fdto, 0, fixups,
 840              		.loc 1 305 2 is_stmt 1 view .LVU247
 841              		.loc 1 305 9 is_stmt 0 view .LVU248
 842 001a 2B46     		mov	r3, r5
 843 001c 0246     		mov	r2, r0
 844 001e 0021     		movs	r1, #0
ARM GAS  /tmp/ccCHVNBc.s 			page 41


 845 0020 2046     		mov	r0, r4
 846              	.LVL95:
 847              		.loc 1 305 9 view .LVU249
 848 0022 FFF7FEFF 		bl	overlay_update_local_node_references
 849              	.LVL96:
 850              	.L46:
 306:./lib/fdt/fdt_overlay.c **** 						    delta);
 307:./lib/fdt/fdt_overlay.c **** }
 851              		.loc 1 307 1 view .LVU250
 852 0026 38BD     		pop	{r3, r4, r5, pc}
 853              	.LVL97:
 854              	.L51:
 855              		.loc 1 307 1 view .LVU251
 856              		.align	2
 857              	.L50:
 858 0028 00000000 		.word	.LC3
 859              		.cfi_endproc
 860              	.LFE81:
 862              		.section	.text.overlay_update_node_conflicting_references,"ax",%progbits
 863              		.align	1
 864              		.syntax unified
 865              		.thumb
 866              		.thumb_func
 868              	overlay_update_node_conflicting_references:
 869              	.LVL98:
 870              	.LFB86:
 308:./lib/fdt/fdt_overlay.c **** 
 309:./lib/fdt/fdt_overlay.c **** /**
 310:./lib/fdt/fdt_overlay.c ****  * overlay_fixup_one_phandle - Set an overlay phandle to the base one
 311:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 312:./lib/fdt/fdt_overlay.c ****  * @symbols_off: Node offset of the symbols node in the base device tree
 313:./lib/fdt/fdt_overlay.c ****  * @path: Path to a node holding a phandle in the overlay
 314:./lib/fdt/fdt_overlay.c ****  * @path_len: number of path characters to consider
 315:./lib/fdt/fdt_overlay.c ****  * @name: Name of the property holding the phandle reference in the overlay
 316:./lib/fdt/fdt_overlay.c ****  * @name_len: number of name characters to consider
 317:./lib/fdt/fdt_overlay.c ****  * @poffset: Offset within the overlay property where the phandle is stored
 318:./lib/fdt/fdt_overlay.c ****  * @phandle: Phandle referencing the node
 319:./lib/fdt/fdt_overlay.c ****  *
 320:./lib/fdt/fdt_overlay.c ****  * overlay_fixup_one_phandle() resolves an overlay phandle pointing to
 321:./lib/fdt/fdt_overlay.c ****  * a node in the base device tree.
 322:./lib/fdt/fdt_overlay.c ****  *
 323:./lib/fdt/fdt_overlay.c ****  * This is part of the device tree overlay application process, when
 324:./lib/fdt/fdt_overlay.c ****  * you want all the phandles in the overlay to point to the actual
 325:./lib/fdt/fdt_overlay.c ****  * base dt nodes.
 326:./lib/fdt/fdt_overlay.c ****  *
 327:./lib/fdt/fdt_overlay.c ****  * returns:
 328:./lib/fdt/fdt_overlay.c ****  *      0 on success
 329:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 330:./lib/fdt/fdt_overlay.c ****  */
 331:./lib/fdt/fdt_overlay.c **** static int overlay_fixup_one_phandle(void *fdto, int symbols_off,
 332:./lib/fdt/fdt_overlay.c **** 				     const char *path, uint32_t path_len,
 333:./lib/fdt/fdt_overlay.c **** 				     const char *name, uint32_t name_len,
 334:./lib/fdt/fdt_overlay.c **** 				     int poffset, uint32_t phandle)
 335:./lib/fdt/fdt_overlay.c **** {
 336:./lib/fdt/fdt_overlay.c **** 	fdt32_t phandle_prop;
 337:./lib/fdt/fdt_overlay.c **** 	int fixup_off;
 338:./lib/fdt/fdt_overlay.c **** 
ARM GAS  /tmp/ccCHVNBc.s 			page 42


 339:./lib/fdt/fdt_overlay.c **** 	if (symbols_off < 0)
 340:./lib/fdt/fdt_overlay.c **** 		return symbols_off;
 341:./lib/fdt/fdt_overlay.c **** 
 342:./lib/fdt/fdt_overlay.c **** 	fixup_off = fdt_path_offset_namelen(fdto, path, path_len);
 343:./lib/fdt/fdt_overlay.c **** 	if (fixup_off == -FDT_ERR_NOTFOUND)
 344:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_BADOVERLAY;
 345:./lib/fdt/fdt_overlay.c **** 	if (fixup_off < 0)
 346:./lib/fdt/fdt_overlay.c **** 		return fixup_off;
 347:./lib/fdt/fdt_overlay.c **** 
 348:./lib/fdt/fdt_overlay.c **** 	phandle_prop = cpu_to_fdt32(phandle);
 349:./lib/fdt/fdt_overlay.c **** 	return fdt_setprop_inplace_namelen_partial(fdto, fixup_off,
 350:./lib/fdt/fdt_overlay.c **** 						   name, name_len, poffset,
 351:./lib/fdt/fdt_overlay.c **** 						   &phandle_prop,
 352:./lib/fdt/fdt_overlay.c **** 						   sizeof(phandle_prop));
 353:./lib/fdt/fdt_overlay.c **** }
 354:./lib/fdt/fdt_overlay.c **** 
 355:./lib/fdt/fdt_overlay.c **** /**
 356:./lib/fdt/fdt_overlay.c ****  * overlay_fixup_phandle - Set an overlay phandle to the base one
 357:./lib/fdt/fdt_overlay.c ****  * @fdt: Base Device Tree blob
 358:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 359:./lib/fdt/fdt_overlay.c ****  * @symbols_off: Node offset of the symbols node in the base device tree
 360:./lib/fdt/fdt_overlay.c ****  * @property: Property offset in the overlay holding the list of fixups
 361:./lib/fdt/fdt_overlay.c ****  *
 362:./lib/fdt/fdt_overlay.c ****  * overlay_fixup_phandle() resolves all the overlay phandles pointed
 363:./lib/fdt/fdt_overlay.c ****  * to in a __fixups__ property, and updates them to match the phandles
 364:./lib/fdt/fdt_overlay.c ****  * in use in the base device tree.
 365:./lib/fdt/fdt_overlay.c ****  *
 366:./lib/fdt/fdt_overlay.c ****  * This is part of the device tree overlay application process, when
 367:./lib/fdt/fdt_overlay.c ****  * you want all the phandles in the overlay to point to the actual
 368:./lib/fdt/fdt_overlay.c ****  * base dt nodes.
 369:./lib/fdt/fdt_overlay.c ****  *
 370:./lib/fdt/fdt_overlay.c ****  * returns:
 371:./lib/fdt/fdt_overlay.c ****  *      0 on success
 372:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 373:./lib/fdt/fdt_overlay.c ****  */
 374:./lib/fdt/fdt_overlay.c **** static int overlay_fixup_phandle(void *fdt, void *fdto, int symbols_off,
 375:./lib/fdt/fdt_overlay.c **** 				 int property)
 376:./lib/fdt/fdt_overlay.c **** {
 377:./lib/fdt/fdt_overlay.c **** 	const char *value;
 378:./lib/fdt/fdt_overlay.c **** 	const char *label;
 379:./lib/fdt/fdt_overlay.c **** 	int len;
 380:./lib/fdt/fdt_overlay.c **** 	const char *symbol_path;
 381:./lib/fdt/fdt_overlay.c **** 	int prop_len;
 382:./lib/fdt/fdt_overlay.c **** 	int symbol_off;
 383:./lib/fdt/fdt_overlay.c **** 	uint32_t phandle;
 384:./lib/fdt/fdt_overlay.c **** 
 385:./lib/fdt/fdt_overlay.c **** 	value = fdt_getprop_by_offset(fdto, property,
 386:./lib/fdt/fdt_overlay.c **** 				      &label, &len);
 387:./lib/fdt/fdt_overlay.c **** 	if (!value) {
 388:./lib/fdt/fdt_overlay.c **** 		if (len == -FDT_ERR_NOTFOUND)
 389:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_INTERNAL;
 390:./lib/fdt/fdt_overlay.c **** 
 391:./lib/fdt/fdt_overlay.c **** 		return len;
 392:./lib/fdt/fdt_overlay.c **** 	}
 393:./lib/fdt/fdt_overlay.c **** 
 394:./lib/fdt/fdt_overlay.c **** 	symbol_path = fdt_getprop(fdt, symbols_off, label, &prop_len);
 395:./lib/fdt/fdt_overlay.c **** 	if (!symbol_path)
ARM GAS  /tmp/ccCHVNBc.s 			page 43


 396:./lib/fdt/fdt_overlay.c **** 		return prop_len;
 397:./lib/fdt/fdt_overlay.c **** 	
 398:./lib/fdt/fdt_overlay.c **** 	symbol_off = fdt_path_offset(fdt, symbol_path);
 399:./lib/fdt/fdt_overlay.c **** 	if (symbol_off < 0)
 400:./lib/fdt/fdt_overlay.c **** 		return symbol_off;
 401:./lib/fdt/fdt_overlay.c **** 	
 402:./lib/fdt/fdt_overlay.c **** 	phandle = fdt_get_phandle(fdt, symbol_off);
 403:./lib/fdt/fdt_overlay.c **** 	if (!phandle)
 404:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_NOTFOUND;
 405:./lib/fdt/fdt_overlay.c **** 
 406:./lib/fdt/fdt_overlay.c **** 	do {
 407:./lib/fdt/fdt_overlay.c **** 		const char *path, *name, *fixup_end;
 408:./lib/fdt/fdt_overlay.c **** 		const char *fixup_str = value;
 409:./lib/fdt/fdt_overlay.c **** 		uint32_t path_len, name_len;
 410:./lib/fdt/fdt_overlay.c **** 		uint32_t fixup_len;
 411:./lib/fdt/fdt_overlay.c **** 		char *sep, *endptr;
 412:./lib/fdt/fdt_overlay.c **** 		int poffset, ret;
 413:./lib/fdt/fdt_overlay.c **** 
 414:./lib/fdt/fdt_overlay.c **** 		fixup_end = memchr(value, '\0', len);
 415:./lib/fdt/fdt_overlay.c **** 		if (!fixup_end)
 416:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 417:./lib/fdt/fdt_overlay.c **** 		fixup_len = fixup_end - fixup_str;
 418:./lib/fdt/fdt_overlay.c **** 
 419:./lib/fdt/fdt_overlay.c **** 		len -= fixup_len + 1;
 420:./lib/fdt/fdt_overlay.c **** 		value += fixup_len + 1;
 421:./lib/fdt/fdt_overlay.c **** 
 422:./lib/fdt/fdt_overlay.c **** 		path = fixup_str;
 423:./lib/fdt/fdt_overlay.c **** 		sep = memchr(fixup_str, ':', fixup_len);
 424:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 425:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 426:./lib/fdt/fdt_overlay.c **** 
 427:./lib/fdt/fdt_overlay.c **** 		path_len = sep - path;
 428:./lib/fdt/fdt_overlay.c **** 		if (path_len == (fixup_len - 1))
 429:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 430:./lib/fdt/fdt_overlay.c **** 
 431:./lib/fdt/fdt_overlay.c **** 		fixup_len -= path_len + 1;
 432:./lib/fdt/fdt_overlay.c **** 		name = sep + 1;
 433:./lib/fdt/fdt_overlay.c **** 		sep = memchr(name, ':', fixup_len);
 434:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 435:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 436:./lib/fdt/fdt_overlay.c **** 
 437:./lib/fdt/fdt_overlay.c **** 		name_len = sep - name;
 438:./lib/fdt/fdt_overlay.c **** 		if (!name_len)
 439:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 440:./lib/fdt/fdt_overlay.c **** 
 441:./lib/fdt/fdt_overlay.c **** 		poffset = strtoul(sep + 1, &endptr, 10);
 442:./lib/fdt/fdt_overlay.c **** 		if ((*endptr != '\0') || (endptr <= (sep + 1)))
 443:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 444:./lib/fdt/fdt_overlay.c **** 
 445:./lib/fdt/fdt_overlay.c **** 		ret = overlay_fixup_one_phandle(fdto, symbols_off,
 446:./lib/fdt/fdt_overlay.c **** 						path, path_len, name, name_len,
 447:./lib/fdt/fdt_overlay.c **** 						poffset, phandle);
 448:./lib/fdt/fdt_overlay.c **** 		if (ret)
 449:./lib/fdt/fdt_overlay.c **** 			return ret;
 450:./lib/fdt/fdt_overlay.c **** 	} while (len > 0);
 451:./lib/fdt/fdt_overlay.c **** 
 452:./lib/fdt/fdt_overlay.c **** 	return 0;
ARM GAS  /tmp/ccCHVNBc.s 			page 44


 453:./lib/fdt/fdt_overlay.c **** }
 454:./lib/fdt/fdt_overlay.c **** 
 455:./lib/fdt/fdt_overlay.c **** /**
 456:./lib/fdt/fdt_overlay.c ****  * overlay_fixup_phandles - Resolve the overlay phandles to the base
 457:./lib/fdt/fdt_overlay.c ****  *                          device tree
 458:./lib/fdt/fdt_overlay.c ****  * @fdt: Base Device Tree blob
 459:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 460:./lib/fdt/fdt_overlay.c ****  *
 461:./lib/fdt/fdt_overlay.c ****  * overlay_fixup_phandles() resolves all the overlay phandles pointing
 462:./lib/fdt/fdt_overlay.c ****  * to nodes in the base device tree.
 463:./lib/fdt/fdt_overlay.c ****  *
 464:./lib/fdt/fdt_overlay.c ****  * This is one of the steps of the device tree overlay application
 465:./lib/fdt/fdt_overlay.c ****  * process, when you want all the phandles in the overlay to point to
 466:./lib/fdt/fdt_overlay.c ****  * the actual base dt nodes.
 467:./lib/fdt/fdt_overlay.c ****  *
 468:./lib/fdt/fdt_overlay.c ****  * returns:
 469:./lib/fdt/fdt_overlay.c ****  *      0 on success
 470:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 471:./lib/fdt/fdt_overlay.c ****  */
 472:./lib/fdt/fdt_overlay.c **** static int overlay_fixup_phandles(void *fdt, void *fdto)
 473:./lib/fdt/fdt_overlay.c **** {
 474:./lib/fdt/fdt_overlay.c **** 	int fixups_off, symbols_off;
 475:./lib/fdt/fdt_overlay.c **** 	int property;
 476:./lib/fdt/fdt_overlay.c **** 
 477:./lib/fdt/fdt_overlay.c **** 	/* We can have overlays without any fixups */
 478:./lib/fdt/fdt_overlay.c **** 	fixups_off = fdt_path_offset(fdto, "/__fixups__");
 479:./lib/fdt/fdt_overlay.c **** 	if (fixups_off == -FDT_ERR_NOTFOUND)
 480:./lib/fdt/fdt_overlay.c **** 		return 0; /* nothing to do */
 481:./lib/fdt/fdt_overlay.c **** 	if (fixups_off < 0)
 482:./lib/fdt/fdt_overlay.c **** 		return fixups_off;
 483:./lib/fdt/fdt_overlay.c **** 
 484:./lib/fdt/fdt_overlay.c **** 	/* And base DTs without symbols */
 485:./lib/fdt/fdt_overlay.c **** 	symbols_off = fdt_path_offset(fdt, "/__symbols__");
 486:./lib/fdt/fdt_overlay.c **** 	if ((symbols_off < 0 && (symbols_off != -FDT_ERR_NOTFOUND)))
 487:./lib/fdt/fdt_overlay.c **** 		return symbols_off;
 488:./lib/fdt/fdt_overlay.c **** 
 489:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_property_offset(property, fdto, fixups_off) {
 490:./lib/fdt/fdt_overlay.c **** 		int ret;
 491:./lib/fdt/fdt_overlay.c **** 
 492:./lib/fdt/fdt_overlay.c **** 		ret = overlay_fixup_phandle(fdt, fdto, symbols_off, property);
 493:./lib/fdt/fdt_overlay.c **** 		if (ret)
 494:./lib/fdt/fdt_overlay.c **** 			return ret;
 495:./lib/fdt/fdt_overlay.c **** 	}
 496:./lib/fdt/fdt_overlay.c **** 
 497:./lib/fdt/fdt_overlay.c **** 	return 0;
 498:./lib/fdt/fdt_overlay.c **** }
 499:./lib/fdt/fdt_overlay.c **** 
 500:./lib/fdt/fdt_overlay.c **** /**
 501:./lib/fdt/fdt_overlay.c ****  * overlay_adjust_local_conflicting_phandle: Changes a phandle value
 502:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay
 503:./lib/fdt/fdt_overlay.c ****  * @node: The node the phandle is set for
 504:./lib/fdt/fdt_overlay.c ****  * @fdt_phandle: The new value for the phandle
 505:./lib/fdt/fdt_overlay.c ****  *
 506:./lib/fdt/fdt_overlay.c ****  * returns:
 507:./lib/fdt/fdt_overlay.c ****  *      0 on success
 508:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 509:./lib/fdt/fdt_overlay.c ****  */
ARM GAS  /tmp/ccCHVNBc.s 			page 45


 510:./lib/fdt/fdt_overlay.c **** static int overlay_adjust_local_conflicting_phandle(void *fdto, int node,
 511:./lib/fdt/fdt_overlay.c **** 						    uint32_t fdt_phandle)
 512:./lib/fdt/fdt_overlay.c **** {
 513:./lib/fdt/fdt_overlay.c **** 	const fdt32_t *php;
 514:./lib/fdt/fdt_overlay.c **** 	int len, ret;
 515:./lib/fdt/fdt_overlay.c **** 
 516:./lib/fdt/fdt_overlay.c **** 	php = fdt_getprop(fdto, node, "phandle", &len);
 517:./lib/fdt/fdt_overlay.c **** 	if (php && len == sizeof(*php)) {
 518:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "phandle", fdt_phandle);
 519:./lib/fdt/fdt_overlay.c **** 		if (ret)
 520:./lib/fdt/fdt_overlay.c **** 			return ret;
 521:./lib/fdt/fdt_overlay.c **** 	}
 522:./lib/fdt/fdt_overlay.c **** 
 523:./lib/fdt/fdt_overlay.c **** 	php = fdt_getprop(fdto, node, "linux,phandle", &len);
 524:./lib/fdt/fdt_overlay.c **** 	if (php && len == sizeof(*php)) {
 525:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "linux,phandle", fdt_phandle);
 526:./lib/fdt/fdt_overlay.c **** 		if (ret)
 527:./lib/fdt/fdt_overlay.c **** 			return ret;
 528:./lib/fdt/fdt_overlay.c **** 	}
 529:./lib/fdt/fdt_overlay.c **** 
 530:./lib/fdt/fdt_overlay.c **** 	return 0;
 531:./lib/fdt/fdt_overlay.c **** }
 532:./lib/fdt/fdt_overlay.c **** 
 533:./lib/fdt/fdt_overlay.c **** /**
 534:./lib/fdt/fdt_overlay.c ****  * overlay_update_node_conflicting_references - Recursively replace phandle values
 535:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 536:./lib/fdt/fdt_overlay.c ****  * @tree_node: Node to recurse into
 537:./lib/fdt/fdt_overlay.c ****  * @fixup_node: Node offset of the matching local fixups node
 538:./lib/fdt/fdt_overlay.c ****  * @fdt_phandle: Value to replace phandles with
 539:./lib/fdt/fdt_overlay.c ****  * @fdto_phandle: Value to be replaced
 540:./lib/fdt/fdt_overlay.c ****  *
 541:./lib/fdt/fdt_overlay.c ****  * Replaces all phandles with value @fdto_phandle by @fdt_phandle.
 542:./lib/fdt/fdt_overlay.c ****  *
 543:./lib/fdt/fdt_overlay.c ****  * returns:
 544:./lib/fdt/fdt_overlay.c ****  *      0 on success
 545:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 546:./lib/fdt/fdt_overlay.c ****  */
 547:./lib/fdt/fdt_overlay.c **** static int overlay_update_node_conflicting_references(void *fdto, int tree_node,
 548:./lib/fdt/fdt_overlay.c **** 						      int fixup_node,
 549:./lib/fdt/fdt_overlay.c **** 						      uint32_t fdt_phandle,
 550:./lib/fdt/fdt_overlay.c **** 						      uint32_t fdto_phandle)
 551:./lib/fdt/fdt_overlay.c **** {
 871              		.loc 1 551 1 is_stmt 1 view -0
 872              		.cfi_startproc
 873              		@ args = 4, pretend = 0, frame = 16
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              		.loc 1 551 1 is_stmt 0 view .LVU253
 876 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 877              	.LCFI15:
 878              		.cfi_def_cfa_offset 36
 879              		.cfi_offset 4, -36
 880              		.cfi_offset 5, -32
 881              		.cfi_offset 6, -28
 882              		.cfi_offset 7, -24
 883              		.cfi_offset 8, -20
 884              		.cfi_offset 9, -16
 885              		.cfi_offset 10, -12
ARM GAS  /tmp/ccCHVNBc.s 			page 46


 886              		.cfi_offset 11, -8
 887              		.cfi_offset 14, -4
 888 0004 87B0     		sub	sp, sp, #28
 889              	.LCFI16:
 890              		.cfi_def_cfa_offset 64
 891 0006 8146     		mov	r9, r0
 892 0008 8A46     		mov	r10, r1
 893 000a 9346     		mov	fp, r2
 894 000c 1D46     		mov	r5, r3
 895 000e 109F     		ldr	r7, [sp, #64]
 552:./lib/fdt/fdt_overlay.c **** 	int fixup_prop;
 896              		.loc 1 552 2 is_stmt 1 view .LVU254
 553:./lib/fdt/fdt_overlay.c **** 	int fixup_child;
 897              		.loc 1 553 2 view .LVU255
 554:./lib/fdt/fdt_overlay.c **** 	int ret;
 898              		.loc 1 554 2 view .LVU256
 555:./lib/fdt/fdt_overlay.c **** 
 556:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_property_offset(fixup_prop, fdto, fixup_node) {
 899              		.loc 1 556 2 view .LVU257
 900 0010 1146     		mov	r1, r2
 901              	.LVL99:
 902              		.loc 1 556 2 is_stmt 0 view .LVU258
 903 0012 FFF7FEFF 		bl	fdt_first_property_offset
 904              	.LVL100:
 905              		.loc 1 556 2 view .LVU259
 906 0016 8046     		mov	r8, r0
 907              	.LVL101:
 908              		.loc 1 556 2 view .LVU260
 909 0018 32E0     		b	.L53
 910              	.LVL102:
 911              	.L68:
 912              	.LBB84:
 557:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 558:./lib/fdt/fdt_overlay.c **** 		const char *name;
 559:./lib/fdt/fdt_overlay.c **** 		char *tree_val;
 560:./lib/fdt/fdt_overlay.c **** 		int fixup_len;
 561:./lib/fdt/fdt_overlay.c **** 		int tree_len;
 562:./lib/fdt/fdt_overlay.c **** 		int i;
 563:./lib/fdt/fdt_overlay.c **** 
 564:./lib/fdt/fdt_overlay.c **** 		fixup_val = fdt_getprop_by_offset(fdto, fixup_prop,
 565:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 566:./lib/fdt/fdt_overlay.c **** 		if (!fixup_val)
 567:./lib/fdt/fdt_overlay.c **** 			return fixup_len;
 913              		.loc 1 567 4 is_stmt 1 view .LVU261
 914              		.loc 1 567 11 is_stmt 0 view .LVU262
 915 001a 0499     		ldr	r1, [sp, #16]
 916              	.LVL103:
 917              	.L52:
 918              		.loc 1 567 11 view .LVU263
 919              	.LBE84:
 568:./lib/fdt/fdt_overlay.c **** 
 569:./lib/fdt/fdt_overlay.c **** 		if (fixup_len % sizeof(uint32_t))
 570:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 571:./lib/fdt/fdt_overlay.c **** 		fixup_len /= sizeof(uint32_t);
 572:./lib/fdt/fdt_overlay.c **** 
 573:./lib/fdt/fdt_overlay.c **** 		tree_val = fdt_getprop_w(fdto, tree_node, name, &tree_len);
 574:./lib/fdt/fdt_overlay.c **** 		if (!tree_val) {
ARM GAS  /tmp/ccCHVNBc.s 			page 47


 575:./lib/fdt/fdt_overlay.c **** 			if (tree_len == -FDT_ERR_NOTFOUND)
 576:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 577:./lib/fdt/fdt_overlay.c **** 
 578:./lib/fdt/fdt_overlay.c **** 			return tree_len;
 579:./lib/fdt/fdt_overlay.c **** 		}
 580:./lib/fdt/fdt_overlay.c **** 
 581:./lib/fdt/fdt_overlay.c **** 		for (i = 0; i < fixup_len; i++) {
 582:./lib/fdt/fdt_overlay.c **** 			fdt32_t *refp;
 583:./lib/fdt/fdt_overlay.c **** 			uint32_t valp;
 584:./lib/fdt/fdt_overlay.c **** 
 585:./lib/fdt/fdt_overlay.c **** 			refp = (fdt32_t *)(tree_val + fdt32_ld_(fixup_val + i));
 586:./lib/fdt/fdt_overlay.c **** 			valp = fdt32_ld(refp);
 587:./lib/fdt/fdt_overlay.c **** 
 588:./lib/fdt/fdt_overlay.c **** 			if (valp == fdto_phandle)
 589:./lib/fdt/fdt_overlay.c **** 				fdt32_st(refp, fdt_phandle);
 590:./lib/fdt/fdt_overlay.c **** 		}
 591:./lib/fdt/fdt_overlay.c **** 	}
 592:./lib/fdt/fdt_overlay.c **** 
 593:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_subnode(fixup_child, fdto, fixup_node) {
 594:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child, NULL);
 595:./lib/fdt/fdt_overlay.c **** 		int tree_child;
 596:./lib/fdt/fdt_overlay.c **** 
 597:./lib/fdt/fdt_overlay.c **** 		tree_child = fdt_subnode_offset(fdto, tree_node, fixup_child_name);
 598:./lib/fdt/fdt_overlay.c **** 
 599:./lib/fdt/fdt_overlay.c **** 		if (tree_child == -FDT_ERR_NOTFOUND)
 600:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 601:./lib/fdt/fdt_overlay.c **** 		if (tree_child < 0)
 602:./lib/fdt/fdt_overlay.c **** 			return tree_child;
 603:./lib/fdt/fdt_overlay.c **** 
 604:./lib/fdt/fdt_overlay.c **** 		ret = overlay_update_node_conflicting_references(fdto, tree_child,
 605:./lib/fdt/fdt_overlay.c **** 								 fixup_child,
 606:./lib/fdt/fdt_overlay.c **** 								 fdt_phandle,
 607:./lib/fdt/fdt_overlay.c **** 								 fdto_phandle);
 608:./lib/fdt/fdt_overlay.c **** 		if (ret)
 609:./lib/fdt/fdt_overlay.c **** 			return ret;
 610:./lib/fdt/fdt_overlay.c **** 	}
 611:./lib/fdt/fdt_overlay.c **** 
 612:./lib/fdt/fdt_overlay.c **** 	return 0;
 613:./lib/fdt/fdt_overlay.c **** }
 920              		.loc 1 613 1 view .LVU264
 921 001c 0846     		mov	r0, r1
 922 001e 07B0     		add	sp, sp, #28
 923              	.LCFI17:
 924              		.cfi_remember_state
 925              		.cfi_def_cfa_offset 36
 926              		@ sp needed
 927 0020 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 928              	.LVL104:
 929              	.L57:
 930              	.LCFI18:
 931              		.cfi_restore_state
 932              	.LBB96:
 581:./lib/fdt/fdt_overlay.c **** 			fdt32_t *refp;
 933              		.loc 1 581 31 is_stmt 1 discriminator 2 view .LVU265
 934 0024 0134     		adds	r4, r4, #1
 935              	.LVL105:
 936              	.L56:
ARM GAS  /tmp/ccCHVNBc.s 			page 48


 581:./lib/fdt/fdt_overlay.c **** 			fdt32_t *refp;
 937              		.loc 1 581 17 discriminator 1 view .LVU266
 938 0026 049B     		ldr	r3, [sp, #16]
 939 0028 A342     		cmp	r3, r4
 940 002a 24DD     		ble	.L66
 941              	.LBB85:
 582:./lib/fdt/fdt_overlay.c **** 			uint32_t valp;
 942              		.loc 1 582 4 view .LVU267
 583:./lib/fdt/fdt_overlay.c **** 
 943              		.loc 1 583 4 view .LVU268
 585:./lib/fdt/fdt_overlay.c **** 			valp = fdt32_ld(refp);
 944              		.loc 1 585 4 view .LVU269
 945              	.LVL106:
 946              	.LBB86:
 947              	.LBI86:
  67:./lib/fdt/libfdt_internal.h **** {
 948              		.loc 4 67 24 view .LVU270
 949              	.LBB87:
 950              		.loc 4 69 2 view .LVU271
 951              		.loc 4 69 9 is_stmt 0 view .LVU272
 952 002c 56F82420 		ldr	r2, [r6, r4, lsl #2]
 953              	.LVL107:
 954              	.LBB88:
 955              	.LBI88:
  53:./include/linux/libfdt_env.h **** {
 956              		.loc 2 53 24 is_stmt 1 view .LVU273
 957              	.LBB89:
 958              		.loc 2 55 2 view .LVU274
 959              		.loc 2 55 29 is_stmt 0 view .LVU275
 960 0030 C2F30723 		ubfx	r3, r2, #8, #8
 961 0034 1B04     		lsls	r3, r3, #16
 962 0036 43EA0263 		orr	r3, r3, r2, lsl #24
 963 003a C2F30741 		ubfx	r1, r2, #16, #8
 964 003e 43EA0123 		orr	r3, r3, r1, lsl #8
 965              		.loc 2 55 9 view .LVU276
 966 0042 43EA1263 		orr	r3, r3, r2, lsr #24
 967              	.LVL108:
 968              		.loc 2 55 9 view .LVU277
 969              	.LBE89:
 970              	.LBE88:
 971              	.LBE87:
 972              	.LBE86:
 585:./lib/fdt/fdt_overlay.c **** 			valp = fdt32_ld(refp);
 973              		.loc 1 585 9 discriminator 1 view .LVU278
 974 0046 0CEB0301 		add	r1, ip, r3
 975              	.LVL109:
 586:./lib/fdt/fdt_overlay.c **** 
 976              		.loc 1 586 4 is_stmt 1 view .LVU279
 977              	.LBB90:
 978              	.LBI90:
 145:./include/linux/libfdt.h **** {
 979              		.loc 3 145 24 view .LVU280
 980              	.LBB91:
 147:./include/linux/libfdt.h **** 
 981              		.loc 3 147 2 view .LVU281
 149:./include/linux/libfdt.h **** 		| ((uint32_t)bp[1] << 16)
 982              		.loc 3 149 2 view .LVU282
ARM GAS  /tmp/ccCHVNBc.s 			page 49


 149:./include/linux/libfdt.h **** 		| ((uint32_t)bp[1] << 16)
 983              		.loc 3 149 22 is_stmt 0 view .LVU283
 984 004a 1CF80300 		ldrb	r0, [ip, r3]	@ zero_extendqisi2
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 985              		.loc 3 150 18 view .LVU284
 986 004e 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 987              		.loc 3 150 22 view .LVU285
 988 0050 1204     		lsls	r2, r2, #16
 150:./include/linux/libfdt.h **** 		| ((uint32_t)bp[2] << 8)
 989              		.loc 3 150 3 view .LVU286
 990 0052 42EA0062 		orr	r2, r2, r0, lsl #24
 151:./include/linux/libfdt.h **** 		| bp[3];
 991              		.loc 3 151 18 view .LVU287
 992 0056 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
 151:./include/linux/libfdt.h **** 		| bp[3];
 993              		.loc 3 151 3 view .LVU288
 994 0058 42EA0022 		orr	r2, r2, r0, lsl #8
 152:./include/linux/libfdt.h **** }
 995              		.loc 3 152 7 view .LVU289
 996 005c C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 152:./include/linux/libfdt.h **** }
 997              		.loc 3 152 3 view .LVU290
 998 005e 0243     		orrs	r2, r2, r0
 999              	.LVL110:
 152:./include/linux/libfdt.h **** }
 1000              		.loc 3 152 3 view .LVU291
 1001              	.LBE91:
 1002              	.LBE90:
 588:./lib/fdt/fdt_overlay.c **** 				fdt32_st(refp, fdt_phandle);
 1003              		.loc 1 588 4 is_stmt 1 view .LVU292
 588:./lib/fdt/fdt_overlay.c **** 				fdt32_st(refp, fdt_phandle);
 1004              		.loc 1 588 7 is_stmt 0 view .LVU293
 1005 0060 9742     		cmp	r7, r2
 1006 0062 DFD1     		bne	.L57
 589:./lib/fdt/fdt_overlay.c **** 		}
 1007              		.loc 1 589 5 is_stmt 1 view .LVU294
 1008              	.LVL111:
 1009              	.LBB92:
 1010              	.LBI92:
 155:./include/linux/libfdt.h **** {
 1011              		.loc 3 155 20 view .LVU295
 1012              	.LBB93:
 157:./include/linux/libfdt.h **** 
 1013              		.loc 3 157 2 view .LVU296
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 1014              		.loc 3 159 2 view .LVU297
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 1015              		.loc 3 159 16 is_stmt 0 view .LVU298
 1016 0064 2A0E     		lsrs	r2, r5, #24
 1017              	.LVL112:
 159:./include/linux/libfdt.h **** 	bp[1] = (value >> 16) & 0xff;
 1018              		.loc 3 159 8 view .LVU299
 1019 0066 0CF80320 		strb	r2, [ip, r3]
 1020              	.LVL113:
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 1021              		.loc 3 160 2 is_stmt 1 view .LVU300
ARM GAS  /tmp/ccCHVNBc.s 			page 50


 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 1022              		.loc 3 160 17 is_stmt 0 view .LVU301
 1023 006a 2B0C     		lsrs	r3, r5, #16
 160:./include/linux/libfdt.h **** 	bp[2] = (value >> 8) & 0xff;
 1024              		.loc 3 160 8 view .LVU302
 1025 006c 4B70     		strb	r3, [r1, #1]
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 1026              		.loc 3 161 2 is_stmt 1 view .LVU303
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 1027              		.loc 3 161 17 is_stmt 0 view .LVU304
 1028 006e 2B0A     		lsrs	r3, r5, #8
 161:./include/linux/libfdt.h **** 	bp[3] = value & 0xff;
 1029              		.loc 3 161 8 view .LVU305
 1030 0070 8B70     		strb	r3, [r1, #2]
 162:./include/linux/libfdt.h **** }
 1031              		.loc 3 162 2 is_stmt 1 view .LVU306
 162:./include/linux/libfdt.h **** }
 1032              		.loc 3 162 8 is_stmt 0 view .LVU307
 1033 0072 CD70     		strb	r5, [r1, #3]
 1034              	.LVL114:
 163:./include/linux/libfdt.h **** 
 1035              		.loc 3 163 1 view .LVU308
 1036 0074 D6E7     		b	.L57
 1037              	.LVL115:
 1038              	.L66:
 163:./include/linux/libfdt.h **** 
 1039              		.loc 3 163 1 view .LVU309
 1040              	.LBE93:
 1041              	.LBE92:
 1042              	.LBE85:
 1043              	.LBE96:
 556:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 1044              		.loc 1 556 2 is_stmt 1 discriminator 2 view .LVU310
 1045 0076 4146     		mov	r1, r8
 1046 0078 4846     		mov	r0, r9
 1047 007a FFF7FEFF 		bl	fdt_next_property_offset
 1048              	.LVL116:
 556:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 1049              		.loc 1 556 2 is_stmt 0 discriminator 2 view .LVU311
 1050 007e 8046     		mov	r8, r0
 1051              	.LVL117:
 1052              	.L53:
 556:./lib/fdt/fdt_overlay.c **** 		const fdt32_t *fixup_val;
 1053              		.loc 1 556 2 is_stmt 1 discriminator 1 view .LVU312
 1054 0080 B8F1000F 		cmp	r8, #0
 1055 0084 21DB     		blt	.L67
 1056              	.LBB97:
 557:./lib/fdt/fdt_overlay.c **** 		const char *name;
 1057              		.loc 1 557 3 view .LVU313
 558:./lib/fdt/fdt_overlay.c **** 		char *tree_val;
 1058              		.loc 1 558 3 view .LVU314
 559:./lib/fdt/fdt_overlay.c **** 		int fixup_len;
 1059              		.loc 1 559 3 view .LVU315
 560:./lib/fdt/fdt_overlay.c **** 		int tree_len;
 1060              		.loc 1 560 3 view .LVU316
 561:./lib/fdt/fdt_overlay.c **** 		int i;
 1061              		.loc 1 561 3 view .LVU317
ARM GAS  /tmp/ccCHVNBc.s 			page 51


 562:./lib/fdt/fdt_overlay.c **** 
 1062              		.loc 1 562 3 view .LVU318
 564:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 1063              		.loc 1 564 3 view .LVU319
 564:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 1064              		.loc 1 564 15 is_stmt 0 view .LVU320
 1065 0086 04AB     		add	r3, sp, #16
 1066 0088 03AA     		add	r2, sp, #12
 1067 008a 4146     		mov	r1, r8
 1068 008c 4846     		mov	r0, r9
 1069              	.LVL118:
 564:./lib/fdt/fdt_overlay.c **** 						  &name, &fixup_len);
 1070              		.loc 1 564 15 view .LVU321
 1071 008e FFF7FEFF 		bl	fdt_getprop_by_offset
 1072              	.LVL119:
 566:./lib/fdt/fdt_overlay.c **** 			return fixup_len;
 1073              		.loc 1 566 3 is_stmt 1 view .LVU322
 566:./lib/fdt/fdt_overlay.c **** 			return fixup_len;
 1074              		.loc 1 566 6 is_stmt 0 view .LVU323
 1075 0092 0646     		mov	r6, r0
 1076 0094 0028     		cmp	r0, #0
 1077 0096 C0D0     		beq	.L68
 569:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1078              		.loc 1 569 3 is_stmt 1 view .LVU324
 569:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1079              		.loc 1 569 17 is_stmt 0 view .LVU325
 1080 0098 049B     		ldr	r3, [sp, #16]
 569:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1081              		.loc 1 569 6 view .LVU326
 1082 009a 13F00304 		ands	r4, r3, #3
 1083 009e 11D1     		bne	.L63
 571:./lib/fdt/fdt_overlay.c **** 
 1084              		.loc 1 571 3 is_stmt 1 view .LVU327
 571:./lib/fdt/fdt_overlay.c **** 
 1085              		.loc 1 571 13 is_stmt 0 view .LVU328
 1086 00a0 9B08     		lsrs	r3, r3, #2
 1087 00a2 0493     		str	r3, [sp, #16]
 573:./lib/fdt/fdt_overlay.c **** 		if (!tree_val) {
 1088              		.loc 1 573 3 is_stmt 1 view .LVU329
 1089              	.LVL120:
 1090              	.LBB94:
 1091              	.LBI94:
 857:./include/linux/libfdt.h **** 				  const char *name, int *lenp)
 1092              		.loc 3 857 21 view .LVU330
 1093              	.LBB95:
 1094              		.loc 3 860 2 view .LVU331
 1095              		.loc 3 860 28 is_stmt 0 view .LVU332
 1096 00a4 05AB     		add	r3, sp, #20
 1097              	.LVL121:
 1098              		.loc 3 860 28 view .LVU333
 1099 00a6 039A     		ldr	r2, [sp, #12]
 1100 00a8 5146     		mov	r1, r10
 1101 00aa 4846     		mov	r0, r9
 1102              	.LVL122:
 1103              		.loc 3 860 28 view .LVU334
 1104 00ac FFF7FEFF 		bl	fdt_getprop
 1105              	.LVL123:
ARM GAS  /tmp/ccCHVNBc.s 			page 52


 1106              		.loc 3 860 28 view .LVU335
 1107              	.LBE95:
 1108              	.LBE94:
 574:./lib/fdt/fdt_overlay.c **** 			if (tree_len == -FDT_ERR_NOTFOUND)
 1109              		.loc 1 574 3 is_stmt 1 view .LVU336
 574:./lib/fdt/fdt_overlay.c **** 			if (tree_len == -FDT_ERR_NOTFOUND)
 1110              		.loc 1 574 6 is_stmt 0 view .LVU337
 1111 00b0 8446     		mov	ip, r0
 1112 00b2 0028     		cmp	r0, #0
 1113 00b4 B7D1     		bne	.L56
 575:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 1114              		.loc 1 575 4 is_stmt 1 view .LVU338
 575:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 1115              		.loc 1 575 17 is_stmt 0 view .LVU339
 1116 00b6 0599     		ldr	r1, [sp, #20]
 575:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_BADOVERLAY;
 1117              		.loc 1 575 7 view .LVU340
 1118 00b8 B1F1FF3F 		cmp	r1, #-1
 1119 00bc AED1     		bne	.L52
 576:./lib/fdt/fdt_overlay.c **** 
 1120              		.loc 1 576 12 view .LVU341
 1121 00be 6FF00F01 		mvn	r1, #15
 1122 00c2 ABE7     		b	.L52
 1123              	.LVL124:
 1124              	.L63:
 570:./lib/fdt/fdt_overlay.c **** 		fixup_len /= sizeof(uint32_t);
 1125              		.loc 1 570 11 view .LVU342
 1126 00c4 6FF00F01 		mvn	r1, #15
 1127 00c8 A8E7     		b	.L52
 1128              	.LVL125:
 1129              	.L67:
 570:./lib/fdt/fdt_overlay.c **** 		fixup_len /= sizeof(uint32_t);
 1130              		.loc 1 570 11 view .LVU343
 1131              	.LBE97:
 593:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child, NULL);
 1132              		.loc 1 593 2 is_stmt 1 view .LVU344
 1133 00ca 5946     		mov	r1, fp
 1134 00cc 4846     		mov	r0, r9
 1135              	.LVL126:
 593:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child, NULL);
 1136              		.loc 1 593 2 is_stmt 0 view .LVU345
 1137 00ce FFF7FEFF 		bl	fdt_first_subnode
 1138              	.LVL127:
 1139 00d2 0446     		mov	r4, r0
 1140              	.LVL128:
 593:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child, NULL);
 1141              		.loc 1 593 2 view .LVU346
 1142 00d4 04E0     		b	.L61
 1143              	.LVL129:
 1144              	.L70:
 593:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child, NULL);
 1145              		.loc 1 593 2 is_stmt 1 discriminator 2 view .LVU347
 1146 00d6 2146     		mov	r1, r4
 1147 00d8 4846     		mov	r0, r9
 1148              	.LVL130:
 593:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child, NULL);
 1149              		.loc 1 593 2 is_stmt 0 discriminator 2 view .LVU348
ARM GAS  /tmp/ccCHVNBc.s 			page 53


 1150 00da FFF7FEFF 		bl	fdt_next_subnode
 1151              	.LVL131:
 1152 00de 0446     		mov	r4, r0
 1153              	.LVL132:
 1154              	.L61:
 593:./lib/fdt/fdt_overlay.c **** 		const char *fixup_child_name = fdt_get_name(fdto, fixup_child, NULL);
 1155              		.loc 1 593 2 is_stmt 1 discriminator 1 view .LVU349
 1156 00e0 002C     		cmp	r4, #0
 1157 00e2 19DB     		blt	.L69
 1158              	.LBB98:
 594:./lib/fdt/fdt_overlay.c **** 		int tree_child;
 1159              		.loc 1 594 3 view .LVU350
 594:./lib/fdt/fdt_overlay.c **** 		int tree_child;
 1160              		.loc 1 594 34 is_stmt 0 view .LVU351
 1161 00e4 0022     		movs	r2, #0
 1162 00e6 2146     		mov	r1, r4
 1163 00e8 4846     		mov	r0, r9
 1164              	.LVL133:
 594:./lib/fdt/fdt_overlay.c **** 		int tree_child;
 1165              		.loc 1 594 34 view .LVU352
 1166 00ea FFF7FEFF 		bl	fdt_get_name
 1167              	.LVL134:
 594:./lib/fdt/fdt_overlay.c **** 		int tree_child;
 1168              		.loc 1 594 34 view .LVU353
 1169 00ee 0246     		mov	r2, r0
 1170              	.LVL135:
 595:./lib/fdt/fdt_overlay.c **** 
 1171              		.loc 1 595 3 is_stmt 1 view .LVU354
 597:./lib/fdt/fdt_overlay.c **** 
 1172              		.loc 1 597 3 view .LVU355
 597:./lib/fdt/fdt_overlay.c **** 
 1173              		.loc 1 597 16 is_stmt 0 view .LVU356
 1174 00f0 5146     		mov	r1, r10
 1175 00f2 4846     		mov	r0, r9
 1176              	.LVL136:
 597:./lib/fdt/fdt_overlay.c **** 
 1177              		.loc 1 597 16 view .LVU357
 1178 00f4 FFF7FEFF 		bl	fdt_subnode_offset
 1179              	.LVL137:
 597:./lib/fdt/fdt_overlay.c **** 
 1180              		.loc 1 597 16 view .LVU358
 1181 00f8 0146     		mov	r1, r0
 1182              	.LVL138:
 599:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1183              		.loc 1 599 3 is_stmt 1 view .LVU359
 599:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1184              		.loc 1 599 6 is_stmt 0 view .LVU360
 1185 00fa B0F1FF3F 		cmp	r0, #-1
 1186 00fe 0DD0     		beq	.L64
 601:./lib/fdt/fdt_overlay.c **** 			return tree_child;
 1187              		.loc 1 601 3 is_stmt 1 view .LVU361
 601:./lib/fdt/fdt_overlay.c **** 			return tree_child;
 1188              		.loc 1 601 6 is_stmt 0 view .LVU362
 1189 0100 0028     		cmp	r0, #0
 1190 0102 8BDB     		blt	.L52
 604:./lib/fdt/fdt_overlay.c **** 								 fixup_child,
 1191              		.loc 1 604 3 is_stmt 1 view .LVU363
ARM GAS  /tmp/ccCHVNBc.s 			page 54


 604:./lib/fdt/fdt_overlay.c **** 								 fixup_child,
 1192              		.loc 1 604 9 is_stmt 0 view .LVU364
 1193 0104 0097     		str	r7, [sp]
 1194 0106 2B46     		mov	r3, r5
 1195 0108 2246     		mov	r2, r4
 1196 010a 4846     		mov	r0, r9
 1197              	.LVL139:
 604:./lib/fdt/fdt_overlay.c **** 								 fixup_child,
 1198              		.loc 1 604 9 view .LVU365
 1199 010c FFF778FF 		bl	overlay_update_node_conflicting_references
 1200              	.LVL140:
 608:./lib/fdt/fdt_overlay.c **** 			return ret;
 1201              		.loc 1 608 3 is_stmt 1 view .LVU366
 608:./lib/fdt/fdt_overlay.c **** 			return ret;
 1202              		.loc 1 608 6 is_stmt 0 view .LVU367
 1203 0110 0146     		mov	r1, r0
 1204 0112 0028     		cmp	r0, #0
 1205 0114 DFD0     		beq	.L70
 1206 0116 81E7     		b	.L52
 1207              	.LVL141:
 1208              	.L69:
 608:./lib/fdt/fdt_overlay.c **** 			return ret;
 1209              		.loc 1 608 6 view .LVU368
 1210              	.LBE98:
 612:./lib/fdt/fdt_overlay.c **** }
 1211              		.loc 1 612 9 view .LVU369
 1212 0118 0021     		movs	r1, #0
 1213 011a 7FE7     		b	.L52
 1214              	.LVL142:
 1215              	.L64:
 1216              	.LBB99:
 600:./lib/fdt/fdt_overlay.c **** 		if (tree_child < 0)
 1217              		.loc 1 600 11 view .LVU370
 1218 011c 6FF00F01 		mvn	r1, #15
 1219 0120 7CE7     		b	.L52
 1220              	.LBE99:
 1221              		.cfi_endproc
 1222              	.LFE86:
 1224              		.section	.text.overlay_update_local_conflicting_references,"ax",%progbits
 1225              		.align	1
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1230              	overlay_update_local_conflicting_references:
 1231              	.LVL143:
 1232              	.LFB87:
 614:./lib/fdt/fdt_overlay.c **** 
 615:./lib/fdt/fdt_overlay.c **** /**
 616:./lib/fdt/fdt_overlay.c ****  * overlay_update_local_conflicting_references - Recursively replace phandle values
 617:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 618:./lib/fdt/fdt_overlay.c ****  * @fdt_phandle: Value to replace phandles with
 619:./lib/fdt/fdt_overlay.c ****  * @fdto_phandle: Value to be replaced
 620:./lib/fdt/fdt_overlay.c ****  *
 621:./lib/fdt/fdt_overlay.c ****  * Replaces all phandles with value @fdto_phandle by @fdt_phandle.
 622:./lib/fdt/fdt_overlay.c ****  *
 623:./lib/fdt/fdt_overlay.c ****  * returns:
 624:./lib/fdt/fdt_overlay.c ****  *      0 on success
ARM GAS  /tmp/ccCHVNBc.s 			page 55


 625:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 626:./lib/fdt/fdt_overlay.c ****  */
 627:./lib/fdt/fdt_overlay.c **** static int overlay_update_local_conflicting_references(void *fdto,
 628:./lib/fdt/fdt_overlay.c **** 						       uint32_t fdt_phandle,
 629:./lib/fdt/fdt_overlay.c **** 						       uint32_t fdto_phandle)
 630:./lib/fdt/fdt_overlay.c **** {
 1233              		.loc 1 630 1 is_stmt 1 view -0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 0
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237              		.loc 1 630 1 is_stmt 0 view .LVU372
 1238 0000 70B5     		push	{r4, r5, r6, lr}
 1239              	.LCFI19:
 1240              		.cfi_def_cfa_offset 16
 1241              		.cfi_offset 4, -16
 1242              		.cfi_offset 5, -12
 1243              		.cfi_offset 6, -8
 1244              		.cfi_offset 14, -4
 1245 0002 82B0     		sub	sp, sp, #8
 1246              	.LCFI20:
 1247              		.cfi_def_cfa_offset 24
 1248 0004 0446     		mov	r4, r0
 1249 0006 0D46     		mov	r5, r1
 1250 0008 1646     		mov	r6, r2
 631:./lib/fdt/fdt_overlay.c **** 	int fixups;
 1251              		.loc 1 631 2 is_stmt 1 view .LVU373
 632:./lib/fdt/fdt_overlay.c **** 
 633:./lib/fdt/fdt_overlay.c **** 	fixups = fdt_path_offset(fdto, "/__local_fixups__");
 1252              		.loc 1 633 2 view .LVU374
 1253              		.loc 1 633 11 is_stmt 0 view .LVU375
 1254 000a 0949     		ldr	r1, .L75
 1255              	.LVL144:
 1256              		.loc 1 633 11 view .LVU376
 1257 000c FFF7FEFF 		bl	fdt_path_offset
 1258              	.LVL145:
 634:./lib/fdt/fdt_overlay.c **** 	if (fixups == -FDT_ERR_NOTFOUND)
 1259              		.loc 1 634 2 is_stmt 1 view .LVU377
 1260              		.loc 1 634 5 is_stmt 0 view .LVU378
 1261 0010 B0F1FF3F 		cmp	r0, #-1
 1262 0014 0AD0     		beq	.L73
 635:./lib/fdt/fdt_overlay.c **** 		return 0;
 636:./lib/fdt/fdt_overlay.c **** 	if (fixups < 0)
 1263              		.loc 1 636 2 is_stmt 1 view .LVU379
 1264              		.loc 1 636 5 is_stmt 0 view .LVU380
 1265 0016 0028     		cmp	r0, #0
 1266 0018 06DB     		blt	.L71
 637:./lib/fdt/fdt_overlay.c **** 		return fixups;
 638:./lib/fdt/fdt_overlay.c **** 
 639:./lib/fdt/fdt_overlay.c **** 	return overlay_update_node_conflicting_references(fdto, 0, fixups,
 1267              		.loc 1 639 2 is_stmt 1 view .LVU381
 1268              		.loc 1 639 9 is_stmt 0 view .LVU382
 1269 001a 0096     		str	r6, [sp]
 1270 001c 2B46     		mov	r3, r5
 1271 001e 0246     		mov	r2, r0
 1272 0020 0021     		movs	r1, #0
 1273 0022 2046     		mov	r0, r4
 1274              	.LVL146:
ARM GAS  /tmp/ccCHVNBc.s 			page 56


 1275              		.loc 1 639 9 view .LVU383
 1276 0024 FFF7FEFF 		bl	overlay_update_node_conflicting_references
 1277              	.LVL147:
 1278              	.L71:
 640:./lib/fdt/fdt_overlay.c **** 							  fdt_phandle,
 641:./lib/fdt/fdt_overlay.c **** 							  fdto_phandle);
 642:./lib/fdt/fdt_overlay.c **** }
 1279              		.loc 1 642 1 view .LVU384
 1280 0028 02B0     		add	sp, sp, #8
 1281              	.LCFI21:
 1282              		.cfi_remember_state
 1283              		.cfi_def_cfa_offset 16
 1284              		@ sp needed
 1285 002a 70BD     		pop	{r4, r5, r6, pc}
 1286              	.LVL148:
 1287              	.L73:
 1288              	.LCFI22:
 1289              		.cfi_restore_state
 635:./lib/fdt/fdt_overlay.c **** 	if (fixups < 0)
 1290              		.loc 1 635 10 view .LVU385
 1291 002c 0020     		movs	r0, #0
 1292              	.LVL149:
 635:./lib/fdt/fdt_overlay.c **** 	if (fixups < 0)
 1293              		.loc 1 635 10 view .LVU386
 1294 002e FBE7     		b	.L71
 1295              	.L76:
 1296              		.align	2
 1297              	.L75:
 1298 0030 00000000 		.word	.LC3
 1299              		.cfi_endproc
 1300              	.LFE87:
 1302              		.section	.text.overlay_fixup_one_phandle,"ax",%progbits
 1303              		.align	1
 1304              		.syntax unified
 1305              		.thumb
 1306              		.thumb_func
 1308              	overlay_fixup_one_phandle:
 1309              	.LVL150:
 1310              	.LFB82:
 335:./lib/fdt/fdt_overlay.c **** 	fdt32_t phandle_prop;
 1311              		.loc 1 335 1 is_stmt 1 view -0
 1312              		.cfi_startproc
 1313              		@ args = 16, pretend = 0, frame = 8
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 335:./lib/fdt/fdt_overlay.c **** 	fdt32_t phandle_prop;
 1315              		.loc 1 335 1 is_stmt 0 view .LVU388
 1316 0000 30B5     		push	{r4, r5, lr}
 1317              	.LCFI23:
 1318              		.cfi_def_cfa_offset 12
 1319              		.cfi_offset 4, -12
 1320              		.cfi_offset 5, -8
 1321              		.cfi_offset 14, -4
 1322 0002 87B0     		sub	sp, sp, #28
 1323              	.LCFI24:
 1324              		.cfi_def_cfa_offset 40
 1325 0004 0446     		mov	r4, r0
 1326 0006 0D9D     		ldr	r5, [sp, #52]
ARM GAS  /tmp/ccCHVNBc.s 			page 57


 336:./lib/fdt/fdt_overlay.c **** 	int fixup_off;
 1327              		.loc 1 336 2 is_stmt 1 view .LVU389
 337:./lib/fdt/fdt_overlay.c **** 
 1328              		.loc 1 337 2 view .LVU390
 339:./lib/fdt/fdt_overlay.c **** 		return symbols_off;
 1329              		.loc 1 339 2 view .LVU391
 339:./lib/fdt/fdt_overlay.c **** 		return symbols_off;
 1330              		.loc 1 339 5 is_stmt 0 view .LVU392
 1331 0008 081E     		subs	r0, r1, #0
 1332              	.LVL151:
 339:./lib/fdt/fdt_overlay.c **** 		return symbols_off;
 1333              		.loc 1 339 5 view .LVU393
 1334 000a 22DB     		blt	.L77
 1335 000c 9446     		mov	ip, r2
 1336 000e 1A46     		mov	r2, r3
 1337              	.LVL152:
 342:./lib/fdt/fdt_overlay.c **** 	if (fixup_off == -FDT_ERR_NOTFOUND)
 1338              		.loc 1 342 2 is_stmt 1 view .LVU394
 342:./lib/fdt/fdt_overlay.c **** 	if (fixup_off == -FDT_ERR_NOTFOUND)
 1339              		.loc 1 342 14 is_stmt 0 view .LVU395
 1340 0010 6146     		mov	r1, ip
 1341              	.LVL153:
 342:./lib/fdt/fdt_overlay.c **** 	if (fixup_off == -FDT_ERR_NOTFOUND)
 1342              		.loc 1 342 14 view .LVU396
 1343 0012 2046     		mov	r0, r4
 1344              	.LVL154:
 342:./lib/fdt/fdt_overlay.c **** 	if (fixup_off == -FDT_ERR_NOTFOUND)
 1345              		.loc 1 342 14 view .LVU397
 1346 0014 FFF7FEFF 		bl	fdt_path_offset_namelen
 1347              	.LVL155:
 343:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_BADOVERLAY;
 1348              		.loc 1 343 2 is_stmt 1 view .LVU398
 343:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_BADOVERLAY;
 1349              		.loc 1 343 5 is_stmt 0 view .LVU399
 1350 0018 B0F1FF3F 		cmp	r0, #-1
 1351 001c 1BD0     		beq	.L80
 345:./lib/fdt/fdt_overlay.c **** 		return fixup_off;
 1352              		.loc 1 345 2 is_stmt 1 view .LVU400
 345:./lib/fdt/fdt_overlay.c **** 		return fixup_off;
 1353              		.loc 1 345 5 is_stmt 0 view .LVU401
 1354 001e 0028     		cmp	r0, #0
 1355 0020 17DB     		blt	.L77
 348:./lib/fdt/fdt_overlay.c **** 	return fdt_setprop_inplace_namelen_partial(fdto, fixup_off,
 1356              		.loc 1 348 2 is_stmt 1 view .LVU402
 1357              	.LVL156:
 1358              	.LBB100:
 1359              	.LBI100:
  56:./include/linux/libfdt_env.h **** }
  57:./include/linux/libfdt_env.h **** static inline fdt32_t cpu_to_fdt32(uint32_t x)
 1360              		.loc 2 57 23 view .LVU403
 1361              	.LBB101:
  58:./include/linux/libfdt_env.h **** {
  59:./include/linux/libfdt_env.h **** 	return (FDT_FORCE fdt32_t)CPU_TO_FDT32(x);
 1362              		.loc 2 59 2 view .LVU404
 1363              		.loc 2 59 28 is_stmt 0 view .LVU405
 1364 0022 C5F30723 		ubfx	r3, r5, #8, #8
 1365 0026 1B04     		lsls	r3, r3, #16
ARM GAS  /tmp/ccCHVNBc.s 			page 58


 1366 0028 43EA0563 		orr	r3, r3, r5, lsl #24
 1367 002c C5F30742 		ubfx	r2, r5, #16, #8
 1368 0030 43EA0223 		orr	r3, r3, r2, lsl #8
 1369              		.loc 2 59 9 view .LVU406
 1370 0034 43EA1563 		orr	r3, r3, r5, lsr #24
 1371              	.LVL157:
 1372              		.loc 2 59 9 view .LVU407
 1373              	.LBE101:
 1374              	.LBE100:
 348:./lib/fdt/fdt_overlay.c **** 	return fdt_setprop_inplace_namelen_partial(fdto, fixup_off,
 1375              		.loc 1 348 15 discriminator 1 view .LVU408
 1376 0038 0593     		str	r3, [sp, #20]
 349:./lib/fdt/fdt_overlay.c **** 						   name, name_len, poffset,
 1377              		.loc 1 349 2 is_stmt 1 view .LVU409
 349:./lib/fdt/fdt_overlay.c **** 						   name, name_len, poffset,
 1378              		.loc 1 349 9 is_stmt 0 view .LVU410
 1379 003a 0423     		movs	r3, #4
 1380 003c 0293     		str	r3, [sp, #8]
 1381 003e 05AB     		add	r3, sp, #20
 1382 0040 0193     		str	r3, [sp, #4]
 1383 0042 0C9B     		ldr	r3, [sp, #48]
 1384 0044 0093     		str	r3, [sp]
 1385 0046 0B9B     		ldr	r3, [sp, #44]
 1386 0048 0A9A     		ldr	r2, [sp, #40]
 1387 004a 0146     		mov	r1, r0
 1388 004c 2046     		mov	r0, r4
 1389              	.LVL158:
 349:./lib/fdt/fdt_overlay.c **** 						   name, name_len, poffset,
 1390              		.loc 1 349 9 view .LVU411
 1391 004e FFF7FEFF 		bl	fdt_setprop_inplace_namelen_partial
 1392              	.LVL159:
 1393              	.L77:
 353:./lib/fdt/fdt_overlay.c **** 
 1394              		.loc 1 353 1 view .LVU412
 1395 0052 07B0     		add	sp, sp, #28
 1396              	.LCFI25:
 1397              		.cfi_remember_state
 1398              		.cfi_def_cfa_offset 12
 1399              		@ sp needed
 1400 0054 30BD     		pop	{r4, r5, pc}
 1401              	.LVL160:
 1402              	.L80:
 1403              	.LCFI26:
 1404              		.cfi_restore_state
 344:./lib/fdt/fdt_overlay.c **** 	if (fixup_off < 0)
 1405              		.loc 1 344 10 view .LVU413
 1406 0056 6FF00F00 		mvn	r0, #15
 1407              	.LVL161:
 344:./lib/fdt/fdt_overlay.c **** 	if (fixup_off < 0)
 1408              		.loc 1 344 10 view .LVU414
 1409 005a FAE7     		b	.L77
 1410              		.cfi_endproc
 1411              	.LFE82:
 1413              		.section	.text.overlay_fixup_phandle,"ax",%progbits
 1414              		.align	1
 1415              		.syntax unified
 1416              		.thumb
ARM GAS  /tmp/ccCHVNBc.s 			page 59


 1417              		.thumb_func
 1419              	overlay_fixup_phandle:
 1420              	.LVL162:
 1421              	.LFB83:
 376:./lib/fdt/fdt_overlay.c **** 	const char *value;
 1422              		.loc 1 376 1 is_stmt 1 view -0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 24
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 376:./lib/fdt/fdt_overlay.c **** 	const char *value;
 1426              		.loc 1 376 1 is_stmt 0 view .LVU416
 1427 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1428              	.LCFI27:
 1429              		.cfi_def_cfa_offset 36
 1430              		.cfi_offset 4, -36
 1431              		.cfi_offset 5, -32
 1432              		.cfi_offset 6, -28
 1433              		.cfi_offset 7, -24
 1434              		.cfi_offset 8, -20
 1435              		.cfi_offset 9, -16
 1436              		.cfi_offset 10, -12
 1437              		.cfi_offset 11, -8
 1438              		.cfi_offset 14, -4
 1439 0004 8BB0     		sub	sp, sp, #44
 1440              	.LCFI28:
 1441              		.cfi_def_cfa_offset 80
 1442 0006 0446     		mov	r4, r0
 1443 0008 0F46     		mov	r7, r1
 1444 000a 9046     		mov	r8, r2
 1445 000c 1946     		mov	r1, r3
 1446              	.LVL163:
 377:./lib/fdt/fdt_overlay.c **** 	const char *label;
 1447              		.loc 1 377 2 is_stmt 1 view .LVU417
 378:./lib/fdt/fdt_overlay.c **** 	int len;
 1448              		.loc 1 378 2 view .LVU418
 379:./lib/fdt/fdt_overlay.c **** 	const char *symbol_path;
 1449              		.loc 1 379 2 view .LVU419
 380:./lib/fdt/fdt_overlay.c **** 	int prop_len;
 1450              		.loc 1 380 2 view .LVU420
 381:./lib/fdt/fdt_overlay.c **** 	int symbol_off;
 1451              		.loc 1 381 2 view .LVU421
 382:./lib/fdt/fdt_overlay.c **** 	uint32_t phandle;
 1452              		.loc 1 382 2 view .LVU422
 383:./lib/fdt/fdt_overlay.c **** 
 1453              		.loc 1 383 2 view .LVU423
 385:./lib/fdt/fdt_overlay.c **** 				      &label, &len);
 1454              		.loc 1 385 2 view .LVU424
 385:./lib/fdt/fdt_overlay.c **** 				      &label, &len);
 1455              		.loc 1 385 10 is_stmt 0 view .LVU425
 1456 000e 08AB     		add	r3, sp, #32
 1457              	.LVL164:
 385:./lib/fdt/fdt_overlay.c **** 				      &label, &len);
 1458              		.loc 1 385 10 view .LVU426
 1459 0010 09AA     		add	r2, sp, #36
 1460              	.LVL165:
 385:./lib/fdt/fdt_overlay.c **** 				      &label, &len);
 1461              		.loc 1 385 10 view .LVU427
ARM GAS  /tmp/ccCHVNBc.s 			page 60


 1462 0012 3846     		mov	r0, r7
 1463              	.LVL166:
 385:./lib/fdt/fdt_overlay.c **** 				      &label, &len);
 1464              		.loc 1 385 10 view .LVU428
 1465 0014 FFF7FEFF 		bl	fdt_getprop_by_offset
 1466              	.LVL167:
 387:./lib/fdt/fdt_overlay.c **** 		if (len == -FDT_ERR_NOTFOUND)
 1467              		.loc 1 387 2 is_stmt 1 view .LVU429
 387:./lib/fdt/fdt_overlay.c **** 		if (len == -FDT_ERR_NOTFOUND)
 1468              		.loc 1 387 5 is_stmt 0 view .LVU430
 1469 0018 A8B1     		cbz	r0, .L100
 1470 001a 0546     		mov	r5, r0
 394:./lib/fdt/fdt_overlay.c **** 	if (!symbol_path)
 1471              		.loc 1 394 2 is_stmt 1 view .LVU431
 394:./lib/fdt/fdt_overlay.c **** 	if (!symbol_path)
 1472              		.loc 1 394 16 is_stmt 0 view .LVU432
 1473 001c 07AB     		add	r3, sp, #28
 1474 001e 099A     		ldr	r2, [sp, #36]
 1475 0020 4146     		mov	r1, r8
 1476 0022 2046     		mov	r0, r4
 1477              	.LVL168:
 394:./lib/fdt/fdt_overlay.c **** 	if (!symbol_path)
 1478              		.loc 1 394 16 view .LVU433
 1479 0024 FFF7FEFF 		bl	fdt_getprop
 1480              	.LVL169:
 395:./lib/fdt/fdt_overlay.c **** 		return prop_len;
 1481              		.loc 1 395 2 is_stmt 1 view .LVU434
 395:./lib/fdt/fdt_overlay.c **** 		return prop_len;
 1482              		.loc 1 395 5 is_stmt 0 view .LVU435
 1483 0028 0146     		mov	r1, r0
 1484 002a B8B1     		cbz	r0, .L101
 398:./lib/fdt/fdt_overlay.c **** 	if (symbol_off < 0)
 1485              		.loc 1 398 2 is_stmt 1 view .LVU436
 398:./lib/fdt/fdt_overlay.c **** 	if (symbol_off < 0)
 1486              		.loc 1 398 15 is_stmt 0 view .LVU437
 1487 002c 2046     		mov	r0, r4
 1488              	.LVL170:
 398:./lib/fdt/fdt_overlay.c **** 	if (symbol_off < 0)
 1489              		.loc 1 398 15 view .LVU438
 1490 002e FFF7FEFF 		bl	fdt_path_offset
 1491              	.LVL171:
 399:./lib/fdt/fdt_overlay.c **** 		return symbol_off;
 1492              		.loc 1 399 2 is_stmt 1 view .LVU439
 399:./lib/fdt/fdt_overlay.c **** 		return symbol_off;
 1493              		.loc 1 399 5 is_stmt 0 view .LVU440
 1494 0032 011E     		subs	r1, r0, #0
 1495 0034 0BDB     		blt	.L82
 402:./lib/fdt/fdt_overlay.c **** 	if (!phandle)
 1496              		.loc 1 402 2 is_stmt 1 view .LVU441
 402:./lib/fdt/fdt_overlay.c **** 	if (!phandle)
 1497              		.loc 1 402 12 is_stmt 0 view .LVU442
 1498 0036 2046     		mov	r0, r4
 1499              	.LVL172:
 402:./lib/fdt/fdt_overlay.c **** 	if (!phandle)
 1500              		.loc 1 402 12 view .LVU443
 1501 0038 FFF7FEFF 		bl	fdt_get_phandle
 1502              	.LVL173:
ARM GAS  /tmp/ccCHVNBc.s 			page 61


 403:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_NOTFOUND;
 1503              		.loc 1 403 2 is_stmt 1 view .LVU444
 403:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_NOTFOUND;
 1504              		.loc 1 403 5 is_stmt 0 view .LVU445
 1505 003c 0590     		str	r0, [sp, #20]
 1506 003e 80B9     		cbnz	r0, .L87
 404:./lib/fdt/fdt_overlay.c **** 
 1507              		.loc 1 404 10 view .LVU446
 1508 0040 4FF0FF31 		mov	r1, #-1
 1509 0044 03E0     		b	.L82
 1510              	.LVL174:
 1511              	.L100:
 388:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_INTERNAL;
 1512              		.loc 1 388 3 is_stmt 1 view .LVU447
 388:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_INTERNAL;
 1513              		.loc 1 388 11 is_stmt 0 view .LVU448
 1514 0046 0899     		ldr	r1, [sp, #32]
 388:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_INTERNAL;
 1515              		.loc 1 388 6 view .LVU449
 1516 0048 B1F1FF3F 		cmp	r1, #-1
 1517 004c 03D0     		beq	.L102
 1518              	.LVL175:
 1519              	.L82:
 453:./lib/fdt/fdt_overlay.c **** 
 1520              		.loc 1 453 1 view .LVU450
 1521 004e 0846     		mov	r0, r1
 1522 0050 0BB0     		add	sp, sp, #44
 1523              	.LCFI29:
 1524              		.cfi_remember_state
 1525              		.cfi_def_cfa_offset 36
 1526              		@ sp needed
 1527 0052 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1528              	.LVL176:
 1529              	.L102:
 1530              	.LCFI30:
 1531              		.cfi_restore_state
 389:./lib/fdt/fdt_overlay.c **** 
 1532              		.loc 1 389 11 view .LVU451
 1533 0056 6FF00C01 		mvn	r1, #12
 1534 005a F8E7     		b	.L82
 1535              	.LVL177:
 1536              	.L101:
 396:./lib/fdt/fdt_overlay.c **** 	
 1537              		.loc 1 396 3 is_stmt 1 view .LVU452
 396:./lib/fdt/fdt_overlay.c **** 	
 1538              		.loc 1 396 10 is_stmt 0 view .LVU453
 1539 005c 0799     		ldr	r1, [sp, #28]
 1540 005e F6E7     		b	.L82
 1541              	.LVL178:
 1542              	.L98:
 1543              	.LBB102:
 420:./lib/fdt/fdt_overlay.c **** 
 1544              		.loc 1 420 9 view .LVU454
 1545 0060 4D46     		mov	r5, r9
 1546              	.LVL179:
 1547              	.L87:
 420:./lib/fdt/fdt_overlay.c **** 
ARM GAS  /tmp/ccCHVNBc.s 			page 62


 1548              		.loc 1 420 9 view .LVU455
 1549              	.LBE102:
 406:./lib/fdt/fdt_overlay.c **** 		const char *path, *name, *fixup_end;
 1550              		.loc 1 406 2 is_stmt 1 view .LVU456
 1551              	.LBB103:
 407:./lib/fdt/fdt_overlay.c **** 		const char *fixup_str = value;
 1552              		.loc 1 407 3 view .LVU457
 408:./lib/fdt/fdt_overlay.c **** 		uint32_t path_len, name_len;
 1553              		.loc 1 408 3 view .LVU458
 409:./lib/fdt/fdt_overlay.c **** 		uint32_t fixup_len;
 1554              		.loc 1 409 3 view .LVU459
 410:./lib/fdt/fdt_overlay.c **** 		char *sep, *endptr;
 1555              		.loc 1 410 3 view .LVU460
 411:./lib/fdt/fdt_overlay.c **** 		int poffset, ret;
 1556              		.loc 1 411 3 view .LVU461
 412:./lib/fdt/fdt_overlay.c **** 
 1557              		.loc 1 412 3 view .LVU462
 414:./lib/fdt/fdt_overlay.c **** 		if (!fixup_end)
 1558              		.loc 1 414 3 view .LVU463
 414:./lib/fdt/fdt_overlay.c **** 		if (!fixup_end)
 1559              		.loc 1 414 15 is_stmt 0 view .LVU464
 1560 0062 089C     		ldr	r4, [sp, #32]
 1561 0064 2246     		mov	r2, r4
 1562 0066 0021     		movs	r1, #0
 1563 0068 2846     		mov	r0, r5
 1564 006a FFF7FEFF 		bl	memchr
 1565              	.LVL180:
 415:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1566              		.loc 1 415 3 is_stmt 1 view .LVU465
 415:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1567              		.loc 1 415 6 is_stmt 0 view .LVU466
 1568 006e 0028     		cmp	r0, #0
 1569 0070 44D0     		beq	.L89
 417:./lib/fdt/fdt_overlay.c **** 
 1570              		.loc 1 417 3 is_stmt 1 view .LVU467
 417:./lib/fdt/fdt_overlay.c **** 
 1571              		.loc 1 417 25 is_stmt 0 view .LVU468
 1572 0072 461B     		subs	r6, r0, r5
 1573              	.LVL181:
 419:./lib/fdt/fdt_overlay.c **** 		value += fixup_len + 1;
 1574              		.loc 1 419 3 is_stmt 1 view .LVU469
 419:./lib/fdt/fdt_overlay.c **** 		value += fixup_len + 1;
 1575              		.loc 1 419 7 is_stmt 0 view .LVU470
 1576 0074 A41B     		subs	r4, r4, r6
 1577 0076 013C     		subs	r4, r4, #1
 1578 0078 0894     		str	r4, [sp, #32]
 420:./lib/fdt/fdt_overlay.c **** 
 1579              		.loc 1 420 3 is_stmt 1 view .LVU471
 420:./lib/fdt/fdt_overlay.c **** 
 1580              		.loc 1 420 9 is_stmt 0 view .LVU472
 1581 007a 06F10109 		add	r9, r6, #1
 1582 007e A944     		add	r9, r9, r5
 1583              	.LVL182:
 422:./lib/fdt/fdt_overlay.c **** 		sep = memchr(fixup_str, ':', fixup_len);
 1584              		.loc 1 422 3 is_stmt 1 view .LVU473
 423:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 1585              		.loc 1 423 3 view .LVU474
ARM GAS  /tmp/ccCHVNBc.s 			page 63


 423:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 1586              		.loc 1 423 9 is_stmt 0 view .LVU475
 1587 0080 3246     		mov	r2, r6
 1588 0082 3A21     		movs	r1, #58
 1589 0084 2846     		mov	r0, r5
 1590              	.LVL183:
 423:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 1591              		.loc 1 423 9 view .LVU476
 1592 0086 FFF7FEFF 		bl	memchr
 1593              	.LVL184:
 424:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1594              		.loc 1 424 3 is_stmt 1 view .LVU477
 424:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1595              		.loc 1 424 6 is_stmt 0 view .LVU478
 1596 008a 0446     		mov	r4, r0
 1597 008c 0028     		cmp	r0, #0
 1598 008e 38D0     		beq	.L90
 424:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1599              		.loc 1 424 15 discriminator 1 view .LVU479
 1600 0090 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 424:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1601              		.loc 1 424 12 discriminator 1 view .LVU480
 1602 0092 3A2B     		cmp	r3, #58
 1603 0094 38D1     		bne	.L91
 427:./lib/fdt/fdt_overlay.c **** 		if (path_len == (fixup_len - 1))
 1604              		.loc 1 427 3 is_stmt 1 view .LVU481
 427:./lib/fdt/fdt_overlay.c **** 		if (path_len == (fixup_len - 1))
 1605              		.loc 1 427 18 is_stmt 0 view .LVU482
 1606 0096 A0EB050A 		sub	r10, r0, r5
 1607              	.LVL185:
 428:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1608              		.loc 1 428 3 is_stmt 1 view .LVU483
 428:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1609              		.loc 1 428 30 is_stmt 0 view .LVU484
 1610 009a 731E     		subs	r3, r6, #1
 428:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1611              		.loc 1 428 6 view .LVU485
 1612 009c 5345     		cmp	r3, r10
 1613 009e 36D0     		beq	.L92
 431:./lib/fdt/fdt_overlay.c **** 		name = sep + 1;
 1614              		.loc 1 431 3 is_stmt 1 view .LVU486
 431:./lib/fdt/fdt_overlay.c **** 		name = sep + 1;
 1615              		.loc 1 431 13 is_stmt 0 view .LVU487
 1616 00a0 A6EB0A02 		sub	r2, r6, r10
 1617              	.LVL186:
 432:./lib/fdt/fdt_overlay.c **** 		sep = memchr(name, ':', fixup_len);
 1618              		.loc 1 432 3 is_stmt 1 view .LVU488
 432:./lib/fdt/fdt_overlay.c **** 		sep = memchr(name, ':', fixup_len);
 1619              		.loc 1 432 8 is_stmt 0 view .LVU489
 1620 00a4 0134     		adds	r4, r4, #1
 1621              	.LVL187:
 433:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 1622              		.loc 1 433 3 is_stmt 1 view .LVU490
 433:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 1623              		.loc 1 433 9 is_stmt 0 view .LVU491
 1624 00a6 013A     		subs	r2, r2, #1
 1625              	.LVL188:
ARM GAS  /tmp/ccCHVNBc.s 			page 64


 433:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 1626              		.loc 1 433 9 view .LVU492
 1627 00a8 3A21     		movs	r1, #58
 1628 00aa 2046     		mov	r0, r4
 1629              	.LVL189:
 433:./lib/fdt/fdt_overlay.c **** 		if (!sep || *sep != ':')
 1630              		.loc 1 433 9 view .LVU493
 1631 00ac FFF7FEFF 		bl	memchr
 1632              	.LVL190:
 434:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1633              		.loc 1 434 3 is_stmt 1 view .LVU494
 434:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1634              		.loc 1 434 6 is_stmt 0 view .LVU495
 1635 00b0 0646     		mov	r6, r0
 1636              	.LVL191:
 434:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1637              		.loc 1 434 6 view .LVU496
 1638 00b2 78B3     		cbz	r0, .L93
 434:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1639              		.loc 1 434 15 discriminator 1 view .LVU497
 1640 00b4 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 434:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1641              		.loc 1 434 12 discriminator 1 view .LVU498
 1642 00b6 3A2B     		cmp	r3, #58
 1643 00b8 2FD1     		bne	.L94
 437:./lib/fdt/fdt_overlay.c **** 		if (!name_len)
 1644              		.loc 1 437 3 is_stmt 1 view .LVU499
 1645              	.LVL192:
 438:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1646              		.loc 1 438 3 view .LVU500
 438:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1647              		.loc 1 438 6 is_stmt 0 view .LVU501
 1648 00ba B0EB040B 		subs	fp, r0, r4
 1649              	.LVL193:
 438:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1650              		.loc 1 438 6 view .LVU502
 1651 00be 2FD0     		beq	.L95
 441:./lib/fdt/fdt_overlay.c **** 		if ((*endptr != '\0') || (endptr <= (sep + 1)))
 1652              		.loc 1 441 3 is_stmt 1 view .LVU503
 441:./lib/fdt/fdt_overlay.c **** 		if ((*endptr != '\0') || (endptr <= (sep + 1)))
 1653              		.loc 1 441 13 is_stmt 0 view .LVU504
 1654 00c0 0136     		adds	r6, r6, #1
 1655 00c2 0A22     		movs	r2, #10
 1656 00c4 06A9     		add	r1, sp, #24
 1657 00c6 3046     		mov	r0, r6
 1658              	.LVL194:
 441:./lib/fdt/fdt_overlay.c **** 		if ((*endptr != '\0') || (endptr <= (sep + 1)))
 1659              		.loc 1 441 13 view .LVU505
 1660 00c8 FFF7FEFF 		bl	strtoul
 1661              	.LVL195:
 442:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1662              		.loc 1 442 3 is_stmt 1 view .LVU506
 442:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1663              		.loc 1 442 8 is_stmt 0 view .LVU507
 1664 00cc 069B     		ldr	r3, [sp, #24]
 1665 00ce 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 442:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
ARM GAS  /tmp/ccCHVNBc.s 			page 65


 1666              		.loc 1 442 6 view .LVU508
 1667 00d0 4ABB     		cbnz	r2, .L96
 442:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 1668              		.loc 1 442 25 discriminator 1 view .LVU509
 1669 00d2 9E42     		cmp	r6, r3
 1670 00d4 2AD2     		bcs	.L97
 445:./lib/fdt/fdt_overlay.c **** 						path, path_len, name, name_len,
 1671              		.loc 1 445 3 is_stmt 1 view .LVU510
 445:./lib/fdt/fdt_overlay.c **** 						path, path_len, name, name_len,
 1672              		.loc 1 445 9 is_stmt 0 view .LVU511
 1673 00d6 059B     		ldr	r3, [sp, #20]
 1674 00d8 0393     		str	r3, [sp, #12]
 1675 00da 0290     		str	r0, [sp, #8]
 1676 00dc CDF804B0 		str	fp, [sp, #4]
 1677 00e0 0094     		str	r4, [sp]
 1678 00e2 5346     		mov	r3, r10
 1679 00e4 2A46     		mov	r2, r5
 1680 00e6 4146     		mov	r1, r8
 1681 00e8 3846     		mov	r0, r7
 1682              	.LVL196:
 445:./lib/fdt/fdt_overlay.c **** 						path, path_len, name, name_len,
 1683              		.loc 1 445 9 view .LVU512
 1684 00ea FFF7FEFF 		bl	overlay_fixup_one_phandle
 1685              	.LVL197:
 448:./lib/fdt/fdt_overlay.c **** 			return ret;
 1686              		.loc 1 448 3 is_stmt 1 view .LVU513
 448:./lib/fdt/fdt_overlay.c **** 			return ret;
 1687              		.loc 1 448 6 is_stmt 0 view .LVU514
 1688 00ee 0146     		mov	r1, r0
 1689 00f0 0028     		cmp	r0, #0
 1690 00f2 ACD1     		bne	.L82
 1691              	.LBE103:
 450:./lib/fdt/fdt_overlay.c **** 
 1692              		.loc 1 450 15 is_stmt 1 view .LVU515
 1693 00f4 089B     		ldr	r3, [sp, #32]
 1694 00f6 002B     		cmp	r3, #0
 1695 00f8 B2DC     		bgt	.L98
 1696 00fa A8E7     		b	.L82
 1697              	.LVL198:
 1698              	.L89:
 1699              	.LBB104:
 416:./lib/fdt/fdt_overlay.c **** 		fixup_len = fixup_end - fixup_str;
 1700              		.loc 1 416 11 is_stmt 0 view .LVU516
 1701 00fc 6FF00F01 		mvn	r1, #15
 1702 0100 A5E7     		b	.L82
 1703              	.LVL199:
 1704              	.L90:
 425:./lib/fdt/fdt_overlay.c **** 
 1705              		.loc 1 425 11 view .LVU517
 1706 0102 6FF00F01 		mvn	r1, #15
 1707 0106 A2E7     		b	.L82
 1708              	.L91:
 1709 0108 6FF00F01 		mvn	r1, #15
 1710 010c 9FE7     		b	.L82
 1711              	.LVL200:
 1712              	.L92:
 429:./lib/fdt/fdt_overlay.c **** 
ARM GAS  /tmp/ccCHVNBc.s 			page 66


 1713              		.loc 1 429 11 view .LVU518
 1714 010e 6FF00F01 		mvn	r1, #15
 1715 0112 9CE7     		b	.L82
 1716              	.LVL201:
 1717              	.L93:
 435:./lib/fdt/fdt_overlay.c **** 
 1718              		.loc 1 435 11 view .LVU519
 1719 0114 6FF00F01 		mvn	r1, #15
 1720 0118 99E7     		b	.L82
 1721              	.L94:
 1722 011a 6FF00F01 		mvn	r1, #15
 1723 011e 96E7     		b	.L82
 1724              	.LVL202:
 1725              	.L95:
 439:./lib/fdt/fdt_overlay.c **** 
 1726              		.loc 1 439 11 view .LVU520
 1727 0120 6FF00F01 		mvn	r1, #15
 1728 0124 93E7     		b	.L82
 1729              	.LVL203:
 1730              	.L96:
 443:./lib/fdt/fdt_overlay.c **** 
 1731              		.loc 1 443 11 view .LVU521
 1732 0126 6FF00F01 		mvn	r1, #15
 1733 012a 90E7     		b	.L82
 1734              	.L97:
 1735 012c 6FF00F01 		mvn	r1, #15
 1736 0130 8DE7     		b	.L82
 1737              	.LBE104:
 1738              		.cfi_endproc
 1739              	.LFE83:
 1741              		.section	.rodata.overlay_fixup_phandles.str1.4,"aMS",%progbits,1
 1742              		.align	2
 1743              	.LC4:
 1744 0000 2F5F5F66 		.ascii	"/__fixups__\000"
 1744      69787570 
 1744      735F5F00 
 1745              		.align	2
 1746              	.LC5:
 1747 000c 2F5F5F73 		.ascii	"/__symbols__\000"
 1747      796D626F 
 1747      6C735F5F 
 1747      00
 1748              		.section	.text.overlay_fixup_phandles,"ax",%progbits
 1749              		.align	1
 1750              		.syntax unified
 1751              		.thumb
 1752              		.thumb_func
 1754              	overlay_fixup_phandles:
 1755              	.LVL204:
 1756              	.LFB84:
 473:./lib/fdt/fdt_overlay.c **** 	int fixups_off, symbols_off;
 1757              		.loc 1 473 1 is_stmt 1 view -0
 1758              		.cfi_startproc
 1759              		@ args = 0, pretend = 0, frame = 0
 1760              		@ frame_needed = 0, uses_anonymous_args = 0
 473:./lib/fdt/fdt_overlay.c **** 	int fixups_off, symbols_off;
 1761              		.loc 1 473 1 is_stmt 0 view .LVU523
ARM GAS  /tmp/ccCHVNBc.s 			page 67


 1762 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1763              	.LCFI31:
 1764              		.cfi_def_cfa_offset 24
 1765              		.cfi_offset 4, -24
 1766              		.cfi_offset 5, -20
 1767              		.cfi_offset 6, -16
 1768              		.cfi_offset 7, -12
 1769              		.cfi_offset 8, -8
 1770              		.cfi_offset 14, -4
 1771 0004 0746     		mov	r7, r0
 1772 0006 0E46     		mov	r6, r1
 474:./lib/fdt/fdt_overlay.c **** 	int property;
 1773              		.loc 1 474 2 is_stmt 1 view .LVU524
 475:./lib/fdt/fdt_overlay.c **** 
 1774              		.loc 1 475 2 view .LVU525
 478:./lib/fdt/fdt_overlay.c **** 	if (fixups_off == -FDT_ERR_NOTFOUND)
 1775              		.loc 1 478 2 view .LVU526
 478:./lib/fdt/fdt_overlay.c **** 	if (fixups_off == -FDT_ERR_NOTFOUND)
 1776              		.loc 1 478 15 is_stmt 0 view .LVU527
 1777 0008 1849     		ldr	r1, .L112
 1778              	.LVL205:
 478:./lib/fdt/fdt_overlay.c **** 	if (fixups_off == -FDT_ERR_NOTFOUND)
 1779              		.loc 1 478 15 view .LVU528
 1780 000a 3046     		mov	r0, r6
 1781              	.LVL206:
 478:./lib/fdt/fdt_overlay.c **** 	if (fixups_off == -FDT_ERR_NOTFOUND)
 1782              		.loc 1 478 15 view .LVU529
 1783 000c FFF7FEFF 		bl	fdt_path_offset
 1784              	.LVL207:
 479:./lib/fdt/fdt_overlay.c **** 		return 0; /* nothing to do */
 1785              		.loc 1 479 2 is_stmt 1 view .LVU530
 479:./lib/fdt/fdt_overlay.c **** 		return 0; /* nothing to do */
 1786              		.loc 1 479 5 is_stmt 0 view .LVU531
 1787 0010 B0F1FF3F 		cmp	r0, #-1
 1788 0014 23D0     		beq	.L107
 1789 0016 0546     		mov	r5, r0
 481:./lib/fdt/fdt_overlay.c **** 		return fixups_off;
 1790              		.loc 1 481 2 is_stmt 1 view .LVU532
 481:./lib/fdt/fdt_overlay.c **** 		return fixups_off;
 1791              		.loc 1 481 5 is_stmt 0 view .LVU533
 1792 0018 0028     		cmp	r0, #0
 1793 001a 21DB     		blt	.L103
 485:./lib/fdt/fdt_overlay.c **** 	if ((symbols_off < 0 && (symbols_off != -FDT_ERR_NOTFOUND)))
 1794              		.loc 1 485 2 is_stmt 1 view .LVU534
 485:./lib/fdt/fdt_overlay.c **** 	if ((symbols_off < 0 && (symbols_off != -FDT_ERR_NOTFOUND)))
 1795              		.loc 1 485 16 is_stmt 0 view .LVU535
 1796 001c 1449     		ldr	r1, .L112+4
 1797 001e 3846     		mov	r0, r7
 1798              	.LVL208:
 485:./lib/fdt/fdt_overlay.c **** 	if ((symbols_off < 0 && (symbols_off != -FDT_ERR_NOTFOUND)))
 1799              		.loc 1 485 16 view .LVU536
 1800 0020 FFF7FEFF 		bl	fdt_path_offset
 1801              	.LVL209:
 1802 0024 8046     		mov	r8, r0
 1803              	.LVL210:
 486:./lib/fdt/fdt_overlay.c **** 		return symbols_off;
 1804              		.loc 1 486 2 is_stmt 1 view .LVU537
ARM GAS  /tmp/ccCHVNBc.s 			page 68


 486:./lib/fdt/fdt_overlay.c **** 		return symbols_off;
 1805              		.loc 1 486 5 is_stmt 0 view .LVU538
 1806 0026 B0F1FF3F 		cmp	r0, #-1
 1807 002a 1CDB     		blt	.L108
 489:./lib/fdt/fdt_overlay.c **** 		int ret;
 1808              		.loc 1 489 2 is_stmt 1 view .LVU539
 1809 002c 2946     		mov	r1, r5
 1810 002e 3046     		mov	r0, r6
 1811              	.LVL211:
 489:./lib/fdt/fdt_overlay.c **** 		int ret;
 1812              		.loc 1 489 2 is_stmt 0 view .LVU540
 1813 0030 FFF7FEFF 		bl	fdt_first_property_offset
 1814              	.LVL212:
 1815 0034 0446     		mov	r4, r0
 1816              	.LVL213:
 489:./lib/fdt/fdt_overlay.c **** 		int ret;
 1817              		.loc 1 489 2 view .LVU541
 1818 0036 04E0     		b	.L105
 1819              	.LVL214:
 1820              	.L111:
 489:./lib/fdt/fdt_overlay.c **** 		int ret;
 1821              		.loc 1 489 2 is_stmt 1 discriminator 2 view .LVU542
 1822 0038 2146     		mov	r1, r4
 1823 003a 3046     		mov	r0, r6
 1824              	.LVL215:
 489:./lib/fdt/fdt_overlay.c **** 		int ret;
 1825              		.loc 1 489 2 is_stmt 0 discriminator 2 view .LVU543
 1826 003c FFF7FEFF 		bl	fdt_next_property_offset
 1827              	.LVL216:
 1828 0040 0446     		mov	r4, r0
 1829              	.LVL217:
 1830              	.L105:
 489:./lib/fdt/fdt_overlay.c **** 		int ret;
 1831              		.loc 1 489 2 is_stmt 1 discriminator 1 view .LVU544
 1832 0042 002C     		cmp	r4, #0
 1833 0044 09DB     		blt	.L110
 1834              	.LBB105:
 490:./lib/fdt/fdt_overlay.c **** 
 1835              		.loc 1 490 3 view .LVU545
 492:./lib/fdt/fdt_overlay.c **** 		if (ret)
 1836              		.loc 1 492 3 view .LVU546
 492:./lib/fdt/fdt_overlay.c **** 		if (ret)
 1837              		.loc 1 492 9 is_stmt 0 view .LVU547
 1838 0046 2346     		mov	r3, r4
 1839 0048 4246     		mov	r2, r8
 1840 004a 3146     		mov	r1, r6
 1841 004c 3846     		mov	r0, r7
 1842              	.LVL218:
 492:./lib/fdt/fdt_overlay.c **** 		if (ret)
 1843              		.loc 1 492 9 view .LVU548
 1844 004e FFF7FEFF 		bl	overlay_fixup_phandle
 1845              	.LVL219:
 493:./lib/fdt/fdt_overlay.c **** 			return ret;
 1846              		.loc 1 493 3 is_stmt 1 view .LVU549
 493:./lib/fdt/fdt_overlay.c **** 			return ret;
 1847              		.loc 1 493 6 is_stmt 0 view .LVU550
 1848 0052 0546     		mov	r5, r0
ARM GAS  /tmp/ccCHVNBc.s 			page 69


 1849 0054 0028     		cmp	r0, #0
 1850 0056 EFD0     		beq	.L111
 1851 0058 02E0     		b	.L103
 1852              	.LVL220:
 1853              	.L110:
 493:./lib/fdt/fdt_overlay.c **** 			return ret;
 1854              		.loc 1 493 6 view .LVU551
 1855              	.LBE105:
 497:./lib/fdt/fdt_overlay.c **** }
 1856              		.loc 1 497 9 view .LVU552
 1857 005a 0025     		movs	r5, #0
 1858 005c 00E0     		b	.L103
 1859              	.LVL221:
 1860              	.L107:
 480:./lib/fdt/fdt_overlay.c **** 	if (fixups_off < 0)
 1861              		.loc 1 480 10 view .LVU553
 1862 005e 0025     		movs	r5, #0
 1863              	.LVL222:
 1864              	.L103:
 498:./lib/fdt/fdt_overlay.c **** 
 1865              		.loc 1 498 1 view .LVU554
 1866 0060 2846     		mov	r0, r5
 1867 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1868              	.LVL223:
 1869              	.L108:
 487:./lib/fdt/fdt_overlay.c **** 
 1870              		.loc 1 487 10 view .LVU555
 1871 0066 0546     		mov	r5, r0
 1872              	.LVL224:
 487:./lib/fdt/fdt_overlay.c **** 
 1873              		.loc 1 487 10 view .LVU556
 1874 0068 FAE7     		b	.L103
 1875              	.L113:
 1876 006a 00BF     		.align	2
 1877              	.L112:
 1878 006c 00000000 		.word	.LC4
 1879 0070 0C000000 		.word	.LC5
 1880              		.cfi_endproc
 1881              	.LFE84:
 1883              		.section	.text.fdt_setprop_inplace_u32,"ax",%progbits
 1884              		.align	1
 1885              		.syntax unified
 1886              		.thumb
 1887              		.thumb_func
 1889              	fdt_setprop_inplace_u32:
 1890              	.LVL225:
 1891              	.LFB53:
 861:./include/linux/libfdt.h **** }
 862:./include/linux/libfdt.h **** 
 863:./include/linux/libfdt.h **** /**
 864:./include/linux/libfdt.h ****  * fdt_get_phandle - retrieve the phandle of a given node
 865:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 866:./include/linux/libfdt.h ****  * @nodeoffset: structure block offset of the node
 867:./include/linux/libfdt.h ****  *
 868:./include/linux/libfdt.h ****  * fdt_get_phandle() retrieves the phandle of the device tree node at
 869:./include/linux/libfdt.h ****  * structure block offset nodeoffset.
 870:./include/linux/libfdt.h ****  *
ARM GAS  /tmp/ccCHVNBc.s 			page 70


 871:./include/linux/libfdt.h ****  * returns:
 872:./include/linux/libfdt.h ****  *	the phandle of the node at nodeoffset, on success (!= 0, != -1)
 873:./include/linux/libfdt.h ****  *	0, if the node has no phandle, or another error occurs
 874:./include/linux/libfdt.h ****  */
 875:./include/linux/libfdt.h **** uint32_t fdt_get_phandle(const void *fdt, int nodeoffset);
 876:./include/linux/libfdt.h **** 
 877:./include/linux/libfdt.h **** /**
 878:./include/linux/libfdt.h ****  * fdt_get_alias_namelen - get alias based on substring
 879:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 880:./include/linux/libfdt.h ****  * @name: name of the alias to look up
 881:./include/linux/libfdt.h ****  * @namelen: number of characters of name to consider
 882:./include/linux/libfdt.h ****  *
 883:./include/linux/libfdt.h ****  * Identical to fdt_get_alias(), but only examine the first @namelen
 884:./include/linux/libfdt.h ****  * characters of @name for matching the alias name.
 885:./include/linux/libfdt.h ****  *
 886:./include/linux/libfdt.h ****  * Return: a pointer to the expansion of the alias named @name, if it exists,
 887:./include/linux/libfdt.h ****  *	   NULL otherwise
 888:./include/linux/libfdt.h ****  */
 889:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
 890:./include/linux/libfdt.h **** const char *fdt_get_alias_namelen(const void *fdt,
 891:./include/linux/libfdt.h **** 				  const char *name, int namelen);
 892:./include/linux/libfdt.h **** #endif
 893:./include/linux/libfdt.h **** 
 894:./include/linux/libfdt.h **** /**
 895:./include/linux/libfdt.h ****  * fdt_get_alias - retrieve the path referenced by a given alias
 896:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 897:./include/linux/libfdt.h ****  * @name: name of the alias to look up
 898:./include/linux/libfdt.h ****  *
 899:./include/linux/libfdt.h ****  * fdt_get_alias() retrieves the value of a given alias.  That is, the
 900:./include/linux/libfdt.h ****  * value of the property named @name in the node /aliases.
 901:./include/linux/libfdt.h ****  *
 902:./include/linux/libfdt.h ****  * returns:
 903:./include/linux/libfdt.h ****  *	a pointer to the expansion of the alias named 'name', if it exists
 904:./include/linux/libfdt.h ****  *	NULL, if the given alias or the /aliases node does not exist
 905:./include/linux/libfdt.h ****  */
 906:./include/linux/libfdt.h **** const char *fdt_get_alias(const void *fdt, const char *name);
 907:./include/linux/libfdt.h **** 
 908:./include/linux/libfdt.h **** /**
 909:./include/linux/libfdt.h ****  * fdt_get_symbol_namelen - get symbol based on substring
 910:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 911:./include/linux/libfdt.h ****  * @name: name of the symbol to look up
 912:./include/linux/libfdt.h ****  * @namelen: number of characters of name to consider
 913:./include/linux/libfdt.h ****  *
 914:./include/linux/libfdt.h ****  * Identical to fdt_get_symbol(), but only examine the first @namelen
 915:./include/linux/libfdt.h ****  * characters of @name for matching the symbol name.
 916:./include/linux/libfdt.h ****  *
 917:./include/linux/libfdt.h ****  * Return: a pointer to the expansion of the symbol named @name, if it exists,
 918:./include/linux/libfdt.h ****  *	   NULL otherwise
 919:./include/linux/libfdt.h ****  */
 920:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
 921:./include/linux/libfdt.h **** const char *fdt_get_symbol_namelen(const void *fdt,
 922:./include/linux/libfdt.h **** 				   const char *name, int namelen);
 923:./include/linux/libfdt.h **** #endif
 924:./include/linux/libfdt.h **** 
 925:./include/linux/libfdt.h **** /**
 926:./include/linux/libfdt.h ****  * fdt_get_symbol - retrieve the path referenced by a given symbol
 927:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
ARM GAS  /tmp/ccCHVNBc.s 			page 71


 928:./include/linux/libfdt.h ****  * @name: name of the symbol to look up
 929:./include/linux/libfdt.h ****  *
 930:./include/linux/libfdt.h ****  * fdt_get_symbol() retrieves the value of a given symbol.  That is,
 931:./include/linux/libfdt.h ****  * the value of the property named @name in the node
 932:./include/linux/libfdt.h ****  * /__symbols__. Such a node exists only for a device tree blob that
 933:./include/linux/libfdt.h ****  * has been compiled with the -@ dtc option. Each property corresponds
 934:./include/linux/libfdt.h ****  * to a label appearing in the device tree source, with the name of
 935:./include/linux/libfdt.h ****  * the property being the label and the value being the full path of
 936:./include/linux/libfdt.h ****  * the node it is attached to.
 937:./include/linux/libfdt.h ****  *
 938:./include/linux/libfdt.h ****  * returns:
 939:./include/linux/libfdt.h ****  *	a pointer to the expansion of the symbol named 'name', if it exists
 940:./include/linux/libfdt.h ****  *	NULL, if the given symbol or the /__symbols__ node does not exist
 941:./include/linux/libfdt.h ****  */
 942:./include/linux/libfdt.h **** const char *fdt_get_symbol(const void *fdt, const char *name);
 943:./include/linux/libfdt.h **** 
 944:./include/linux/libfdt.h **** /**
 945:./include/linux/libfdt.h ****  * fdt_get_path - determine the full path of a node
 946:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 947:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose path to find
 948:./include/linux/libfdt.h ****  * @buf: character buffer to contain the returned path (will be overwritten)
 949:./include/linux/libfdt.h ****  * @buflen: size of the character buffer at buf
 950:./include/linux/libfdt.h ****  *
 951:./include/linux/libfdt.h ****  * fdt_get_path() computes the full path of the node at offset
 952:./include/linux/libfdt.h ****  * nodeoffset, and records that path in the buffer at buf.
 953:./include/linux/libfdt.h ****  *
 954:./include/linux/libfdt.h ****  * NOTE: This function is expensive, as it must scan the device tree
 955:./include/linux/libfdt.h ****  * structure from the start to nodeoffset.
 956:./include/linux/libfdt.h ****  *
 957:./include/linux/libfdt.h ****  * returns:
 958:./include/linux/libfdt.h ****  *	0, on success
 959:./include/linux/libfdt.h ****  *		buf contains the absolute path of the node at
 960:./include/linux/libfdt.h ****  *		nodeoffset, as a NUL-terminated string.
 961:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag
 962:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, the path of the given node is longer than (bufsize-1)
 963:./include/linux/libfdt.h ****  *		characters and will not fit in the given buffer.
 964:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
 965:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
 966:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
 967:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
 968:./include/linux/libfdt.h ****  */
 969:./include/linux/libfdt.h **** int fdt_get_path(const void *fdt, int nodeoffset, char *buf, int buflen);
 970:./include/linux/libfdt.h **** 
 971:./include/linux/libfdt.h **** /**
 972:./include/linux/libfdt.h ****  * fdt_supernode_atdepth_offset - find a specific ancestor of a node
 973:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
 974:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose parent to find
 975:./include/linux/libfdt.h ****  * @supernodedepth: depth of the ancestor to find
 976:./include/linux/libfdt.h ****  * @nodedepth: pointer to an integer variable (will be overwritten) or NULL
 977:./include/linux/libfdt.h ****  *
 978:./include/linux/libfdt.h ****  * fdt_supernode_atdepth_offset() finds an ancestor of the given node
 979:./include/linux/libfdt.h ****  * at a specific depth from the root (where the root itself has depth
 980:./include/linux/libfdt.h ****  * 0, its immediate subnodes depth 1 and so forth).  So
 981:./include/linux/libfdt.h ****  *	fdt_supernode_atdepth_offset(fdt, nodeoffset, 0, NULL);
 982:./include/linux/libfdt.h ****  * will always return 0, the offset of the root node.  If the node at
 983:./include/linux/libfdt.h ****  * nodeoffset has depth D, then:
 984:./include/linux/libfdt.h ****  *	fdt_supernode_atdepth_offset(fdt, nodeoffset, D, NULL);
ARM GAS  /tmp/ccCHVNBc.s 			page 72


 985:./include/linux/libfdt.h ****  * will return nodeoffset itself.
 986:./include/linux/libfdt.h ****  *
 987:./include/linux/libfdt.h ****  * NOTE: This function is expensive, as it must scan the device tree
 988:./include/linux/libfdt.h ****  * structure from the start to nodeoffset.
 989:./include/linux/libfdt.h ****  *
 990:./include/linux/libfdt.h ****  * returns:
 991:./include/linux/libfdt.h ****  *	structure block offset of the node at node offset's ancestor
 992:./include/linux/libfdt.h ****  *		of depth supernodedepth (>=0), on success
 993:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag
 994:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, supernodedepth was greater than the depth of
 995:./include/linux/libfdt.h ****  *		nodeoffset
 996:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
 997:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
 998:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
 999:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
1000:./include/linux/libfdt.h ****  */
1001:./include/linux/libfdt.h **** int fdt_supernode_atdepth_offset(const void *fdt, int nodeoffset,
1002:./include/linux/libfdt.h **** 				 int supernodedepth, int *nodedepth);
1003:./include/linux/libfdt.h **** 
1004:./include/linux/libfdt.h **** /**
1005:./include/linux/libfdt.h ****  * fdt_node_depth - find the depth of a given node
1006:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1007:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose parent to find
1008:./include/linux/libfdt.h ****  *
1009:./include/linux/libfdt.h ****  * fdt_node_depth() finds the depth of a given node.  The root node
1010:./include/linux/libfdt.h ****  * has depth 0, its immediate subnodes depth 1 and so forth.
1011:./include/linux/libfdt.h ****  *
1012:./include/linux/libfdt.h ****  * NOTE: This function is expensive, as it must scan the device tree
1013:./include/linux/libfdt.h ****  * structure from the start to nodeoffset.
1014:./include/linux/libfdt.h ****  *
1015:./include/linux/libfdt.h ****  * returns:
1016:./include/linux/libfdt.h ****  *	depth of the node at nodeoffset (>=0), on success
1017:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag
1018:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1019:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1020:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1021:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
1022:./include/linux/libfdt.h ****  */
1023:./include/linux/libfdt.h **** int fdt_node_depth(const void *fdt, int nodeoffset);
1024:./include/linux/libfdt.h **** 
1025:./include/linux/libfdt.h **** /**
1026:./include/linux/libfdt.h ****  * fdt_parent_offset - find the parent of a given node
1027:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1028:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose parent to find
1029:./include/linux/libfdt.h ****  *
1030:./include/linux/libfdt.h ****  * fdt_parent_offset() locates the parent node of a given node (that
1031:./include/linux/libfdt.h ****  * is, it finds the offset of the node which contains the node at
1032:./include/linux/libfdt.h ****  * nodeoffset as a subnode).
1033:./include/linux/libfdt.h ****  *
1034:./include/linux/libfdt.h ****  * NOTE: This function is expensive, as it must scan the device tree
1035:./include/linux/libfdt.h ****  * structure from the start to nodeoffset, *twice*.
1036:./include/linux/libfdt.h ****  *
1037:./include/linux/libfdt.h ****  * returns:
1038:./include/linux/libfdt.h ****  *	structure block offset of the parent of the node at nodeoffset
1039:./include/linux/libfdt.h ****  *		(>=0), on success
1040:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag
1041:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
ARM GAS  /tmp/ccCHVNBc.s 			page 73


1042:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1043:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1044:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
1045:./include/linux/libfdt.h ****  */
1046:./include/linux/libfdt.h **** int fdt_parent_offset(const void *fdt, int nodeoffset);
1047:./include/linux/libfdt.h **** 
1048:./include/linux/libfdt.h **** /**
1049:./include/linux/libfdt.h ****  * fdt_node_offset_by_prop_value - find nodes with a given property value
1050:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1051:./include/linux/libfdt.h ****  * @startoffset: only find nodes after this offset
1052:./include/linux/libfdt.h ****  * @propname: property name to check
1053:./include/linux/libfdt.h ****  * @propval: property value to search for
1054:./include/linux/libfdt.h ****  * @proplen: length of the value in propval
1055:./include/linux/libfdt.h ****  *
1056:./include/linux/libfdt.h ****  * fdt_node_offset_by_prop_value() returns the offset of the first
1057:./include/linux/libfdt.h ****  * node after startoffset, which has a property named propname whose
1058:./include/linux/libfdt.h ****  * value is of length proplen and has value equal to propval; or if
1059:./include/linux/libfdt.h ****  * startoffset is -1, the very first such node in the tree.
1060:./include/linux/libfdt.h ****  *
1061:./include/linux/libfdt.h ****  * To iterate through all nodes matching the criterion, the following
1062:./include/linux/libfdt.h ****  * idiom can be used:
1063:./include/linux/libfdt.h ****  *	offset = fdt_node_offset_by_prop_value(fdt, -1, propname,
1064:./include/linux/libfdt.h ****  *					       propval, proplen);
1065:./include/linux/libfdt.h ****  *	while (offset != -FDT_ERR_NOTFOUND) {
1066:./include/linux/libfdt.h ****  *		// other code here
1067:./include/linux/libfdt.h ****  *		offset = fdt_node_offset_by_prop_value(fdt, offset, propname,
1068:./include/linux/libfdt.h ****  *						       propval, proplen);
1069:./include/linux/libfdt.h ****  *	}
1070:./include/linux/libfdt.h ****  *
1071:./include/linux/libfdt.h ****  * Note the -1 in the first call to the function, if 0 is used here
1072:./include/linux/libfdt.h ****  * instead, the function will never locate the root node, even if it
1073:./include/linux/libfdt.h ****  * matches the criterion.
1074:./include/linux/libfdt.h ****  *
1075:./include/linux/libfdt.h ****  * returns:
1076:./include/linux/libfdt.h ****  *	structure block offset of the located node (>= 0, >startoffset),
1077:./include/linux/libfdt.h ****  *		 on success
1078:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, no node matching the criterion exists in the
1079:./include/linux/libfdt.h ****  *		tree after startoffset
1080:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag
1081:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1082:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1083:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1084:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
1085:./include/linux/libfdt.h ****  */
1086:./include/linux/libfdt.h **** int fdt_node_offset_by_prop_value(const void *fdt, int startoffset,
1087:./include/linux/libfdt.h **** 				  const char *propname,
1088:./include/linux/libfdt.h **** 				  const void *propval, int proplen);
1089:./include/linux/libfdt.h **** 
1090:./include/linux/libfdt.h **** /**
1091:./include/linux/libfdt.h ****  * fdt_node_offset_by_phandle - find the node with a given phandle
1092:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1093:./include/linux/libfdt.h ****  * @phandle: phandle value
1094:./include/linux/libfdt.h ****  *
1095:./include/linux/libfdt.h ****  * fdt_node_offset_by_phandle() returns the offset of the node
1096:./include/linux/libfdt.h ****  * which has the given phandle value.  If there is more than one node
1097:./include/linux/libfdt.h ****  * in the tree with the given phandle (an invalid tree), results are
1098:./include/linux/libfdt.h ****  * undefined.
ARM GAS  /tmp/ccCHVNBc.s 			page 74


1099:./include/linux/libfdt.h ****  *
1100:./include/linux/libfdt.h ****  * returns:
1101:./include/linux/libfdt.h ****  *	structure block offset of the located node (>= 0), on success
1102:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, no node with that phandle exists
1103:./include/linux/libfdt.h ****  *	-FDT_ERR_BADPHANDLE, given phandle value was invalid (0 or -1)
1104:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1105:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1106:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1107:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
1108:./include/linux/libfdt.h ****  */
1109:./include/linux/libfdt.h **** int fdt_node_offset_by_phandle(const void *fdt, uint32_t phandle);
1110:./include/linux/libfdt.h **** 
1111:./include/linux/libfdt.h **** /**
1112:./include/linux/libfdt.h ****  * fdt_node_check_compatible - check a node's compatible property
1113:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1114:./include/linux/libfdt.h ****  * @nodeoffset: offset of a tree node
1115:./include/linux/libfdt.h ****  * @compatible: string to match against
1116:./include/linux/libfdt.h ****  *
1117:./include/linux/libfdt.h ****  * fdt_node_check_compatible() returns 0 if the given node contains a
1118:./include/linux/libfdt.h ****  * @compatible property with the given string as one of its elements,
1119:./include/linux/libfdt.h ****  * it returns non-zero otherwise, or on error.
1120:./include/linux/libfdt.h ****  *
1121:./include/linux/libfdt.h ****  * returns:
1122:./include/linux/libfdt.h ****  *	0, if the node has a 'compatible' property listing the given string
1123:./include/linux/libfdt.h ****  *	1, if the node has a 'compatible' property, but it does not list
1124:./include/linux/libfdt.h ****  *		the given string
1125:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, if the given node has no 'compatible' property
1126:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, if nodeoffset does not refer to a BEGIN_NODE tag
1127:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1128:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1129:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1130:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
1131:./include/linux/libfdt.h ****  */
1132:./include/linux/libfdt.h **** int fdt_node_check_compatible(const void *fdt, int nodeoffset,
1133:./include/linux/libfdt.h **** 			      const char *compatible);
1134:./include/linux/libfdt.h **** 
1135:./include/linux/libfdt.h **** /**
1136:./include/linux/libfdt.h ****  * fdt_node_offset_by_compatible - find nodes with a given 'compatible' value
1137:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1138:./include/linux/libfdt.h ****  * @startoffset: only find nodes after this offset
1139:./include/linux/libfdt.h ****  * @compatible: 'compatible' string to match against
1140:./include/linux/libfdt.h ****  *
1141:./include/linux/libfdt.h ****  * fdt_node_offset_by_compatible() returns the offset of the first
1142:./include/linux/libfdt.h ****  * node after startoffset, which has a 'compatible' property which
1143:./include/linux/libfdt.h ****  * lists the given compatible string; or if startoffset is -1, the
1144:./include/linux/libfdt.h ****  * very first such node in the tree.
1145:./include/linux/libfdt.h ****  *
1146:./include/linux/libfdt.h ****  * To iterate through all nodes matching the criterion, the following
1147:./include/linux/libfdt.h ****  * idiom can be used:
1148:./include/linux/libfdt.h ****  *	offset = fdt_node_offset_by_compatible(fdt, -1, compatible);
1149:./include/linux/libfdt.h ****  *	while (offset != -FDT_ERR_NOTFOUND) {
1150:./include/linux/libfdt.h ****  *		// other code here
1151:./include/linux/libfdt.h ****  *		offset = fdt_node_offset_by_compatible(fdt, offset, compatible);
1152:./include/linux/libfdt.h ****  *	}
1153:./include/linux/libfdt.h ****  *
1154:./include/linux/libfdt.h ****  * Note the -1 in the first call to the function, if 0 is used here
1155:./include/linux/libfdt.h ****  * instead, the function will never locate the root node, even if it
ARM GAS  /tmp/ccCHVNBc.s 			page 75


1156:./include/linux/libfdt.h ****  * matches the criterion.
1157:./include/linux/libfdt.h ****  *
1158:./include/linux/libfdt.h ****  * returns:
1159:./include/linux/libfdt.h ****  *	structure block offset of the located node (>= 0, >startoffset),
1160:./include/linux/libfdt.h ****  *		 on success
1161:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, no node matching the criterion exists in the
1162:./include/linux/libfdt.h ****  *		tree after startoffset
1163:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset does not refer to a BEGIN_NODE tag
1164:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1165:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1166:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1167:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE, standard meanings
1168:./include/linux/libfdt.h ****  */
1169:./include/linux/libfdt.h **** int fdt_node_offset_by_compatible(const void *fdt, int startoffset,
1170:./include/linux/libfdt.h **** 				  const char *compatible);
1171:./include/linux/libfdt.h **** 
1172:./include/linux/libfdt.h **** /**
1173:./include/linux/libfdt.h ****  * fdt_stringlist_contains - check a string list property for a string
1174:./include/linux/libfdt.h ****  * @strlist: Property containing a list of strings to check
1175:./include/linux/libfdt.h ****  * @listlen: Length of property
1176:./include/linux/libfdt.h ****  * @str: String to search for
1177:./include/linux/libfdt.h ****  *
1178:./include/linux/libfdt.h ****  * This is a utility function provided for convenience. The list contains
1179:./include/linux/libfdt.h ****  * one or more strings, each terminated by \0, as is found in a device tree
1180:./include/linux/libfdt.h ****  * "compatible" property.
1181:./include/linux/libfdt.h ****  *
1182:./include/linux/libfdt.h ****  * Return: 1 if the string is found in the list, 0 not found, or invalid list
1183:./include/linux/libfdt.h ****  */
1184:./include/linux/libfdt.h **** int fdt_stringlist_contains(const char *strlist, int listlen, const char *str);
1185:./include/linux/libfdt.h **** 
1186:./include/linux/libfdt.h **** /**
1187:./include/linux/libfdt.h ****  * fdt_stringlist_count - count the number of strings in a string list
1188:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1189:./include/linux/libfdt.h ****  * @nodeoffset: offset of a tree node
1190:./include/linux/libfdt.h ****  * @property: name of the property containing the string list
1191:./include/linux/libfdt.h ****  *
1192:./include/linux/libfdt.h ****  * Return:
1193:./include/linux/libfdt.h ****  *   the number of strings in the given property
1194:./include/linux/libfdt.h ****  *   -FDT_ERR_BADVALUE if the property value is not NUL-terminated
1195:./include/linux/libfdt.h ****  *   -FDT_ERR_NOTFOUND if the property does not exist
1196:./include/linux/libfdt.h ****  */
1197:./include/linux/libfdt.h **** int fdt_stringlist_count(const void *fdt, int nodeoffset, const char *property);
1198:./include/linux/libfdt.h **** 
1199:./include/linux/libfdt.h **** /**
1200:./include/linux/libfdt.h ****  * fdt_stringlist_search - find a string in a string list and return its index
1201:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1202:./include/linux/libfdt.h ****  * @nodeoffset: offset of a tree node
1203:./include/linux/libfdt.h ****  * @property: name of the property containing the string list
1204:./include/linux/libfdt.h ****  * @string: string to look up in the string list
1205:./include/linux/libfdt.h ****  *
1206:./include/linux/libfdt.h ****  * Note that it is possible for this function to succeed on property values
1207:./include/linux/libfdt.h ****  * that are not NUL-terminated. That's because the function will stop after
1208:./include/linux/libfdt.h ****  * finding the first occurrence of @string. This can for example happen with
1209:./include/linux/libfdt.h ****  * small-valued cell properties, such as #address-cells, when searching for
1210:./include/linux/libfdt.h ****  * the empty string.
1211:./include/linux/libfdt.h ****  *
1212:./include/linux/libfdt.h ****  * return:
ARM GAS  /tmp/ccCHVNBc.s 			page 76


1213:./include/linux/libfdt.h ****  *   the index of the string in the list of strings
1214:./include/linux/libfdt.h ****  *   -FDT_ERR_BADVALUE if the property value is not NUL-terminated
1215:./include/linux/libfdt.h ****  *   -FDT_ERR_NOTFOUND if the property does not exist or does not contain
1216:./include/linux/libfdt.h ****  *                     the given string
1217:./include/linux/libfdt.h ****  */
1218:./include/linux/libfdt.h **** int fdt_stringlist_search(const void *fdt, int nodeoffset, const char *property,
1219:./include/linux/libfdt.h **** 			  const char *string);
1220:./include/linux/libfdt.h **** 
1221:./include/linux/libfdt.h **** /**
1222:./include/linux/libfdt.h ****  * fdt_stringlist_get() - obtain the string at a given index in a string list
1223:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1224:./include/linux/libfdt.h ****  * @nodeoffset: offset of a tree node
1225:./include/linux/libfdt.h ****  * @property: name of the property containing the string list
1226:./include/linux/libfdt.h ****  * @index: index of the string to return
1227:./include/linux/libfdt.h ****  * @lenp: return location for the string length or an error code on failure
1228:./include/linux/libfdt.h ****  *
1229:./include/linux/libfdt.h ****  * Note that this will successfully extract strings from properties with
1230:./include/linux/libfdt.h ****  * non-NUL-terminated values. For example on small-valued cell properties
1231:./include/linux/libfdt.h ****  * this function will return the empty string.
1232:./include/linux/libfdt.h ****  *
1233:./include/linux/libfdt.h ****  * If non-NULL, the length of the string (on success) or a negative error-code
1234:./include/linux/libfdt.h ****  * (on failure) will be stored in the integer pointer to by lenp.
1235:./include/linux/libfdt.h ****  *
1236:./include/linux/libfdt.h ****  * Return:
1237:./include/linux/libfdt.h ****  *   A pointer to the string at the given index in the string list or NULL on
1238:./include/linux/libfdt.h ****  *   failure. On success the length of the string will be stored in the memory
1239:./include/linux/libfdt.h ****  *   location pointed to by the lenp parameter, if non-NULL. On failure one of
1240:./include/linux/libfdt.h ****  *   the following negative error codes will be returned in the lenp parameter
1241:./include/linux/libfdt.h ****  *   (if non-NULL):
1242:./include/linux/libfdt.h ****  *     -FDT_ERR_BADVALUE if the property value is not NUL-terminated
1243:./include/linux/libfdt.h ****  *     -FDT_ERR_NOTFOUND if the property does not exist
1244:./include/linux/libfdt.h ****  */
1245:./include/linux/libfdt.h **** const char *fdt_stringlist_get(const void *fdt, int nodeoffset,
1246:./include/linux/libfdt.h **** 			       const char *property, int index,
1247:./include/linux/libfdt.h **** 			       int *lenp);
1248:./include/linux/libfdt.h **** 
1249:./include/linux/libfdt.h **** /**********************************************************************/
1250:./include/linux/libfdt.h **** /* Read-only functions (addressing related)                           */
1251:./include/linux/libfdt.h **** /**********************************************************************/
1252:./include/linux/libfdt.h **** 
1253:./include/linux/libfdt.h **** /**
1254:./include/linux/libfdt.h ****  * FDT_MAX_NCELLS - maximum value for #address-cells and #size-cells
1255:./include/linux/libfdt.h ****  *
1256:./include/linux/libfdt.h ****  * This is the maximum value for #address-cells, #size-cells and
1257:./include/linux/libfdt.h ****  * similar properties that will be processed by libfdt.  IEE1275
1258:./include/linux/libfdt.h ****  * requires that OF implementations handle values up to 4.
1259:./include/linux/libfdt.h ****  * Implementations may support larger values, but in practice higher
1260:./include/linux/libfdt.h ****  * values aren't used.
1261:./include/linux/libfdt.h ****  */
1262:./include/linux/libfdt.h **** #define FDT_MAX_NCELLS		4
1263:./include/linux/libfdt.h **** 
1264:./include/linux/libfdt.h **** /**
1265:./include/linux/libfdt.h ****  * fdt_address_cells - retrieve address size for a bus represented in the tree
1266:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1267:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node to find the address size for
1268:./include/linux/libfdt.h ****  *
1269:./include/linux/libfdt.h ****  * When the node has a valid #address-cells property, returns its value.
ARM GAS  /tmp/ccCHVNBc.s 			page 77


1270:./include/linux/libfdt.h ****  *
1271:./include/linux/libfdt.h ****  * returns:
1272:./include/linux/libfdt.h ****  *	0 <= n < FDT_MAX_NCELLS, on success
1273:./include/linux/libfdt.h ****  *	2, if the node has no #address-cells property
1274:./include/linux/libfdt.h ****  *	-FDT_ERR_BADNCELLS, if the node has a badly formatted or invalid
1275:./include/linux/libfdt.h ****  *		#address-cells property
1276:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1277:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1278:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1279:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1280:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1281:./include/linux/libfdt.h ****  */
1282:./include/linux/libfdt.h **** int fdt_address_cells(const void *fdt, int nodeoffset);
1283:./include/linux/libfdt.h **** 
1284:./include/linux/libfdt.h **** /**
1285:./include/linux/libfdt.h ****  * fdt_size_cells - retrieve address range size for a bus represented in the
1286:./include/linux/libfdt.h ****  *                  tree
1287:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1288:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node to find the address range size for
1289:./include/linux/libfdt.h ****  *
1290:./include/linux/libfdt.h ****  * When the node has a valid #size-cells property, returns its value.
1291:./include/linux/libfdt.h ****  *
1292:./include/linux/libfdt.h ****  * returns:
1293:./include/linux/libfdt.h ****  *	0 <= n < FDT_MAX_NCELLS, on success
1294:./include/linux/libfdt.h ****  *	1, if the node has no #size-cells property
1295:./include/linux/libfdt.h ****  *	-FDT_ERR_BADNCELLS, if the node has a badly formatted or invalid
1296:./include/linux/libfdt.h ****  *		#size-cells property
1297:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1298:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1299:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1300:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1301:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1302:./include/linux/libfdt.h ****  */
1303:./include/linux/libfdt.h **** int fdt_size_cells(const void *fdt, int nodeoffset);
1304:./include/linux/libfdt.h **** 
1305:./include/linux/libfdt.h **** 
1306:./include/linux/libfdt.h **** /**********************************************************************/
1307:./include/linux/libfdt.h **** /* Write-in-place functions                                           */
1308:./include/linux/libfdt.h **** /**********************************************************************/
1309:./include/linux/libfdt.h **** 
1310:./include/linux/libfdt.h **** /**
1311:./include/linux/libfdt.h ****  * fdt_setprop_inplace_namelen_partial - change a property's value,
1312:./include/linux/libfdt.h ****  *                                       but not its size
1313:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1314:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1315:./include/linux/libfdt.h ****  * @name: name of the property to change
1316:./include/linux/libfdt.h ****  * @namelen: number of characters of name to consider
1317:./include/linux/libfdt.h ****  * @idx: index of the property to change in the array
1318:./include/linux/libfdt.h ****  * @val: pointer to data to replace the property value with
1319:./include/linux/libfdt.h ****  * @len: length of the property value
1320:./include/linux/libfdt.h ****  *
1321:./include/linux/libfdt.h ****  * Identical to fdt_setprop_inplace(), but modifies the given property
1322:./include/linux/libfdt.h ****  * starting from the given index, and using only the first characters
1323:./include/linux/libfdt.h ****  * of the name. It is useful when you want to manipulate only one value of
1324:./include/linux/libfdt.h ****  * an array and you have a string that doesn't end with \0.
1325:./include/linux/libfdt.h ****  *
1326:./include/linux/libfdt.h ****  * Return: 0 on success, negative libfdt error value otherwise
ARM GAS  /tmp/ccCHVNBc.s 			page 78


1327:./include/linux/libfdt.h ****  */
1328:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
1329:./include/linux/libfdt.h **** int fdt_setprop_inplace_namelen_partial(void *fdt, int nodeoffset,
1330:./include/linux/libfdt.h **** 					const char *name, int namelen,
1331:./include/linux/libfdt.h **** 					uint32_t idx, const void *val,
1332:./include/linux/libfdt.h **** 					int len);
1333:./include/linux/libfdt.h **** #endif
1334:./include/linux/libfdt.h **** 
1335:./include/linux/libfdt.h **** /**
1336:./include/linux/libfdt.h ****  * fdt_setprop_inplace - change a property's value, but not its size
1337:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1338:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1339:./include/linux/libfdt.h ****  * @name: name of the property to change
1340:./include/linux/libfdt.h ****  * @val: pointer to data to replace the property value with
1341:./include/linux/libfdt.h ****  * @len: length of the property value
1342:./include/linux/libfdt.h ****  *
1343:./include/linux/libfdt.h ****  * fdt_setprop_inplace() replaces the value of a given property with
1344:./include/linux/libfdt.h ****  * the data in val, of length len.  This function cannot change the
1345:./include/linux/libfdt.h ****  * size of a property, and so will only work if len is equal to the
1346:./include/linux/libfdt.h ****  * current length of the property.
1347:./include/linux/libfdt.h ****  *
1348:./include/linux/libfdt.h ****  * This function will alter only the bytes in the blob which contain
1349:./include/linux/libfdt.h ****  * the given property value, and will not alter or move any other part
1350:./include/linux/libfdt.h ****  * of the tree.
1351:./include/linux/libfdt.h ****  *
1352:./include/linux/libfdt.h ****  * returns:
1353:./include/linux/libfdt.h ****  *	0, on success
1354:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, if len is not equal to the property's current length
1355:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, node does not have the named property
1356:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1357:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1358:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1359:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1360:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1361:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1362:./include/linux/libfdt.h ****  */
1363:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
1364:./include/linux/libfdt.h **** int fdt_setprop_inplace(void *fdt, int nodeoffset, const char *name,
1365:./include/linux/libfdt.h **** 			const void *val, int len);
1366:./include/linux/libfdt.h **** #endif
1367:./include/linux/libfdt.h **** 
1368:./include/linux/libfdt.h **** /**
1369:./include/linux/libfdt.h ****  * fdt_setprop_inplace_u32 - change the value of a 32-bit integer property
1370:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1371:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1372:./include/linux/libfdt.h ****  * @name: name of the property to change
1373:./include/linux/libfdt.h ****  * @val: 32-bit integer value to replace the property with
1374:./include/linux/libfdt.h ****  *
1375:./include/linux/libfdt.h ****  * fdt_setprop_inplace_u32() replaces the value of a given property
1376:./include/linux/libfdt.h ****  * with the 32-bit integer value in val, converting val to big-endian
1377:./include/linux/libfdt.h ****  * if necessary.  This function cannot change the size of a property,
1378:./include/linux/libfdt.h ****  * and so will only work if the property already exists and has length
1379:./include/linux/libfdt.h ****  * 4.
1380:./include/linux/libfdt.h ****  *
1381:./include/linux/libfdt.h ****  * This function will alter only the bytes in the blob which contain
1382:./include/linux/libfdt.h ****  * the given property value, and will not alter or move any other part
1383:./include/linux/libfdt.h ****  * of the tree.
ARM GAS  /tmp/ccCHVNBc.s 			page 79


1384:./include/linux/libfdt.h ****  *
1385:./include/linux/libfdt.h ****  * returns:
1386:./include/linux/libfdt.h ****  *	0, on success
1387:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, if the property's length is not equal to 4
1388:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, node does not have the named property
1389:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1390:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1391:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1392:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1393:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1394:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1395:./include/linux/libfdt.h ****  */
1396:./include/linux/libfdt.h **** static inline int fdt_setprop_inplace_u32(void *fdt, int nodeoffset,
1397:./include/linux/libfdt.h **** 					  const char *name, uint32_t val)
1398:./include/linux/libfdt.h **** {
 1892              		.loc 3 1398 1 is_stmt 1 view -0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 8
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896              		.loc 3 1398 1 is_stmt 0 view .LVU558
 1897 0000 00B5     		push	{lr}
 1898              	.LCFI32:
 1899              		.cfi_def_cfa_offset 4
 1900              		.cfi_offset 14, -4
 1901 0002 85B0     		sub	sp, sp, #20
 1902              	.LCFI33:
 1903              		.cfi_def_cfa_offset 24
1399:./include/linux/libfdt.h **** 	fdt32_t tmp = cpu_to_fdt32(val);
 1904              		.loc 3 1399 2 is_stmt 1 view .LVU559
 1905              	.LVL226:
 1906              	.LBB106:
 1907              	.LBI106:
  57:./include/linux/libfdt_env.h **** {
 1908              		.loc 2 57 23 view .LVU560
 1909              	.LBB107:
 1910              		.loc 2 59 2 view .LVU561
 1911              		.loc 2 59 28 is_stmt 0 view .LVU562
 1912 0004 C3F3072C 		ubfx	ip, r3, #8, #8
 1913 0008 4FEA0C4C 		lsl	ip, ip, #16
 1914 000c 4CEA036C 		orr	ip, ip, r3, lsl #24
 1915 0010 C3F3074E 		ubfx	lr, r3, #16, #8
 1916 0014 4CEA0E2C 		orr	ip, ip, lr, lsl #8
 1917              		.loc 2 59 9 view .LVU563
 1918 0018 4CEA1363 		orr	r3, ip, r3, lsr #24
 1919              	.LVL227:
 1920              		.loc 2 59 9 view .LVU564
 1921              	.LBE107:
 1922              	.LBE106:
 1923              		.loc 3 1399 10 discriminator 1 view .LVU565
 1924 001c 0393     		str	r3, [sp, #12]
1400:./include/linux/libfdt.h **** 	return fdt_setprop_inplace(fdt, nodeoffset, name, &tmp, sizeof(tmp));
 1925              		.loc 3 1400 2 is_stmt 1 view .LVU566
 1926              		.loc 3 1400 9 is_stmt 0 view .LVU567
 1927 001e 0423     		movs	r3, #4
 1928 0020 0093     		str	r3, [sp]
 1929 0022 03AB     		add	r3, sp, #12
 1930 0024 FFF7FEFF 		bl	fdt_setprop_inplace
ARM GAS  /tmp/ccCHVNBc.s 			page 80


 1931              	.LVL228:
1401:./include/linux/libfdt.h **** }
 1932              		.loc 3 1401 1 view .LVU568
 1933 0028 05B0     		add	sp, sp, #20
 1934              	.LCFI34:
 1935              		.cfi_def_cfa_offset 4
 1936              		@ sp needed
 1937 002a 5DF804FB 		ldr	pc, [sp], #4
 1938              		.cfi_endproc
 1939              	.LFE53:
 1941              		.section	.text.overlay_adjust_local_conflicting_phandle,"ax",%progbits
 1942              		.align	1
 1943              		.syntax unified
 1944              		.thumb
 1945              		.thumb_func
 1947              	overlay_adjust_local_conflicting_phandle:
 1948              	.LVL229:
 1949              	.LFB85:
 512:./lib/fdt/fdt_overlay.c **** 	const fdt32_t *php;
 1950              		.loc 1 512 1 is_stmt 1 view -0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 8
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
 512:./lib/fdt/fdt_overlay.c **** 	const fdt32_t *php;
 1954              		.loc 1 512 1 is_stmt 0 view .LVU570
 1955 0000 70B5     		push	{r4, r5, r6, lr}
 1956              	.LCFI35:
 1957              		.cfi_def_cfa_offset 16
 1958              		.cfi_offset 4, -16
 1959              		.cfi_offset 5, -12
 1960              		.cfi_offset 6, -8
 1961              		.cfi_offset 14, -4
 1962 0002 82B0     		sub	sp, sp, #8
 1963              	.LCFI36:
 1964              		.cfi_def_cfa_offset 24
 1965 0004 0446     		mov	r4, r0
 1966 0006 0D46     		mov	r5, r1
 1967 0008 1646     		mov	r6, r2
 513:./lib/fdt/fdt_overlay.c **** 	int len, ret;
 1968              		.loc 1 513 2 is_stmt 1 view .LVU571
 514:./lib/fdt/fdt_overlay.c **** 
 1969              		.loc 1 514 2 view .LVU572
 516:./lib/fdt/fdt_overlay.c **** 	if (php && len == sizeof(*php)) {
 1970              		.loc 1 516 2 view .LVU573
 516:./lib/fdt/fdt_overlay.c **** 	if (php && len == sizeof(*php)) {
 1971              		.loc 1 516 8 is_stmt 0 view .LVU574
 1972 000a 01AB     		add	r3, sp, #4
 1973 000c 124A     		ldr	r2, .L124
 1974              	.LVL230:
 516:./lib/fdt/fdt_overlay.c **** 	if (php && len == sizeof(*php)) {
 1975              		.loc 1 516 8 view .LVU575
 1976 000e FFF7FEFF 		bl	fdt_getprop
 1977              	.LVL231:
 517:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "phandle", fdt_phandle);
 1978              		.loc 1 517 2 is_stmt 1 view .LVU576
 517:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "phandle", fdt_phandle);
 1979              		.loc 1 517 5 is_stmt 0 view .LVU577
ARM GAS  /tmp/ccCHVNBc.s 			page 81


 1980 0012 10B1     		cbz	r0, .L117
 517:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "phandle", fdt_phandle);
 1981              		.loc 1 517 17 discriminator 1 view .LVU578
 1982 0014 019B     		ldr	r3, [sp, #4]
 517:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "phandle", fdt_phandle);
 1983              		.loc 1 517 10 discriminator 1 view .LVU579
 1984 0016 042B     		cmp	r3, #4
 1985 0018 0CD0     		beq	.L122
 1986              	.LVL232:
 1987              	.L117:
 523:./lib/fdt/fdt_overlay.c **** 	if (php && len == sizeof(*php)) {
 1988              		.loc 1 523 2 is_stmt 1 view .LVU580
 523:./lib/fdt/fdt_overlay.c **** 	if (php && len == sizeof(*php)) {
 1989              		.loc 1 523 8 is_stmt 0 view .LVU581
 1990 001a 01AB     		add	r3, sp, #4
 1991 001c 0F4A     		ldr	r2, .L124+4
 1992 001e 2946     		mov	r1, r5
 1993 0020 2046     		mov	r0, r4
 1994 0022 FFF7FEFF 		bl	fdt_getprop
 1995              	.LVL233:
 524:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "linux,phandle", fdt_phandle);
 1996              		.loc 1 524 2 is_stmt 1 view .LVU582
 524:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "linux,phandle", fdt_phandle);
 1997              		.loc 1 524 5 is_stmt 0 view .LVU583
 1998 0026 A8B1     		cbz	r0, .L119
 524:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "linux,phandle", fdt_phandle);
 1999              		.loc 1 524 17 discriminator 1 view .LVU584
 2000 0028 019B     		ldr	r3, [sp, #4]
 524:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_inplace_u32(fdto, node, "linux,phandle", fdt_phandle);
 2001              		.loc 1 524 10 discriminator 1 view .LVU585
 2002 002a 042B     		cmp	r3, #4
 2003 002c 0BD0     		beq	.L123
 530:./lib/fdt/fdt_overlay.c **** }
 2004              		.loc 1 530 9 view .LVU586
 2005 002e 0020     		movs	r0, #0
 2006              	.LVL234:
 2007              	.L116:
 531:./lib/fdt/fdt_overlay.c **** 
 2008              		.loc 1 531 1 view .LVU587
 2009 0030 02B0     		add	sp, sp, #8
 2010              	.LCFI37:
 2011              		.cfi_remember_state
 2012              		.cfi_def_cfa_offset 16
 2013              		@ sp needed
 2014 0032 70BD     		pop	{r4, r5, r6, pc}
 2015              	.LVL235:
 2016              	.L122:
 2017              	.LCFI38:
 2018              		.cfi_restore_state
 518:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2019              		.loc 1 518 3 is_stmt 1 view .LVU588
 518:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2020              		.loc 1 518 9 is_stmt 0 view .LVU589
 2021 0034 3346     		mov	r3, r6
 2022 0036 084A     		ldr	r2, .L124
 2023 0038 2946     		mov	r1, r5
 2024 003a 2046     		mov	r0, r4
ARM GAS  /tmp/ccCHVNBc.s 			page 82


 2025              	.LVL236:
 518:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2026              		.loc 1 518 9 view .LVU590
 2027 003c FFF7FEFF 		bl	fdt_setprop_inplace_u32
 2028              	.LVL237:
 519:./lib/fdt/fdt_overlay.c **** 			return ret;
 2029              		.loc 1 519 3 is_stmt 1 view .LVU591
 519:./lib/fdt/fdt_overlay.c **** 			return ret;
 2030              		.loc 1 519 6 is_stmt 0 view .LVU592
 2031 0040 0028     		cmp	r0, #0
 2032 0042 EAD0     		beq	.L117
 2033 0044 F4E7     		b	.L116
 2034              	.LVL238:
 2035              	.L123:
 525:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2036              		.loc 1 525 3 is_stmt 1 view .LVU593
 525:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2037              		.loc 1 525 9 is_stmt 0 view .LVU594
 2038 0046 3346     		mov	r3, r6
 2039 0048 044A     		ldr	r2, .L124+4
 2040 004a 2946     		mov	r1, r5
 2041 004c 2046     		mov	r0, r4
 2042              	.LVL239:
 525:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2043              		.loc 1 525 9 view .LVU595
 2044 004e FFF7FEFF 		bl	fdt_setprop_inplace_u32
 2045              	.LVL240:
 526:./lib/fdt/fdt_overlay.c **** 			return ret;
 2046              		.loc 1 526 3 is_stmt 1 view .LVU596
 2047 0052 EDE7     		b	.L116
 2048              	.LVL241:
 2049              	.L119:
 530:./lib/fdt/fdt_overlay.c **** }
 2050              		.loc 1 530 9 is_stmt 0 view .LVU597
 2051 0054 0020     		movs	r0, #0
 2052              	.LVL242:
 530:./lib/fdt/fdt_overlay.c **** }
 2053              		.loc 1 530 9 view .LVU598
 2054 0056 EBE7     		b	.L116
 2055              	.L125:
 2056              		.align	2
 2057              	.L124:
 2058 0058 00000000 		.word	.LC1
 2059 005c 08000000 		.word	.LC2
 2060              		.cfi_endproc
 2061              	.LFE85:
 2063              		.section	.text.overlay_prevent_phandle_overwrite_node,"ax",%progbits
 2064              		.align	1
 2065              		.syntax unified
 2066              		.thumb
 2067              		.thumb_func
 2069              	overlay_prevent_phandle_overwrite_node:
 2070              	.LVL243:
 2071              	.LFB88:
 643:./lib/fdt/fdt_overlay.c **** 
 644:./lib/fdt/fdt_overlay.c **** /**
 645:./lib/fdt/fdt_overlay.c ****  * overlay_prevent_phandle_overwrite_node - Helper function for overlay_prevent_phandle_overwrite
ARM GAS  /tmp/ccCHVNBc.s 			page 83


 646:./lib/fdt/fdt_overlay.c ****  * @fdt: Base Device tree blob
 647:./lib/fdt/fdt_overlay.c ****  * @fdtnode: Node in fdt that is checked for an overwrite
 648:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 649:./lib/fdt/fdt_overlay.c ****  * @fdtonode: Node in fdto matching @fdtnode
 650:./lib/fdt/fdt_overlay.c ****  *
 651:./lib/fdt/fdt_overlay.c ****  * returns:
 652:./lib/fdt/fdt_overlay.c ****  *      0 on success
 653:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 654:./lib/fdt/fdt_overlay.c ****  */
 655:./lib/fdt/fdt_overlay.c **** static int overlay_prevent_phandle_overwrite_node(void *fdt, int fdtnode,
 656:./lib/fdt/fdt_overlay.c **** 						  void *fdto, int fdtonode)
 657:./lib/fdt/fdt_overlay.c **** {
 2072              		.loc 1 657 1 is_stmt 1 view -0
 2073              		.cfi_startproc
 2074              		@ args = 0, pretend = 0, frame = 0
 2075              		@ frame_needed = 0, uses_anonymous_args = 0
 2076              		.loc 1 657 1 is_stmt 0 view .LVU600
 2077 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2078              	.LCFI39:
 2079              		.cfi_def_cfa_offset 32
 2080              		.cfi_offset 3, -32
 2081              		.cfi_offset 4, -28
 2082              		.cfi_offset 5, -24
 2083              		.cfi_offset 6, -20
 2084              		.cfi_offset 7, -16
 2085              		.cfi_offset 8, -12
 2086              		.cfi_offset 9, -8
 2087              		.cfi_offset 14, -4
 2088 0004 0646     		mov	r6, r0
 2089 0006 0F46     		mov	r7, r1
 2090 0008 1546     		mov	r5, r2
 2091 000a 1C46     		mov	r4, r3
 658:./lib/fdt/fdt_overlay.c **** 	uint32_t fdt_phandle, fdto_phandle;
 2092              		.loc 1 658 2 is_stmt 1 view .LVU601
 659:./lib/fdt/fdt_overlay.c **** 	int fdtochild;
 2093              		.loc 1 659 2 view .LVU602
 660:./lib/fdt/fdt_overlay.c **** 
 661:./lib/fdt/fdt_overlay.c **** 	fdt_phandle = fdt_get_phandle(fdt, fdtnode);
 2094              		.loc 1 661 2 view .LVU603
 2095              		.loc 1 661 16 is_stmt 0 view .LVU604
 2096 000c FFF7FEFF 		bl	fdt_get_phandle
 2097              	.LVL244:
 2098              		.loc 1 661 16 view .LVU605
 2099 0010 8046     		mov	r8, r0
 2100              	.LVL245:
 662:./lib/fdt/fdt_overlay.c **** 	fdto_phandle = fdt_get_phandle(fdto, fdtonode);
 2101              		.loc 1 662 2 is_stmt 1 view .LVU606
 2102              		.loc 1 662 17 is_stmt 0 view .LVU607
 2103 0012 2146     		mov	r1, r4
 2104 0014 2846     		mov	r0, r5
 2105              	.LVL246:
 2106              		.loc 1 662 17 view .LVU608
 2107 0016 FFF7FEFF 		bl	fdt_get_phandle
 2108              	.LVL247:
 663:./lib/fdt/fdt_overlay.c **** 
 664:./lib/fdt/fdt_overlay.c **** 	if (fdt_phandle && fdto_phandle) {
 2109              		.loc 1 664 2 is_stmt 1 view .LVU609
ARM GAS  /tmp/ccCHVNBc.s 			page 84


 2110              		.loc 1 664 5 is_stmt 0 view .LVU610
 2111 001a B8F1000F 		cmp	r8, #0
 2112 001e 01D0     		beq	.L127
 2113 0020 8146     		mov	r9, r0
 2114              		.loc 1 664 18 discriminator 1 view .LVU611
 2115 0022 28B9     		cbnz	r0, .L133
 2116              	.LVL248:
 2117              	.L127:
 665:./lib/fdt/fdt_overlay.c **** 		int ret;
 666:./lib/fdt/fdt_overlay.c **** 
 667:./lib/fdt/fdt_overlay.c **** 		ret = overlay_adjust_local_conflicting_phandle(fdto, fdtonode,
 668:./lib/fdt/fdt_overlay.c **** 							       fdt_phandle);
 669:./lib/fdt/fdt_overlay.c **** 		if (ret)
 670:./lib/fdt/fdt_overlay.c **** 			return ret;
 671:./lib/fdt/fdt_overlay.c **** 
 672:./lib/fdt/fdt_overlay.c **** 		ret = overlay_update_local_conflicting_references(fdto,
 673:./lib/fdt/fdt_overlay.c **** 								  fdt_phandle,
 674:./lib/fdt/fdt_overlay.c **** 								  fdto_phandle);
 675:./lib/fdt/fdt_overlay.c **** 		if (ret)
 676:./lib/fdt/fdt_overlay.c **** 			return ret;
 677:./lib/fdt/fdt_overlay.c **** 	}
 678:./lib/fdt/fdt_overlay.c **** 
 679:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_subnode(fdtochild, fdto, fdtonode) {
 2118              		.loc 1 679 2 is_stmt 1 view .LVU612
 2119 0024 2146     		mov	r1, r4
 2120 0026 2846     		mov	r0, r5
 2121 0028 FFF7FEFF 		bl	fdt_first_subnode
 2122              	.LVL249:
 2123 002c 0446     		mov	r4, r0
 2124              	.LVL250:
 2125              		.loc 1 679 2 is_stmt 0 view .LVU613
 2126 002e 14E0     		b	.L129
 2127              	.LVL251:
 2128              	.L133:
 2129              	.LBB108:
 665:./lib/fdt/fdt_overlay.c **** 		int ret;
 2130              		.loc 1 665 3 is_stmt 1 view .LVU614
 667:./lib/fdt/fdt_overlay.c **** 							       fdt_phandle);
 2131              		.loc 1 667 3 view .LVU615
 667:./lib/fdt/fdt_overlay.c **** 							       fdt_phandle);
 2132              		.loc 1 667 9 is_stmt 0 view .LVU616
 2133 0030 4246     		mov	r2, r8
 2134 0032 2146     		mov	r1, r4
 2135 0034 2846     		mov	r0, r5
 2136              	.LVL252:
 667:./lib/fdt/fdt_overlay.c **** 							       fdt_phandle);
 2137              		.loc 1 667 9 view .LVU617
 2138 0036 FFF7FEFF 		bl	overlay_adjust_local_conflicting_phandle
 2139              	.LVL253:
 669:./lib/fdt/fdt_overlay.c **** 			return ret;
 2140              		.loc 1 669 3 is_stmt 1 view .LVU618
 669:./lib/fdt/fdt_overlay.c **** 			return ret;
 2141              		.loc 1 669 6 is_stmt 0 view .LVU619
 2142 003a 0346     		mov	r3, r0
 2143 003c 38BB     		cbnz	r0, .L126
 672:./lib/fdt/fdt_overlay.c **** 								  fdt_phandle,
 2144              		.loc 1 672 3 is_stmt 1 view .LVU620
ARM GAS  /tmp/ccCHVNBc.s 			page 85


 672:./lib/fdt/fdt_overlay.c **** 								  fdt_phandle,
 2145              		.loc 1 672 9 is_stmt 0 view .LVU621
 2146 003e 4A46     		mov	r2, r9
 2147 0040 4146     		mov	r1, r8
 2148 0042 2846     		mov	r0, r5
 2149              	.LVL254:
 672:./lib/fdt/fdt_overlay.c **** 								  fdt_phandle,
 2150              		.loc 1 672 9 view .LVU622
 2151 0044 FFF7FEFF 		bl	overlay_update_local_conflicting_references
 2152              	.LVL255:
 675:./lib/fdt/fdt_overlay.c **** 			return ret;
 2153              		.loc 1 675 3 is_stmt 1 view .LVU623
 675:./lib/fdt/fdt_overlay.c **** 			return ret;
 2154              		.loc 1 675 6 is_stmt 0 view .LVU624
 2155 0048 0346     		mov	r3, r0
 2156 004a 0028     		cmp	r0, #0
 2157 004c EAD0     		beq	.L127
 2158 004e 1EE0     		b	.L126
 2159              	.LVL256:
 2160              	.L130:
 675:./lib/fdt/fdt_overlay.c **** 			return ret;
 2161              		.loc 1 675 6 view .LVU625
 2162              	.LBE108:
 2163              		.loc 1 679 2 is_stmt 1 discriminator 2 view .LVU626
 2164 0050 2146     		mov	r1, r4
 2165 0052 2846     		mov	r0, r5
 2166 0054 FFF7FEFF 		bl	fdt_next_subnode
 2167              	.LVL257:
 2168 0058 0446     		mov	r4, r0
 2169              	.LVL258:
 2170              	.L129:
 2171              		.loc 1 679 2 discriminator 1 view .LVU627
 2172 005a 002C     		cmp	r4, #0
 2173 005c 16DB     		blt	.L134
 2174              	.LBB109:
 680:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, fdtochild, NULL);
 2175              		.loc 1 680 3 view .LVU628
 2176              		.loc 1 680 22 is_stmt 0 view .LVU629
 2177 005e 0022     		movs	r2, #0
 2178 0060 2146     		mov	r1, r4
 2179 0062 2846     		mov	r0, r5
 2180              	.LVL259:
 2181              		.loc 1 680 22 view .LVU630
 2182 0064 FFF7FEFF 		bl	fdt_get_name
 2183              	.LVL260:
 681:./lib/fdt/fdt_overlay.c **** 		int fdtchild;
 2184              		.loc 1 681 3 is_stmt 1 view .LVU631
 682:./lib/fdt/fdt_overlay.c **** 		int ret;
 2185              		.loc 1 682 3 view .LVU632
 683:./lib/fdt/fdt_overlay.c **** 
 684:./lib/fdt/fdt_overlay.c **** 		fdtchild = fdt_subnode_offset(fdt, fdtnode, name);
 2186              		.loc 1 684 3 view .LVU633
 2187              		.loc 1 684 14 is_stmt 0 view .LVU634
 2188 0068 0246     		mov	r2, r0
 2189 006a 3946     		mov	r1, r7
 2190 006c 3046     		mov	r0, r6
 2191              	.LVL261:
ARM GAS  /tmp/ccCHVNBc.s 			page 86


 2192              		.loc 1 684 14 view .LVU635
 2193 006e FFF7FEFF 		bl	fdt_subnode_offset
 2194              	.LVL262:
 685:./lib/fdt/fdt_overlay.c **** 		if (fdtchild == -FDT_ERR_NOTFOUND)
 2195              		.loc 1 685 3 is_stmt 1 view .LVU636
 2196              		.loc 1 685 6 is_stmt 0 view .LVU637
 2197 0072 B0F1FF3F 		cmp	r0, #-1
 2198 0076 EBD0     		beq	.L130
 686:./lib/fdt/fdt_overlay.c **** 			/*
 687:./lib/fdt/fdt_overlay.c **** 			 * no further overwrites possible here as this node is
 688:./lib/fdt/fdt_overlay.c **** 			 * new
 689:./lib/fdt/fdt_overlay.c **** 			 */
 690:./lib/fdt/fdt_overlay.c **** 			continue;
 691:./lib/fdt/fdt_overlay.c **** 
 692:./lib/fdt/fdt_overlay.c **** 		ret = overlay_prevent_phandle_overwrite_node(fdt, fdtchild,
 2199              		.loc 1 692 3 is_stmt 1 view .LVU638
 2200              		.loc 1 692 9 is_stmt 0 view .LVU639
 2201 0078 2346     		mov	r3, r4
 2202 007a 2A46     		mov	r2, r5
 2203 007c 0146     		mov	r1, r0
 2204 007e 3046     		mov	r0, r6
 2205              	.LVL263:
 2206              		.loc 1 692 9 view .LVU640
 2207 0080 FFF7BEFF 		bl	overlay_prevent_phandle_overwrite_node
 2208              	.LVL264:
 693:./lib/fdt/fdt_overlay.c **** 							     fdto, fdtochild);
 694:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2209              		.loc 1 694 3 is_stmt 1 view .LVU641
 2210              		.loc 1 694 6 is_stmt 0 view .LVU642
 2211 0084 0346     		mov	r3, r0
 2212 0086 0028     		cmp	r0, #0
 2213 0088 E2D0     		beq	.L130
 2214 008a 00E0     		b	.L126
 2215              	.LVL265:
 2216              	.L134:
 2217              		.loc 1 694 6 view .LVU643
 2218              	.LBE109:
 695:./lib/fdt/fdt_overlay.c **** 			return ret;
 696:./lib/fdt/fdt_overlay.c **** 	}
 697:./lib/fdt/fdt_overlay.c **** 
 698:./lib/fdt/fdt_overlay.c **** 	return 0;
 2219              		.loc 1 698 9 view .LVU644
 2220 008c 0023     		movs	r3, #0
 2221              	.LVL266:
 2222              	.L126:
 699:./lib/fdt/fdt_overlay.c **** }
 2223              		.loc 1 699 1 view .LVU645
 2224 008e 1846     		mov	r0, r3
 2225 0090 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2226              		.loc 1 699 1 view .LVU646
 2227              		.cfi_endproc
 2228              	.LFE88:
 2230              		.section	.text.fdt_setprop,"ax",%progbits
 2231              		.align	1
 2232              		.syntax unified
 2233              		.thumb
 2234              		.thumb_func
ARM GAS  /tmp/ccCHVNBc.s 			page 87


 2236              	fdt_setprop:
 2237              	.LVL267:
 2238              	.LFB59:
1402:./include/linux/libfdt.h **** 
1403:./include/linux/libfdt.h **** /**
1404:./include/linux/libfdt.h ****  * fdt_setprop_inplace_u64 - change the value of a 64-bit integer property
1405:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1406:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1407:./include/linux/libfdt.h ****  * @name: name of the property to change
1408:./include/linux/libfdt.h ****  * @val: 64-bit integer value to replace the property with
1409:./include/linux/libfdt.h ****  *
1410:./include/linux/libfdt.h ****  * fdt_setprop_inplace_u64() replaces the value of a given property
1411:./include/linux/libfdt.h ****  * with the 64-bit integer value in val, converting val to big-endian
1412:./include/linux/libfdt.h ****  * if necessary.  This function cannot change the size of a property,
1413:./include/linux/libfdt.h ****  * and so will only work if the property already exists and has length
1414:./include/linux/libfdt.h ****  * 8.
1415:./include/linux/libfdt.h ****  *
1416:./include/linux/libfdt.h ****  * This function will alter only the bytes in the blob which contain
1417:./include/linux/libfdt.h ****  * the given property value, and will not alter or move any other part
1418:./include/linux/libfdt.h ****  * of the tree.
1419:./include/linux/libfdt.h ****  *
1420:./include/linux/libfdt.h ****  * returns:
1421:./include/linux/libfdt.h ****  *	0, on success
1422:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, if the property's length is not equal to 8
1423:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, node does not have the named property
1424:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1425:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1426:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1427:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1428:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1429:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1430:./include/linux/libfdt.h ****  */
1431:./include/linux/libfdt.h **** static inline int fdt_setprop_inplace_u64(void *fdt, int nodeoffset,
1432:./include/linux/libfdt.h **** 					  const char *name, uint64_t val)
1433:./include/linux/libfdt.h **** {
1434:./include/linux/libfdt.h **** 	fdt64_t tmp = cpu_to_fdt64(val);
1435:./include/linux/libfdt.h **** 	return fdt_setprop_inplace(fdt, nodeoffset, name, &tmp, sizeof(tmp));
1436:./include/linux/libfdt.h **** }
1437:./include/linux/libfdt.h **** 
1438:./include/linux/libfdt.h **** /**
1439:./include/linux/libfdt.h ****  * fdt_setprop_inplace_cell - change the value of a single-cell property
1440:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1441:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node containing the property
1442:./include/linux/libfdt.h ****  * @name: name of the property to change the value of
1443:./include/linux/libfdt.h ****  * @val: new value of the 32-bit cell
1444:./include/linux/libfdt.h ****  *
1445:./include/linux/libfdt.h ****  * This is an alternative name for fdt_setprop_inplace_u32()
1446:./include/linux/libfdt.h ****  * Return: 0 on success, negative libfdt error number otherwise.
1447:./include/linux/libfdt.h ****  */
1448:./include/linux/libfdt.h **** static inline int fdt_setprop_inplace_cell(void *fdt, int nodeoffset,
1449:./include/linux/libfdt.h **** 					   const char *name, uint32_t val)
1450:./include/linux/libfdt.h **** {
1451:./include/linux/libfdt.h **** 	return fdt_setprop_inplace_u32(fdt, nodeoffset, name, val);
1452:./include/linux/libfdt.h **** }
1453:./include/linux/libfdt.h **** 
1454:./include/linux/libfdt.h **** /**
1455:./include/linux/libfdt.h ****  * fdt_nop_property - replace a property with nop tags
ARM GAS  /tmp/ccCHVNBc.s 			page 88


1456:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1457:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to nop
1458:./include/linux/libfdt.h ****  * @name: name of the property to nop
1459:./include/linux/libfdt.h ****  *
1460:./include/linux/libfdt.h ****  * fdt_nop_property() will replace a given property's representation
1461:./include/linux/libfdt.h ****  * in the blob with FDT_NOP tags, effectively removing it from the
1462:./include/linux/libfdt.h ****  * tree.
1463:./include/linux/libfdt.h ****  *
1464:./include/linux/libfdt.h ****  * This function will alter only the bytes in the blob which contain
1465:./include/linux/libfdt.h ****  * the property, and will not alter or move any other part of the
1466:./include/linux/libfdt.h ****  * tree.
1467:./include/linux/libfdt.h ****  *
1468:./include/linux/libfdt.h ****  * returns:
1469:./include/linux/libfdt.h ****  *	0, on success
1470:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, node does not have the named property
1471:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1472:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1473:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1474:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1475:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1476:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1477:./include/linux/libfdt.h ****  */
1478:./include/linux/libfdt.h **** int fdt_nop_property(void *fdt, int nodeoffset, const char *name);
1479:./include/linux/libfdt.h **** 
1480:./include/linux/libfdt.h **** /**
1481:./include/linux/libfdt.h ****  * fdt_nop_node - replace a node (subtree) with nop tags
1482:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1483:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node to nop
1484:./include/linux/libfdt.h ****  *
1485:./include/linux/libfdt.h ****  * fdt_nop_node() will replace a given node's representation in the
1486:./include/linux/libfdt.h ****  * blob, including all its subnodes, if any, with FDT_NOP tags,
1487:./include/linux/libfdt.h ****  * effectively removing it from the tree.
1488:./include/linux/libfdt.h ****  *
1489:./include/linux/libfdt.h ****  * This function will alter only the bytes in the blob which contain
1490:./include/linux/libfdt.h ****  * the node and its properties and subnodes, and will not alter or
1491:./include/linux/libfdt.h ****  * move any other part of the tree.
1492:./include/linux/libfdt.h ****  *
1493:./include/linux/libfdt.h ****  * returns:
1494:./include/linux/libfdt.h ****  *	0, on success
1495:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1496:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1497:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1498:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1499:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1500:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1501:./include/linux/libfdt.h ****  */
1502:./include/linux/libfdt.h **** int fdt_nop_node(void *fdt, int nodeoffset);
1503:./include/linux/libfdt.h **** 
1504:./include/linux/libfdt.h **** /**********************************************************************/
1505:./include/linux/libfdt.h **** /* Sequential write functions                                         */
1506:./include/linux/libfdt.h **** /**********************************************************************/
1507:./include/linux/libfdt.h **** 
1508:./include/linux/libfdt.h **** /* fdt_create_with_flags flags */
1509:./include/linux/libfdt.h **** #define FDT_CREATE_FLAG_NO_NAME_DEDUP 0x1
1510:./include/linux/libfdt.h **** 	/* FDT_CREATE_FLAG_NO_NAME_DEDUP: Do not try to de-duplicate property
1511:./include/linux/libfdt.h **** 	 * names in the fdt. This can result in faster creation times, but
1512:./include/linux/libfdt.h **** 	 * a larger fdt. */
ARM GAS  /tmp/ccCHVNBc.s 			page 89


1513:./include/linux/libfdt.h **** 
1514:./include/linux/libfdt.h **** #define FDT_CREATE_FLAGS_ALL	(FDT_CREATE_FLAG_NO_NAME_DEDUP)
1515:./include/linux/libfdt.h **** 
1516:./include/linux/libfdt.h **** /**
1517:./include/linux/libfdt.h ****  * fdt_create_with_flags - begin creation of a new fdt
1518:./include/linux/libfdt.h ****  * @buf: pointer to memory allocated where fdt will be created
1519:./include/linux/libfdt.h ****  * @bufsize: size of the memory space at fdt
1520:./include/linux/libfdt.h ****  * @flags: a valid combination of FDT_CREATE_FLAG_ flags, or 0.
1521:./include/linux/libfdt.h ****  *
1522:./include/linux/libfdt.h ****  * fdt_create_with_flags() begins the process of creating a new fdt with
1523:./include/linux/libfdt.h ****  * the sequential write interface.
1524:./include/linux/libfdt.h ****  *
1525:./include/linux/libfdt.h ****  * fdt creation process must end with fdt_finish() to produce a valid fdt.
1526:./include/linux/libfdt.h ****  *
1527:./include/linux/libfdt.h ****  * returns:
1528:./include/linux/libfdt.h ****  *	0, on success
1529:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, bufsize is insufficient for a minimal fdt
1530:./include/linux/libfdt.h ****  *	-FDT_ERR_BADFLAGS, flags is not valid
1531:./include/linux/libfdt.h ****  */
1532:./include/linux/libfdt.h **** int fdt_create_with_flags(void *buf, int bufsize, uint32_t flags);
1533:./include/linux/libfdt.h **** 
1534:./include/linux/libfdt.h **** /**
1535:./include/linux/libfdt.h ****  * fdt_create - begin creation of a new fdt
1536:./include/linux/libfdt.h ****  * @buf: pointer to memory allocated where fdt will be created
1537:./include/linux/libfdt.h ****  * @bufsize: size of the memory space at fdt
1538:./include/linux/libfdt.h ****  *
1539:./include/linux/libfdt.h ****  * fdt_create() is equivalent to fdt_create_with_flags() with flags=0.
1540:./include/linux/libfdt.h ****  *
1541:./include/linux/libfdt.h ****  * returns:
1542:./include/linux/libfdt.h ****  *	0, on success
1543:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, bufsize is insufficient for a minimal fdt
1544:./include/linux/libfdt.h ****  */
1545:./include/linux/libfdt.h **** int fdt_create(void *buf, int bufsize);
1546:./include/linux/libfdt.h **** 
1547:./include/linux/libfdt.h **** int fdt_resize(void *fdt, void *buf, int bufsize);
1548:./include/linux/libfdt.h **** int fdt_add_reservemap_entry(void *fdt, uint64_t addr, uint64_t size);
1549:./include/linux/libfdt.h **** int fdt_finish_reservemap(void *fdt);
1550:./include/linux/libfdt.h **** int fdt_begin_node(void *fdt, const char *name);
1551:./include/linux/libfdt.h **** int fdt_property(void *fdt, const char *name, const void *val, int len);
1552:./include/linux/libfdt.h **** static inline int fdt_property_u32(void *fdt, const char *name, uint32_t val)
1553:./include/linux/libfdt.h **** {
1554:./include/linux/libfdt.h **** 	fdt32_t tmp = cpu_to_fdt32(val);
1555:./include/linux/libfdt.h **** 	return fdt_property(fdt, name, &tmp, sizeof(tmp));
1556:./include/linux/libfdt.h **** }
1557:./include/linux/libfdt.h **** static inline int fdt_property_u64(void *fdt, const char *name, uint64_t val)
1558:./include/linux/libfdt.h **** {
1559:./include/linux/libfdt.h **** 	fdt64_t tmp = cpu_to_fdt64(val);
1560:./include/linux/libfdt.h **** 	return fdt_property(fdt, name, &tmp, sizeof(tmp));
1561:./include/linux/libfdt.h **** }
1562:./include/linux/libfdt.h **** 
1563:./include/linux/libfdt.h **** #ifndef SWIG /* Not available in Python */
1564:./include/linux/libfdt.h **** static inline int fdt_property_cell(void *fdt, const char *name, uint32_t val)
1565:./include/linux/libfdt.h **** {
1566:./include/linux/libfdt.h **** 	return fdt_property_u32(fdt, name, val);
1567:./include/linux/libfdt.h **** }
1568:./include/linux/libfdt.h **** #endif
1569:./include/linux/libfdt.h **** 
ARM GAS  /tmp/ccCHVNBc.s 			page 90


1570:./include/linux/libfdt.h **** /**
1571:./include/linux/libfdt.h ****  * fdt_property_placeholder - add a new property and return a ptr to its value
1572:./include/linux/libfdt.h ****  *
1573:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1574:./include/linux/libfdt.h ****  * @name: name of property to add
1575:./include/linux/libfdt.h ****  * @len: length of property value in bytes
1576:./include/linux/libfdt.h ****  * @valp: returns a pointer to where the value should be placed
1577:./include/linux/libfdt.h ****  *
1578:./include/linux/libfdt.h ****  * returns:
1579:./include/linux/libfdt.h ****  *	0, on success
1580:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1581:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, standard meanings
1582:./include/linux/libfdt.h ****  */
1583:./include/linux/libfdt.h **** int fdt_property_placeholder(void *fdt, const char *name, int len, void **valp);
1584:./include/linux/libfdt.h **** 
1585:./include/linux/libfdt.h **** #define fdt_property_string(fdt, name, str) \
1586:./include/linux/libfdt.h **** 	fdt_property(fdt, name, str, strlen(str)+1)
1587:./include/linux/libfdt.h **** int fdt_end_node(void *fdt);
1588:./include/linux/libfdt.h **** int fdt_finish(void *fdt);
1589:./include/linux/libfdt.h **** 
1590:./include/linux/libfdt.h **** /**********************************************************************/
1591:./include/linux/libfdt.h **** /* Read-write functions                                               */
1592:./include/linux/libfdt.h **** /**********************************************************************/
1593:./include/linux/libfdt.h **** 
1594:./include/linux/libfdt.h **** int fdt_create_empty_tree(void *buf, int bufsize);
1595:./include/linux/libfdt.h **** int fdt_open_into(const void *fdt, void *buf, int bufsize);
1596:./include/linux/libfdt.h **** int fdt_pack(void *fdt);
1597:./include/linux/libfdt.h **** 
1598:./include/linux/libfdt.h **** /**
1599:./include/linux/libfdt.h ****  * fdt_add_mem_rsv - add one memory reserve map entry
1600:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1601:./include/linux/libfdt.h ****  * @address: 64-bit start address of the reserve map entry
1602:./include/linux/libfdt.h ****  * @size: 64-bit size of the reserved region
1603:./include/linux/libfdt.h ****  *
1604:./include/linux/libfdt.h ****  * Adds a reserve map entry to the given blob reserving a region at
1605:./include/linux/libfdt.h ****  * address address of length size.
1606:./include/linux/libfdt.h ****  *
1607:./include/linux/libfdt.h ****  * This function will insert data into the reserve map and will
1608:./include/linux/libfdt.h ****  * therefore change the indexes of some entries in the table.
1609:./include/linux/libfdt.h ****  *
1610:./include/linux/libfdt.h ****  * returns:
1611:./include/linux/libfdt.h ****  *	0, on success
1612:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, there is insufficient free space in the blob to
1613:./include/linux/libfdt.h ****  *		contain the new reservation entry
1614:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1615:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1616:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1617:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1618:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1619:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1620:./include/linux/libfdt.h ****  */
1621:./include/linux/libfdt.h **** int fdt_add_mem_rsv(void *fdt, uint64_t address, uint64_t size);
1622:./include/linux/libfdt.h **** 
1623:./include/linux/libfdt.h **** /**
1624:./include/linux/libfdt.h ****  * fdt_del_mem_rsv - remove a memory reserve map entry
1625:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1626:./include/linux/libfdt.h ****  * @n: entry to remove
ARM GAS  /tmp/ccCHVNBc.s 			page 91


1627:./include/linux/libfdt.h ****  *
1628:./include/linux/libfdt.h ****  * fdt_del_mem_rsv() removes the n-th memory reserve map entry from
1629:./include/linux/libfdt.h ****  * the blob.
1630:./include/linux/libfdt.h ****  *
1631:./include/linux/libfdt.h ****  * This function will delete data from the reservation table and will
1632:./include/linux/libfdt.h ****  * therefore change the indexes of some entries in the table.
1633:./include/linux/libfdt.h ****  *
1634:./include/linux/libfdt.h ****  * returns:
1635:./include/linux/libfdt.h ****  *	0, on success
1636:./include/linux/libfdt.h ****  *	-FDT_ERR_NOTFOUND, there is no entry of the given index (i.e. there
1637:./include/linux/libfdt.h ****  *		are less than n+1 reserve map entries)
1638:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1639:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1640:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1641:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1642:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1643:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1644:./include/linux/libfdt.h ****  */
1645:./include/linux/libfdt.h **** int fdt_del_mem_rsv(void *fdt, int n);
1646:./include/linux/libfdt.h **** 
1647:./include/linux/libfdt.h **** /**
1648:./include/linux/libfdt.h ****  * fdt_set_name - change the name of a given node
1649:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1650:./include/linux/libfdt.h ****  * @nodeoffset: structure block offset of a node
1651:./include/linux/libfdt.h ****  * @name: name to give the node
1652:./include/linux/libfdt.h ****  *
1653:./include/linux/libfdt.h ****  * fdt_set_name() replaces the name (including unit address, if any)
1654:./include/linux/libfdt.h ****  * of the given node with the given string.  NOTE: this function can't
1655:./include/linux/libfdt.h ****  * efficiently check if the new name is unique amongst the given
1656:./include/linux/libfdt.h ****  * node's siblings; results are undefined if this function is invoked
1657:./include/linux/libfdt.h ****  * with a name equal to one of the given node's siblings.
1658:./include/linux/libfdt.h ****  *
1659:./include/linux/libfdt.h ****  * This function may insert or delete data from the blob, and will
1660:./include/linux/libfdt.h ****  * therefore change the offsets of some existing nodes.
1661:./include/linux/libfdt.h ****  *
1662:./include/linux/libfdt.h ****  * returns:
1663:./include/linux/libfdt.h ****  *	0, on success
1664:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, there is insufficient free space in the blob
1665:./include/linux/libfdt.h ****  *		to contain the new name
1666:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1667:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1668:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1669:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE, standard meanings
1670:./include/linux/libfdt.h ****  */
1671:./include/linux/libfdt.h **** int fdt_set_name(void *fdt, int nodeoffset, const char *name);
1672:./include/linux/libfdt.h **** 
1673:./include/linux/libfdt.h **** /**
1674:./include/linux/libfdt.h ****  * fdt_setprop_namelen - create or change a property
1675:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1676:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1677:./include/linux/libfdt.h ****  * @name: name of the property to change
1678:./include/linux/libfdt.h ****  * @namelen: length of the name
1679:./include/linux/libfdt.h ****  * @val: pointer to data to set the property value to
1680:./include/linux/libfdt.h ****  * @len: length of the property value
1681:./include/linux/libfdt.h ****  *
1682:./include/linux/libfdt.h ****  * fdt_setprop_namelen() sets the value of the named property in the given
1683:./include/linux/libfdt.h ****  * node to the given value and length, creating the property if it
ARM GAS  /tmp/ccCHVNBc.s 			page 92


1684:./include/linux/libfdt.h ****  * does not already exist.
1685:./include/linux/libfdt.h ****  *
1686:./include/linux/libfdt.h ****  * This function may insert or delete data from the blob, and will
1687:./include/linux/libfdt.h ****  * therefore change the offsets of some existing nodes.
1688:./include/linux/libfdt.h ****  *
1689:./include/linux/libfdt.h ****  * returns:
1690:./include/linux/libfdt.h ****  *	0, on success
1691:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, there is insufficient free space in the blob to
1692:./include/linux/libfdt.h ****  *		contain the new property value
1693:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1694:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1695:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1696:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1697:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1698:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1699:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1700:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1701:./include/linux/libfdt.h ****  */
1702:./include/linux/libfdt.h **** int fdt_setprop_namelen(void *fdt, int nodeoffset, const char *name,
1703:./include/linux/libfdt.h **** 			int namelen, const void *val, int len);
1704:./include/linux/libfdt.h **** 
1705:./include/linux/libfdt.h **** /**
1706:./include/linux/libfdt.h ****  * fdt_setprop - create or change a property
1707:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1708:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1709:./include/linux/libfdt.h ****  * @name: name of the property to change
1710:./include/linux/libfdt.h ****  * @val: pointer to data to set the property value to
1711:./include/linux/libfdt.h ****  * @len: length of the property value
1712:./include/linux/libfdt.h ****  *
1713:./include/linux/libfdt.h ****  * fdt_setprop() sets the value of the named property in the given
1714:./include/linux/libfdt.h ****  * node to the given value and length, creating the property if it
1715:./include/linux/libfdt.h ****  * does not already exist.
1716:./include/linux/libfdt.h ****  *
1717:./include/linux/libfdt.h ****  * This function may insert or delete data from the blob, and will
1718:./include/linux/libfdt.h ****  * therefore change the offsets of some existing nodes.
1719:./include/linux/libfdt.h ****  *
1720:./include/linux/libfdt.h ****  * returns:
1721:./include/linux/libfdt.h ****  *	0, on success
1722:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, there is insufficient free space in the blob to
1723:./include/linux/libfdt.h ****  *		contain the new property value
1724:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1725:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1726:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1727:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1728:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1729:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1730:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1731:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1732:./include/linux/libfdt.h ****  */
1733:./include/linux/libfdt.h **** static inline int fdt_setprop(void *fdt, int nodeoffset, const char *name,
1734:./include/linux/libfdt.h **** 			      const void *val, int len)
1735:./include/linux/libfdt.h **** {
 2239              		.loc 3 1735 1 is_stmt 1 view -0
 2240              		.cfi_startproc
 2241              		@ args = 4, pretend = 0, frame = 0
 2242              		@ frame_needed = 0, uses_anonymous_args = 0
 2243              		.loc 3 1735 1 is_stmt 0 view .LVU648
ARM GAS  /tmp/ccCHVNBc.s 			page 93


 2244 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2245              	.LCFI40:
 2246              		.cfi_def_cfa_offset 20
 2247              		.cfi_offset 4, -20
 2248              		.cfi_offset 5, -16
 2249              		.cfi_offset 6, -12
 2250              		.cfi_offset 7, -8
 2251              		.cfi_offset 14, -4
 2252 0002 83B0     		sub	sp, sp, #12
 2253              	.LCFI41:
 2254              		.cfi_def_cfa_offset 32
 2255 0004 0546     		mov	r5, r0
 2256 0006 0E46     		mov	r6, r1
 2257 0008 1446     		mov	r4, r2
 2258 000a 1F46     		mov	r7, r3
1736:./include/linux/libfdt.h **** 	return fdt_setprop_namelen(fdt, nodeoffset, name, strlen(name), val,
 2259              		.loc 3 1736 2 is_stmt 1 view .LVU649
 2260              		.loc 3 1736 52 is_stmt 0 view .LVU650
 2261 000c 1046     		mov	r0, r2
 2262              	.LVL268:
 2263              		.loc 3 1736 52 view .LVU651
 2264 000e FFF7FEFF 		bl	strlen
 2265              	.LVL269:
 2266              		.loc 3 1736 52 view .LVU652
 2267 0012 0346     		mov	r3, r0
 2268              		.loc 3 1736 9 discriminator 1 view .LVU653
 2269 0014 089A     		ldr	r2, [sp, #32]
 2270 0016 0192     		str	r2, [sp, #4]
 2271 0018 0097     		str	r7, [sp]
 2272 001a 2246     		mov	r2, r4
 2273 001c 3146     		mov	r1, r6
 2274 001e 2846     		mov	r0, r5
 2275 0020 FFF7FEFF 		bl	fdt_setprop_namelen
 2276              	.LVL270:
1737:./include/linux/libfdt.h **** 				   len);
1738:./include/linux/libfdt.h **** }
 2277              		.loc 3 1738 1 view .LVU654
 2278 0024 03B0     		add	sp, sp, #12
 2279              	.LCFI42:
 2280              		.cfi_def_cfa_offset 20
 2281              		@ sp needed
 2282 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 2283              		.loc 3 1738 1 view .LVU655
 2284              		.cfi_endproc
 2285              	.LFE59:
 2287              		.section	.text.overlay_apply_node,"ax",%progbits
 2288              		.align	1
 2289              		.syntax unified
 2290              		.thumb
 2291              		.thumb_func
 2293              	overlay_apply_node:
 2294              	.LVL271:
 2295              	.LFB90:
 700:./lib/fdt/fdt_overlay.c **** 
 701:./lib/fdt/fdt_overlay.c **** /**
 702:./lib/fdt/fdt_overlay.c ****  * overlay_prevent_phandle_overwrite - Fixes overlay phandles to not overwrite base phandles
 703:./lib/fdt/fdt_overlay.c ****  * @fdt: Base Device Tree blob
ARM GAS  /tmp/ccCHVNBc.s 			page 94


 704:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 705:./lib/fdt/fdt_overlay.c ****  *
 706:./lib/fdt/fdt_overlay.c ****  * Checks recursively if applying fdto overwrites phandle values in the base
 707:./lib/fdt/fdt_overlay.c ****  * dtb. When such a phandle is found, the fdto is changed to use the fdt's
 708:./lib/fdt/fdt_overlay.c ****  * phandle value to not break references in the base.
 709:./lib/fdt/fdt_overlay.c ****  *
 710:./lib/fdt/fdt_overlay.c ****  * returns:
 711:./lib/fdt/fdt_overlay.c ****  *      0 on success
 712:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 713:./lib/fdt/fdt_overlay.c ****  */
 714:./lib/fdt/fdt_overlay.c **** static int overlay_prevent_phandle_overwrite(void *fdt, void *fdto)
 715:./lib/fdt/fdt_overlay.c **** {
 716:./lib/fdt/fdt_overlay.c **** 	int fragment;
 717:./lib/fdt/fdt_overlay.c **** 
 718:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_subnode(fragment, fdto, 0) {
 719:./lib/fdt/fdt_overlay.c **** 		int overlay;
 720:./lib/fdt/fdt_overlay.c **** 		int target;
 721:./lib/fdt/fdt_overlay.c **** 		int ret;
 722:./lib/fdt/fdt_overlay.c **** 
 723:./lib/fdt/fdt_overlay.c **** 		overlay = fdt_subnode_offset(fdto, fragment, "__overlay__");
 724:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 725:./lib/fdt/fdt_overlay.c **** 			continue;
 726:./lib/fdt/fdt_overlay.c **** 
 727:./lib/fdt/fdt_overlay.c **** 		if (overlay < 0)
 728:./lib/fdt/fdt_overlay.c **** 			return overlay;
 729:./lib/fdt/fdt_overlay.c **** 
 730:./lib/fdt/fdt_overlay.c **** 		target = fdt_overlay_target_offset(fdt, fdto, fragment, NULL);
 731:./lib/fdt/fdt_overlay.c **** 		if (target == -FDT_ERR_NOTFOUND)
 732:./lib/fdt/fdt_overlay.c **** 			/*
 733:./lib/fdt/fdt_overlay.c **** 			 * The subtree doesn't exist in the base, so nothing
 734:./lib/fdt/fdt_overlay.c **** 			 * will be overwritten.
 735:./lib/fdt/fdt_overlay.c **** 			 */
 736:./lib/fdt/fdt_overlay.c **** 			continue;
 737:./lib/fdt/fdt_overlay.c **** 		else if (target < 0)
 738:./lib/fdt/fdt_overlay.c **** 			return target;
 739:./lib/fdt/fdt_overlay.c **** 
 740:./lib/fdt/fdt_overlay.c **** 		ret = overlay_prevent_phandle_overwrite_node(fdt, target,
 741:./lib/fdt/fdt_overlay.c **** 							     fdto, overlay);
 742:./lib/fdt/fdt_overlay.c **** 		if (ret)
 743:./lib/fdt/fdt_overlay.c **** 			return ret;
 744:./lib/fdt/fdt_overlay.c **** 	}
 745:./lib/fdt/fdt_overlay.c **** 
 746:./lib/fdt/fdt_overlay.c **** 	return 0;
 747:./lib/fdt/fdt_overlay.c **** }
 748:./lib/fdt/fdt_overlay.c **** 
 749:./lib/fdt/fdt_overlay.c **** /**
 750:./lib/fdt/fdt_overlay.c ****  * overlay_apply_node - Merges a node into the base device tree
 751:./lib/fdt/fdt_overlay.c ****  * @fdt: Base Device Tree blob
 752:./lib/fdt/fdt_overlay.c ****  * @target: Node offset in the base device tree to apply the fragment to
 753:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 754:./lib/fdt/fdt_overlay.c ****  * @node: Node offset in the overlay holding the changes to merge
 755:./lib/fdt/fdt_overlay.c ****  *
 756:./lib/fdt/fdt_overlay.c ****  * overlay_apply_node() merges a node into a target base device tree
 757:./lib/fdt/fdt_overlay.c ****  * node pointed.
 758:./lib/fdt/fdt_overlay.c ****  *
 759:./lib/fdt/fdt_overlay.c ****  * This is part of the final step in the device tree overlay
 760:./lib/fdt/fdt_overlay.c ****  * application process, when all the phandles have been adjusted and
ARM GAS  /tmp/ccCHVNBc.s 			page 95


 761:./lib/fdt/fdt_overlay.c ****  * resolved and you just have to merge overlay into the base device
 762:./lib/fdt/fdt_overlay.c ****  * tree.
 763:./lib/fdt/fdt_overlay.c ****  *
 764:./lib/fdt/fdt_overlay.c ****  * returns:
 765:./lib/fdt/fdt_overlay.c ****  *      0 on success
 766:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 767:./lib/fdt/fdt_overlay.c ****  */
 768:./lib/fdt/fdt_overlay.c **** static int overlay_apply_node(void *fdt, int target,
 769:./lib/fdt/fdt_overlay.c **** 			      void *fdto, int node)
 770:./lib/fdt/fdt_overlay.c **** {
 2296              		.loc 1 770 1 is_stmt 1 view -0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 8
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              		.loc 1 770 1 is_stmt 0 view .LVU657
 2301 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2302              	.LCFI43:
 2303              		.cfi_def_cfa_offset 24
 2304              		.cfi_offset 4, -24
 2305              		.cfi_offset 5, -20
 2306              		.cfi_offset 6, -16
 2307              		.cfi_offset 7, -12
 2308              		.cfi_offset 8, -8
 2309              		.cfi_offset 14, -4
 2310 0004 84B0     		sub	sp, sp, #16
 2311              	.LCFI44:
 2312              		.cfi_def_cfa_offset 40
 2313 0006 0646     		mov	r6, r0
 2314 0008 0F46     		mov	r7, r1
 2315 000a 1546     		mov	r5, r2
 2316 000c 9846     		mov	r8, r3
 771:./lib/fdt/fdt_overlay.c **** 	int property;
 2317              		.loc 1 771 2 is_stmt 1 view .LVU658
 772:./lib/fdt/fdt_overlay.c **** 	int subnode;
 2318              		.loc 1 772 2 view .LVU659
 773:./lib/fdt/fdt_overlay.c **** 
 774:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_property_offset(property, fdto, node) {
 2319              		.loc 1 774 2 view .LVU660
 2320 000e 1946     		mov	r1, r3
 2321              	.LVL272:
 2322              		.loc 1 774 2 is_stmt 0 view .LVU661
 2323 0010 1046     		mov	r0, r2
 2324              	.LVL273:
 2325              		.loc 1 774 2 view .LVU662
 2326 0012 FFF7FEFF 		bl	fdt_first_property_offset
 2327              	.LVL274:
 2328              		.loc 1 774 2 view .LVU663
 2329 0016 0446     		mov	r4, r0
 2330              	.LVL275:
 2331              	.L138:
 2332              		.loc 1 774 2 is_stmt 1 discriminator 1 view .LVU664
 2333 0018 002C     		cmp	r4, #0
 2334 001a 20DB     		blt	.L148
 2335              	.LBB110:
 775:./lib/fdt/fdt_overlay.c **** 		const char *name;
 2336              		.loc 1 775 3 view .LVU665
 776:./lib/fdt/fdt_overlay.c **** 		const void *prop;
ARM GAS  /tmp/ccCHVNBc.s 			page 96


 2337              		.loc 1 776 3 view .LVU666
 777:./lib/fdt/fdt_overlay.c **** 		int prop_len;
 2338              		.loc 1 777 3 view .LVU667
 778:./lib/fdt/fdt_overlay.c **** 		int ret;
 2339              		.loc 1 778 3 view .LVU668
 779:./lib/fdt/fdt_overlay.c **** 
 780:./lib/fdt/fdt_overlay.c **** 		prop = fdt_getprop_by_offset(fdto, property, &name,
 2340              		.loc 1 780 3 view .LVU669
 2341              		.loc 1 780 10 is_stmt 0 view .LVU670
 2342 001c 03AB     		add	r3, sp, #12
 2343 001e 02AA     		add	r2, sp, #8
 2344 0020 2146     		mov	r1, r4
 2345 0022 2846     		mov	r0, r5
 2346              	.LVL276:
 2347              		.loc 1 780 10 view .LVU671
 2348 0024 FFF7FEFF 		bl	fdt_getprop_by_offset
 2349              	.LVL277:
 2350              		.loc 1 780 10 view .LVU672
 2351 0028 0346     		mov	r3, r0
 2352              	.LVL278:
 781:./lib/fdt/fdt_overlay.c **** 					     &prop_len);
 782:./lib/fdt/fdt_overlay.c **** 		if (prop_len == -FDT_ERR_NOTFOUND)
 2353              		.loc 1 782 3 is_stmt 1 view .LVU673
 2354              		.loc 1 782 16 is_stmt 0 view .LVU674
 2355 002a 0399     		ldr	r1, [sp, #12]
 2356              		.loc 1 782 6 view .LVU675
 2357 002c B1F1FF3F 		cmp	r1, #-1
 2358 0030 0FD0     		beq	.L145
 783:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_INTERNAL;
 784:./lib/fdt/fdt_overlay.c **** 		if (prop_len < 0)
 2359              		.loc 1 784 3 is_stmt 1 view .LVU676
 2360              		.loc 1 784 6 is_stmt 0 view .LVU677
 2361 0032 0029     		cmp	r1, #0
 2362 0034 0FDB     		blt	.L137
 785:./lib/fdt/fdt_overlay.c **** 			return prop_len;
 786:./lib/fdt/fdt_overlay.c **** 
 787:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop(fdt, target, name, prop, prop_len);
 2363              		.loc 1 787 3 is_stmt 1 view .LVU678
 2364              		.loc 1 787 9 is_stmt 0 view .LVU679
 2365 0036 0091     		str	r1, [sp]
 2366 0038 029A     		ldr	r2, [sp, #8]
 2367 003a 3946     		mov	r1, r7
 2368 003c 3046     		mov	r0, r6
 2369              	.LVL279:
 2370              		.loc 1 787 9 view .LVU680
 2371 003e FFF7FEFF 		bl	fdt_setprop
 2372              	.LVL280:
 788:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2373              		.loc 1 788 3 is_stmt 1 view .LVU681
 2374              		.loc 1 788 6 is_stmt 0 view .LVU682
 2375 0042 0146     		mov	r1, r0
 2376 0044 38B9     		cbnz	r0, .L137
 2377              	.LBE110:
 774:./lib/fdt/fdt_overlay.c **** 		const char *name;
 2378              		.loc 1 774 2 is_stmt 1 discriminator 2 view .LVU683
 2379 0046 2146     		mov	r1, r4
 2380 0048 2846     		mov	r0, r5
ARM GAS  /tmp/ccCHVNBc.s 			page 97


 2381              	.LVL281:
 774:./lib/fdt/fdt_overlay.c **** 		const char *name;
 2382              		.loc 1 774 2 is_stmt 0 discriminator 2 view .LVU684
 2383 004a FFF7FEFF 		bl	fdt_next_property_offset
 2384              	.LVL282:
 2385 004e 0446     		mov	r4, r0
 2386              	.LVL283:
 774:./lib/fdt/fdt_overlay.c **** 		const char *name;
 2387              		.loc 1 774 2 discriminator 2 view .LVU685
 2388 0050 E2E7     		b	.L138
 2389              	.LVL284:
 2390              	.L145:
 2391              	.LBB111:
 783:./lib/fdt/fdt_overlay.c **** 		if (prop_len < 0)
 2392              		.loc 1 783 11 view .LVU686
 2393 0052 6FF00C01 		mvn	r1, #12
 2394              	.LVL285:
 2395              	.L137:
 783:./lib/fdt/fdt_overlay.c **** 		if (prop_len < 0)
 2396              		.loc 1 783 11 view .LVU687
 2397              	.LBE111:
 789:./lib/fdt/fdt_overlay.c **** 			return ret;
 790:./lib/fdt/fdt_overlay.c **** 	}
 791:./lib/fdt/fdt_overlay.c **** 
 792:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_subnode(subnode, fdto, node) {
 793:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, subnode, NULL);
 794:./lib/fdt/fdt_overlay.c **** 		int nnode;
 795:./lib/fdt/fdt_overlay.c **** 		int ret;
 796:./lib/fdt/fdt_overlay.c **** 
 797:./lib/fdt/fdt_overlay.c **** 		nnode = fdt_add_subnode(fdt, target, name);
 798:./lib/fdt/fdt_overlay.c **** 		if (nnode == -FDT_ERR_EXISTS) {
 799:./lib/fdt/fdt_overlay.c **** 			nnode = fdt_subnode_offset(fdt, target, name);
 800:./lib/fdt/fdt_overlay.c **** 			if (nnode == -FDT_ERR_NOTFOUND)
 801:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_INTERNAL;
 802:./lib/fdt/fdt_overlay.c **** 		}
 803:./lib/fdt/fdt_overlay.c **** 
 804:./lib/fdt/fdt_overlay.c **** 		if (nnode < 0)
 805:./lib/fdt/fdt_overlay.c **** 			return nnode;
 806:./lib/fdt/fdt_overlay.c **** 
 807:./lib/fdt/fdt_overlay.c **** 		ret = overlay_apply_node(fdt, nnode, fdto, subnode);
 808:./lib/fdt/fdt_overlay.c **** 		if (ret)
 809:./lib/fdt/fdt_overlay.c **** 			return ret;
 810:./lib/fdt/fdt_overlay.c **** 	}
 811:./lib/fdt/fdt_overlay.c **** 
 812:./lib/fdt/fdt_overlay.c **** 	return 0;
 813:./lib/fdt/fdt_overlay.c **** }
 2398              		.loc 1 813 1 view .LVU688
 2399 0056 0846     		mov	r0, r1
 2400 0058 04B0     		add	sp, sp, #16
 2401              	.LCFI45:
 2402              		.cfi_remember_state
 2403              		.cfi_def_cfa_offset 24
 2404              		@ sp needed
 2405 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2406              	.LVL286:
 2407              	.L148:
 2408              	.LCFI46:
ARM GAS  /tmp/ccCHVNBc.s 			page 98


 2409              		.cfi_restore_state
 792:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, subnode, NULL);
 2410              		.loc 1 792 2 is_stmt 1 view .LVU689
 2411 005e 4146     		mov	r1, r8
 2412 0060 2846     		mov	r0, r5
 2413              	.LVL287:
 792:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, subnode, NULL);
 2414              		.loc 1 792 2 is_stmt 0 view .LVU690
 2415 0062 FFF7FEFF 		bl	fdt_first_subnode
 2416              	.LVL288:
 2417 0066 0446     		mov	r4, r0
 2418              	.LVL289:
 792:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, subnode, NULL);
 2419              		.loc 1 792 2 view .LVU691
 2420 0068 10E0     		b	.L142
 2421              	.LVL290:
 2422              	.L150:
 2423              	.LBB112:
 799:./lib/fdt/fdt_overlay.c **** 			if (nnode == -FDT_ERR_NOTFOUND)
 2424              		.loc 1 799 4 is_stmt 1 view .LVU692
 799:./lib/fdt/fdt_overlay.c **** 			if (nnode == -FDT_ERR_NOTFOUND)
 2425              		.loc 1 799 12 is_stmt 0 view .LVU693
 2426 006a 4246     		mov	r2, r8
 2427 006c 3946     		mov	r1, r7
 2428 006e 3046     		mov	r0, r6
 2429              	.LVL291:
 799:./lib/fdt/fdt_overlay.c **** 			if (nnode == -FDT_ERR_NOTFOUND)
 2430              		.loc 1 799 12 view .LVU694
 2431 0070 FFF7FEFF 		bl	fdt_subnode_offset
 2432              	.LVL292:
 2433 0074 0146     		mov	r1, r0
 2434              	.LVL293:
 800:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_INTERNAL;
 2435              		.loc 1 800 4 is_stmt 1 view .LVU695
 800:./lib/fdt/fdt_overlay.c **** 				return -FDT_ERR_INTERNAL;
 2436              		.loc 1 800 7 is_stmt 0 view .LVU696
 2437 0076 B0F1FF3F 		cmp	r0, #-1
 2438 007a 18D1     		bne	.L143
 801:./lib/fdt/fdt_overlay.c **** 		}
 2439              		.loc 1 801 12 view .LVU697
 2440 007c 6FF00C01 		mvn	r1, #12
 2441 0080 E9E7     		b	.L137
 2442              	.LVL294:
 2443              	.L151:
 801:./lib/fdt/fdt_overlay.c **** 		}
 2444              		.loc 1 801 12 view .LVU698
 2445              	.LBE112:
 792:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, subnode, NULL);
 2446              		.loc 1 792 2 is_stmt 1 discriminator 2 view .LVU699
 2447 0082 2146     		mov	r1, r4
 2448 0084 2846     		mov	r0, r5
 2449              	.LVL295:
 792:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, subnode, NULL);
 2450              		.loc 1 792 2 is_stmt 0 discriminator 2 view .LVU700
 2451 0086 FFF7FEFF 		bl	fdt_next_subnode
 2452              	.LVL296:
 2453 008a 0446     		mov	r4, r0
ARM GAS  /tmp/ccCHVNBc.s 			page 99


 2454              	.LVL297:
 2455              	.L142:
 792:./lib/fdt/fdt_overlay.c **** 		const char *name = fdt_get_name(fdto, subnode, NULL);
 2456              		.loc 1 792 2 is_stmt 1 discriminator 1 view .LVU701
 2457 008c 002C     		cmp	r4, #0
 2458 008e 19DB     		blt	.L149
 2459              	.LBB113:
 793:./lib/fdt/fdt_overlay.c **** 		int nnode;
 2460              		.loc 1 793 3 view .LVU702
 793:./lib/fdt/fdt_overlay.c **** 		int nnode;
 2461              		.loc 1 793 22 is_stmt 0 view .LVU703
 2462 0090 0022     		movs	r2, #0
 2463 0092 2146     		mov	r1, r4
 2464 0094 2846     		mov	r0, r5
 2465              	.LVL298:
 793:./lib/fdt/fdt_overlay.c **** 		int nnode;
 2466              		.loc 1 793 22 view .LVU704
 2467 0096 FFF7FEFF 		bl	fdt_get_name
 2468              	.LVL299:
 793:./lib/fdt/fdt_overlay.c **** 		int nnode;
 2469              		.loc 1 793 22 view .LVU705
 2470 009a 8046     		mov	r8, r0
 2471              	.LVL300:
 794:./lib/fdt/fdt_overlay.c **** 		int ret;
 2472              		.loc 1 794 3 is_stmt 1 view .LVU706
 795:./lib/fdt/fdt_overlay.c **** 
 2473              		.loc 1 795 3 view .LVU707
 797:./lib/fdt/fdt_overlay.c **** 		if (nnode == -FDT_ERR_EXISTS) {
 2474              		.loc 1 797 3 view .LVU708
 797:./lib/fdt/fdt_overlay.c **** 		if (nnode == -FDT_ERR_EXISTS) {
 2475              		.loc 1 797 11 is_stmt 0 view .LVU709
 2476 009c 0246     		mov	r2, r0
 2477 009e 3946     		mov	r1, r7
 2478 00a0 3046     		mov	r0, r6
 2479              	.LVL301:
 797:./lib/fdt/fdt_overlay.c **** 		if (nnode == -FDT_ERR_EXISTS) {
 2480              		.loc 1 797 11 view .LVU710
 2481 00a2 FFF7FEFF 		bl	fdt_add_subnode
 2482              	.LVL302:
 797:./lib/fdt/fdt_overlay.c **** 		if (nnode == -FDT_ERR_EXISTS) {
 2483              		.loc 1 797 11 view .LVU711
 2484 00a6 0146     		mov	r1, r0
 2485              	.LVL303:
 798:./lib/fdt/fdt_overlay.c **** 			nnode = fdt_subnode_offset(fdt, target, name);
 2486              		.loc 1 798 3 is_stmt 1 view .LVU712
 798:./lib/fdt/fdt_overlay.c **** 			nnode = fdt_subnode_offset(fdt, target, name);
 2487              		.loc 1 798 6 is_stmt 0 view .LVU713
 2488 00a8 10F1020F 		cmn	r0, #2
 2489 00ac DDD0     		beq	.L150
 2490              	.L143:
 804:./lib/fdt/fdt_overlay.c **** 			return nnode;
 2491              		.loc 1 804 3 is_stmt 1 view .LVU714
 804:./lib/fdt/fdt_overlay.c **** 			return nnode;
 2492              		.loc 1 804 6 is_stmt 0 view .LVU715
 2493 00ae 0029     		cmp	r1, #0
 2494 00b0 D1DB     		blt	.L137
 807:./lib/fdt/fdt_overlay.c **** 		if (ret)
ARM GAS  /tmp/ccCHVNBc.s 			page 100


 2495              		.loc 1 807 3 is_stmt 1 view .LVU716
 807:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2496              		.loc 1 807 9 is_stmt 0 view .LVU717
 2497 00b2 2346     		mov	r3, r4
 2498 00b4 2A46     		mov	r2, r5
 2499 00b6 3046     		mov	r0, r6
 2500              	.LVL304:
 807:./lib/fdt/fdt_overlay.c **** 		if (ret)
 2501              		.loc 1 807 9 view .LVU718
 2502 00b8 FFF7A2FF 		bl	overlay_apply_node
 2503              	.LVL305:
 808:./lib/fdt/fdt_overlay.c **** 			return ret;
 2504              		.loc 1 808 3 is_stmt 1 view .LVU719
 808:./lib/fdt/fdt_overlay.c **** 			return ret;
 2505              		.loc 1 808 6 is_stmt 0 view .LVU720
 2506 00bc 0146     		mov	r1, r0
 2507 00be 0028     		cmp	r0, #0
 2508 00c0 DFD0     		beq	.L151
 2509 00c2 C8E7     		b	.L137
 2510              	.LVL306:
 2511              	.L149:
 808:./lib/fdt/fdt_overlay.c **** 			return ret;
 2512              		.loc 1 808 6 view .LVU721
 2513              	.LBE113:
 812:./lib/fdt/fdt_overlay.c **** }
 2514              		.loc 1 812 9 view .LVU722
 2515 00c4 0021     		movs	r1, #0
 2516 00c6 C6E7     		b	.L137
 2517              		.cfi_endproc
 2518              	.LFE90:
 2520              		.section	.text.get_path_len,"ax",%progbits
 2521              		.align	1
 2522              		.syntax unified
 2523              		.thumb
 2524              		.thumb_func
 2526              	get_path_len:
 2527              	.LVL307:
 2528              	.LFB92:
 814:./lib/fdt/fdt_overlay.c **** 
 815:./lib/fdt/fdt_overlay.c **** /**
 816:./lib/fdt/fdt_overlay.c ****  * overlay_merge - Merge an overlay into its base device tree
 817:./lib/fdt/fdt_overlay.c ****  * @fdt: Base Device Tree blob
 818:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 819:./lib/fdt/fdt_overlay.c ****  *
 820:./lib/fdt/fdt_overlay.c ****  * overlay_merge() merges an overlay into its base device tree.
 821:./lib/fdt/fdt_overlay.c ****  *
 822:./lib/fdt/fdt_overlay.c ****  * This is the next to last step in the device tree overlay application
 823:./lib/fdt/fdt_overlay.c ****  * process, when all the phandles have been adjusted and resolved and
 824:./lib/fdt/fdt_overlay.c ****  * you just have to merge overlay into the base device tree.
 825:./lib/fdt/fdt_overlay.c ****  *
 826:./lib/fdt/fdt_overlay.c ****  * returns:
 827:./lib/fdt/fdt_overlay.c ****  *      0 on success
 828:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 829:./lib/fdt/fdt_overlay.c ****  */
 830:./lib/fdt/fdt_overlay.c **** static int overlay_merge(void *fdt, void *fdto)
 831:./lib/fdt/fdt_overlay.c **** {
 832:./lib/fdt/fdt_overlay.c **** 	int fragment;
ARM GAS  /tmp/ccCHVNBc.s 			page 101


 833:./lib/fdt/fdt_overlay.c **** 
 834:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_subnode(fragment, fdto, 0) {
 835:./lib/fdt/fdt_overlay.c **** 		int overlay;
 836:./lib/fdt/fdt_overlay.c **** 		int target;
 837:./lib/fdt/fdt_overlay.c **** 		int ret;
 838:./lib/fdt/fdt_overlay.c **** 
 839:./lib/fdt/fdt_overlay.c **** 		/*
 840:./lib/fdt/fdt_overlay.c **** 		 * Each fragments will have an __overlay__ node. If
 841:./lib/fdt/fdt_overlay.c **** 		 * they don't, it's not supposed to be merged
 842:./lib/fdt/fdt_overlay.c **** 		 */
 843:./lib/fdt/fdt_overlay.c **** 		overlay = fdt_subnode_offset(fdto, fragment, "__overlay__");
 844:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 845:./lib/fdt/fdt_overlay.c **** 			continue;
 846:./lib/fdt/fdt_overlay.c **** 
 847:./lib/fdt/fdt_overlay.c **** 		if (overlay < 0)
 848:./lib/fdt/fdt_overlay.c **** 			return overlay;
 849:./lib/fdt/fdt_overlay.c **** 
 850:./lib/fdt/fdt_overlay.c **** 		target = fdt_overlay_target_offset(fdt, fdto, fragment, NULL);
 851:./lib/fdt/fdt_overlay.c **** 		if (target < 0)
 852:./lib/fdt/fdt_overlay.c **** 			return target;
 853:./lib/fdt/fdt_overlay.c **** 
 854:./lib/fdt/fdt_overlay.c **** 		ret = overlay_apply_node(fdt, target, fdto, overlay);
 855:./lib/fdt/fdt_overlay.c **** 		if (ret)
 856:./lib/fdt/fdt_overlay.c **** 			return ret;
 857:./lib/fdt/fdt_overlay.c **** 	}
 858:./lib/fdt/fdt_overlay.c **** 
 859:./lib/fdt/fdt_overlay.c **** 	return 0;
 860:./lib/fdt/fdt_overlay.c **** }
 861:./lib/fdt/fdt_overlay.c **** 
 862:./lib/fdt/fdt_overlay.c **** static int get_path_len(const void *fdt, int nodeoffset)
 863:./lib/fdt/fdt_overlay.c **** {
 2529              		.loc 1 863 1 is_stmt 1 view -0
 2530              		.cfi_startproc
 2531              		@ args = 0, pretend = 0, frame = 8
 2532              		@ frame_needed = 0, uses_anonymous_args = 0
 2533              		.loc 1 863 1 is_stmt 0 view .LVU724
 2534 0000 70B5     		push	{r4, r5, r6, lr}
 2535              	.LCFI47:
 2536              		.cfi_def_cfa_offset 16
 2537              		.cfi_offset 4, -16
 2538              		.cfi_offset 5, -12
 2539              		.cfi_offset 6, -8
 2540              		.cfi_offset 14, -4
 2541 0002 82B0     		sub	sp, sp, #8
 2542              	.LCFI48:
 2543              		.cfi_def_cfa_offset 24
 2544 0004 0646     		mov	r6, r0
 2545 0006 0C46     		mov	r4, r1
 864:./lib/fdt/fdt_overlay.c **** 	int len = 0, namelen;
 2546              		.loc 1 864 2 is_stmt 1 view .LVU725
 2547              	.LVL308:
 865:./lib/fdt/fdt_overlay.c **** 	const char *name;
 2548              		.loc 1 865 2 view .LVU726
 2549              	.LBB114:
 866:./lib/fdt/fdt_overlay.c **** 
 867:./lib/fdt/fdt_overlay.c **** 	FDT_RO_PROBE(fdt);
 2550              		.loc 1 867 2 view .LVU727
ARM GAS  /tmp/ccCHVNBc.s 			page 102


 2551              		.loc 1 867 2 view .LVU728
 2552 0008 FFF7FEFF 		bl	fdt_ro_probe_
 2553              	.LVL309:
 2554              		.loc 1 867 2 is_stmt 0 discriminator 1 view .LVU729
 2555 000c 051E     		subs	r5, r0, #0
 2556 000e 13DB     		blt	.L152
 2557              	.LBE114:
 864:./lib/fdt/fdt_overlay.c **** 	const char *name;
 2558              		.loc 1 864 6 view .LVU730
 2559 0010 0025     		movs	r5, #0
 2560              	.LVL310:
 2561              	.L156:
 2562              		.loc 1 867 19 is_stmt 1 discriminator 2 view .LVU731
 868:./lib/fdt/fdt_overlay.c **** 
 869:./lib/fdt/fdt_overlay.c **** 	for (;;) {
 2563              		.loc 1 869 2 view .LVU732
 870:./lib/fdt/fdt_overlay.c **** 		name = fdt_get_name(fdt, nodeoffset, &namelen);
 2564              		.loc 1 870 3 view .LVU733
 2565              		.loc 1 870 10 is_stmt 0 view .LVU734
 2566 0012 01AA     		add	r2, sp, #4
 2567 0014 2146     		mov	r1, r4
 2568 0016 3046     		mov	r0, r6
 2569 0018 FFF7FEFF 		bl	fdt_get_name
 2570              	.LVL311:
 871:./lib/fdt/fdt_overlay.c **** 		if (!name)
 2571              		.loc 1 871 3 is_stmt 1 view .LVU735
 2572              		.loc 1 871 6 is_stmt 0 view .LVU736
 2573 001c 58B1     		cbz	r0, .L159
 872:./lib/fdt/fdt_overlay.c **** 			return namelen;
 873:./lib/fdt/fdt_overlay.c **** 
 874:./lib/fdt/fdt_overlay.c **** 		/* root? we're done */
 875:./lib/fdt/fdt_overlay.c **** 		if (namelen == 0)
 2574              		.loc 1 875 3 is_stmt 1 view .LVU737
 2575              		.loc 1 875 15 is_stmt 0 view .LVU738
 2576 001e 019B     		ldr	r3, [sp, #4]
 2577              		.loc 1 875 6 view .LVU739
 2578 0020 6BB1     		cbz	r3, .L155
 876:./lib/fdt/fdt_overlay.c **** 			break;
 877:./lib/fdt/fdt_overlay.c **** 
 878:./lib/fdt/fdt_overlay.c **** 		nodeoffset = fdt_parent_offset(fdt, nodeoffset);
 2579              		.loc 1 878 3 is_stmt 1 view .LVU740
 2580              		.loc 1 878 16 is_stmt 0 view .LVU741
 2581 0022 2146     		mov	r1, r4
 2582 0024 3046     		mov	r0, r6
 2583              	.LVL312:
 2584              		.loc 1 878 16 view .LVU742
 2585 0026 FFF7FEFF 		bl	fdt_parent_offset
 2586              	.LVL313:
 879:./lib/fdt/fdt_overlay.c **** 		if (nodeoffset < 0)
 2587              		.loc 1 879 3 is_stmt 1 view .LVU743
 2588              		.loc 1 879 6 is_stmt 0 view .LVU744
 2589 002a 041E     		subs	r4, r0, #0
 2590 002c 0BDB     		blt	.L157
 880:./lib/fdt/fdt_overlay.c **** 			return nodeoffset;
 881:./lib/fdt/fdt_overlay.c **** 		len += namelen + 1;
 2591              		.loc 1 881 3 is_stmt 1 view .LVU745
 2592              		.loc 1 881 18 is_stmt 0 view .LVU746
ARM GAS  /tmp/ccCHVNBc.s 			page 103


 2593 002e 019B     		ldr	r3, [sp, #4]
 2594 0030 0133     		adds	r3, r3, #1
 2595              		.loc 1 881 7 view .LVU747
 2596 0032 1D44     		add	r5, r5, r3
 2597              	.LVL314:
 869:./lib/fdt/fdt_overlay.c **** 		name = fdt_get_name(fdt, nodeoffset, &namelen);
 2598              		.loc 1 869 2 is_stmt 1 view .LVU748
 870:./lib/fdt/fdt_overlay.c **** 		if (!name)
 2599              		.loc 1 870 8 is_stmt 0 view .LVU749
 2600 0034 EDE7     		b	.L156
 2601              	.LVL315:
 2602              	.L159:
 872:./lib/fdt/fdt_overlay.c **** 
 2603              		.loc 1 872 4 is_stmt 1 view .LVU750
 872:./lib/fdt/fdt_overlay.c **** 
 2604              		.loc 1 872 11 is_stmt 0 view .LVU751
 2605 0036 019D     		ldr	r5, [sp, #4]
 2606              	.LVL316:
 2607              	.L152:
 882:./lib/fdt/fdt_overlay.c **** 	}
 883:./lib/fdt/fdt_overlay.c **** 
 884:./lib/fdt/fdt_overlay.c **** 	/* in case of root pretend it's "/" */
 885:./lib/fdt/fdt_overlay.c **** 	if (len == 0)
 886:./lib/fdt/fdt_overlay.c **** 		len++;
 887:./lib/fdt/fdt_overlay.c **** 	return len;
 888:./lib/fdt/fdt_overlay.c **** }
 2608              		.loc 1 888 1 view .LVU752
 2609 0038 2846     		mov	r0, r5
 2610 003a 02B0     		add	sp, sp, #8
 2611              	.LCFI49:
 2612              		.cfi_remember_state
 2613              		.cfi_def_cfa_offset 16
 2614              		@ sp needed
 2615 003c 70BD     		pop	{r4, r5, r6, pc}
 2616              	.LVL317:
 2617              	.L155:
 2618              	.LCFI50:
 2619              		.cfi_restore_state
 885:./lib/fdt/fdt_overlay.c **** 		len++;
 2620              		.loc 1 885 2 is_stmt 1 view .LVU753
 885:./lib/fdt/fdt_overlay.c **** 		len++;
 2621              		.loc 1 885 5 is_stmt 0 view .LVU754
 2622 003e 002D     		cmp	r5, #0
 2623 0040 FAD1     		bne	.L152
 886:./lib/fdt/fdt_overlay.c **** 	return len;
 2624              		.loc 1 886 3 is_stmt 1 view .LVU755
 886:./lib/fdt/fdt_overlay.c **** 	return len;
 2625              		.loc 1 886 6 is_stmt 0 view .LVU756
 2626 0042 0135     		adds	r5, r5, #1
 2627              	.LVL318:
 886:./lib/fdt/fdt_overlay.c **** 	return len;
 2628              		.loc 1 886 6 view .LVU757
 2629 0044 F8E7     		b	.L152
 2630              	.LVL319:
 2631              	.L157:
 880:./lib/fdt/fdt_overlay.c **** 		len += namelen + 1;
 2632              		.loc 1 880 11 view .LVU758
ARM GAS  /tmp/ccCHVNBc.s 			page 104


 2633 0046 2546     		mov	r5, r4
 2634              	.LVL320:
 880:./lib/fdt/fdt_overlay.c **** 		len += namelen + 1;
 2635              		.loc 1 880 11 view .LVU759
 2636 0048 F6E7     		b	.L152
 2637              		.cfi_endproc
 2638              	.LFE92:
 2640              		.section	.text.fdt_setprop_placeholder,"ax",%progbits
 2641              		.align	1
 2642              		.syntax unified
 2643              		.thumb
 2644              		.thumb_func
 2646              	fdt_setprop_placeholder:
 2647              	.LVL321:
 2648              	.LFB60:
1739:./include/linux/libfdt.h **** 
1740:./include/linux/libfdt.h **** /**
1741:./include/linux/libfdt.h ****  * fdt_setprop_placeholder_namelen - allocate space for a property
1742:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1743:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1744:./include/linux/libfdt.h ****  * @name: name of the property to change
1745:./include/linux/libfdt.h ****  * @namelen: length of the name
1746:./include/linux/libfdt.h ****  * @len: length of the property value
1747:./include/linux/libfdt.h ****  * @prop_data: return pointer to property data
1748:./include/linux/libfdt.h ****  *
1749:./include/linux/libfdt.h ****  * fdt_setprop_placeholder_namelen() allocates the named property in the given node.
1750:./include/linux/libfdt.h ****  * If the property exists it is resized. In either case a pointer to the
1751:./include/linux/libfdt.h ****  * property data is returned.
1752:./include/linux/libfdt.h ****  *
1753:./include/linux/libfdt.h ****  * This function may insert or delete data from the blob, and will
1754:./include/linux/libfdt.h ****  * therefore change the offsets of some existing nodes.
1755:./include/linux/libfdt.h ****  *
1756:./include/linux/libfdt.h ****  * returns:
1757:./include/linux/libfdt.h ****  *	0, on success
1758:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, there is insufficient free space in the blob to
1759:./include/linux/libfdt.h ****  *		contain the new property value
1760:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1761:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1762:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1763:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1764:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1765:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1766:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1767:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1768:./include/linux/libfdt.h ****  */
1769:./include/linux/libfdt.h **** int fdt_setprop_placeholder_namelen(void *fdt, int nodeoffset, const char *name,
1770:./include/linux/libfdt.h **** 				    int namelen, int len, void **prop_data);
1771:./include/linux/libfdt.h **** 
1772:./include/linux/libfdt.h **** /**
1773:./include/linux/libfdt.h ****  * fdt_setprop_placeholder - allocate space for a property
1774:./include/linux/libfdt.h ****  * @fdt: pointer to the device tree blob
1775:./include/linux/libfdt.h ****  * @nodeoffset: offset of the node whose property to change
1776:./include/linux/libfdt.h ****  * @name: name of the property to change
1777:./include/linux/libfdt.h ****  * @len: length of the property value
1778:./include/linux/libfdt.h ****  * @prop_data: return pointer to property data
1779:./include/linux/libfdt.h ****  *
1780:./include/linux/libfdt.h ****  * fdt_setprop_placeholder() allocates the named property in the given node.
ARM GAS  /tmp/ccCHVNBc.s 			page 105


1781:./include/linux/libfdt.h ****  * If the property exists it is resized. In either case a pointer to the
1782:./include/linux/libfdt.h ****  * property data is returned.
1783:./include/linux/libfdt.h ****  *
1784:./include/linux/libfdt.h ****  * This function may insert or delete data from the blob, and will
1785:./include/linux/libfdt.h ****  * therefore change the offsets of some existing nodes.
1786:./include/linux/libfdt.h ****  *
1787:./include/linux/libfdt.h ****  * returns:
1788:./include/linux/libfdt.h ****  *	0, on success
1789:./include/linux/libfdt.h ****  *	-FDT_ERR_NOSPACE, there is insufficient free space in the blob to
1790:./include/linux/libfdt.h ****  *		contain the new property value
1791:./include/linux/libfdt.h ****  *	-FDT_ERR_BADOFFSET, nodeoffset did not point to FDT_BEGIN_NODE tag
1792:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1793:./include/linux/libfdt.h ****  *	-FDT_ERR_BADMAGIC,
1794:./include/linux/libfdt.h ****  *	-FDT_ERR_BADVERSION,
1795:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTATE,
1796:./include/linux/libfdt.h ****  *	-FDT_ERR_BADSTRUCTURE,
1797:./include/linux/libfdt.h ****  *	-FDT_ERR_BADLAYOUT,
1798:./include/linux/libfdt.h ****  *	-FDT_ERR_TRUNCATED, standard meanings
1799:./include/linux/libfdt.h ****  */
1800:./include/linux/libfdt.h **** static inline int fdt_setprop_placeholder(void *fdt, int nodeoffset,
1801:./include/linux/libfdt.h **** 					  const char *name, int len,
1802:./include/linux/libfdt.h **** 					  void **prop_data)
1803:./include/linux/libfdt.h **** {
 2649              		.loc 3 1803 1 is_stmt 1 view -0
 2650              		.cfi_startproc
 2651              		@ args = 4, pretend = 0, frame = 0
 2652              		@ frame_needed = 0, uses_anonymous_args = 0
 2653              		.loc 3 1803 1 is_stmt 0 view .LVU761
 2654 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2655              	.LCFI51:
 2656              		.cfi_def_cfa_offset 20
 2657              		.cfi_offset 4, -20
 2658              		.cfi_offset 5, -16
 2659              		.cfi_offset 6, -12
 2660              		.cfi_offset 7, -8
 2661              		.cfi_offset 14, -4
 2662 0002 83B0     		sub	sp, sp, #12
 2663              	.LCFI52:
 2664              		.cfi_def_cfa_offset 32
 2665 0004 0546     		mov	r5, r0
 2666 0006 0E46     		mov	r6, r1
 2667 0008 1446     		mov	r4, r2
 2668 000a 1F46     		mov	r7, r3
1804:./include/linux/libfdt.h **** 	return fdt_setprop_placeholder_namelen(fdt, nodeoffset, name,
 2669              		.loc 3 1804 2 is_stmt 1 view .LVU762
1805:./include/linux/libfdt.h **** 					       strlen(name), len, prop_data);
 2670              		.loc 3 1805 13 is_stmt 0 view .LVU763
 2671 000c 1046     		mov	r0, r2
 2672              	.LVL322:
 2673              		.loc 3 1805 13 view .LVU764
 2674 000e FFF7FEFF 		bl	strlen
 2675              	.LVL323:
 2676              		.loc 3 1805 13 view .LVU765
 2677 0012 0346     		mov	r3, r0
1804:./include/linux/libfdt.h **** 	return fdt_setprop_placeholder_namelen(fdt, nodeoffset, name,
 2678              		.loc 3 1804 9 view .LVU766
 2679 0014 089A     		ldr	r2, [sp, #32]
ARM GAS  /tmp/ccCHVNBc.s 			page 106


 2680 0016 0192     		str	r2, [sp, #4]
 2681 0018 0097     		str	r7, [sp]
 2682 001a 2246     		mov	r2, r4
 2683 001c 3146     		mov	r1, r6
 2684 001e 2846     		mov	r0, r5
 2685 0020 FFF7FEFF 		bl	fdt_setprop_placeholder_namelen
 2686              	.LVL324:
1806:./include/linux/libfdt.h **** }
 2687              		.loc 3 1806 1 view .LVU767
 2688 0024 03B0     		add	sp, sp, #12
 2689              	.LCFI53:
 2690              		.cfi_def_cfa_offset 20
 2691              		@ sp needed
 2692 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 2693              		.loc 3 1806 1 view .LVU768
 2694              		.cfi_endproc
 2695              	.LFE60:
 2697              		.section	.rodata.fdt_overlay_target_offset.str1.4,"aMS",%progbits,1
 2698              		.align	2
 2699              	.LC6:
 2700 0000 74617267 		.ascii	"target-path\000"
 2700      65742D70 
 2700      61746800 
 2701              		.section	.text.fdt_overlay_target_offset,"ax",%progbits
 2702              		.align	1
 2703              		.global	fdt_overlay_target_offset
 2704              		.syntax unified
 2705              		.thumb
 2706              		.thumb_func
 2708              	fdt_overlay_target_offset:
 2709              	.LVL325:
 2710              	.LFB76:
  46:./lib/fdt/fdt_overlay.c **** 	uint32_t phandle;
 2711              		.loc 1 46 1 is_stmt 1 view -0
 2712              		.cfi_startproc
 2713              		@ args = 0, pretend = 0, frame = 8
 2714              		@ frame_needed = 0, uses_anonymous_args = 0
  46:./lib/fdt/fdt_overlay.c **** 	uint32_t phandle;
 2715              		.loc 1 46 1 is_stmt 0 view .LVU770
 2716 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2717              	.LCFI54:
 2718              		.cfi_def_cfa_offset 20
 2719              		.cfi_offset 4, -20
 2720              		.cfi_offset 5, -16
 2721              		.cfi_offset 6, -12
 2722              		.cfi_offset 7, -8
 2723              		.cfi_offset 14, -4
 2724 0002 83B0     		sub	sp, sp, #12
 2725              	.LCFI55:
 2726              		.cfi_def_cfa_offset 32
 2727 0004 0746     		mov	r7, r0
 2728 0006 0C46     		mov	r4, r1
 2729 0008 1546     		mov	r5, r2
 2730 000a 1E46     		mov	r6, r3
  47:./lib/fdt/fdt_overlay.c **** 	const char *path = NULL;
 2731              		.loc 1 47 2 is_stmt 1 view .LVU771
  48:./lib/fdt/fdt_overlay.c **** 	int path_len = 0, ret;
ARM GAS  /tmp/ccCHVNBc.s 			page 107


 2732              		.loc 1 48 2 view .LVU772
 2733              	.LVL326:
  49:./lib/fdt/fdt_overlay.c **** 
 2734              		.loc 1 49 2 view .LVU773
  49:./lib/fdt/fdt_overlay.c **** 
 2735              		.loc 1 49 6 is_stmt 0 view .LVU774
 2736 000c 0023     		movs	r3, #0
 2737              	.LVL327:
  49:./lib/fdt/fdt_overlay.c **** 
 2738              		.loc 1 49 6 view .LVU775
 2739 000e 0193     		str	r3, [sp, #4]
  52:./lib/fdt/fdt_overlay.c **** 	if (phandle == (uint32_t)-1)
 2740              		.loc 1 52 2 is_stmt 1 view .LVU776
  52:./lib/fdt/fdt_overlay.c **** 	if (phandle == (uint32_t)-1)
 2741              		.loc 1 52 12 is_stmt 0 view .LVU777
 2742 0010 1146     		mov	r1, r2
 2743              	.LVL328:
  52:./lib/fdt/fdt_overlay.c **** 	if (phandle == (uint32_t)-1)
 2744              		.loc 1 52 12 view .LVU778
 2745 0012 2046     		mov	r0, r4
 2746              	.LVL329:
  52:./lib/fdt/fdt_overlay.c **** 	if (phandle == (uint32_t)-1)
 2747              		.loc 1 52 12 view .LVU779
 2748 0014 FFF7FEFF 		bl	overlay_get_target_phandle
 2749              	.LVL330:
  53:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_BADPHANDLE;
 2750              		.loc 1 53 2 is_stmt 1 view .LVU780
  53:./lib/fdt/fdt_overlay.c **** 		return -FDT_ERR_BADPHANDLE;
 2751              		.loc 1 53 5 is_stmt 0 view .LVU781
 2752 0018 B0F1FF3F 		cmp	r0, #-1
 2753 001c 21D0     		beq	.L169
  57:./lib/fdt/fdt_overlay.c **** 		/* And then a path based lookup */
 2754              		.loc 1 57 2 is_stmt 1 view .LVU782
  57:./lib/fdt/fdt_overlay.c **** 		/* And then a path based lookup */
 2755              		.loc 1 57 5 is_stmt 0 view .LVU783
 2756 001e 70B9     		cbnz	r0, .L164
  59:./lib/fdt/fdt_overlay.c **** 		if (path)
 2757              		.loc 1 59 3 is_stmt 1 view .LVU784
  59:./lib/fdt/fdt_overlay.c **** 		if (path)
 2758              		.loc 1 59 10 is_stmt 0 view .LVU785
 2759 0020 01AB     		add	r3, sp, #4
 2760 0022 114A     		ldr	r2, .L172
 2761 0024 2946     		mov	r1, r5
 2762 0026 2046     		mov	r0, r4
 2763              	.LVL331:
  59:./lib/fdt/fdt_overlay.c **** 		if (path)
 2764              		.loc 1 59 10 view .LVU786
 2765 0028 FFF7FEFF 		bl	fdt_getprop
 2766              	.LVL332:
  60:./lib/fdt/fdt_overlay.c **** 			ret = fdt_path_offset(fdt, path);
 2767              		.loc 1 60 3 is_stmt 1 view .LVU787
  60:./lib/fdt/fdt_overlay.c **** 			ret = fdt_path_offset(fdt, path);
 2768              		.loc 1 60 6 is_stmt 0 view .LVU788
 2769 002c 0446     		mov	r4, r0
 2770              	.LVL333:
  60:./lib/fdt/fdt_overlay.c **** 			ret = fdt_path_offset(fdt, path);
 2771              		.loc 1 60 6 view .LVU789
ARM GAS  /tmp/ccCHVNBc.s 			page 108


 2772 002e 20B1     		cbz	r0, .L165
  61:./lib/fdt/fdt_overlay.c **** 		else
 2773              		.loc 1 61 4 is_stmt 1 view .LVU790
  61:./lib/fdt/fdt_overlay.c **** 		else
 2774              		.loc 1 61 10 is_stmt 0 view .LVU791
 2775 0030 0146     		mov	r1, r0
 2776 0032 3846     		mov	r0, r7
 2777              	.LVL334:
  61:./lib/fdt/fdt_overlay.c **** 		else
 2778              		.loc 1 61 10 view .LVU792
 2779 0034 FFF7FEFF 		bl	fdt_path_offset
 2780              	.LVL335:
  61:./lib/fdt/fdt_overlay.c **** 		else
 2781              		.loc 1 61 10 view .LVU793
 2782 0038 06E0     		b	.L166
 2783              	.LVL336:
 2784              	.L165:
  63:./lib/fdt/fdt_overlay.c **** 	} else
 2785              		.loc 1 63 4 is_stmt 1 view .LVU794
  63:./lib/fdt/fdt_overlay.c **** 	} else
 2786              		.loc 1 63 8 is_stmt 0 view .LVU795
 2787 003a 0198     		ldr	r0, [sp, #4]
 2788              	.LVL337:
  63:./lib/fdt/fdt_overlay.c **** 	} else
 2789              		.loc 1 63 8 view .LVU796
 2790 003c 04E0     		b	.L166
 2791              	.LVL338:
 2792              	.L164:
  65:./lib/fdt/fdt_overlay.c **** 
 2793              		.loc 1 65 3 is_stmt 1 view .LVU797
  65:./lib/fdt/fdt_overlay.c **** 
 2794              		.loc 1 65 9 is_stmt 0 view .LVU798
 2795 003e 0146     		mov	r1, r0
 2796 0040 3846     		mov	r0, r7
 2797              	.LVL339:
  65:./lib/fdt/fdt_overlay.c **** 
 2798              		.loc 1 65 9 view .LVU799
 2799 0042 FFF7FEFF 		bl	fdt_node_offset_by_phandle
 2800              	.LVL340:
  48:./lib/fdt/fdt_overlay.c **** 	int path_len = 0, ret;
 2801              		.loc 1 48 14 view .LVU800
 2802 0046 0024     		movs	r4, #0
 2803              	.LVL341:
 2804              	.L166:
  74:./lib/fdt/fdt_overlay.c **** 		ret = -FDT_ERR_BADOVERLAY;
 2805              		.loc 1 74 2 is_stmt 1 view .LVU801
  74:./lib/fdt/fdt_overlay.c **** 		ret = -FDT_ERR_BADOVERLAY;
 2806              		.loc 1 74 5 is_stmt 0 view .LVU802
 2807 0048 0028     		cmp	r0, #0
 2808 004a 03DB     		blt	.L171
  78:./lib/fdt/fdt_overlay.c **** 		return ret;
 2809              		.loc 1 78 2 is_stmt 1 view .LVU803
  82:./lib/fdt/fdt_overlay.c **** 		*pathp = path ? path : NULL;
 2810              		.loc 1 82 2 view .LVU804
  82:./lib/fdt/fdt_overlay.c **** 		*pathp = path ? path : NULL;
 2811              		.loc 1 82 5 is_stmt 0 view .LVU805
 2812 004c 06B1     		cbz	r6, .L162
ARM GAS  /tmp/ccCHVNBc.s 			page 109


  83:./lib/fdt/fdt_overlay.c **** 
 2813              		.loc 1 83 3 is_stmt 1 view .LVU806
  83:./lib/fdt/fdt_overlay.c **** 
 2814              		.loc 1 83 10 is_stmt 0 view .LVU807
 2815 004e 3460     		str	r4, [r6]
 2816              	.LVL342:
 2817              	.L162:
  86:./lib/fdt/fdt_overlay.c **** 
 2818              		.loc 1 86 1 view .LVU808
 2819 0050 03B0     		add	sp, sp, #12
 2820              	.LCFI56:
 2821              		.cfi_remember_state
 2822              		.cfi_def_cfa_offset 20
 2823              		@ sp needed
 2824 0052 F0BD     		pop	{r4, r5, r6, r7, pc}
 2825              	.LVL343:
 2826              	.L171:
 2827              	.LCFI57:
 2828              		.cfi_restore_state
  74:./lib/fdt/fdt_overlay.c **** 		ret = -FDT_ERR_BADOVERLAY;
 2829              		.loc 1 74 26 discriminator 1 view .LVU809
 2830 0054 019B     		ldr	r3, [sp, #4]
  74:./lib/fdt/fdt_overlay.c **** 		ret = -FDT_ERR_BADOVERLAY;
 2831              		.loc 1 74 14 discriminator 1 view .LVU810
 2832 0056 B3F1FF3F 		cmp	r3, #-1
 2833 005a F9D1     		bne	.L162
  75:./lib/fdt/fdt_overlay.c **** 
 2834              		.loc 1 75 7 view .LVU811
 2835 005c 6FF00F00 		mvn	r0, #15
 2836              	.LVL344:
  79:./lib/fdt/fdt_overlay.c **** 
 2837              		.loc 1 79 3 is_stmt 1 view .LVU812
  79:./lib/fdt/fdt_overlay.c **** 
 2838              		.loc 1 79 10 is_stmt 0 view .LVU813
 2839 0060 F6E7     		b	.L162
 2840              	.LVL345:
 2841              	.L169:
  54:./lib/fdt/fdt_overlay.c **** 
 2842              		.loc 1 54 10 view .LVU814
 2843 0062 6FF00500 		mvn	r0, #5
 2844              	.LVL346:
  54:./lib/fdt/fdt_overlay.c **** 
 2845              		.loc 1 54 10 view .LVU815
 2846 0066 F3E7     		b	.L162
 2847              	.L173:
 2848              		.align	2
 2849              	.L172:
 2850 0068 00000000 		.word	.LC6
 2851              		.cfi_endproc
 2852              	.LFE76:
 2854              		.section	.rodata.overlay_prevent_phandle_overwrite.str1.4,"aMS",%progbits,1
 2855              		.align	2
 2856              	.LC7:
 2857 0000 5F5F6F76 		.ascii	"__overlay__\000"
 2857      65726C61 
 2857      795F5F00 
 2858              		.section	.text.overlay_prevent_phandle_overwrite,"ax",%progbits
ARM GAS  /tmp/ccCHVNBc.s 			page 110


 2859              		.align	1
 2860              		.syntax unified
 2861              		.thumb
 2862              		.thumb_func
 2864              	overlay_prevent_phandle_overwrite:
 2865              	.LVL347:
 2866              	.LFB89:
 715:./lib/fdt/fdt_overlay.c **** 	int fragment;
 2867              		.loc 1 715 1 is_stmt 1 view -0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 0
 2870              		@ frame_needed = 0, uses_anonymous_args = 0
 715:./lib/fdt/fdt_overlay.c **** 	int fragment;
 2871              		.loc 1 715 1 is_stmt 0 view .LVU817
 2872 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2873              	.LCFI58:
 2874              		.cfi_def_cfa_offset 24
 2875              		.cfi_offset 3, -24
 2876              		.cfi_offset 4, -20
 2877              		.cfi_offset 5, -16
 2878              		.cfi_offset 6, -12
 2879              		.cfi_offset 7, -8
 2880              		.cfi_offset 14, -4
 2881 0002 0746     		mov	r7, r0
 2882 0004 0E46     		mov	r6, r1
 716:./lib/fdt/fdt_overlay.c **** 
 2883              		.loc 1 716 2 is_stmt 1 view .LVU818
 718:./lib/fdt/fdt_overlay.c **** 		int overlay;
 2884              		.loc 1 718 2 view .LVU819
 2885 0006 0021     		movs	r1, #0
 2886              	.LVL348:
 718:./lib/fdt/fdt_overlay.c **** 		int overlay;
 2887              		.loc 1 718 2 is_stmt 0 view .LVU820
 2888 0008 3046     		mov	r0, r6
 2889              	.LVL349:
 718:./lib/fdt/fdt_overlay.c **** 		int overlay;
 2890              		.loc 1 718 2 view .LVU821
 2891 000a FFF7FEFF 		bl	fdt_first_subnode
 2892              	.LVL350:
 2893 000e 0446     		mov	r4, r0
 2894              	.LVL351:
 718:./lib/fdt/fdt_overlay.c **** 		int overlay;
 2895              		.loc 1 718 2 view .LVU822
 2896 0010 04E0     		b	.L175
 2897              	.LVL352:
 2898              	.L176:
 718:./lib/fdt/fdt_overlay.c **** 		int overlay;
 2899              		.loc 1 718 2 is_stmt 1 discriminator 2 view .LVU823
 2900 0012 2146     		mov	r1, r4
 2901 0014 3046     		mov	r0, r6
 2902 0016 FFF7FEFF 		bl	fdt_next_subnode
 2903              	.LVL353:
 2904 001a 0446     		mov	r4, r0
 2905              	.LVL354:
 2906              	.L175:
 718:./lib/fdt/fdt_overlay.c **** 		int overlay;
 2907              		.loc 1 718 2 discriminator 1 view .LVU824
ARM GAS  /tmp/ccCHVNBc.s 			page 111


 2908 001c 002C     		cmp	r4, #0
 2909 001e 1FDB     		blt	.L181
 2910              	.LBB115:
 719:./lib/fdt/fdt_overlay.c **** 		int target;
 2911              		.loc 1 719 3 view .LVU825
 720:./lib/fdt/fdt_overlay.c **** 		int ret;
 2912              		.loc 1 720 3 view .LVU826
 721:./lib/fdt/fdt_overlay.c **** 
 2913              		.loc 1 721 3 view .LVU827
 723:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 2914              		.loc 1 723 3 view .LVU828
 723:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 2915              		.loc 1 723 13 is_stmt 0 view .LVU829
 2916 0020 124A     		ldr	r2, .L182
 2917 0022 2146     		mov	r1, r4
 2918 0024 3046     		mov	r0, r6
 2919              	.LVL355:
 723:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 2920              		.loc 1 723 13 view .LVU830
 2921 0026 FFF7FEFF 		bl	fdt_subnode_offset
 2922              	.LVL356:
 723:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 2923              		.loc 1 723 13 view .LVU831
 2924 002a 0546     		mov	r5, r0
 2925              	.LVL357:
 724:./lib/fdt/fdt_overlay.c **** 			continue;
 2926              		.loc 1 724 3 is_stmt 1 view .LVU832
 724:./lib/fdt/fdt_overlay.c **** 			continue;
 2927              		.loc 1 724 6 is_stmt 0 view .LVU833
 2928 002c B0F1FF3F 		cmp	r0, #-1
 2929 0030 EFD0     		beq	.L176
 727:./lib/fdt/fdt_overlay.c **** 			return overlay;
 2930              		.loc 1 727 3 is_stmt 1 view .LVU834
 727:./lib/fdt/fdt_overlay.c **** 			return overlay;
 2931              		.loc 1 727 6 is_stmt 0 view .LVU835
 2932 0032 0028     		cmp	r0, #0
 2933 0034 15DB     		blt	.L174
 730:./lib/fdt/fdt_overlay.c **** 		if (target == -FDT_ERR_NOTFOUND)
 2934              		.loc 1 730 3 is_stmt 1 view .LVU836
 730:./lib/fdt/fdt_overlay.c **** 		if (target == -FDT_ERR_NOTFOUND)
 2935              		.loc 1 730 12 is_stmt 0 view .LVU837
 2936 0036 0023     		movs	r3, #0
 2937 0038 2246     		mov	r2, r4
 2938 003a 3146     		mov	r1, r6
 2939 003c 3846     		mov	r0, r7
 2940              	.LVL358:
 730:./lib/fdt/fdt_overlay.c **** 		if (target == -FDT_ERR_NOTFOUND)
 2941              		.loc 1 730 12 view .LVU838
 2942 003e FFF7FEFF 		bl	fdt_overlay_target_offset
 2943              	.LVL359:
 2944 0042 0146     		mov	r1, r0
 2945              	.LVL360:
 731:./lib/fdt/fdt_overlay.c **** 			/*
 2946              		.loc 1 731 3 is_stmt 1 view .LVU839
 731:./lib/fdt/fdt_overlay.c **** 			/*
 2947              		.loc 1 731 6 is_stmt 0 view .LVU840
 2948 0044 B0F1FF3F 		cmp	r0, #-1
ARM GAS  /tmp/ccCHVNBc.s 			page 112


 2949 0048 E3D0     		beq	.L176
 737:./lib/fdt/fdt_overlay.c **** 			return target;
 2950              		.loc 1 737 8 is_stmt 1 view .LVU841
 737:./lib/fdt/fdt_overlay.c **** 			return target;
 2951              		.loc 1 737 11 is_stmt 0 view .LVU842
 2952 004a 0028     		cmp	r0, #0
 2953 004c 0BDB     		blt	.L179
 740:./lib/fdt/fdt_overlay.c **** 							     fdto, overlay);
 2954              		.loc 1 740 3 is_stmt 1 view .LVU843
 740:./lib/fdt/fdt_overlay.c **** 							     fdto, overlay);
 2955              		.loc 1 740 9 is_stmt 0 view .LVU844
 2956 004e 2B46     		mov	r3, r5
 2957 0050 3246     		mov	r2, r6
 2958 0052 3846     		mov	r0, r7
 2959              	.LVL361:
 740:./lib/fdt/fdt_overlay.c **** 							     fdto, overlay);
 2960              		.loc 1 740 9 view .LVU845
 2961 0054 FFF7FEFF 		bl	overlay_prevent_phandle_overwrite_node
 2962              	.LVL362:
 742:./lib/fdt/fdt_overlay.c **** 			return ret;
 2963              		.loc 1 742 3 is_stmt 1 view .LVU846
 742:./lib/fdt/fdt_overlay.c **** 			return ret;
 2964              		.loc 1 742 6 is_stmt 0 view .LVU847
 2965 0058 0546     		mov	r5, r0
 2966              	.LVL363:
 742:./lib/fdt/fdt_overlay.c **** 			return ret;
 2967              		.loc 1 742 6 view .LVU848
 2968 005a 0028     		cmp	r0, #0
 2969 005c D9D0     		beq	.L176
 2970 005e 00E0     		b	.L174
 2971              	.LVL364:
 2972              	.L181:
 742:./lib/fdt/fdt_overlay.c **** 			return ret;
 2973              		.loc 1 742 6 view .LVU849
 2974              	.LBE115:
 746:./lib/fdt/fdt_overlay.c **** }
 2975              		.loc 1 746 9 view .LVU850
 2976 0060 0025     		movs	r5, #0
 2977              	.LVL365:
 2978              	.L174:
 747:./lib/fdt/fdt_overlay.c **** 
 2979              		.loc 1 747 1 view .LVU851
 2980 0062 2846     		mov	r0, r5
 2981 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2982              	.LVL366:
 2983              	.L179:
 2984              	.LBB116:
 738:./lib/fdt/fdt_overlay.c **** 
 2985              		.loc 1 738 11 view .LVU852
 2986 0066 0546     		mov	r5, r0
 2987              	.LVL367:
 738:./lib/fdt/fdt_overlay.c **** 
 2988              		.loc 1 738 11 view .LVU853
 2989 0068 FBE7     		b	.L174
 2990              	.L183:
 2991 006a 00BF     		.align	2
 2992              	.L182:
ARM GAS  /tmp/ccCHVNBc.s 			page 113


 2993 006c 00000000 		.word	.LC7
 2994              	.LBE116:
 2995              		.cfi_endproc
 2996              	.LFE89:
 2998              		.section	.text.overlay_merge,"ax",%progbits
 2999              		.align	1
 3000              		.syntax unified
 3001              		.thumb
 3002              		.thumb_func
 3004              	overlay_merge:
 3005              	.LVL368:
 3006              	.LFB91:
 831:./lib/fdt/fdt_overlay.c **** 	int fragment;
 3007              		.loc 1 831 1 is_stmt 1 view -0
 3008              		.cfi_startproc
 3009              		@ args = 0, pretend = 0, frame = 0
 3010              		@ frame_needed = 0, uses_anonymous_args = 0
 831:./lib/fdt/fdt_overlay.c **** 	int fragment;
 3011              		.loc 1 831 1 is_stmt 0 view .LVU855
 3012 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3013              	.LCFI59:
 3014              		.cfi_def_cfa_offset 24
 3015              		.cfi_offset 3, -24
 3016              		.cfi_offset 4, -20
 3017              		.cfi_offset 5, -16
 3018              		.cfi_offset 6, -12
 3019              		.cfi_offset 7, -8
 3020              		.cfi_offset 14, -4
 3021 0002 0746     		mov	r7, r0
 3022 0004 0E46     		mov	r6, r1
 832:./lib/fdt/fdt_overlay.c **** 
 3023              		.loc 1 832 2 is_stmt 1 view .LVU856
 834:./lib/fdt/fdt_overlay.c **** 		int overlay;
 3024              		.loc 1 834 2 view .LVU857
 3025 0006 0021     		movs	r1, #0
 3026              	.LVL369:
 834:./lib/fdt/fdt_overlay.c **** 		int overlay;
 3027              		.loc 1 834 2 is_stmt 0 view .LVU858
 3028 0008 3046     		mov	r0, r6
 3029              	.LVL370:
 834:./lib/fdt/fdt_overlay.c **** 		int overlay;
 3030              		.loc 1 834 2 view .LVU859
 3031 000a FFF7FEFF 		bl	fdt_first_subnode
 3032              	.LVL371:
 3033 000e 0446     		mov	r4, r0
 3034              	.LVL372:
 834:./lib/fdt/fdt_overlay.c **** 		int overlay;
 3035              		.loc 1 834 2 view .LVU860
 3036 0010 04E0     		b	.L185
 3037              	.LVL373:
 3038              	.L186:
 834:./lib/fdt/fdt_overlay.c **** 		int overlay;
 3039              		.loc 1 834 2 is_stmt 1 discriminator 2 view .LVU861
 3040 0012 2146     		mov	r1, r4
 3041 0014 3046     		mov	r0, r6
 3042 0016 FFF7FEFF 		bl	fdt_next_subnode
 3043              	.LVL374:
ARM GAS  /tmp/ccCHVNBc.s 			page 114


 3044 001a 0446     		mov	r4, r0
 3045              	.LVL375:
 3046              	.L185:
 834:./lib/fdt/fdt_overlay.c **** 		int overlay;
 3047              		.loc 1 834 2 discriminator 1 view .LVU862
 3048 001c 002C     		cmp	r4, #0
 3049 001e 1BDB     		blt	.L191
 3050              	.LBB117:
 835:./lib/fdt/fdt_overlay.c **** 		int target;
 3051              		.loc 1 835 3 view .LVU863
 836:./lib/fdt/fdt_overlay.c **** 		int ret;
 3052              		.loc 1 836 3 view .LVU864
 837:./lib/fdt/fdt_overlay.c **** 
 3053              		.loc 1 837 3 view .LVU865
 843:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 3054              		.loc 1 843 3 view .LVU866
 843:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 3055              		.loc 1 843 13 is_stmt 0 view .LVU867
 3056 0020 104A     		ldr	r2, .L192
 3057 0022 2146     		mov	r1, r4
 3058 0024 3046     		mov	r0, r6
 3059              	.LVL376:
 843:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 3060              		.loc 1 843 13 view .LVU868
 3061 0026 FFF7FEFF 		bl	fdt_subnode_offset
 3062              	.LVL377:
 843:./lib/fdt/fdt_overlay.c **** 		if (overlay == -FDT_ERR_NOTFOUND)
 3063              		.loc 1 843 13 view .LVU869
 3064 002a 0546     		mov	r5, r0
 3065              	.LVL378:
 844:./lib/fdt/fdt_overlay.c **** 			continue;
 3066              		.loc 1 844 3 is_stmt 1 view .LVU870
 844:./lib/fdt/fdt_overlay.c **** 			continue;
 3067              		.loc 1 844 6 is_stmt 0 view .LVU871
 3068 002c B0F1FF3F 		cmp	r0, #-1
 3069 0030 EFD0     		beq	.L186
 847:./lib/fdt/fdt_overlay.c **** 			return overlay;
 3070              		.loc 1 847 3 is_stmt 1 view .LVU872
 847:./lib/fdt/fdt_overlay.c **** 			return overlay;
 3071              		.loc 1 847 6 is_stmt 0 view .LVU873
 3072 0032 0028     		cmp	r0, #0
 3073 0034 11DB     		blt	.L184
 850:./lib/fdt/fdt_overlay.c **** 		if (target < 0)
 3074              		.loc 1 850 3 is_stmt 1 view .LVU874
 850:./lib/fdt/fdt_overlay.c **** 		if (target < 0)
 3075              		.loc 1 850 12 is_stmt 0 view .LVU875
 3076 0036 0023     		movs	r3, #0
 3077 0038 2246     		mov	r2, r4
 3078 003a 3146     		mov	r1, r6
 3079 003c 3846     		mov	r0, r7
 3080              	.LVL379:
 850:./lib/fdt/fdt_overlay.c **** 		if (target < 0)
 3081              		.loc 1 850 12 view .LVU876
 3082 003e FFF7FEFF 		bl	fdt_overlay_target_offset
 3083              	.LVL380:
 851:./lib/fdt/fdt_overlay.c **** 			return target;
 3084              		.loc 1 851 3 is_stmt 1 view .LVU877
ARM GAS  /tmp/ccCHVNBc.s 			page 115


 851:./lib/fdt/fdt_overlay.c **** 			return target;
 3085              		.loc 1 851 6 is_stmt 0 view .LVU878
 3086 0042 011E     		subs	r1, r0, #0
 3087 0044 0BDB     		blt	.L189
 854:./lib/fdt/fdt_overlay.c **** 		if (ret)
 3088              		.loc 1 854 3 is_stmt 1 view .LVU879
 854:./lib/fdt/fdt_overlay.c **** 		if (ret)
 3089              		.loc 1 854 9 is_stmt 0 view .LVU880
 3090 0046 2B46     		mov	r3, r5
 3091 0048 3246     		mov	r2, r6
 3092 004a 3846     		mov	r0, r7
 3093              	.LVL381:
 854:./lib/fdt/fdt_overlay.c **** 		if (ret)
 3094              		.loc 1 854 9 view .LVU881
 3095 004c FFF7FEFF 		bl	overlay_apply_node
 3096              	.LVL382:
 855:./lib/fdt/fdt_overlay.c **** 			return ret;
 3097              		.loc 1 855 3 is_stmt 1 view .LVU882
 855:./lib/fdt/fdt_overlay.c **** 			return ret;
 3098              		.loc 1 855 6 is_stmt 0 view .LVU883
 3099 0050 0546     		mov	r5, r0
 3100              	.LVL383:
 855:./lib/fdt/fdt_overlay.c **** 			return ret;
 3101              		.loc 1 855 6 view .LVU884
 3102 0052 0028     		cmp	r0, #0
 3103 0054 DDD0     		beq	.L186
 3104 0056 00E0     		b	.L184
 3105              	.LVL384:
 3106              	.L191:
 855:./lib/fdt/fdt_overlay.c **** 			return ret;
 3107              		.loc 1 855 6 view .LVU885
 3108              	.LBE117:
 859:./lib/fdt/fdt_overlay.c **** }
 3109              		.loc 1 859 9 view .LVU886
 3110 0058 0025     		movs	r5, #0
 3111              	.LVL385:
 3112              	.L184:
 860:./lib/fdt/fdt_overlay.c **** 
 3113              		.loc 1 860 1 view .LVU887
 3114 005a 2846     		mov	r0, r5
 3115 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3116              	.LVL386:
 3117              	.L189:
 3118              	.LBB118:
 852:./lib/fdt/fdt_overlay.c **** 
 3119              		.loc 1 852 11 view .LVU888
 3120 005e 0D46     		mov	r5, r1
 3121              	.LVL387:
 852:./lib/fdt/fdt_overlay.c **** 
 3122              		.loc 1 852 11 view .LVU889
 3123 0060 FBE7     		b	.L184
 3124              	.L193:
 3125 0062 00BF     		.align	2
 3126              	.L192:
 3127 0064 00000000 		.word	.LC7
 3128              	.LBE118:
 3129              		.cfi_endproc
ARM GAS  /tmp/ccCHVNBc.s 			page 116


 3130              	.LFE91:
 3132              		.section	.rodata.overlay_symbol_update.str1.4,"aMS",%progbits,1
 3133              		.align	2
 3134              	.LC8:
 3135 0000 00       		.ascii	"\000"
 3136 0001 000000   		.align	2
 3137              	.LC9:
 3138 0004 5F5F7379 		.ascii	"__symbols__\000"
 3138      6D626F6C 
 3138      735F5F00 
 3139              		.align	2
 3140              	.LC10:
 3141 0010 2F5F5F6F 		.ascii	"/__overlay__/\000"
 3141      7665726C 
 3141      61795F5F 
 3141      2F00
 3142 001e 0000     		.align	2
 3143              	.LC11:
 3144 0020 2F5F5F6F 		.ascii	"/__overlay__\000"
 3144      7665726C 
 3144      61795F5F 
 3144      00
 3145              		.section	.text.overlay_symbol_update,"ax",%progbits
 3146              		.align	1
 3147              		.syntax unified
 3148              		.thumb
 3149              		.thumb_func
 3151              	overlay_symbol_update:
 3152              	.LVL388:
 3153              	.LFB93:
 889:./lib/fdt/fdt_overlay.c **** 
 890:./lib/fdt/fdt_overlay.c **** /**
 891:./lib/fdt/fdt_overlay.c ****  * overlay_symbol_update - Update the symbols of base tree after a merge
 892:./lib/fdt/fdt_overlay.c ****  * @fdt: Base Device Tree blob
 893:./lib/fdt/fdt_overlay.c ****  * @fdto: Device tree overlay blob
 894:./lib/fdt/fdt_overlay.c ****  *
 895:./lib/fdt/fdt_overlay.c ****  * overlay_symbol_update() updates the symbols of the base tree with the
 896:./lib/fdt/fdt_overlay.c ****  * symbols of the applied overlay
 897:./lib/fdt/fdt_overlay.c ****  *
 898:./lib/fdt/fdt_overlay.c ****  * This is the last step in the device tree overlay application
 899:./lib/fdt/fdt_overlay.c ****  * process, allowing the reference of overlay symbols by subsequent
 900:./lib/fdt/fdt_overlay.c ****  * overlay operations.
 901:./lib/fdt/fdt_overlay.c ****  *
 902:./lib/fdt/fdt_overlay.c ****  * returns:
 903:./lib/fdt/fdt_overlay.c ****  *      0 on success
 904:./lib/fdt/fdt_overlay.c ****  *      Negative error code on failure
 905:./lib/fdt/fdt_overlay.c ****  */
 906:./lib/fdt/fdt_overlay.c **** static int overlay_symbol_update(void *fdt, void *fdto)
 907:./lib/fdt/fdt_overlay.c **** {
 3154              		.loc 1 907 1 is_stmt 1 view -0
 3155              		.cfi_startproc
 3156              		@ args = 0, pretend = 0, frame = 24
 3157              		@ frame_needed = 0, uses_anonymous_args = 0
 3158              		.loc 1 907 1 is_stmt 0 view .LVU891
 3159 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3160              	.LCFI60:
 3161              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccCHVNBc.s 			page 117


 3162              		.cfi_offset 4, -36
 3163              		.cfi_offset 5, -32
 3164              		.cfi_offset 6, -28
 3165              		.cfi_offset 7, -24
 3166              		.cfi_offset 8, -20
 3167              		.cfi_offset 9, -16
 3168              		.cfi_offset 10, -12
 3169              		.cfi_offset 11, -8
 3170              		.cfi_offset 14, -4
 3171 0004 89B0     		sub	sp, sp, #36
 3172              	.LCFI61:
 3173              		.cfi_def_cfa_offset 72
 3174 0006 0546     		mov	r5, r0
 3175 0008 0E46     		mov	r6, r1
 908:./lib/fdt/fdt_overlay.c **** 	int root_sym, ov_sym, prop, path_len, fragment, target;
 3176              		.loc 1 908 2 is_stmt 1 view .LVU892
 909:./lib/fdt/fdt_overlay.c **** 	int len, frag_name_len, ret, rel_path_len;
 3177              		.loc 1 909 2 view .LVU893
 910:./lib/fdt/fdt_overlay.c **** 	const char *s, *e;
 3178              		.loc 1 910 2 view .LVU894
 911:./lib/fdt/fdt_overlay.c **** 	const char *path;
 3179              		.loc 1 911 2 view .LVU895
 912:./lib/fdt/fdt_overlay.c **** 	const char *name;
 3180              		.loc 1 912 2 view .LVU896
 913:./lib/fdt/fdt_overlay.c **** 	const char *frag_name;
 3181              		.loc 1 913 2 view .LVU897
 914:./lib/fdt/fdt_overlay.c **** 	const char *rel_path;
 3182              		.loc 1 914 2 view .LVU898
 915:./lib/fdt/fdt_overlay.c **** 	const char *target_path;
 3183              		.loc 1 915 2 view .LVU899
 916:./lib/fdt/fdt_overlay.c **** 	char *buf;
 3184              		.loc 1 916 2 view .LVU900
 917:./lib/fdt/fdt_overlay.c **** 	void *p;
 3185              		.loc 1 917 2 view .LVU901
 918:./lib/fdt/fdt_overlay.c **** 
 919:./lib/fdt/fdt_overlay.c **** 	ov_sym = fdt_subnode_offset(fdto, 0, "__symbols__");
 3186              		.loc 1 919 2 view .LVU902
 3187              		.loc 1 919 11 is_stmt 0 view .LVU903
 3188 000a 7C4A     		ldr	r2, .L227
 3189 000c 0021     		movs	r1, #0
 3190              	.LVL389:
 3191              		.loc 1 919 11 view .LVU904
 3192 000e 3046     		mov	r0, r6
 3193              	.LVL390:
 3194              		.loc 1 919 11 view .LVU905
 3195 0010 FFF7FEFF 		bl	fdt_subnode_offset
 3196              	.LVL391:
 920:./lib/fdt/fdt_overlay.c **** 
 921:./lib/fdt/fdt_overlay.c **** 	/* if no overlay symbols exist no problem */
 922:./lib/fdt/fdt_overlay.c **** 	if (ov_sym < 0)
 3197              		.loc 1 922 2 is_stmt 1 view .LVU906
 3198              		.loc 1 922 5 is_stmt 0 view .LVU907
 3199 0014 041E     		subs	r4, r0, #0
 3200 0016 C0F2D880 		blt	.L209
 923:./lib/fdt/fdt_overlay.c **** 		return 0;
 924:./lib/fdt/fdt_overlay.c **** 
 925:./lib/fdt/fdt_overlay.c **** 	root_sym = fdt_subnode_offset(fdt, 0, "__symbols__");
ARM GAS  /tmp/ccCHVNBc.s 			page 118


 3201              		.loc 1 925 2 is_stmt 1 view .LVU908
 3202              		.loc 1 925 13 is_stmt 0 view .LVU909
 3203 001a 784A     		ldr	r2, .L227
 3204 001c 0021     		movs	r1, #0
 3205 001e 2846     		mov	r0, r5
 3206              	.LVL392:
 3207              		.loc 1 925 13 view .LVU910
 3208 0020 FFF7FEFF 		bl	fdt_subnode_offset
 3209              	.LVL393:
 3210 0024 8146     		mov	r9, r0
 3211              	.LVL394:
 926:./lib/fdt/fdt_overlay.c **** 
 927:./lib/fdt/fdt_overlay.c **** 	/* it no root symbols exist we should create them */
 928:./lib/fdt/fdt_overlay.c **** 	if (root_sym == -FDT_ERR_NOTFOUND)
 3212              		.loc 1 928 2 is_stmt 1 view .LVU911
 3213              		.loc 1 928 5 is_stmt 0 view .LVU912
 3214 0026 B0F1FF3F 		cmp	r0, #-1
 3215 002a 0CD0     		beq	.L221
 3216              	.L196:
 929:./lib/fdt/fdt_overlay.c **** 		root_sym = fdt_add_subnode(fdt, 0, "__symbols__");
 930:./lib/fdt/fdt_overlay.c **** 
 931:./lib/fdt/fdt_overlay.c **** 	/* any error is fatal now */
 932:./lib/fdt/fdt_overlay.c **** 	if (root_sym < 0)
 3217              		.loc 1 932 2 is_stmt 1 view .LVU913
 3218              		.loc 1 932 5 is_stmt 0 view .LVU914
 3219 002c B9F1000F 		cmp	r9, #0
 3220 0030 C0F2CD80 		blt	.L194
 933:./lib/fdt/fdt_overlay.c **** 		return root_sym;
 934:./lib/fdt/fdt_overlay.c **** 
 935:./lib/fdt/fdt_overlay.c **** 	/* iterate over each overlay symbol */
 936:./lib/fdt/fdt_overlay.c **** 	fdt_for_each_property_offset(prop, fdto, ov_sym) {
 3221              		.loc 1 936 2 is_stmt 1 view .LVU915
 3222 0034 2146     		mov	r1, r4
 3223 0036 3046     		mov	r0, r6
 3224              	.LVL395:
 3225              		.loc 1 936 2 is_stmt 0 view .LVU916
 3226 0038 FFF7FEFF 		bl	fdt_first_property_offset
 3227              	.LVL396:
 3228 003c 8046     		mov	r8, r0
 3229              	.LVL397:
 3230              		.loc 1 936 2 view .LVU917
 3231 003e CDF80C90 		str	r9, [sp, #12]
 3232 0042 A946     		mov	r9, r5
 3233              	.LVL398:
 3234              		.loc 1 936 2 view .LVU918
 3235 0044 68E0     		b	.L197
 3236              	.LVL399:
 3237              	.L221:
 929:./lib/fdt/fdt_overlay.c **** 		root_sym = fdt_add_subnode(fdt, 0, "__symbols__");
 3238              		.loc 1 929 3 is_stmt 1 view .LVU919
 929:./lib/fdt/fdt_overlay.c **** 		root_sym = fdt_add_subnode(fdt, 0, "__symbols__");
 3239              		.loc 1 929 14 is_stmt 0 view .LVU920
 3240 0046 6D4A     		ldr	r2, .L227
 3241 0048 0021     		movs	r1, #0
 3242 004a 2846     		mov	r0, r5
 3243              	.LVL400:
 929:./lib/fdt/fdt_overlay.c **** 		root_sym = fdt_add_subnode(fdt, 0, "__symbols__");
ARM GAS  /tmp/ccCHVNBc.s 			page 119


 3244              		.loc 1 929 14 view .LVU921
 3245 004c FFF7FEFF 		bl	fdt_add_subnode
 3246              	.LVL401:
 3247 0050 8146     		mov	r9, r0
 3248              	.LVL402:
 929:./lib/fdt/fdt_overlay.c **** 		root_sym = fdt_add_subnode(fdt, 0, "__symbols__");
 3249              		.loc 1 929 14 view .LVU922
 3250 0052 EBE7     		b	.L196
 3251              	.LVL403:
 3252              	.L226:
 937:./lib/fdt/fdt_overlay.c **** 		path = fdt_getprop_by_offset(fdto, prop, &name, &path_len);
 938:./lib/fdt/fdt_overlay.c **** 		if (!path)
 939:./lib/fdt/fdt_overlay.c **** 			return path_len;
 3253              		.loc 1 939 4 is_stmt 1 view .LVU923
 3254              		.loc 1 939 11 is_stmt 0 view .LVU924
 3255 0054 DDF81C90 		ldr	r9, [sp, #28]
 3256              	.LVL404:
 3257              		.loc 1 939 11 view .LVU925
 3258 0058 B9E0     		b	.L194
 3259              	.LVL405:
 3260              	.L200:
 940:./lib/fdt/fdt_overlay.c **** 
 941:./lib/fdt/fdt_overlay.c **** 		/* verify it's a string property (terminated by a single \0) */
 942:./lib/fdt/fdt_overlay.c **** 		if (path_len < 1 || memchr(path, '\0', path_len) != &path[path_len - 1])
 943:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 944:./lib/fdt/fdt_overlay.c **** 
 945:./lib/fdt/fdt_overlay.c **** 		/* keep end marker to avoid strlen() */
 946:./lib/fdt/fdt_overlay.c **** 		e = path + path_len;
 947:./lib/fdt/fdt_overlay.c **** 
 948:./lib/fdt/fdt_overlay.c **** 		if (*path != '/')
 949:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 950:./lib/fdt/fdt_overlay.c **** 
 951:./lib/fdt/fdt_overlay.c **** 		/* get fragment name first */
 952:./lib/fdt/fdt_overlay.c **** 		s = strchr(path + 1, '/');
 953:./lib/fdt/fdt_overlay.c **** 		if (!s) {
 954:./lib/fdt/fdt_overlay.c **** 			/* Symbol refers to something that won't end
 955:./lib/fdt/fdt_overlay.c **** 			 * up in the target tree */
 956:./lib/fdt/fdt_overlay.c **** 			continue;
 957:./lib/fdt/fdt_overlay.c **** 		}
 958:./lib/fdt/fdt_overlay.c **** 
 959:./lib/fdt/fdt_overlay.c **** 		frag_name = path + 1;
 960:./lib/fdt/fdt_overlay.c **** 		frag_name_len = s - path - 1;
 961:./lib/fdt/fdt_overlay.c **** 
 962:./lib/fdt/fdt_overlay.c **** 		/* verify format; safe since "s" lies in \0 terminated prop */
 963:./lib/fdt/fdt_overlay.c **** 		len = sizeof("/__overlay__/") - 1;
 964:./lib/fdt/fdt_overlay.c **** 		if ((e - s) > len && (memcmp(s, "/__overlay__/", len) == 0)) {
 965:./lib/fdt/fdt_overlay.c **** 			/* /<fragment-name>/__overlay__/<relative-subnode-path> */
 966:./lib/fdt/fdt_overlay.c **** 			rel_path = s + len;
 967:./lib/fdt/fdt_overlay.c **** 			rel_path_len = e - rel_path - 1;
 968:./lib/fdt/fdt_overlay.c **** 		} else if ((e - s) == len
 3261              		.loc 1 968 10 is_stmt 1 view .LVU926
 3262              		.loc 1 968 13 is_stmt 0 view .LVU927
 3263 005a BBF10D0F 		cmp	fp, #13
 3264 005e 56D1     		bne	.L199
 969:./lib/fdt/fdt_overlay.c **** 			   && (memcmp(s, "/__overlay__", len - 1) == 0)) {
 3265              		.loc 1 969 11 view .LVU928
 3266 0060 0C22     		movs	r2, #12
ARM GAS  /tmp/ccCHVNBc.s 			page 120


 3267 0062 6749     		ldr	r1, .L227+4
 3268 0064 3846     		mov	r0, r7
 3269 0066 FFF7FEFF 		bl	memcmp
 3270              	.LVL406:
 3271              		.loc 1 969 7 discriminator 1 view .LVU929
 3272 006a 0546     		mov	r5, r0
 3273              	.LVL407:
 3274              		.loc 1 969 7 discriminator 1 view .LVU930
 3275 006c 0028     		cmp	r0, #0
 3276 006e 4ED1     		bne	.L199
 970:./lib/fdt/fdt_overlay.c **** 			/* /<fragment-name>/__overlay__ */
 971:./lib/fdt/fdt_overlay.c **** 			rel_path = "";
 3277              		.loc 1 971 13 view .LVU931
 3278 0070 644F     		ldr	r7, .L227+8
 3279              	.LVL408:
 3280              	.L201:
 972:./lib/fdt/fdt_overlay.c **** 			rel_path_len = 0;
 973:./lib/fdt/fdt_overlay.c **** 		} else {
 974:./lib/fdt/fdt_overlay.c **** 			/* Symbol refers to something that won't end
 975:./lib/fdt/fdt_overlay.c **** 			 * up in the target tree */
 976:./lib/fdt/fdt_overlay.c **** 			continue;
 977:./lib/fdt/fdt_overlay.c **** 		}
 978:./lib/fdt/fdt_overlay.c **** 
 979:./lib/fdt/fdt_overlay.c **** 		/* find the fragment index in which the symbol lies */
 980:./lib/fdt/fdt_overlay.c **** 		ret = fdt_subnode_offset_namelen(fdto, 0, frag_name,
 3281              		.loc 1 980 3 is_stmt 1 view .LVU932
 3282              		.loc 1 980 9 is_stmt 0 view .LVU933
 3283 0072 2346     		mov	r3, r4
 3284 0074 5246     		mov	r2, r10
 3285 0076 0021     		movs	r1, #0
 3286 0078 3046     		mov	r0, r6
 3287 007a FFF7FEFF 		bl	fdt_subnode_offset_namelen
 3288              	.LVL409:
 981:./lib/fdt/fdt_overlay.c **** 					       frag_name_len);
 982:./lib/fdt/fdt_overlay.c **** 		/* not found? */
 983:./lib/fdt/fdt_overlay.c **** 		if (ret < 0)
 3289              		.loc 1 983 3 is_stmt 1 view .LVU934
 3290              		.loc 1 983 6 is_stmt 0 view .LVU935
 3291 007e B0F1000A 		subs	r10, r0, #0
 3292              	.LVL410:
 3293              		.loc 1 983 6 view .LVU936
 3294 0082 C0F2B180 		blt	.L213
 984:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 985:./lib/fdt/fdt_overlay.c **** 		fragment = ret;
 3295              		.loc 1 985 3 is_stmt 1 view .LVU937
 3296              	.LVL411:
 986:./lib/fdt/fdt_overlay.c **** 
 987:./lib/fdt/fdt_overlay.c **** 		/* an __overlay__ subnode must exist */
 988:./lib/fdt/fdt_overlay.c **** 		ret = fdt_subnode_offset(fdto, fragment, "__overlay__");
 3297              		.loc 1 988 3 view .LVU938
 3298              		.loc 1 988 9 is_stmt 0 view .LVU939
 3299 0086 604A     		ldr	r2, .L227+12
 3300 0088 5146     		mov	r1, r10
 3301 008a 3046     		mov	r0, r6
 3302              	.LVL412:
 3303              		.loc 1 988 9 view .LVU940
 3304 008c FFF7FEFF 		bl	fdt_subnode_offset
ARM GAS  /tmp/ccCHVNBc.s 			page 121


 3305              	.LVL413:
 989:./lib/fdt/fdt_overlay.c **** 		if (ret < 0)
 3306              		.loc 1 989 3 is_stmt 1 view .LVU941
 3307              		.loc 1 989 6 is_stmt 0 view .LVU942
 3308 0090 0028     		cmp	r0, #0
 3309 0092 C0F2AC80 		blt	.L214
 990:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADOVERLAY;
 991:./lib/fdt/fdt_overlay.c **** 
 992:./lib/fdt/fdt_overlay.c **** 		/* get the target of the fragment */
 993:./lib/fdt/fdt_overlay.c **** 		ret = fdt_overlay_target_offset(fdt, fdto, fragment, &target_path);
 3310              		.loc 1 993 3 is_stmt 1 view .LVU943
 3311              		.loc 1 993 9 is_stmt 0 view .LVU944
 3312 0096 05AB     		add	r3, sp, #20
 3313 0098 5246     		mov	r2, r10
 3314 009a 3146     		mov	r1, r6
 3315 009c 4846     		mov	r0, r9
 3316              	.LVL414:
 3317              		.loc 1 993 9 view .LVU945
 3318 009e FFF7FEFF 		bl	fdt_overlay_target_offset
 3319              	.LVL415:
 994:./lib/fdt/fdt_overlay.c **** 		if (ret < 0)
 3320              		.loc 1 994 3 is_stmt 1 view .LVU946
 3321              		.loc 1 994 6 is_stmt 0 view .LVU947
 3322 00a2 B0F1000B 		subs	fp, r0, #0
 3323 00a6 C0F2A580 		blt	.L215
 995:./lib/fdt/fdt_overlay.c **** 			return ret;
 996:./lib/fdt/fdt_overlay.c **** 		target = ret;
 3324              		.loc 1 996 3 is_stmt 1 view .LVU948
 3325              	.LVL416:
 997:./lib/fdt/fdt_overlay.c **** 
 998:./lib/fdt/fdt_overlay.c **** 		/* if we have a target path use */
 999:./lib/fdt/fdt_overlay.c **** 		if (!target_path) {
 3326              		.loc 1 999 3 view .LVU949
 3327              		.loc 1 999 7 is_stmt 0 view .LVU950
 3328 00aa 0598     		ldr	r0, [sp, #20]
 3329              	.LVL417:
 3330              		.loc 1 999 6 view .LVU951
 3331 00ac 0028     		cmp	r0, #0
 3332 00ae 6AD0     		beq	.L222
1000:./lib/fdt/fdt_overlay.c **** 			ret = get_path_len(fdt, target);
1001:./lib/fdt/fdt_overlay.c **** 			if (ret < 0)
1002:./lib/fdt/fdt_overlay.c **** 				return ret;
1003:./lib/fdt/fdt_overlay.c **** 			len = ret;
1004:./lib/fdt/fdt_overlay.c **** 		} else {
1005:./lib/fdt/fdt_overlay.c **** 			len = strlen(target_path);
 3333              		.loc 1 1005 4 is_stmt 1 view .LVU952
 3334              		.loc 1 1005 10 is_stmt 0 view .LVU953
 3335 00b0 FFF7FEFF 		bl	strlen
 3336              	.LVL418:
 3337              		.loc 1 1005 8 discriminator 1 view .LVU954
 3338 00b4 0446     		mov	r4, r0
 3339              	.LVL419:
 3340              	.L203:
1006:./lib/fdt/fdt_overlay.c **** 		}
1007:./lib/fdt/fdt_overlay.c **** 
1008:./lib/fdt/fdt_overlay.c **** 		ret = fdt_setprop_placeholder(fdt, root_sym, name,
 3341              		.loc 1 1008 3 is_stmt 1 view .LVU955
ARM GAS  /tmp/ccCHVNBc.s 			page 122


1009:./lib/fdt/fdt_overlay.c **** 				len + (len > 1) + rel_path_len + 1, &p);
 3342              		.loc 1 1009 9 is_stmt 0 view .LVU956
 3343 00b6 012C     		cmp	r4, #1
 3344 00b8 D4BF     		ite	le
 3345 00ba 2346     		movle	r3, r4
 3346 00bc 631C     		addgt	r3, r4, #1
 3347              		.loc 1 1009 21 view .LVU957
 3348 00be 2B44     		add	r3, r3, r5
1008:./lib/fdt/fdt_overlay.c **** 				len + (len > 1) + rel_path_len + 1, &p);
 3349              		.loc 1 1008 9 view .LVU958
 3350 00c0 04AA     		add	r2, sp, #16
 3351 00c2 0092     		str	r2, [sp]
 3352 00c4 0133     		adds	r3, r3, #1
 3353 00c6 069A     		ldr	r2, [sp, #24]
 3354 00c8 0399     		ldr	r1, [sp, #12]
 3355 00ca 4846     		mov	r0, r9
 3356 00cc FFF7FEFF 		bl	fdt_setprop_placeholder
 3357              	.LVL420:
1010:./lib/fdt/fdt_overlay.c **** 		if (ret < 0)
 3358              		.loc 1 1010 3 is_stmt 1 view .LVU959
 3359              		.loc 1 1010 6 is_stmt 0 view .LVU960
 3360 00d0 0028     		cmp	r0, #0
 3361              		.loc 1 1010 6 view .LVU961
 3362 00d2 C0F29180 		blt	.L217
1011:./lib/fdt/fdt_overlay.c **** 			return ret;
1012:./lib/fdt/fdt_overlay.c **** 
1013:./lib/fdt/fdt_overlay.c **** 		if (!target_path) {
 3363              		.loc 1 1013 3 is_stmt 1 view .LVU962
 3364              		.loc 1 1013 7 is_stmt 0 view .LVU963
 3365 00d6 059B     		ldr	r3, [sp, #20]
 3366              		.loc 1 1013 6 view .LVU964
 3367 00d8 002B     		cmp	r3, #0
 3368 00da 5CD0     		beq	.L223
 3369              	.LVL421:
 3370              	.L204:
1014:./lib/fdt/fdt_overlay.c **** 			/* again in case setprop_placeholder changed it */
1015:./lib/fdt/fdt_overlay.c **** 			ret = fdt_overlay_target_offset(fdt, fdto, fragment, &target_path);
1016:./lib/fdt/fdt_overlay.c **** 			if (ret < 0)
1017:./lib/fdt/fdt_overlay.c **** 				return ret;
1018:./lib/fdt/fdt_overlay.c **** 			target = ret;
1019:./lib/fdt/fdt_overlay.c **** 		}
1020:./lib/fdt/fdt_overlay.c **** 
1021:./lib/fdt/fdt_overlay.c **** 		buf = p;
 3371              		.loc 1 1021 3 is_stmt 1 view .LVU965
 3372              		.loc 1 1021 7 is_stmt 0 view .LVU966
 3373 00dc DDF810A0 		ldr	r10, [sp, #16]
 3374              	.LVL422:
1022:./lib/fdt/fdt_overlay.c **** 		if (len > 1) { /* target is not root */
 3375              		.loc 1 1022 3 is_stmt 1 view .LVU967
 3376              		.loc 1 1022 6 is_stmt 0 view .LVU968
 3377 00e0 012C     		cmp	r4, #1
 3378 00e2 6DDD     		ble	.L205
1023:./lib/fdt/fdt_overlay.c **** 			if (!target_path) {
 3379              		.loc 1 1023 4 is_stmt 1 view .LVU969
 3380              		.loc 1 1023 8 is_stmt 0 view .LVU970
 3381 00e4 0599     		ldr	r1, [sp, #20]
 3382              		.loc 1 1023 7 view .LVU971
ARM GAS  /tmp/ccCHVNBc.s 			page 123


 3383 00e6 0029     		cmp	r1, #0
 3384 00e8 60D0     		beq	.L224
1024:./lib/fdt/fdt_overlay.c **** 				ret = fdt_get_path(fdt, target, buf, len + 1);
1025:./lib/fdt/fdt_overlay.c **** 				if (ret < 0)
1026:./lib/fdt/fdt_overlay.c **** 					return ret;
1027:./lib/fdt/fdt_overlay.c **** 			} else
1028:./lib/fdt/fdt_overlay.c **** 				memcpy(buf, target_path, len + 1);
 3385              		.loc 1 1028 5 is_stmt 1 view .LVU972
 3386 00ea 621C     		adds	r2, r4, #1
 3387 00ec 5046     		mov	r0, r10
 3388              	.LVL423:
 3389              		.loc 1 1028 5 is_stmt 0 view .LVU973
 3390 00ee FFF7FEFF 		bl	memcpy
 3391              	.LVL424:
 3392              	.L207:
1029:./lib/fdt/fdt_overlay.c **** 
1030:./lib/fdt/fdt_overlay.c **** 		} else
1031:./lib/fdt/fdt_overlay.c **** 			len--;
1032:./lib/fdt/fdt_overlay.c **** 
1033:./lib/fdt/fdt_overlay.c **** 		buf[len] = '/';
 3393              		.loc 1 1033 3 is_stmt 1 view .LVU974
 3394              		.loc 1 1033 12 is_stmt 0 view .LVU975
 3395 00f2 2F23     		movs	r3, #47
 3396 00f4 0AF80430 		strb	r3, [r10, r4]
1034:./lib/fdt/fdt_overlay.c **** 		memcpy(buf + len + 1, rel_path, rel_path_len);
 3397              		.loc 1 1034 3 is_stmt 1 view .LVU976
 3398              		.loc 1 1034 20 is_stmt 0 view .LVU977
 3399 00f8 0134     		adds	r4, r4, #1
 3400              	.LVL425:
 3401              		.loc 1 1034 3 view .LVU978
 3402 00fa 2A46     		mov	r2, r5
 3403 00fc 3946     		mov	r1, r7
 3404 00fe 0AEB0400 		add	r0, r10, r4
 3405 0102 FFF7FEFF 		bl	memcpy
 3406              	.LVL426:
1035:./lib/fdt/fdt_overlay.c **** 		buf[len + 1 + rel_path_len] = '\0';
 3407              		.loc 1 1035 3 is_stmt 1 view .LVU979
 3408              		.loc 1 1035 15 is_stmt 0 view .LVU980
 3409 0106 2C44     		add	r4, r4, r5
 3410              	.LVL427:
 3411              		.loc 1 1035 31 view .LVU981
 3412 0108 0023     		movs	r3, #0
 3413 010a 0AF80430 		strb	r3, [r10, r4]
 3414              	.LVL428:
 3415              	.L199:
 936:./lib/fdt/fdt_overlay.c **** 		path = fdt_getprop_by_offset(fdto, prop, &name, &path_len);
 3416              		.loc 1 936 2 is_stmt 1 discriminator 2 view .LVU982
 3417 010e 4146     		mov	r1, r8
 3418 0110 3046     		mov	r0, r6
 3419 0112 FFF7FEFF 		bl	fdt_next_property_offset
 3420              	.LVL429:
 3421 0116 8046     		mov	r8, r0
 3422              	.LVL430:
 3423              	.L197:
 936:./lib/fdt/fdt_overlay.c **** 		path = fdt_getprop_by_offset(fdto, prop, &name, &path_len);
 3424              		.loc 1 936 2 discriminator 1 view .LVU983
 3425 0118 B8F1000F 		cmp	r8, #0
ARM GAS  /tmp/ccCHVNBc.s 			page 124


 3426 011c 52DB     		blt	.L225
 937:./lib/fdt/fdt_overlay.c **** 		if (!path)
 3427              		.loc 1 937 3 view .LVU984
 937:./lib/fdt/fdt_overlay.c **** 		if (!path)
 3428              		.loc 1 937 10 is_stmt 0 view .LVU985
 3429 011e 07AB     		add	r3, sp, #28
 3430 0120 06AA     		add	r2, sp, #24
 3431 0122 4146     		mov	r1, r8
 3432 0124 3046     		mov	r0, r6
 3433              	.LVL431:
 937:./lib/fdt/fdt_overlay.c **** 		if (!path)
 3434              		.loc 1 937 10 view .LVU986
 3435 0126 FFF7FEFF 		bl	fdt_getprop_by_offset
 3436              	.LVL432:
 938:./lib/fdt/fdt_overlay.c **** 			return path_len;
 3437              		.loc 1 938 3 is_stmt 1 view .LVU987
 938:./lib/fdt/fdt_overlay.c **** 			return path_len;
 3438              		.loc 1 938 6 is_stmt 0 view .LVU988
 3439 012a 0446     		mov	r4, r0
 3440 012c 0028     		cmp	r0, #0
 3441 012e 91D0     		beq	.L226
 942:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3442              		.loc 1 942 3 is_stmt 1 view .LVU989
 942:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3443              		.loc 1 942 16 is_stmt 0 view .LVU990
 3444 0130 079D     		ldr	r5, [sp, #28]
 942:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3445              		.loc 1 942 6 view .LVU991
 3446 0132 002D     		cmp	r5, #0
 3447 0134 4FDD     		ble	.L210
 942:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3448              		.loc 1 942 23 discriminator 1 view .LVU992
 3449 0136 2A46     		mov	r2, r5
 3450 0138 0021     		movs	r1, #0
 3451 013a FFF7FEFF 		bl	memchr
 3452              	.LVL433:
 942:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3453              		.loc 1 942 60 discriminator 1 view .LVU993
 3454 013e 6B1E     		subs	r3, r5, #1
 942:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3455              		.loc 1 942 55 discriminator 1 view .LVU994
 3456 0140 2344     		add	r3, r3, r4
 942:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3457              		.loc 1 942 20 discriminator 1 view .LVU995
 3458 0142 8342     		cmp	r3, r0
 3459 0144 4AD1     		bne	.L211
 946:./lib/fdt/fdt_overlay.c **** 
 3460              		.loc 1 946 3 is_stmt 1 view .LVU996
 946:./lib/fdt/fdt_overlay.c **** 
 3461              		.loc 1 946 5 is_stmt 0 view .LVU997
 3462 0146 2544     		add	r5, r5, r4
 3463              	.LVL434:
 948:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3464              		.loc 1 948 3 is_stmt 1 view .LVU998
 948:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3465              		.loc 1 948 7 is_stmt 0 view .LVU999
 3466 0148 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
ARM GAS  /tmp/ccCHVNBc.s 			page 125


 948:./lib/fdt/fdt_overlay.c **** 			return -FDT_ERR_BADVALUE;
 3467              		.loc 1 948 6 view .LVU1000
 3468 014a 2F2B     		cmp	r3, #47
 3469 014c 49D1     		bne	.L212
 952:./lib/fdt/fdt_overlay.c **** 		if (!s) {
 3470              		.loc 1 952 3 is_stmt 1 view .LVU1001
 952:./lib/fdt/fdt_overlay.c **** 		if (!s) {
 3471              		.loc 1 952 7 is_stmt 0 view .LVU1002
 3472 014e 04F1010A 		add	r10, r4, #1
 3473 0152 2F21     		movs	r1, #47
 3474 0154 5046     		mov	r0, r10
 3475 0156 FFF7FEFF 		bl	strchr
 3476              	.LVL435:
 953:./lib/fdt/fdt_overlay.c **** 			/* Symbol refers to something that won't end
 3477              		.loc 1 953 3 is_stmt 1 view .LVU1003
 953:./lib/fdt/fdt_overlay.c **** 			/* Symbol refers to something that won't end
 3478              		.loc 1 953 6 is_stmt 0 view .LVU1004
 3479 015a 0746     		mov	r7, r0
 3480 015c 0028     		cmp	r0, #0
 3481 015e D6D0     		beq	.L199
 959:./lib/fdt/fdt_overlay.c **** 		frag_name_len = s - path - 1;
 3482              		.loc 1 959 3 is_stmt 1 view .LVU1005
 3483              	.LVL436:
 960:./lib/fdt/fdt_overlay.c **** 
 3484              		.loc 1 960 3 view .LVU1006
 960:./lib/fdt/fdt_overlay.c **** 
 3485              		.loc 1 960 21 is_stmt 0 view .LVU1007
 3486 0160 041B     		subs	r4, r0, r4
 3487              	.LVL437:
 960:./lib/fdt/fdt_overlay.c **** 
 3488              		.loc 1 960 17 view .LVU1008
 3489 0162 013C     		subs	r4, r4, #1
 3490              	.LVL438:
 963:./lib/fdt/fdt_overlay.c **** 		if ((e - s) > len && (memcmp(s, "/__overlay__/", len) == 0)) {
 3491              		.loc 1 963 3 is_stmt 1 view .LVU1009
 964:./lib/fdt/fdt_overlay.c **** 			/* /<fragment-name>/__overlay__/<relative-subnode-path> */
 3492              		.loc 1 964 3 view .LVU1010
 964:./lib/fdt/fdt_overlay.c **** 			/* /<fragment-name>/__overlay__/<relative-subnode-path> */
 3493              		.loc 1 964 10 is_stmt 0 view .LVU1011
 3494 0164 A5EB000B 		sub	fp, r5, r0
 964:./lib/fdt/fdt_overlay.c **** 			/* /<fragment-name>/__overlay__/<relative-subnode-path> */
 3495              		.loc 1 964 6 view .LVU1012
 3496 0168 BBF10D0F 		cmp	fp, #13
 3497 016c 7FF775AF 		ble	.L200
 964:./lib/fdt/fdt_overlay.c **** 			/* /<fragment-name>/__overlay__/<relative-subnode-path> */
 3498              		.loc 1 964 25 discriminator 1 view .LVU1013
 3499 0170 0D22     		movs	r2, #13
 3500 0172 2649     		ldr	r1, .L227+16
 3501 0174 FFF7FEFF 		bl	memcmp
 3502              	.LVL439:
 964:./lib/fdt/fdt_overlay.c **** 			/* /<fragment-name>/__overlay__/<relative-subnode-path> */
 3503              		.loc 1 964 21 discriminator 1 view .LVU1014
 3504 0178 0028     		cmp	r0, #0
 3505 017a 7FF46EAF 		bne	.L200
 966:./lib/fdt/fdt_overlay.c **** 			rel_path_len = e - rel_path - 1;
 3506              		.loc 1 966 4 is_stmt 1 view .LVU1015
 966:./lib/fdt/fdt_overlay.c **** 			rel_path_len = e - rel_path - 1;
ARM GAS  /tmp/ccCHVNBc.s 			page 126


 3507              		.loc 1 966 13 is_stmt 0 view .LVU1016
 3508 017e 0D37     		adds	r7, r7, #13
 3509              	.LVL440:
 967:./lib/fdt/fdt_overlay.c **** 		} else if ((e - s) == len
 3510              		.loc 1 967 4 is_stmt 1 view .LVU1017
 967:./lib/fdt/fdt_overlay.c **** 		} else if ((e - s) == len
 3511              		.loc 1 967 21 is_stmt 0 view .LVU1018
 3512 0180 ED1B     		subs	r5, r5, r7
 3513              	.LVL441:
 967:./lib/fdt/fdt_overlay.c **** 		} else if ((e - s) == len
 3514              		.loc 1 967 17 view .LVU1019
 3515 0182 013D     		subs	r5, r5, #1
 3516              	.LVL442:
 967:./lib/fdt/fdt_overlay.c **** 		} else if ((e - s) == len
 3517              		.loc 1 967 17 view .LVU1020
 3518 0184 75E7     		b	.L201
 3519              	.LVL443:
 3520              	.L222:
1000:./lib/fdt/fdt_overlay.c **** 			if (ret < 0)
 3521              		.loc 1 1000 4 is_stmt 1 view .LVU1021
1000:./lib/fdt/fdt_overlay.c **** 			if (ret < 0)
 3522              		.loc 1 1000 10 is_stmt 0 view .LVU1022
 3523 0186 5946     		mov	r1, fp
 3524 0188 4846     		mov	r0, r9
 3525 018a FFF7FEFF 		bl	get_path_len
 3526              	.LVL444:
1001:./lib/fdt/fdt_overlay.c **** 				return ret;
 3527              		.loc 1 1001 4 is_stmt 1 view .LVU1023
1001:./lib/fdt/fdt_overlay.c **** 				return ret;
 3528              		.loc 1 1001 7 is_stmt 0 view .LVU1024
 3529 018e 041E     		subs	r4, r0, #0
 3530              	.LVL445:
1001:./lib/fdt/fdt_overlay.c **** 				return ret;
 3531              		.loc 1 1001 7 view .LVU1025
 3532 0190 91DA     		bge	.L203
1002:./lib/fdt/fdt_overlay.c **** 			len = ret;
 3533              		.loc 1 1002 12 view .LVU1026
 3534 0192 A146     		mov	r9, r4
 3535              	.LVL446:
1002:./lib/fdt/fdt_overlay.c **** 			len = ret;
 3536              		.loc 1 1002 12 view .LVU1027
 3537 0194 1BE0     		b	.L194
 3538              	.LVL447:
 3539              	.L223:
1015:./lib/fdt/fdt_overlay.c **** 			if (ret < 0)
 3540              		.loc 1 1015 4 is_stmt 1 view .LVU1028
1015:./lib/fdt/fdt_overlay.c **** 			if (ret < 0)
 3541              		.loc 1 1015 10 is_stmt 0 view .LVU1029
 3542 0196 05AB     		add	r3, sp, #20
 3543 0198 5246     		mov	r2, r10
 3544 019a 3146     		mov	r1, r6
 3545 019c 4846     		mov	r0, r9
 3546              	.LVL448:
1015:./lib/fdt/fdt_overlay.c **** 			if (ret < 0)
 3547              		.loc 1 1015 10 view .LVU1030
 3548 019e FFF7FEFF 		bl	fdt_overlay_target_offset
 3549              	.LVL449:
ARM GAS  /tmp/ccCHVNBc.s 			page 127


1016:./lib/fdt/fdt_overlay.c **** 				return ret;
 3550              		.loc 1 1016 4 is_stmt 1 view .LVU1031
1016:./lib/fdt/fdt_overlay.c **** 				return ret;
 3551              		.loc 1 1016 7 is_stmt 0 view .LVU1032
 3552 01a2 B0F1000B 		subs	fp, r0, #0
 3553              	.LVL450:
1016:./lib/fdt/fdt_overlay.c **** 				return ret;
 3554              		.loc 1 1016 7 view .LVU1033
 3555 01a6 99DA     		bge	.L204
1017:./lib/fdt/fdt_overlay.c **** 			target = ret;
 3556              		.loc 1 1017 12 view .LVU1034
 3557 01a8 D946     		mov	r9, fp
 3558              	.LVL451:
1017:./lib/fdt/fdt_overlay.c **** 			target = ret;
 3559              		.loc 1 1017 12 view .LVU1035
 3560 01aa 10E0     		b	.L194
 3561              	.LVL452:
 3562              	.L224:
1024:./lib/fdt/fdt_overlay.c **** 				if (ret < 0)
 3563              		.loc 1 1024 5 is_stmt 1 view .LVU1036
1024:./lib/fdt/fdt_overlay.c **** 				if (ret < 0)
 3564              		.loc 1 1024 11 is_stmt 0 view .LVU1037
 3565 01ac 631C     		adds	r3, r4, #1
 3566 01ae 5246     		mov	r2, r10
 3567 01b0 5946     		mov	r1, fp
 3568 01b2 4846     		mov	r0, r9
 3569              	.LVL453:
1024:./lib/fdt/fdt_overlay.c **** 				if (ret < 0)
 3570              		.loc 1 1024 11 view .LVU1038
 3571 01b4 FFF7FEFF 		bl	fdt_get_path
 3572              	.LVL454:
1025:./lib/fdt/fdt_overlay.c **** 					return ret;
 3573              		.loc 1 1025 5 is_stmt 1 view .LVU1039
1025:./lib/fdt/fdt_overlay.c **** 					return ret;
 3574              		.loc 1 1025 8 is_stmt 0 view .LVU1040
 3575 01b8 0028     		cmp	r0, #0
1025:./lib/fdt/fdt_overlay.c **** 					return ret;
 3576              		.loc 1 1025 8 view .LVU1041
 3577 01ba 9ADA     		bge	.L207
1026:./lib/fdt/fdt_overlay.c **** 			} else
 3578              		.loc 1 1026 13 view .LVU1042
 3579 01bc 8146     		mov	r9, r0
 3580              	.LVL455:
1026:./lib/fdt/fdt_overlay.c **** 			} else
 3581              		.loc 1 1026 13 view .LVU1043
 3582 01be 06E0     		b	.L194
 3583              	.LVL456:
 3584              	.L205:
1031:./lib/fdt/fdt_overlay.c **** 
 3585              		.loc 1 1031 4 is_stmt 1 view .LVU1044
1031:./lib/fdt/fdt_overlay.c **** 
 3586              		.loc 1 1031 7 is_stmt 0 view .LVU1045
 3587 01c0 013C     		subs	r4, r4, #1
 3588              	.LVL457:
1031:./lib/fdt/fdt_overlay.c **** 
 3589              		.loc 1 1031 7 view .LVU1046
 3590 01c2 96E7     		b	.L207
ARM GAS  /tmp/ccCHVNBc.s 			page 128


 3591              	.LVL458:
 3592              	.L225:
1036:./lib/fdt/fdt_overlay.c **** 	}
1037:./lib/fdt/fdt_overlay.c **** 
1038:./lib/fdt/fdt_overlay.c **** 	return 0;
 3593              		.loc 1 1038 9 view .LVU1047
 3594 01c4 4FF00009 		mov	r9, #0
 3595              	.LVL459:
 3596              		.loc 1 1038 9 view .LVU1048
 3597 01c8 01E0     		b	.L194
 3598              	.LVL460:
 3599              	.L209:
 923:./lib/fdt/fdt_overlay.c **** 
 3600              		.loc 1 923 10 view .LVU1049
 3601 01ca 4FF00009 		mov	r9, #0
 3602              	.LVL461:
 3603              	.L194:
1039:./lib/fdt/fdt_overlay.c **** }
 3604              		.loc 1 1039 1 view .LVU1050
 3605 01ce 4846     		mov	r0, r9
 3606 01d0 09B0     		add	sp, sp, #36
 3607              	.LCFI62:
 3608              		.cfi_remember_state
 3609              		.cfi_def_cfa_offset 36
 3610              		@ sp needed
 3611 01d2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3612              	.LVL462:
 3613              	.L210:
 3614              	.LCFI63:
 3615              		.cfi_restore_state
 943:./lib/fdt/fdt_overlay.c **** 
 3616              		.loc 1 943 11 view .LVU1051
 3617 01d6 6FF00E09 		mvn	r9, #14
 3618              	.LVL463:
 943:./lib/fdt/fdt_overlay.c **** 
 3619              		.loc 1 943 11 view .LVU1052
 3620 01da F8E7     		b	.L194
 3621              	.LVL464:
 3622              	.L211:
 943:./lib/fdt/fdt_overlay.c **** 
 3623              		.loc 1 943 11 view .LVU1053
 3624 01dc 6FF00E09 		mvn	r9, #14
 3625              	.LVL465:
 943:./lib/fdt/fdt_overlay.c **** 
 3626              		.loc 1 943 11 view .LVU1054
 3627 01e0 F5E7     		b	.L194
 3628              	.LVL466:
 3629              	.L212:
 949:./lib/fdt/fdt_overlay.c **** 
 3630              		.loc 1 949 11 view .LVU1055
 3631 01e2 6FF00E09 		mvn	r9, #14
 3632              	.LVL467:
 949:./lib/fdt/fdt_overlay.c **** 
 3633              		.loc 1 949 11 view .LVU1056
 3634 01e6 F2E7     		b	.L194
 3635              	.LVL468:
 3636              	.L213:
ARM GAS  /tmp/ccCHVNBc.s 			page 129


 984:./lib/fdt/fdt_overlay.c **** 		fragment = ret;
 3637              		.loc 1 984 11 view .LVU1057
 3638 01e8 6FF00F09 		mvn	r9, #15
 3639              	.LVL469:
 984:./lib/fdt/fdt_overlay.c **** 		fragment = ret;
 3640              		.loc 1 984 11 view .LVU1058
 3641 01ec EFE7     		b	.L194
 3642              	.LVL470:
 3643              	.L214:
 990:./lib/fdt/fdt_overlay.c **** 
 3644              		.loc 1 990 11 view .LVU1059
 3645 01ee 6FF00F09 		mvn	r9, #15
 3646              	.LVL471:
 990:./lib/fdt/fdt_overlay.c **** 
 3647              		.loc 1 990 11 view .LVU1060
 3648 01f2 ECE7     		b	.L194
 3649              	.LVL472:
 3650              	.L215:
 995:./lib/fdt/fdt_overlay.c **** 		target = ret;
 3651              		.loc 1 995 11 view .LVU1061
 3652 01f4 D946     		mov	r9, fp
 3653              	.LVL473:
 995:./lib/fdt/fdt_overlay.c **** 		target = ret;
 3654              		.loc 1 995 11 view .LVU1062
 3655 01f6 EAE7     		b	.L194
 3656              	.LVL474:
 3657              	.L217:
1011:./lib/fdt/fdt_overlay.c **** 
 3658              		.loc 1 1011 11 view .LVU1063
 3659 01f8 8146     		mov	r9, r0
 3660              	.LVL475:
1011:./lib/fdt/fdt_overlay.c **** 
 3661              		.loc 1 1011 11 view .LVU1064
 3662 01fa E8E7     		b	.L194
 3663              	.L228:
 3664              		.align	2
 3665              	.L227:
 3666 01fc 04000000 		.word	.LC9
 3667 0200 20000000 		.word	.LC11
 3668 0204 00000000 		.word	.LC8
 3669 0208 00000000 		.word	.LC7
 3670 020c 10000000 		.word	.LC10
 3671              		.cfi_endproc
 3672              	.LFE93:
 3674              		.section	.text.fdt_overlay_apply,"ax",%progbits
 3675              		.align	1
 3676              		.global	fdt_overlay_apply
 3677              		.syntax unified
 3678              		.thumb
 3679              		.thumb_func
 3681              	fdt_overlay_apply:
 3682              	.LVL476:
 3683              	.LFB94:
1040:./lib/fdt/fdt_overlay.c **** 
1041:./lib/fdt/fdt_overlay.c **** int fdt_overlay_apply(void *fdt, void *fdto)
1042:./lib/fdt/fdt_overlay.c **** {
 3684              		.loc 1 1042 1 is_stmt 1 view -0
ARM GAS  /tmp/ccCHVNBc.s 			page 130


 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 8
 3687              		@ frame_needed = 0, uses_anonymous_args = 0
 3688              		.loc 1 1042 1 is_stmt 0 view .LVU1066
 3689 0000 30B5     		push	{r4, r5, lr}
 3690              	.LCFI64:
 3691              		.cfi_def_cfa_offset 12
 3692              		.cfi_offset 4, -12
 3693              		.cfi_offset 5, -8
 3694              		.cfi_offset 14, -4
 3695 0002 83B0     		sub	sp, sp, #12
 3696              	.LCFI65:
 3697              		.cfi_def_cfa_offset 24
 3698 0004 0546     		mov	r5, r0
 3699 0006 0C46     		mov	r4, r1
1043:./lib/fdt/fdt_overlay.c **** 	uint32_t delta;
 3700              		.loc 1 1043 2 is_stmt 1 view .LVU1067
1044:./lib/fdt/fdt_overlay.c **** 	int ret;
 3701              		.loc 1 1044 2 view .LVU1068
 3702              	.LBB119:
1045:./lib/fdt/fdt_overlay.c **** 
1046:./lib/fdt/fdt_overlay.c **** 	FDT_RO_PROBE(fdt);
 3703              		.loc 1 1046 2 view .LVU1069
 3704              		.loc 1 1046 2 view .LVU1070
 3705 0008 FFF7FEFF 		bl	fdt_ro_probe_
 3706              	.LVL477:
 3707              		.loc 1 1046 2 is_stmt 0 discriminator 1 view .LVU1071
 3708 000c 0028     		cmp	r0, #0
 3709              		.loc 1 1046 2 discriminator 1 view .LVU1072
 3710 000e 0DDB     		blt	.L229
 3711              	.LBE119:
 3712              		.loc 1 1046 19 is_stmt 1 discriminator 2 view .LVU1073
 3713              	.LBB120:
1047:./lib/fdt/fdt_overlay.c **** 	FDT_RO_PROBE(fdto);
 3714              		.loc 1 1047 2 view .LVU1074
 3715              		.loc 1 1047 2 view .LVU1075
 3716 0010 2046     		mov	r0, r4
 3717              	.LVL478:
 3718              		.loc 1 1047 2 is_stmt 0 view .LVU1076
 3719 0012 FFF7FEFF 		bl	fdt_ro_probe_
 3720              	.LVL479:
 3721              		.loc 1 1047 2 discriminator 1 view .LVU1077
 3722 0016 0028     		cmp	r0, #0
 3723              		.loc 1 1047 2 discriminator 1 view .LVU1078
 3724 0018 08DB     		blt	.L229
 3725              	.LBE120:
 3726              		.loc 1 1047 20 is_stmt 1 discriminator 2 view .LVU1079
1048:./lib/fdt/fdt_overlay.c **** 
1049:./lib/fdt/fdt_overlay.c **** 	ret = fdt_find_max_phandle(fdt, &delta);
 3727              		.loc 1 1049 2 view .LVU1080
 3728              		.loc 1 1049 8 is_stmt 0 view .LVU1081
 3729 001a 01A9     		add	r1, sp, #4
 3730 001c 2846     		mov	r0, r5
 3731              	.LVL480:
 3732              		.loc 1 1049 8 view .LVU1082
 3733 001e FFF7FEFF 		bl	fdt_find_max_phandle
 3734              	.LVL481:
ARM GAS  /tmp/ccCHVNBc.s 			page 131


1050:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3735              		.loc 1 1050 2 is_stmt 1 view .LVU1083
 3736              		.loc 1 1050 5 is_stmt 0 view .LVU1084
 3737 0022 28B1     		cbz	r0, .L233
 3738              	.L231:
1051:./lib/fdt/fdt_overlay.c **** 		goto err;
1052:./lib/fdt/fdt_overlay.c **** 
1053:./lib/fdt/fdt_overlay.c **** 	/* Increase all phandles in the fdto by delta */
1054:./lib/fdt/fdt_overlay.c **** 	ret = overlay_adjust_local_phandles(fdto, delta);
1055:./lib/fdt/fdt_overlay.c **** 	if (ret)
1056:./lib/fdt/fdt_overlay.c **** 		goto err;
1057:./lib/fdt/fdt_overlay.c **** 
1058:./lib/fdt/fdt_overlay.c **** 	/* Adapt the phandle values in fdto to the above increase */
1059:./lib/fdt/fdt_overlay.c **** 	ret = overlay_update_local_references(fdto, delta);
1060:./lib/fdt/fdt_overlay.c **** 	if (ret)
1061:./lib/fdt/fdt_overlay.c **** 		goto err;
1062:./lib/fdt/fdt_overlay.c **** 
1063:./lib/fdt/fdt_overlay.c **** 	/* Update fdto's phandles using symbols from fdt */
1064:./lib/fdt/fdt_overlay.c **** 	ret = overlay_fixup_phandles(fdt, fdto);
1065:./lib/fdt/fdt_overlay.c **** 	if (ret)
1066:./lib/fdt/fdt_overlay.c **** 		goto err;
1067:./lib/fdt/fdt_overlay.c **** 
1068:./lib/fdt/fdt_overlay.c **** 	/* Don't overwrite phandles in fdt */
1069:./lib/fdt/fdt_overlay.c **** 	ret = overlay_prevent_phandle_overwrite(fdt, fdto);
1070:./lib/fdt/fdt_overlay.c **** 	if (ret)
1071:./lib/fdt/fdt_overlay.c **** 		goto err;
1072:./lib/fdt/fdt_overlay.c **** 
1073:./lib/fdt/fdt_overlay.c **** 	ret = overlay_merge(fdt, fdto);
1074:./lib/fdt/fdt_overlay.c **** 	if (ret)
1075:./lib/fdt/fdt_overlay.c **** 		goto err;
1076:./lib/fdt/fdt_overlay.c **** 
1077:./lib/fdt/fdt_overlay.c **** 	ret = overlay_symbol_update(fdt, fdto);
1078:./lib/fdt/fdt_overlay.c **** 	if (ret)
1079:./lib/fdt/fdt_overlay.c **** 		goto err;
1080:./lib/fdt/fdt_overlay.c **** 
1081:./lib/fdt/fdt_overlay.c **** 	/*
1082:./lib/fdt/fdt_overlay.c **** 	 * The overlay has been damaged, erase its magic.
1083:./lib/fdt/fdt_overlay.c **** 	 */
1084:./lib/fdt/fdt_overlay.c **** 	fdt_set_magic(fdto, ~0);
1085:./lib/fdt/fdt_overlay.c **** 
1086:./lib/fdt/fdt_overlay.c **** 	return 0;
1087:./lib/fdt/fdt_overlay.c **** 
1088:./lib/fdt/fdt_overlay.c **** err:
1089:./lib/fdt/fdt_overlay.c **** 	/*
1090:./lib/fdt/fdt_overlay.c **** 	 * The overlay might have been damaged, erase its magic.
1091:./lib/fdt/fdt_overlay.c **** 	 */
1092:./lib/fdt/fdt_overlay.c **** 	fdt_set_magic(fdto, ~0);
 3739              		.loc 1 1092 2 is_stmt 1 view .LVU1085
 3740              	.LVL482:
 3741              	.LBB121:
 3742              	.LBI121:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3743              		.loc 3 270 1 view .LVU1086
 3744              	.LBB122:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3745              		.loc 3 270 1 view .LVU1087
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
ARM GAS  /tmp/ccCHVNBc.s 			page 132


 3746              		.loc 3 270 1 view .LVU1088
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3747              		.loc 3 270 1 is_stmt 0 discriminator 1 view .LVU1089
 3748 0024 4FF0FF33 		mov	r3, #-1
 3749 0028 2360     		str	r3, [r4]
 3750              	.LVL483:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3751              		.loc 3 270 1 discriminator 1 view .LVU1090
 3752              	.LBE122:
 3753              	.LBE121:
1093:./lib/fdt/fdt_overlay.c **** 
1094:./lib/fdt/fdt_overlay.c **** 	/*
1095:./lib/fdt/fdt_overlay.c **** 	 * The base device tree might have been damaged, erase its
1096:./lib/fdt/fdt_overlay.c **** 	 * magic.
1097:./lib/fdt/fdt_overlay.c **** 	 */
1098:./lib/fdt/fdt_overlay.c **** 	fdt_set_magic(fdt, ~0);
 3754              		.loc 1 1098 2 is_stmt 1 view .LVU1091
 3755              	.LBB123:
 3756              	.LBI123:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3757              		.loc 3 270 1 view .LVU1092
 3758              	.LBB124:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3759              		.loc 3 270 1 view .LVU1093
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3760              		.loc 3 270 1 view .LVU1094
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3761              		.loc 3 270 1 is_stmt 0 discriminator 1 view .LVU1095
 3762 002a 2B60     		str	r3, [r5]
 3763              	.LVL484:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3764              		.loc 3 270 1 discriminator 1 view .LVU1096
 3765              	.LBE124:
 3766              	.LBE123:
1099:./lib/fdt/fdt_overlay.c **** 
1100:./lib/fdt/fdt_overlay.c **** 	return ret;
 3767              		.loc 1 1100 2 is_stmt 1 view .LVU1097
 3768              	.L229:
1101:./lib/fdt/fdt_overlay.c **** }
 3769              		.loc 1 1101 1 is_stmt 0 view .LVU1098
 3770 002c 03B0     		add	sp, sp, #12
 3771              	.LCFI66:
 3772              		.cfi_remember_state
 3773              		.cfi_def_cfa_offset 12
 3774              		@ sp needed
 3775 002e 30BD     		pop	{r4, r5, pc}
 3776              	.LVL485:
 3777              	.L233:
 3778              	.LCFI67:
 3779              		.cfi_restore_state
1054:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3780              		.loc 1 1054 2 is_stmt 1 view .LVU1099
1054:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3781              		.loc 1 1054 8 is_stmt 0 view .LVU1100
 3782 0030 0199     		ldr	r1, [sp, #4]
 3783 0032 2046     		mov	r0, r4
 3784              	.LVL486:
ARM GAS  /tmp/ccCHVNBc.s 			page 133


1054:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3785              		.loc 1 1054 8 view .LVU1101
 3786 0034 FFF7FEFF 		bl	overlay_adjust_local_phandles
 3787              	.LVL487:
1055:./lib/fdt/fdt_overlay.c **** 		goto err;
 3788              		.loc 1 1055 2 is_stmt 1 view .LVU1102
1055:./lib/fdt/fdt_overlay.c **** 		goto err;
 3789              		.loc 1 1055 5 is_stmt 0 view .LVU1103
 3790 0038 0028     		cmp	r0, #0
 3791 003a F3D1     		bne	.L231
1059:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3792              		.loc 1 1059 2 is_stmt 1 view .LVU1104
1059:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3793              		.loc 1 1059 8 is_stmt 0 view .LVU1105
 3794 003c 0199     		ldr	r1, [sp, #4]
 3795 003e 2046     		mov	r0, r4
 3796              	.LVL488:
1059:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3797              		.loc 1 1059 8 view .LVU1106
 3798 0040 FFF7FEFF 		bl	overlay_update_local_references
 3799              	.LVL489:
1060:./lib/fdt/fdt_overlay.c **** 		goto err;
 3800              		.loc 1 1060 2 is_stmt 1 view .LVU1107
1060:./lib/fdt/fdt_overlay.c **** 		goto err;
 3801              		.loc 1 1060 5 is_stmt 0 view .LVU1108
 3802 0044 0028     		cmp	r0, #0
 3803 0046 EDD1     		bne	.L231
1064:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3804              		.loc 1 1064 2 is_stmt 1 view .LVU1109
1064:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3805              		.loc 1 1064 8 is_stmt 0 view .LVU1110
 3806 0048 2146     		mov	r1, r4
 3807 004a 2846     		mov	r0, r5
 3808              	.LVL490:
1064:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3809              		.loc 1 1064 8 view .LVU1111
 3810 004c FFF7FEFF 		bl	overlay_fixup_phandles
 3811              	.LVL491:
1065:./lib/fdt/fdt_overlay.c **** 		goto err;
 3812              		.loc 1 1065 2 is_stmt 1 view .LVU1112
1065:./lib/fdt/fdt_overlay.c **** 		goto err;
 3813              		.loc 1 1065 5 is_stmt 0 view .LVU1113
 3814 0050 0028     		cmp	r0, #0
 3815 0052 E7D1     		bne	.L231
1069:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3816              		.loc 1 1069 2 is_stmt 1 view .LVU1114
1069:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3817              		.loc 1 1069 8 is_stmt 0 view .LVU1115
 3818 0054 2146     		mov	r1, r4
 3819 0056 2846     		mov	r0, r5
 3820              	.LVL492:
1069:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3821              		.loc 1 1069 8 view .LVU1116
 3822 0058 FFF7FEFF 		bl	overlay_prevent_phandle_overwrite
 3823              	.LVL493:
1070:./lib/fdt/fdt_overlay.c **** 		goto err;
 3824              		.loc 1 1070 2 is_stmt 1 view .LVU1117
ARM GAS  /tmp/ccCHVNBc.s 			page 134


1070:./lib/fdt/fdt_overlay.c **** 		goto err;
 3825              		.loc 1 1070 5 is_stmt 0 view .LVU1118
 3826 005c 0028     		cmp	r0, #0
 3827 005e E1D1     		bne	.L231
1073:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3828              		.loc 1 1073 2 is_stmt 1 view .LVU1119
1073:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3829              		.loc 1 1073 8 is_stmt 0 view .LVU1120
 3830 0060 2146     		mov	r1, r4
 3831 0062 2846     		mov	r0, r5
 3832              	.LVL494:
1073:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3833              		.loc 1 1073 8 view .LVU1121
 3834 0064 FFF7FEFF 		bl	overlay_merge
 3835              	.LVL495:
1074:./lib/fdt/fdt_overlay.c **** 		goto err;
 3836              		.loc 1 1074 2 is_stmt 1 view .LVU1122
1074:./lib/fdt/fdt_overlay.c **** 		goto err;
 3837              		.loc 1 1074 5 is_stmt 0 view .LVU1123
 3838 0068 0028     		cmp	r0, #0
 3839 006a DBD1     		bne	.L231
1077:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3840              		.loc 1 1077 2 is_stmt 1 view .LVU1124
1077:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3841              		.loc 1 1077 8 is_stmt 0 view .LVU1125
 3842 006c 2146     		mov	r1, r4
 3843 006e 2846     		mov	r0, r5
 3844              	.LVL496:
1077:./lib/fdt/fdt_overlay.c **** 	if (ret)
 3845              		.loc 1 1077 8 view .LVU1126
 3846 0070 FFF7FEFF 		bl	overlay_symbol_update
 3847              	.LVL497:
1078:./lib/fdt/fdt_overlay.c **** 		goto err;
 3848              		.loc 1 1078 2 is_stmt 1 view .LVU1127
1078:./lib/fdt/fdt_overlay.c **** 		goto err;
 3849              		.loc 1 1078 5 is_stmt 0 view .LVU1128
 3850 0074 0028     		cmp	r0, #0
 3851 0076 D5D1     		bne	.L231
1084:./lib/fdt/fdt_overlay.c **** 
 3852              		.loc 1 1084 2 is_stmt 1 view .LVU1129
 3853              	.LVL498:
 3854              	.LBB125:
 3855              	.LBI125:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3856              		.loc 3 270 1 view .LVU1130
 3857              	.LBB126:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3858              		.loc 3 270 1 view .LVU1131
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3859              		.loc 3 270 1 view .LVU1132
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3860              		.loc 3 270 1 is_stmt 0 discriminator 1 view .LVU1133
 3861 0078 4FF0FF33 		mov	r3, #-1
 3862 007c 2360     		str	r3, [r4]
 3863              	.LVL499:
 270:./include/linux/libfdt.h **** fdt_set_hdr_(totalsize)
 3864              		.loc 3 270 1 discriminator 1 view .LVU1134
ARM GAS  /tmp/ccCHVNBc.s 			page 135


 3865              	.LBE126:
 3866              	.LBE125:
1086:./lib/fdt/fdt_overlay.c **** 
 3867              		.loc 1 1086 2 is_stmt 1 view .LVU1135
1086:./lib/fdt/fdt_overlay.c **** 
 3868              		.loc 1 1086 9 is_stmt 0 view .LVU1136
 3869 007e D5E7     		b	.L229
 3870              		.cfi_endproc
 3871              	.LFE94:
 3873              		.text
 3874              	.Letext0:
 3875              		.file 5 "./include/asm-generic/int-l64.h"
 3876              		.file 6 "./include/asm-generic/posix_types.h"
 3877              		.file 7 "./include/linux/types.h"
 3878              		.file 8 "./include/linux/fdt.h"
 3879              		.file 9 "./arch/arm_m/include/asm/string.h"
 3880              		.file 10 "<built-in>"
ARM GAS  /tmp/ccCHVNBc.s 			page 136


DEFINED SYMBOLS
                            *ABS*:00000000 fdt_overlay.c
     /tmp/ccCHVNBc.s:21     .rodata.overlay_get_target_phandle.str1.4:00000000 $d
     /tmp/ccCHVNBc.s:25     .text.overlay_get_target_phandle:00000000 $t
     /tmp/ccCHVNBc.s:30     .text.overlay_get_target_phandle:00000000 overlay_get_target_phandle
     /tmp/ccCHVNBc.s:118    .text.overlay_get_target_phandle:00000048 $d
     /tmp/ccCHVNBc.s:123    .text.overlay_phandle_add_offset:00000000 $t
     /tmp/ccCHVNBc.s:128    .text.overlay_phandle_add_offset:00000000 overlay_phandle_add_offset
     /tmp/ccCHVNBc.s:286    .rodata.overlay_adjust_node_phandles.str1.4:00000000 $d
     /tmp/ccCHVNBc.s:293    .text.overlay_adjust_node_phandles:00000000 $t
     /tmp/ccCHVNBc.s:298    .text.overlay_adjust_node_phandles:00000000 overlay_adjust_node_phandles
     /tmp/ccCHVNBc.s:402    .text.overlay_adjust_node_phandles:00000058 $d
     /tmp/ccCHVNBc.s:408    .text.overlay_adjust_local_phandles:00000000 $t
     /tmp/ccCHVNBc.s:413    .text.overlay_adjust_local_phandles:00000000 overlay_adjust_local_phandles
     /tmp/ccCHVNBc.s:440    .text.overlay_update_local_node_references:00000000 $t
     /tmp/ccCHVNBc.s:445    .text.overlay_update_local_node_references:00000000 overlay_update_local_node_references
     /tmp/ccCHVNBc.s:790    .rodata.overlay_update_local_references.str1.4:00000000 $d
     /tmp/ccCHVNBc.s:794    .text.overlay_update_local_references:00000000 $t
     /tmp/ccCHVNBc.s:799    .text.overlay_update_local_references:00000000 overlay_update_local_references
     /tmp/ccCHVNBc.s:858    .text.overlay_update_local_references:00000028 $d
     /tmp/ccCHVNBc.s:863    .text.overlay_update_node_conflicting_references:00000000 $t
     /tmp/ccCHVNBc.s:868    .text.overlay_update_node_conflicting_references:00000000 overlay_update_node_conflicting_references
     /tmp/ccCHVNBc.s:1225   .text.overlay_update_local_conflicting_references:00000000 $t
     /tmp/ccCHVNBc.s:1230   .text.overlay_update_local_conflicting_references:00000000 overlay_update_local_conflicting_references
     /tmp/ccCHVNBc.s:1298   .text.overlay_update_local_conflicting_references:00000030 $d
     /tmp/ccCHVNBc.s:1303   .text.overlay_fixup_one_phandle:00000000 $t
     /tmp/ccCHVNBc.s:1308   .text.overlay_fixup_one_phandle:00000000 overlay_fixup_one_phandle
     /tmp/ccCHVNBc.s:1414   .text.overlay_fixup_phandle:00000000 $t
     /tmp/ccCHVNBc.s:1419   .text.overlay_fixup_phandle:00000000 overlay_fixup_phandle
     /tmp/ccCHVNBc.s:1742   .rodata.overlay_fixup_phandles.str1.4:00000000 $d
     /tmp/ccCHVNBc.s:1749   .text.overlay_fixup_phandles:00000000 $t
     /tmp/ccCHVNBc.s:1754   .text.overlay_fixup_phandles:00000000 overlay_fixup_phandles
     /tmp/ccCHVNBc.s:1878   .text.overlay_fixup_phandles:0000006c $d
     /tmp/ccCHVNBc.s:1884   .text.fdt_setprop_inplace_u32:00000000 $t
     /tmp/ccCHVNBc.s:1889   .text.fdt_setprop_inplace_u32:00000000 fdt_setprop_inplace_u32
     /tmp/ccCHVNBc.s:1942   .text.overlay_adjust_local_conflicting_phandle:00000000 $t
     /tmp/ccCHVNBc.s:1947   .text.overlay_adjust_local_conflicting_phandle:00000000 overlay_adjust_local_conflicting_phandle
     /tmp/ccCHVNBc.s:2058   .text.overlay_adjust_local_conflicting_phandle:00000058 $d
     /tmp/ccCHVNBc.s:2064   .text.overlay_prevent_phandle_overwrite_node:00000000 $t
     /tmp/ccCHVNBc.s:2069   .text.overlay_prevent_phandle_overwrite_node:00000000 overlay_prevent_phandle_overwrite_node
     /tmp/ccCHVNBc.s:2231   .text.fdt_setprop:00000000 $t
     /tmp/ccCHVNBc.s:2236   .text.fdt_setprop:00000000 fdt_setprop
     /tmp/ccCHVNBc.s:2288   .text.overlay_apply_node:00000000 $t
     /tmp/ccCHVNBc.s:2293   .text.overlay_apply_node:00000000 overlay_apply_node
     /tmp/ccCHVNBc.s:2521   .text.get_path_len:00000000 $t
     /tmp/ccCHVNBc.s:2526   .text.get_path_len:00000000 get_path_len
     /tmp/ccCHVNBc.s:2641   .text.fdt_setprop_placeholder:00000000 $t
     /tmp/ccCHVNBc.s:2646   .text.fdt_setprop_placeholder:00000000 fdt_setprop_placeholder
     /tmp/ccCHVNBc.s:2698   .rodata.fdt_overlay_target_offset.str1.4:00000000 $d
     /tmp/ccCHVNBc.s:2702   .text.fdt_overlay_target_offset:00000000 $t
     /tmp/ccCHVNBc.s:2708   .text.fdt_overlay_target_offset:00000000 fdt_overlay_target_offset
     /tmp/ccCHVNBc.s:2850   .text.fdt_overlay_target_offset:00000068 $d
     /tmp/ccCHVNBc.s:2855   .rodata.overlay_prevent_phandle_overwrite.str1.4:00000000 $d
     /tmp/ccCHVNBc.s:2859   .text.overlay_prevent_phandle_overwrite:00000000 $t
     /tmp/ccCHVNBc.s:2864   .text.overlay_prevent_phandle_overwrite:00000000 overlay_prevent_phandle_overwrite
     /tmp/ccCHVNBc.s:2993   .text.overlay_prevent_phandle_overwrite:0000006c $d
     /tmp/ccCHVNBc.s:2999   .text.overlay_merge:00000000 $t
ARM GAS  /tmp/ccCHVNBc.s 			page 137


     /tmp/ccCHVNBc.s:3004   .text.overlay_merge:00000000 overlay_merge
     /tmp/ccCHVNBc.s:3127   .text.overlay_merge:00000064 $d
     /tmp/ccCHVNBc.s:3133   .rodata.overlay_symbol_update.str1.4:00000000 $d
     /tmp/ccCHVNBc.s:3146   .text.overlay_symbol_update:00000000 $t
     /tmp/ccCHVNBc.s:3151   .text.overlay_symbol_update:00000000 overlay_symbol_update
     /tmp/ccCHVNBc.s:3666   .text.overlay_symbol_update:000001fc $d
     /tmp/ccCHVNBc.s:3675   .text.fdt_overlay_apply:00000000 $t
     /tmp/ccCHVNBc.s:3681   .text.fdt_overlay_apply:00000000 fdt_overlay_apply

UNDEFINED SYMBOLS
fdt_getprop
fdt_first_subnode
fdt_next_subnode
fdt_first_property_offset
fdt_next_property_offset
fdt_getprop_by_offset
fdt_get_name
fdt_subnode_offset
fdt_path_offset
fdt_path_offset_namelen
fdt_setprop_inplace_namelen_partial
fdt_get_phandle
memchr
strtoul
fdt_setprop_inplace
strlen
fdt_setprop_namelen
fdt_add_subnode
fdt_ro_probe_
fdt_parent_offset
fdt_setprop_placeholder_namelen
fdt_node_offset_by_phandle
memcmp
fdt_subnode_offset_namelen
memcpy
strchr
fdt_get_path
fdt_find_max_phandle
