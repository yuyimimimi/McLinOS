注意:
内核空间不支持libc。所以你不能使用裸机库而是应该使用寄存器进行驱动编写
本项目有自己的管理方式,请不要尝试将它放入mdk等集成开发环境中
此外它采用独立的工具链，不要尝试将它嵌入任何项目中
你可以修改/user/rootfs/下的文件,这个文件夹会被直接映射为系统根目录.
你可以使用make rootfs更新信息


使用第一步:
    指令:make installtools 用于自动配置编译环境
    之后你需要下载自己对应平台的gcc编译器

使用内核已经提供适配平台:
    在makefile中配置这几项,分别指定架构,设备型号，编译器:
        STRUCT   = arm_m
        PLATFORM = stm32f4
        PREFIX   = arm-none-eabi-
    
    随后使用make menuconfig指令进行配置。
    完成后会自动按照平台生成对应的启动脚本，中断向量表，链接器脚本等

    然后使用make dtbs 
    此时会生成并编译设备树

    使用make rootfs指令编译根文件系统

    最后使用make 指令编译得到最终可执行文件


移植层帮助,此文件用于记录设备的移植模式,都需要用户实现
平台移植:

    需要实现的:

    脚本部分:
    1../arch/$(STRUCT)/config/Kconfig.$(PLATFORM) 
    这里是对应平台的kconfig。
    至少需要写入 
        source "kconfig"
        如果你的平台有特殊配置项需要你手动添加

    2./arch/$(STRUCT)/config/makefile.$(PLATFORM) 
    配置架构的模式,请参考其它makefile
    此处还是比较简单的

    3.arch/$(STRUCT)/boot/ld/$(PLATFORM).ld.in 
    此处用于编写移植设备的链接器脚本,可以参考其它已适配平台的文件
    基本上不需要修改，除非你有特殊需求
    注意使用include以及宏定义

    4.arch/$(STRUCT)/boot/dts/$(PLATFORM).dts
    此处用于编写设备树文件，你可以参考已经适配平台的设备树
    注意使用include以及宏定义
    至少需要配置平台的compatable属性,中断,和时钟


    5.使用menuconfig配置外设中断个数,
      内存布局,内核内存池大小，时钟等

    6.如果CPU不被支持,需要这样进行移植:

            在./arch/$(STRUCT)/config/makefile.$(PLATFORM)中配置$(CPU)设置cpu
            arch/$(STRUCT)/kernel/sched/ssched$(CPU).s
                1.实现调度器中断函数,比如cortex-m 使用PendSV_Handler
                你需要实现它并让它调用Scheduler_Task。
                你需要自己完成上下文切换的对接
                2.change_to_task_mode 实现这个函数,假如你的处理器需要进入非特权模式，
                那你就需要使用它切换处理器状态,它在开启调度前被调用
                4.__sched 用于触发中断执行任务调度

            arch/$(STRUCT)/kernel/sched/csched$(CPU).c
                1.实现__init_Taskcontext 他被用于初始化上下文
                2.实现__get_task_using_cpu_core 它用于线程运行中获取cpu核心编号
            
            arch/$(STRUCT)/kernel/syscall/syscall$(CPU).c
                3.可能需要实现__system_call用于触发svc中断
                4.可能需要实现SVC_Handler_C用于接受寄存器信息并调用system_call处理系统调用
                5.可能需要实现SVC_Handler用于svc中断

            arch/$(STRUCT)/kernel/startup$(CPU).s
                实现启动脚本的一部分(一般直接复制就行)


    驱动部分:

    1./drivers/tty/$(PLATFORM)_clock.c
    用于初始化设备时钟,是SystemClock_Config()最早被调用的函数。
    在次之后设备树将会被启用。并启动slab分配器。



    2./drivers/tick/$(PLATFORM)_tick.c
    在完成时钟和设备树初始化后开始SysTick_init
    实现初始化函数SysTick_init.
    在中断函数中加入sys_tick_hander();
    它是系统提供tick中断入口
    此时由于文件系统没有启动,不能使用字符设备驱动


    3./drivers/tty/$(PLATFORM)_tty0.c
    需要手动实现,用于串口打印输出了,实现base_out_opt_device_init函数,
    它会用于系统早期日志输出
    需要在此时实现early_printk
    此时由于文件系统没有启动,不能使用字符设备驱动
    后续需要实现字符设备重定向到printk.
    如果没有实现printk将会由early_printk输出

    注意:
    此外这些函数不得使用module_init一类的宏修饰它们
    也不要将它们添加到符号表中
    

    此时已经可以以最小模式运行.
    虚拟文件系统完成初始化,并完成了


    4.main_tty_dev_init()
    该函数自动调用,不得使用module_init修饰
    它用于实现第一个tty字符设备
    它是最早的字符设备驱动,用于重定向printk.
    在它执行完成后就会直接调用printk_init。
    你需要让 printk_init能找到/dev/tty*结点,你可以在menuconfig中配置它使用的tty设备
    如果你没有实现它,printk会调用early_printk的接口进行输出(所以也可以不写)


    5.之后会调用initcall。你可以使用各种initcall进行开发

    

架构移植:
    注意:如果你不是顶级工程师,架构移植可能并不适合你
    需要实现：请参考详细手册


